/* onvifrecordingcontrolRecordingBindingProxy.cpp
   Generated by gSOAP 2.8.22 from rcx.h

Copyright(C) 2000-2015, Robert van Engelen, Genivia Inc. All Rights Reserved.
The generated code is released under one of the following licenses:
GPL or Genivia's license for commercial use.
This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
*/

#include "onvifrecordingcontrolRecordingBindingProxy.h"

RecordingBindingProxy::RecordingBindingProxy()
{	this->soap = soap_new();
	this->soap_own = true;
	RecordingBindingProxy_init(SOAP_IO_DEFAULT, SOAP_IO_DEFAULT);
}

RecordingBindingProxy::RecordingBindingProxy(struct soap *_soap)
{	this->soap = _soap;
	this->soap_own = false;
	RecordingBindingProxy_init(_soap->imode, _soap->omode);
}

RecordingBindingProxy::RecordingBindingProxy(const char *url)
{	this->soap = soap_new();
	this->soap_own = true;
	RecordingBindingProxy_init(SOAP_IO_DEFAULT, SOAP_IO_DEFAULT);
	soap_endpoint = url;
}

RecordingBindingProxy::RecordingBindingProxy(soap_mode iomode)
{	this->soap = soap_new();
	this->soap_own = true;
	RecordingBindingProxy_init(iomode, iomode);
}

RecordingBindingProxy::RecordingBindingProxy(const char *url, soap_mode iomode)
{	this->soap = soap_new();
	this->soap_own = true;
	RecordingBindingProxy_init(iomode, iomode);
	soap_endpoint = url;
}

RecordingBindingProxy::RecordingBindingProxy(soap_mode imode, soap_mode omode)
{	this->soap = soap_new();
	this->soap_own = true;
	RecordingBindingProxy_init(imode, omode);
}

RecordingBindingProxy::~RecordingBindingProxy()
{	if (this->soap_own)
		soap_free(this->soap);
}

void RecordingBindingProxy::RecordingBindingProxy_init(soap_mode imode, soap_mode omode)
{	soap_imode(this->soap, imode);
	soap_omode(this->soap, omode);
	soap_endpoint = NULL;
	static const struct Namespace namespaces[] =
{
	{"SOAP-ENV", "http://www.w3.org/2003/05/soap-envelope", "http://schemas.xmlsoap.org/soap/envelope/", NULL},
	{"SOAP-ENC", "http://www.w3.org/2003/05/soap-encoding", "http://schemas.xmlsoap.org/soap/encoding/", NULL},
	{"xsi", "http://www.w3.org/2001/XMLSchema-instance", "http://www.w3.org/*/XMLSchema-instance", NULL},
	{"xsd", "http://www.w3.org/2001/XMLSchema", "http://www.w3.org/*/XMLSchema", NULL},
	{"chan", "http://schemas.microsoft.com/ws/2005/02/duplex", NULL, NULL},
	{"wsa5", "http://www.w3.org/2005/08/addressing", "http://schemas.xmlsoap.org/ws/2004/08/addressing", NULL},
	{"xmime", "http://tempuri.org/xmime.xsd", NULL, NULL},
	{"xop", "http://www.w3.org/2004/08/xop/include", NULL, NULL},
	{"tt", "http://www.onvif.org/ver10/schema", NULL, NULL},
	{"wsnt", "http://docs.oasis-open.org/wsn/b-2", NULL, NULL},
	{"wsrfbf", "http://docs.oasis-open.org/wsrf/bf-2", NULL, NULL},
	{"wstop", "http://docs.oasis-open.org/wsn/t-1", NULL, NULL},
	{"recordingcontrol", "http://www.onvif.org/ver10/recording/wsdl", NULL, NULL},
	{NULL, NULL, NULL, NULL}
};
	soap_set_namespaces(this->soap, namespaces);
}

void RecordingBindingProxy::destroy()
{	soap_destroy(this->soap);
	soap_end(this->soap);
}

void RecordingBindingProxy::reset()
{	destroy();
	soap_done(this->soap);
	soap_initialize(this->soap);
	RecordingBindingProxy_init(SOAP_IO_DEFAULT, SOAP_IO_DEFAULT);
}

void RecordingBindingProxy::soap_noheader()
{	this->soap->header = NULL;
}

void RecordingBindingProxy::soap_header(char *wsa5__MessageID, struct wsa5__RelatesToType *wsa5__RelatesTo, struct wsa5__EndpointReferenceType *wsa5__From, struct wsa5__EndpointReferenceType *wsa5__ReplyTo, struct wsa5__EndpointReferenceType *wsa5__FaultTo, char *wsa5__To, char *wsa5__Action, struct chan__ChannelInstanceType *chan__ChannelInstance)
{	::soap_header(this->soap);
	this->soap->header->wsa5__MessageID = wsa5__MessageID;
	this->soap->header->wsa5__RelatesTo = wsa5__RelatesTo;
	this->soap->header->wsa5__From = wsa5__From;
	this->soap->header->wsa5__ReplyTo = wsa5__ReplyTo;
	this->soap->header->wsa5__FaultTo = wsa5__FaultTo;
	this->soap->header->wsa5__To = wsa5__To;
	this->soap->header->wsa5__Action = wsa5__Action;
	this->soap->header->chan__ChannelInstance = chan__ChannelInstance;
}

const SOAP_ENV__Header *RecordingBindingProxy::soap_header()
{	return this->soap->header;
}

const SOAP_ENV__Fault *RecordingBindingProxy::soap_fault()
{	return this->soap->fault;
}

const char *RecordingBindingProxy::soap_fault_string()
{	return *soap_faultstring(this->soap);
}

const char *RecordingBindingProxy::soap_fault_detail()
{	return *soap_faultdetail(this->soap);
}

int RecordingBindingProxy::soap_close_socket()
{	return soap_closesock(this->soap);
}

int RecordingBindingProxy::soap_force_close_socket()
{	return soap_force_closesock(this->soap);
}

void RecordingBindingProxy::soap_print_fault(FILE *fd)
{	::soap_print_fault(this->soap, fd);
}

#ifndef WITH_LEAN
#ifndef WITH_COMPAT
void RecordingBindingProxy::soap_stream_fault(std::ostream& os)
{	::soap_stream_fault(this->soap, os);
}
#endif

char *RecordingBindingProxy::soap_sprint_fault(char *buf, size_t len)
{	return ::soap_sprint_fault(this->soap, buf, len);
}
#endif

int RecordingBindingProxy::GetServiceCapabilities(const char *endpoint, const char *soap_action, _recordingcontrol__GetServiceCapabilities *recordingcontrol__GetServiceCapabilities, _recordingcontrol__GetServiceCapabilitiesResponse &recordingcontrol__GetServiceCapabilitiesResponse)
{	struct soap *soap = this->soap;
	struct __recordingcontrol__GetServiceCapabilities soap_tmp___recordingcontrol__GetServiceCapabilities;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_action == NULL)
		soap_action = "http://www.onvif.org/ver10/recording/wsdl/GetServiceCapabilities";
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_tmp___recordingcontrol__GetServiceCapabilities.recordingcontrol__GetServiceCapabilities = recordingcontrol__GetServiceCapabilities;
	soap_serializeheader(soap);
	soap_serialize___recordingcontrol__GetServiceCapabilities(soap, &soap_tmp___recordingcontrol__GetServiceCapabilities);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___recordingcontrol__GetServiceCapabilities(soap, &soap_tmp___recordingcontrol__GetServiceCapabilities, "-recordingcontrol:GetServiceCapabilities", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_url(soap, soap_endpoint, NULL), soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___recordingcontrol__GetServiceCapabilities(soap, &soap_tmp___recordingcontrol__GetServiceCapabilities, "-recordingcontrol:GetServiceCapabilities", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!&recordingcontrol__GetServiceCapabilitiesResponse)
		return soap_closesock(soap);
	recordingcontrol__GetServiceCapabilitiesResponse.soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	recordingcontrol__GetServiceCapabilitiesResponse.soap_get(soap, "recordingcontrol:GetServiceCapabilitiesResponse", NULL);
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int RecordingBindingProxy::CreateRecording(const char *endpoint, const char *soap_action, _recordingcontrol__CreateRecording *recordingcontrol__CreateRecording, _recordingcontrol__CreateRecordingResponse &recordingcontrol__CreateRecordingResponse)
{	struct soap *soap = this->soap;
	struct __recordingcontrol__CreateRecording soap_tmp___recordingcontrol__CreateRecording;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_action == NULL)
		soap_action = "http://www.onvif.org/ver10/recording/wsdl/CreateRecording";
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_tmp___recordingcontrol__CreateRecording.recordingcontrol__CreateRecording = recordingcontrol__CreateRecording;
	soap_serializeheader(soap);
	soap_serialize___recordingcontrol__CreateRecording(soap, &soap_tmp___recordingcontrol__CreateRecording);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___recordingcontrol__CreateRecording(soap, &soap_tmp___recordingcontrol__CreateRecording, "-recordingcontrol:CreateRecording", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_url(soap, soap_endpoint, NULL), soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___recordingcontrol__CreateRecording(soap, &soap_tmp___recordingcontrol__CreateRecording, "-recordingcontrol:CreateRecording", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!&recordingcontrol__CreateRecordingResponse)
		return soap_closesock(soap);
	recordingcontrol__CreateRecordingResponse.soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	recordingcontrol__CreateRecordingResponse.soap_get(soap, "recordingcontrol:CreateRecordingResponse", NULL);
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int RecordingBindingProxy::DeleteRecording(const char *endpoint, const char *soap_action, _recordingcontrol__DeleteRecording *recordingcontrol__DeleteRecording, _recordingcontrol__DeleteRecordingResponse &recordingcontrol__DeleteRecordingResponse)
{	struct soap *soap = this->soap;
	struct __recordingcontrol__DeleteRecording soap_tmp___recordingcontrol__DeleteRecording;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_action == NULL)
		soap_action = "http://www.onvif.org/ver10/recording/wsdl/DeleteRecording";
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_tmp___recordingcontrol__DeleteRecording.recordingcontrol__DeleteRecording = recordingcontrol__DeleteRecording;
	soap_serializeheader(soap);
	soap_serialize___recordingcontrol__DeleteRecording(soap, &soap_tmp___recordingcontrol__DeleteRecording);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___recordingcontrol__DeleteRecording(soap, &soap_tmp___recordingcontrol__DeleteRecording, "-recordingcontrol:DeleteRecording", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_url(soap, soap_endpoint, NULL), soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___recordingcontrol__DeleteRecording(soap, &soap_tmp___recordingcontrol__DeleteRecording, "-recordingcontrol:DeleteRecording", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!&recordingcontrol__DeleteRecordingResponse)
		return soap_closesock(soap);
	recordingcontrol__DeleteRecordingResponse.soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	recordingcontrol__DeleteRecordingResponse.soap_get(soap, "recordingcontrol:DeleteRecordingResponse", NULL);
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int RecordingBindingProxy::GetRecordings(const char *endpoint, const char *soap_action, _recordingcontrol__GetRecordings *recordingcontrol__GetRecordings, _recordingcontrol__GetRecordingsResponse &recordingcontrol__GetRecordingsResponse)
{	struct soap *soap = this->soap;
	struct __recordingcontrol__GetRecordings soap_tmp___recordingcontrol__GetRecordings;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_action == NULL)
		soap_action = "http://www.onvif.org/ver10/recording/wsdl/GetRecordings";
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_tmp___recordingcontrol__GetRecordings.recordingcontrol__GetRecordings = recordingcontrol__GetRecordings;
	soap_serializeheader(soap);
	soap_serialize___recordingcontrol__GetRecordings(soap, &soap_tmp___recordingcontrol__GetRecordings);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___recordingcontrol__GetRecordings(soap, &soap_tmp___recordingcontrol__GetRecordings, "-recordingcontrol:GetRecordings", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_url(soap, soap_endpoint, NULL), soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___recordingcontrol__GetRecordings(soap, &soap_tmp___recordingcontrol__GetRecordings, "-recordingcontrol:GetRecordings", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!&recordingcontrol__GetRecordingsResponse)
		return soap_closesock(soap);
	recordingcontrol__GetRecordingsResponse.soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	recordingcontrol__GetRecordingsResponse.soap_get(soap, "recordingcontrol:GetRecordingsResponse", NULL);
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int RecordingBindingProxy::SetRecordingConfiguration(const char *endpoint, const char *soap_action, _recordingcontrol__SetRecordingConfiguration *recordingcontrol__SetRecordingConfiguration, _recordingcontrol__SetRecordingConfigurationResponse &recordingcontrol__SetRecordingConfigurationResponse)
{	struct soap *soap = this->soap;
	struct __recordingcontrol__SetRecordingConfiguration soap_tmp___recordingcontrol__SetRecordingConfiguration;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_action == NULL)
		soap_action = "http://www.onvif.org/ver10/recording/wsdl/SetRecordingConfiguration";
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_tmp___recordingcontrol__SetRecordingConfiguration.recordingcontrol__SetRecordingConfiguration = recordingcontrol__SetRecordingConfiguration;
	soap_serializeheader(soap);
	soap_serialize___recordingcontrol__SetRecordingConfiguration(soap, &soap_tmp___recordingcontrol__SetRecordingConfiguration);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___recordingcontrol__SetRecordingConfiguration(soap, &soap_tmp___recordingcontrol__SetRecordingConfiguration, "-recordingcontrol:SetRecordingConfiguration", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_url(soap, soap_endpoint, NULL), soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___recordingcontrol__SetRecordingConfiguration(soap, &soap_tmp___recordingcontrol__SetRecordingConfiguration, "-recordingcontrol:SetRecordingConfiguration", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!&recordingcontrol__SetRecordingConfigurationResponse)
		return soap_closesock(soap);
	recordingcontrol__SetRecordingConfigurationResponse.soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	recordingcontrol__SetRecordingConfigurationResponse.soap_get(soap, "recordingcontrol:SetRecordingConfigurationResponse", NULL);
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int RecordingBindingProxy::GetRecordingConfiguration(const char *endpoint, const char *soap_action, _recordingcontrol__GetRecordingConfiguration *recordingcontrol__GetRecordingConfiguration, _recordingcontrol__GetRecordingConfigurationResponse &recordingcontrol__GetRecordingConfigurationResponse)
{	struct soap *soap = this->soap;
	struct __recordingcontrol__GetRecordingConfiguration soap_tmp___recordingcontrol__GetRecordingConfiguration;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_action == NULL)
		soap_action = "http://www.onvif.org/ver10/recording/wsdl/GetRecordingConfiguration";
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_tmp___recordingcontrol__GetRecordingConfiguration.recordingcontrol__GetRecordingConfiguration = recordingcontrol__GetRecordingConfiguration;
	soap_serializeheader(soap);
	soap_serialize___recordingcontrol__GetRecordingConfiguration(soap, &soap_tmp___recordingcontrol__GetRecordingConfiguration);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___recordingcontrol__GetRecordingConfiguration(soap, &soap_tmp___recordingcontrol__GetRecordingConfiguration, "-recordingcontrol:GetRecordingConfiguration", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_url(soap, soap_endpoint, NULL), soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___recordingcontrol__GetRecordingConfiguration(soap, &soap_tmp___recordingcontrol__GetRecordingConfiguration, "-recordingcontrol:GetRecordingConfiguration", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!&recordingcontrol__GetRecordingConfigurationResponse)
		return soap_closesock(soap);
	recordingcontrol__GetRecordingConfigurationResponse.soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	recordingcontrol__GetRecordingConfigurationResponse.soap_get(soap, "recordingcontrol:GetRecordingConfigurationResponse", NULL);
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int RecordingBindingProxy::GetRecordingOptions(const char *endpoint, const char *soap_action, _recordingcontrol__GetRecordingOptions *recordingcontrol__GetRecordingOptions, _recordingcontrol__GetRecordingOptionsResponse &recordingcontrol__GetRecordingOptionsResponse)
{	struct soap *soap = this->soap;
	struct __recordingcontrol__GetRecordingOptions soap_tmp___recordingcontrol__GetRecordingOptions;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_action == NULL)
		soap_action = "http://www.onvif.org/ver10/recording/wsdl/GetRecordingOptions";
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_tmp___recordingcontrol__GetRecordingOptions.recordingcontrol__GetRecordingOptions = recordingcontrol__GetRecordingOptions;
	soap_serializeheader(soap);
	soap_serialize___recordingcontrol__GetRecordingOptions(soap, &soap_tmp___recordingcontrol__GetRecordingOptions);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___recordingcontrol__GetRecordingOptions(soap, &soap_tmp___recordingcontrol__GetRecordingOptions, "-recordingcontrol:GetRecordingOptions", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_url(soap, soap_endpoint, NULL), soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___recordingcontrol__GetRecordingOptions(soap, &soap_tmp___recordingcontrol__GetRecordingOptions, "-recordingcontrol:GetRecordingOptions", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!&recordingcontrol__GetRecordingOptionsResponse)
		return soap_closesock(soap);
	recordingcontrol__GetRecordingOptionsResponse.soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	recordingcontrol__GetRecordingOptionsResponse.soap_get(soap, "recordingcontrol:GetRecordingOptionsResponse", NULL);
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int RecordingBindingProxy::CreateTrack(const char *endpoint, const char *soap_action, _recordingcontrol__CreateTrack *recordingcontrol__CreateTrack, _recordingcontrol__CreateTrackResponse &recordingcontrol__CreateTrackResponse)
{	struct soap *soap = this->soap;
	struct __recordingcontrol__CreateTrack soap_tmp___recordingcontrol__CreateTrack;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_action == NULL)
		soap_action = "http://www.onvif.org/ver10/recording/wsdl/CreateTrack";
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_tmp___recordingcontrol__CreateTrack.recordingcontrol__CreateTrack = recordingcontrol__CreateTrack;
	soap_serializeheader(soap);
	soap_serialize___recordingcontrol__CreateTrack(soap, &soap_tmp___recordingcontrol__CreateTrack);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___recordingcontrol__CreateTrack(soap, &soap_tmp___recordingcontrol__CreateTrack, "-recordingcontrol:CreateTrack", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_url(soap, soap_endpoint, NULL), soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___recordingcontrol__CreateTrack(soap, &soap_tmp___recordingcontrol__CreateTrack, "-recordingcontrol:CreateTrack", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!&recordingcontrol__CreateTrackResponse)
		return soap_closesock(soap);
	recordingcontrol__CreateTrackResponse.soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	recordingcontrol__CreateTrackResponse.soap_get(soap, "recordingcontrol:CreateTrackResponse", NULL);
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int RecordingBindingProxy::DeleteTrack(const char *endpoint, const char *soap_action, _recordingcontrol__DeleteTrack *recordingcontrol__DeleteTrack, _recordingcontrol__DeleteTrackResponse &recordingcontrol__DeleteTrackResponse)
{	struct soap *soap = this->soap;
	struct __recordingcontrol__DeleteTrack soap_tmp___recordingcontrol__DeleteTrack;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_action == NULL)
		soap_action = "http://www.onvif.org/ver10/recording/wsdl/DeleteTrack";
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_tmp___recordingcontrol__DeleteTrack.recordingcontrol__DeleteTrack = recordingcontrol__DeleteTrack;
	soap_serializeheader(soap);
	soap_serialize___recordingcontrol__DeleteTrack(soap, &soap_tmp___recordingcontrol__DeleteTrack);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___recordingcontrol__DeleteTrack(soap, &soap_tmp___recordingcontrol__DeleteTrack, "-recordingcontrol:DeleteTrack", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_url(soap, soap_endpoint, NULL), soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___recordingcontrol__DeleteTrack(soap, &soap_tmp___recordingcontrol__DeleteTrack, "-recordingcontrol:DeleteTrack", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!&recordingcontrol__DeleteTrackResponse)
		return soap_closesock(soap);
	recordingcontrol__DeleteTrackResponse.soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	recordingcontrol__DeleteTrackResponse.soap_get(soap, "recordingcontrol:DeleteTrackResponse", NULL);
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int RecordingBindingProxy::GetTrackConfiguration(const char *endpoint, const char *soap_action, _recordingcontrol__GetTrackConfiguration *recordingcontrol__GetTrackConfiguration, _recordingcontrol__GetTrackConfigurationResponse &recordingcontrol__GetTrackConfigurationResponse)
{	struct soap *soap = this->soap;
	struct __recordingcontrol__GetTrackConfiguration soap_tmp___recordingcontrol__GetTrackConfiguration;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_action == NULL)
		soap_action = "http://www.onvif.org/ver10/recording/wsdl/GetTrackConfiguration";
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_tmp___recordingcontrol__GetTrackConfiguration.recordingcontrol__GetTrackConfiguration = recordingcontrol__GetTrackConfiguration;
	soap_serializeheader(soap);
	soap_serialize___recordingcontrol__GetTrackConfiguration(soap, &soap_tmp___recordingcontrol__GetTrackConfiguration);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___recordingcontrol__GetTrackConfiguration(soap, &soap_tmp___recordingcontrol__GetTrackConfiguration, "-recordingcontrol:GetTrackConfiguration", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_url(soap, soap_endpoint, NULL), soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___recordingcontrol__GetTrackConfiguration(soap, &soap_tmp___recordingcontrol__GetTrackConfiguration, "-recordingcontrol:GetTrackConfiguration", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!&recordingcontrol__GetTrackConfigurationResponse)
		return soap_closesock(soap);
	recordingcontrol__GetTrackConfigurationResponse.soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	recordingcontrol__GetTrackConfigurationResponse.soap_get(soap, "recordingcontrol:GetTrackConfigurationResponse", NULL);
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int RecordingBindingProxy::SetTrackConfiguration(const char *endpoint, const char *soap_action, _recordingcontrol__SetTrackConfiguration *recordingcontrol__SetTrackConfiguration, _recordingcontrol__SetTrackConfigurationResponse &recordingcontrol__SetTrackConfigurationResponse)
{	struct soap *soap = this->soap;
	struct __recordingcontrol__SetTrackConfiguration soap_tmp___recordingcontrol__SetTrackConfiguration;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_action == NULL)
		soap_action = "http://www.onvif.org/ver10/recording/wsdl/SetTrackConfiguration";
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_tmp___recordingcontrol__SetTrackConfiguration.recordingcontrol__SetTrackConfiguration = recordingcontrol__SetTrackConfiguration;
	soap_serializeheader(soap);
	soap_serialize___recordingcontrol__SetTrackConfiguration(soap, &soap_tmp___recordingcontrol__SetTrackConfiguration);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___recordingcontrol__SetTrackConfiguration(soap, &soap_tmp___recordingcontrol__SetTrackConfiguration, "-recordingcontrol:SetTrackConfiguration", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_url(soap, soap_endpoint, NULL), soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___recordingcontrol__SetTrackConfiguration(soap, &soap_tmp___recordingcontrol__SetTrackConfiguration, "-recordingcontrol:SetTrackConfiguration", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!&recordingcontrol__SetTrackConfigurationResponse)
		return soap_closesock(soap);
	recordingcontrol__SetTrackConfigurationResponse.soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	recordingcontrol__SetTrackConfigurationResponse.soap_get(soap, "recordingcontrol:SetTrackConfigurationResponse", NULL);
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int RecordingBindingProxy::CreateRecordingJob(const char *endpoint, const char *soap_action, _recordingcontrol__CreateRecordingJob *recordingcontrol__CreateRecordingJob, _recordingcontrol__CreateRecordingJobResponse &recordingcontrol__CreateRecordingJobResponse)
{	struct soap *soap = this->soap;
	struct __recordingcontrol__CreateRecordingJob soap_tmp___recordingcontrol__CreateRecordingJob;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_action == NULL)
		soap_action = "http://www.onvif.org/ver10/recording/wsdl/CreateRecordingJob";
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_tmp___recordingcontrol__CreateRecordingJob.recordingcontrol__CreateRecordingJob = recordingcontrol__CreateRecordingJob;
	soap_serializeheader(soap);
	soap_serialize___recordingcontrol__CreateRecordingJob(soap, &soap_tmp___recordingcontrol__CreateRecordingJob);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___recordingcontrol__CreateRecordingJob(soap, &soap_tmp___recordingcontrol__CreateRecordingJob, "-recordingcontrol:CreateRecordingJob", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_url(soap, soap_endpoint, NULL), soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___recordingcontrol__CreateRecordingJob(soap, &soap_tmp___recordingcontrol__CreateRecordingJob, "-recordingcontrol:CreateRecordingJob", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!&recordingcontrol__CreateRecordingJobResponse)
		return soap_closesock(soap);
	recordingcontrol__CreateRecordingJobResponse.soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	recordingcontrol__CreateRecordingJobResponse.soap_get(soap, "recordingcontrol:CreateRecordingJobResponse", NULL);
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int RecordingBindingProxy::DeleteRecordingJob(const char *endpoint, const char *soap_action, _recordingcontrol__DeleteRecordingJob *recordingcontrol__DeleteRecordingJob, _recordingcontrol__DeleteRecordingJobResponse &recordingcontrol__DeleteRecordingJobResponse)
{	struct soap *soap = this->soap;
	struct __recordingcontrol__DeleteRecordingJob soap_tmp___recordingcontrol__DeleteRecordingJob;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_action == NULL)
		soap_action = "http://www.onvif.org/ver10/recording/wsdl/DeleteRecordingJob";
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_tmp___recordingcontrol__DeleteRecordingJob.recordingcontrol__DeleteRecordingJob = recordingcontrol__DeleteRecordingJob;
	soap_serializeheader(soap);
	soap_serialize___recordingcontrol__DeleteRecordingJob(soap, &soap_tmp___recordingcontrol__DeleteRecordingJob);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___recordingcontrol__DeleteRecordingJob(soap, &soap_tmp___recordingcontrol__DeleteRecordingJob, "-recordingcontrol:DeleteRecordingJob", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_url(soap, soap_endpoint, NULL), soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___recordingcontrol__DeleteRecordingJob(soap, &soap_tmp___recordingcontrol__DeleteRecordingJob, "-recordingcontrol:DeleteRecordingJob", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!&recordingcontrol__DeleteRecordingJobResponse)
		return soap_closesock(soap);
	recordingcontrol__DeleteRecordingJobResponse.soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	recordingcontrol__DeleteRecordingJobResponse.soap_get(soap, "recordingcontrol:DeleteRecordingJobResponse", NULL);
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int RecordingBindingProxy::GetRecordingJobs(const char *endpoint, const char *soap_action, _recordingcontrol__GetRecordingJobs *recordingcontrol__GetRecordingJobs, _recordingcontrol__GetRecordingJobsResponse &recordingcontrol__GetRecordingJobsResponse)
{	struct soap *soap = this->soap;
	struct __recordingcontrol__GetRecordingJobs soap_tmp___recordingcontrol__GetRecordingJobs;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_action == NULL)
		soap_action = "http://www.onvif.org/ver10/recording/wsdl/GetRecordingJobs";
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_tmp___recordingcontrol__GetRecordingJobs.recordingcontrol__GetRecordingJobs = recordingcontrol__GetRecordingJobs;
	soap_serializeheader(soap);
	soap_serialize___recordingcontrol__GetRecordingJobs(soap, &soap_tmp___recordingcontrol__GetRecordingJobs);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___recordingcontrol__GetRecordingJobs(soap, &soap_tmp___recordingcontrol__GetRecordingJobs, "-recordingcontrol:GetRecordingJobs", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_url(soap, soap_endpoint, NULL), soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___recordingcontrol__GetRecordingJobs(soap, &soap_tmp___recordingcontrol__GetRecordingJobs, "-recordingcontrol:GetRecordingJobs", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!&recordingcontrol__GetRecordingJobsResponse)
		return soap_closesock(soap);
	recordingcontrol__GetRecordingJobsResponse.soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	recordingcontrol__GetRecordingJobsResponse.soap_get(soap, "recordingcontrol:GetRecordingJobsResponse", NULL);
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int RecordingBindingProxy::SetRecordingJobConfiguration(const char *endpoint, const char *soap_action, _recordingcontrol__SetRecordingJobConfiguration *recordingcontrol__SetRecordingJobConfiguration, _recordingcontrol__SetRecordingJobConfigurationResponse &recordingcontrol__SetRecordingJobConfigurationResponse)
{	struct soap *soap = this->soap;
	struct __recordingcontrol__SetRecordingJobConfiguration soap_tmp___recordingcontrol__SetRecordingJobConfiguration;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_action == NULL)
		soap_action = "http://www.onvif.org/ver10/recording/wsdl/SetRecordingJobConfiguration";
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_tmp___recordingcontrol__SetRecordingJobConfiguration.recordingcontrol__SetRecordingJobConfiguration = recordingcontrol__SetRecordingJobConfiguration;
	soap_serializeheader(soap);
	soap_serialize___recordingcontrol__SetRecordingJobConfiguration(soap, &soap_tmp___recordingcontrol__SetRecordingJobConfiguration);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___recordingcontrol__SetRecordingJobConfiguration(soap, &soap_tmp___recordingcontrol__SetRecordingJobConfiguration, "-recordingcontrol:SetRecordingJobConfiguration", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_url(soap, soap_endpoint, NULL), soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___recordingcontrol__SetRecordingJobConfiguration(soap, &soap_tmp___recordingcontrol__SetRecordingJobConfiguration, "-recordingcontrol:SetRecordingJobConfiguration", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!&recordingcontrol__SetRecordingJobConfigurationResponse)
		return soap_closesock(soap);
	recordingcontrol__SetRecordingJobConfigurationResponse.soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	recordingcontrol__SetRecordingJobConfigurationResponse.soap_get(soap, "recordingcontrol:SetRecordingJobConfigurationResponse", NULL);
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int RecordingBindingProxy::GetRecordingJobConfiguration(const char *endpoint, const char *soap_action, _recordingcontrol__GetRecordingJobConfiguration *recordingcontrol__GetRecordingJobConfiguration, _recordingcontrol__GetRecordingJobConfigurationResponse &recordingcontrol__GetRecordingJobConfigurationResponse)
{	struct soap *soap = this->soap;
	struct __recordingcontrol__GetRecordingJobConfiguration soap_tmp___recordingcontrol__GetRecordingJobConfiguration;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_action == NULL)
		soap_action = "http://www.onvif.org/ver10/recording/wsdl/GetRecordingJobConfiguration";
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_tmp___recordingcontrol__GetRecordingJobConfiguration.recordingcontrol__GetRecordingJobConfiguration = recordingcontrol__GetRecordingJobConfiguration;
	soap_serializeheader(soap);
	soap_serialize___recordingcontrol__GetRecordingJobConfiguration(soap, &soap_tmp___recordingcontrol__GetRecordingJobConfiguration);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___recordingcontrol__GetRecordingJobConfiguration(soap, &soap_tmp___recordingcontrol__GetRecordingJobConfiguration, "-recordingcontrol:GetRecordingJobConfiguration", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_url(soap, soap_endpoint, NULL), soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___recordingcontrol__GetRecordingJobConfiguration(soap, &soap_tmp___recordingcontrol__GetRecordingJobConfiguration, "-recordingcontrol:GetRecordingJobConfiguration", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!&recordingcontrol__GetRecordingJobConfigurationResponse)
		return soap_closesock(soap);
	recordingcontrol__GetRecordingJobConfigurationResponse.soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	recordingcontrol__GetRecordingJobConfigurationResponse.soap_get(soap, "recordingcontrol:GetRecordingJobConfigurationResponse", NULL);
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int RecordingBindingProxy::SetRecordingJobMode(const char *endpoint, const char *soap_action, _recordingcontrol__SetRecordingJobMode *recordingcontrol__SetRecordingJobMode, _recordingcontrol__SetRecordingJobModeResponse &recordingcontrol__SetRecordingJobModeResponse)
{	struct soap *soap = this->soap;
	struct __recordingcontrol__SetRecordingJobMode soap_tmp___recordingcontrol__SetRecordingJobMode;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_action == NULL)
		soap_action = "http://www.onvif.org/ver10/recording/wsdl/SetRecordingJobMode";
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_tmp___recordingcontrol__SetRecordingJobMode.recordingcontrol__SetRecordingJobMode = recordingcontrol__SetRecordingJobMode;
	soap_serializeheader(soap);
	soap_serialize___recordingcontrol__SetRecordingJobMode(soap, &soap_tmp___recordingcontrol__SetRecordingJobMode);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___recordingcontrol__SetRecordingJobMode(soap, &soap_tmp___recordingcontrol__SetRecordingJobMode, "-recordingcontrol:SetRecordingJobMode", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_url(soap, soap_endpoint, NULL), soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___recordingcontrol__SetRecordingJobMode(soap, &soap_tmp___recordingcontrol__SetRecordingJobMode, "-recordingcontrol:SetRecordingJobMode", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!&recordingcontrol__SetRecordingJobModeResponse)
		return soap_closesock(soap);
	recordingcontrol__SetRecordingJobModeResponse.soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	recordingcontrol__SetRecordingJobModeResponse.soap_get(soap, "recordingcontrol:SetRecordingJobModeResponse", NULL);
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int RecordingBindingProxy::GetRecordingJobState(const char *endpoint, const char *soap_action, _recordingcontrol__GetRecordingJobState *recordingcontrol__GetRecordingJobState, _recordingcontrol__GetRecordingJobStateResponse &recordingcontrol__GetRecordingJobStateResponse)
{	struct soap *soap = this->soap;
	struct __recordingcontrol__GetRecordingJobState soap_tmp___recordingcontrol__GetRecordingJobState;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_action == NULL)
		soap_action = "http://www.onvif.org/ver10/recording/wsdl/GetRecordingJobState";
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_tmp___recordingcontrol__GetRecordingJobState.recordingcontrol__GetRecordingJobState = recordingcontrol__GetRecordingJobState;
	soap_serializeheader(soap);
	soap_serialize___recordingcontrol__GetRecordingJobState(soap, &soap_tmp___recordingcontrol__GetRecordingJobState);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___recordingcontrol__GetRecordingJobState(soap, &soap_tmp___recordingcontrol__GetRecordingJobState, "-recordingcontrol:GetRecordingJobState", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_url(soap, soap_endpoint, NULL), soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___recordingcontrol__GetRecordingJobState(soap, &soap_tmp___recordingcontrol__GetRecordingJobState, "-recordingcontrol:GetRecordingJobState", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!&recordingcontrol__GetRecordingJobStateResponse)
		return soap_closesock(soap);
	recordingcontrol__GetRecordingJobStateResponse.soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	recordingcontrol__GetRecordingJobStateResponse.soap_get(soap, "recordingcontrol:GetRecordingJobStateResponse", NULL);
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int RecordingBindingProxy::ExportRecordedData(const char *endpoint, const char *soap_action, _recordingcontrol__ExportRecordedData *recordingcontrol__ExportRecordedData, _recordingcontrol__ExportRecordedDataResponse &recordingcontrol__ExportRecordedDataResponse)
{	struct soap *soap = this->soap;
	struct __recordingcontrol__ExportRecordedData soap_tmp___recordingcontrol__ExportRecordedData;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_action == NULL)
		soap_action = "http://www.onvif.org/ver10/recording/wsdl/ExportRecordedData";
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_tmp___recordingcontrol__ExportRecordedData.recordingcontrol__ExportRecordedData = recordingcontrol__ExportRecordedData;
	soap_serializeheader(soap);
	soap_serialize___recordingcontrol__ExportRecordedData(soap, &soap_tmp___recordingcontrol__ExportRecordedData);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___recordingcontrol__ExportRecordedData(soap, &soap_tmp___recordingcontrol__ExportRecordedData, "-recordingcontrol:ExportRecordedData", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_url(soap, soap_endpoint, NULL), soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___recordingcontrol__ExportRecordedData(soap, &soap_tmp___recordingcontrol__ExportRecordedData, "-recordingcontrol:ExportRecordedData", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!&recordingcontrol__ExportRecordedDataResponse)
		return soap_closesock(soap);
	recordingcontrol__ExportRecordedDataResponse.soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	recordingcontrol__ExportRecordedDataResponse.soap_get(soap, "recordingcontrol:ExportRecordedDataResponse", NULL);
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int RecordingBindingProxy::StopExportRecordedData(const char *endpoint, const char *soap_action, _recordingcontrol__StopExportRecordedData *recordingcontrol__StopExportRecordedData, _recordingcontrol__StopExportRecordedDataResponse &recordingcontrol__StopExportRecordedDataResponse)
{	struct soap *soap = this->soap;
	struct __recordingcontrol__StopExportRecordedData soap_tmp___recordingcontrol__StopExportRecordedData;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_action == NULL)
		soap_action = "http://www.onvif.org/ver10/recording/wsdl/StopExportRecordedData";
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_tmp___recordingcontrol__StopExportRecordedData.recordingcontrol__StopExportRecordedData = recordingcontrol__StopExportRecordedData;
	soap_serializeheader(soap);
	soap_serialize___recordingcontrol__StopExportRecordedData(soap, &soap_tmp___recordingcontrol__StopExportRecordedData);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___recordingcontrol__StopExportRecordedData(soap, &soap_tmp___recordingcontrol__StopExportRecordedData, "-recordingcontrol:StopExportRecordedData", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_url(soap, soap_endpoint, NULL), soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___recordingcontrol__StopExportRecordedData(soap, &soap_tmp___recordingcontrol__StopExportRecordedData, "-recordingcontrol:StopExportRecordedData", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!&recordingcontrol__StopExportRecordedDataResponse)
		return soap_closesock(soap);
	recordingcontrol__StopExportRecordedDataResponse.soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	recordingcontrol__StopExportRecordedDataResponse.soap_get(soap, "recordingcontrol:StopExportRecordedDataResponse", NULL);
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int RecordingBindingProxy::GetExportRecordedDataState(const char *endpoint, const char *soap_action, _recordingcontrol__GetExportRecordedDataState *recordingcontrol__GetExportRecordedDataState, _recordingcontrol__GetExportRecordedDataStateResponse &recordingcontrol__GetExportRecordedDataStateResponse)
{	struct soap *soap = this->soap;
	struct __recordingcontrol__GetExportRecordedDataState soap_tmp___recordingcontrol__GetExportRecordedDataState;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_action == NULL)
		soap_action = "http://www.onvif.org/ver10/recording/wsdl/GetExportRecordedDataState";
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_tmp___recordingcontrol__GetExportRecordedDataState.recordingcontrol__GetExportRecordedDataState = recordingcontrol__GetExportRecordedDataState;
	soap_serializeheader(soap);
	soap_serialize___recordingcontrol__GetExportRecordedDataState(soap, &soap_tmp___recordingcontrol__GetExportRecordedDataState);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___recordingcontrol__GetExportRecordedDataState(soap, &soap_tmp___recordingcontrol__GetExportRecordedDataState, "-recordingcontrol:GetExportRecordedDataState", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_url(soap, soap_endpoint, NULL), soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___recordingcontrol__GetExportRecordedDataState(soap, &soap_tmp___recordingcontrol__GetExportRecordedDataState, "-recordingcontrol:GetExportRecordedDataState", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!&recordingcontrol__GetExportRecordedDataStateResponse)
		return soap_closesock(soap);
	recordingcontrol__GetExportRecordedDataStateResponse.soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	recordingcontrol__GetExportRecordedDataStateResponse.soap_get(soap, "recordingcontrol:GetExportRecordedDataStateResponse", NULL);
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
/* End of client proxy code */
