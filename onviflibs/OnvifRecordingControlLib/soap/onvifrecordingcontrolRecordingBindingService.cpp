/* onvifrecordingcontrolRecordingBindingService.cpp
   Generated by gSOAP 2.8.22 from rcx.h

Copyright(C) 2000-2015, Robert van Engelen, Genivia Inc. All Rights Reserved.
The generated code is released under one of the following licenses:
GPL or Genivia's license for commercial use.
This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
*/

#include "onvifrecordingcontrolRecordingBindingService.h"

RecordingBindingService::RecordingBindingService()
{	this->soap = soap_new();
	this->soap_own = true;
	RecordingBindingService_init(SOAP_IO_DEFAULT, SOAP_IO_DEFAULT);
}

RecordingBindingService::RecordingBindingService(struct soap *_soap)
{	this->soap = _soap;
	this->soap_own = false;
	RecordingBindingService_init(_soap->imode, _soap->omode);
}

RecordingBindingService::RecordingBindingService(soap_mode iomode)
{	this->soap = soap_new();
	this->soap_own = true;
	RecordingBindingService_init(iomode, iomode);
}

RecordingBindingService::RecordingBindingService(soap_mode imode, soap_mode omode)
{	this->soap = soap_new();
	this->soap_own = true;
	RecordingBindingService_init(imode, omode);
}

RecordingBindingService::~RecordingBindingService()
{	if (this->soap_own)
		soap_free(this->soap);
}

void RecordingBindingService::RecordingBindingService_init(soap_mode imode, soap_mode omode)
{	soap_imode(this->soap, imode);
	soap_omode(this->soap, omode);
	static const struct Namespace namespaces[] =
{
	{"SOAP-ENV", "http://www.w3.org/2003/05/soap-envelope", "http://schemas.xmlsoap.org/soap/envelope/", NULL},
	{"SOAP-ENC", "http://www.w3.org/2003/05/soap-encoding", "http://schemas.xmlsoap.org/soap/encoding/", NULL},
	{"xsi", "http://www.w3.org/2001/XMLSchema-instance", "http://www.w3.org/*/XMLSchema-instance", NULL},
	{"xsd", "http://www.w3.org/2001/XMLSchema", "http://www.w3.org/*/XMLSchema", NULL},
	{"chan", "http://schemas.microsoft.com/ws/2005/02/duplex", NULL, NULL},
	{"wsa5", "http://www.w3.org/2005/08/addressing", "http://schemas.xmlsoap.org/ws/2004/08/addressing", NULL},
	{"xmime", "http://tempuri.org/xmime.xsd", NULL, NULL},
	{"xop", "http://www.w3.org/2004/08/xop/include", NULL, NULL},
	{"tt", "http://www.onvif.org/ver10/schema", NULL, NULL},
	{"wsnt", "http://docs.oasis-open.org/wsn/b-2", NULL, NULL},
	{"wsrfbf", "http://docs.oasis-open.org/wsrf/bf-2", NULL, NULL},
	{"wstop", "http://docs.oasis-open.org/wsn/t-1", NULL, NULL},
	{"recordingcontrol", "http://www.onvif.org/ver10/recording/wsdl", NULL, NULL},
	{NULL, NULL, NULL, NULL}
};
	soap_set_namespaces(this->soap, namespaces);
}

void RecordingBindingService::destroy()
{	soap_destroy(this->soap);
	soap_end(this->soap);
}

void RecordingBindingService::reset()
{	destroy();
	soap_done(this->soap);
	soap_initialize(this->soap);
	RecordingBindingService_init(SOAP_IO_DEFAULT, SOAP_IO_DEFAULT);
}

#ifndef WITH_PURE_VIRTUAL
RecordingBindingService *RecordingBindingService::copy()
{	RecordingBindingService *dup = SOAP_NEW_COPY(RecordingBindingService);
	if (dup)
		soap_copy_context(dup->soap, this->soap);
	return dup;
}
#endif

int RecordingBindingService::soap_close_socket()
{	return soap_closesock(this->soap);
}

int RecordingBindingService::soap_force_close_socket()
{	return soap_force_closesock(this->soap);
}

int RecordingBindingService::soap_senderfault(const char *string, const char *detailXML)
{	return ::soap_sender_fault(this->soap, string, detailXML);
}

int RecordingBindingService::soap_senderfault(const char *subcodeQName, const char *string, const char *detailXML)
{	return ::soap_sender_fault_subcode(this->soap, subcodeQName, string, detailXML);
}

int RecordingBindingService::soap_receiverfault(const char *string, const char *detailXML)
{	return ::soap_receiver_fault(this->soap, string, detailXML);
}

int RecordingBindingService::soap_receiverfault(const char *subcodeQName, const char *string, const char *detailXML)
{	return ::soap_receiver_fault_subcode(this->soap, subcodeQName, string, detailXML);
}

void RecordingBindingService::soap_print_fault(FILE *fd)
{	::soap_print_fault(this->soap, fd);
}

#ifndef WITH_LEAN
#ifndef WITH_COMPAT
void RecordingBindingService::soap_stream_fault(std::ostream& os)
{	::soap_stream_fault(this->soap, os);
}
#endif

char *RecordingBindingService::soap_sprint_fault(char *buf, size_t len)
{	return ::soap_sprint_fault(this->soap, buf, len);
}
#endif

void RecordingBindingService::soap_noheader()
{	this->soap->header = NULL;
}

void RecordingBindingService::soap_header(char *wsa5__MessageID, struct wsa5__RelatesToType *wsa5__RelatesTo, struct wsa5__EndpointReferenceType *wsa5__From, struct wsa5__EndpointReferenceType *wsa5__ReplyTo, struct wsa5__EndpointReferenceType *wsa5__FaultTo, char *wsa5__To, char *wsa5__Action, struct chan__ChannelInstanceType *chan__ChannelInstance)
{	::soap_header(this->soap);
	this->soap->header->wsa5__MessageID = wsa5__MessageID;
	this->soap->header->wsa5__RelatesTo = wsa5__RelatesTo;
	this->soap->header->wsa5__From = wsa5__From;
	this->soap->header->wsa5__ReplyTo = wsa5__ReplyTo;
	this->soap->header->wsa5__FaultTo = wsa5__FaultTo;
	this->soap->header->wsa5__To = wsa5__To;
	this->soap->header->wsa5__Action = wsa5__Action;
	this->soap->header->chan__ChannelInstance = chan__ChannelInstance;
}

const SOAP_ENV__Header *RecordingBindingService::soap_header()
{	return this->soap->header;
}

int RecordingBindingService::run(int port)
{	if (soap_valid_socket(this->soap->master) || soap_valid_socket(bind(NULL, port, 100)))
	{	for (;;)
		{	if (!soap_valid_socket(accept()) || serve())
				break;
			soap_destroy(this->soap);
			soap_end(this->soap);
		}
	}
	return this->soap->error;
}

SOAP_SOCKET RecordingBindingService::bind(const char *host, int port, int backlog)
{	return soap_bind(this->soap, host, port, backlog);
}

SOAP_SOCKET RecordingBindingService::accept()
{	return soap_accept(this->soap);
}

#if defined(WITH_OPENSSL) || defined(WITH_GNUTLS)
int RecordingBindingService::ssl_accept()
{	return soap_ssl_accept(this->soap);
}
#endif

int RecordingBindingService::serve()
{
#ifndef WITH_FASTCGI
	unsigned int k = this->soap->max_keep_alive;
#endif
	do
	{

#ifndef WITH_FASTCGI
		if (this->soap->max_keep_alive > 0 && !--k)
			this->soap->keep_alive = 0;
#endif

		if (soap_begin_serve(this->soap))
		{	if (this->soap->error >= SOAP_STOP)
				continue;
			return this->soap->error;
		}
		if (dispatch() || (this->soap->fserveloop && this->soap->fserveloop(this->soap)))
		{
#ifdef WITH_FASTCGI
			soap_send_fault(this->soap);
#else
			return soap_send_fault(this->soap);
#endif
		}

#ifdef WITH_FASTCGI
		soap_destroy(this->soap);
		soap_end(this->soap);
	} while (1);
#else
	} while (this->soap->keep_alive);
#endif
	return SOAP_OK;
}

static int serve___recordingcontrol__GetServiceCapabilities(struct soap*, RecordingBindingService*);
static int serve___recordingcontrol__CreateRecording(struct soap*, RecordingBindingService*);
static int serve___recordingcontrol__DeleteRecording(struct soap*, RecordingBindingService*);
static int serve___recordingcontrol__GetRecordings(struct soap*, RecordingBindingService*);
static int serve___recordingcontrol__SetRecordingConfiguration(struct soap*, RecordingBindingService*);
static int serve___recordingcontrol__GetRecordingConfiguration(struct soap*, RecordingBindingService*);
static int serve___recordingcontrol__GetRecordingOptions(struct soap*, RecordingBindingService*);
static int serve___recordingcontrol__CreateTrack(struct soap*, RecordingBindingService*);
static int serve___recordingcontrol__DeleteTrack(struct soap*, RecordingBindingService*);
static int serve___recordingcontrol__GetTrackConfiguration(struct soap*, RecordingBindingService*);
static int serve___recordingcontrol__SetTrackConfiguration(struct soap*, RecordingBindingService*);
static int serve___recordingcontrol__CreateRecordingJob(struct soap*, RecordingBindingService*);
static int serve___recordingcontrol__DeleteRecordingJob(struct soap*, RecordingBindingService*);
static int serve___recordingcontrol__GetRecordingJobs(struct soap*, RecordingBindingService*);
static int serve___recordingcontrol__SetRecordingJobConfiguration(struct soap*, RecordingBindingService*);
static int serve___recordingcontrol__GetRecordingJobConfiguration(struct soap*, RecordingBindingService*);
static int serve___recordingcontrol__SetRecordingJobMode(struct soap*, RecordingBindingService*);
static int serve___recordingcontrol__GetRecordingJobState(struct soap*, RecordingBindingService*);
static int serve___recordingcontrol__ExportRecordedData(struct soap*, RecordingBindingService*);
static int serve___recordingcontrol__StopExportRecordedData(struct soap*, RecordingBindingService*);
static int serve___recordingcontrol__GetExportRecordedDataState(struct soap*, RecordingBindingService*);

int RecordingBindingService::dispatch()
{	return dispatch(this->soap);
}

int RecordingBindingService::dispatch(struct soap* soap)
{	RecordingBindingService_init(soap->imode, soap->omode);
	soap_peek_element(soap);
	if (!soap_match_tag(soap, soap->tag, "recordingcontrol:GetServiceCapabilities"))
		return serve___recordingcontrol__GetServiceCapabilities(soap, this);
	if (!soap_match_tag(soap, soap->tag, "recordingcontrol:CreateRecording"))
		return serve___recordingcontrol__CreateRecording(soap, this);
	if (!soap_match_tag(soap, soap->tag, "recordingcontrol:DeleteRecording"))
		return serve___recordingcontrol__DeleteRecording(soap, this);
	if (!soap_match_tag(soap, soap->tag, "recordingcontrol:GetRecordings"))
		return serve___recordingcontrol__GetRecordings(soap, this);
	if (!soap_match_tag(soap, soap->tag, "recordingcontrol:SetRecordingConfiguration"))
		return serve___recordingcontrol__SetRecordingConfiguration(soap, this);
	if (!soap_match_tag(soap, soap->tag, "recordingcontrol:GetRecordingConfiguration"))
		return serve___recordingcontrol__GetRecordingConfiguration(soap, this);
	if (!soap_match_tag(soap, soap->tag, "recordingcontrol:GetRecordingOptions"))
		return serve___recordingcontrol__GetRecordingOptions(soap, this);
	if (!soap_match_tag(soap, soap->tag, "recordingcontrol:CreateTrack"))
		return serve___recordingcontrol__CreateTrack(soap, this);
	if (!soap_match_tag(soap, soap->tag, "recordingcontrol:DeleteTrack"))
		return serve___recordingcontrol__DeleteTrack(soap, this);
	if (!soap_match_tag(soap, soap->tag, "recordingcontrol:GetTrackConfiguration"))
		return serve___recordingcontrol__GetTrackConfiguration(soap, this);
	if (!soap_match_tag(soap, soap->tag, "recordingcontrol:SetTrackConfiguration"))
		return serve___recordingcontrol__SetTrackConfiguration(soap, this);
	if (!soap_match_tag(soap, soap->tag, "recordingcontrol:CreateRecordingJob"))
		return serve___recordingcontrol__CreateRecordingJob(soap, this);
	if (!soap_match_tag(soap, soap->tag, "recordingcontrol:DeleteRecordingJob"))
		return serve___recordingcontrol__DeleteRecordingJob(soap, this);
	if (!soap_match_tag(soap, soap->tag, "recordingcontrol:GetRecordingJobs"))
		return serve___recordingcontrol__GetRecordingJobs(soap, this);
	if (!soap_match_tag(soap, soap->tag, "recordingcontrol:SetRecordingJobConfiguration"))
		return serve___recordingcontrol__SetRecordingJobConfiguration(soap, this);
	if (!soap_match_tag(soap, soap->tag, "recordingcontrol:GetRecordingJobConfiguration"))
		return serve___recordingcontrol__GetRecordingJobConfiguration(soap, this);
	if (!soap_match_tag(soap, soap->tag, "recordingcontrol:SetRecordingJobMode"))
		return serve___recordingcontrol__SetRecordingJobMode(soap, this);
	if (!soap_match_tag(soap, soap->tag, "recordingcontrol:GetRecordingJobState"))
		return serve___recordingcontrol__GetRecordingJobState(soap, this);
	if (!soap_match_tag(soap, soap->tag, "recordingcontrol:ExportRecordedData"))
		return serve___recordingcontrol__ExportRecordedData(soap, this);
	if (!soap_match_tag(soap, soap->tag, "recordingcontrol:StopExportRecordedData"))
		return serve___recordingcontrol__StopExportRecordedData(soap, this);
	if (!soap_match_tag(soap, soap->tag, "recordingcontrol:GetExportRecordedDataState"))
		return serve___recordingcontrol__GetExportRecordedDataState(soap, this);
	return soap->error = SOAP_NO_METHOD;
}

static int serve___recordingcontrol__GetServiceCapabilities(struct soap *soap, RecordingBindingService *service)
{	struct __recordingcontrol__GetServiceCapabilities soap_tmp___recordingcontrol__GetServiceCapabilities;
	_recordingcontrol__GetServiceCapabilitiesResponse recordingcontrol__GetServiceCapabilitiesResponse;
	recordingcontrol__GetServiceCapabilitiesResponse.soap_default(soap);
	soap_default___recordingcontrol__GetServiceCapabilities(soap, &soap_tmp___recordingcontrol__GetServiceCapabilities);
	if (!soap_get___recordingcontrol__GetServiceCapabilities(soap, &soap_tmp___recordingcontrol__GetServiceCapabilities, "-recordingcontrol:GetServiceCapabilities", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = service->GetServiceCapabilities(soap_tmp___recordingcontrol__GetServiceCapabilities.recordingcontrol__GetServiceCapabilities, recordingcontrol__GetServiceCapabilitiesResponse);
	if (soap->error)
		return soap->error;
	soap->encodingStyle = NULL;
	soap_serializeheader(soap);
	recordingcontrol__GetServiceCapabilitiesResponse.soap_serialize(soap);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || recordingcontrol__GetServiceCapabilitiesResponse.soap_put(soap, "recordingcontrol:GetServiceCapabilitiesResponse", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || recordingcontrol__GetServiceCapabilitiesResponse.soap_put(soap, "recordingcontrol:GetServiceCapabilitiesResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}

static int serve___recordingcontrol__CreateRecording(struct soap *soap, RecordingBindingService *service)
{	struct __recordingcontrol__CreateRecording soap_tmp___recordingcontrol__CreateRecording;
	_recordingcontrol__CreateRecordingResponse recordingcontrol__CreateRecordingResponse;
	recordingcontrol__CreateRecordingResponse.soap_default(soap);
	soap_default___recordingcontrol__CreateRecording(soap, &soap_tmp___recordingcontrol__CreateRecording);
	if (!soap_get___recordingcontrol__CreateRecording(soap, &soap_tmp___recordingcontrol__CreateRecording, "-recordingcontrol:CreateRecording", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = service->CreateRecording(soap_tmp___recordingcontrol__CreateRecording.recordingcontrol__CreateRecording, recordingcontrol__CreateRecordingResponse);
	if (soap->error)
		return soap->error;
	soap->encodingStyle = NULL;
	soap_serializeheader(soap);
	recordingcontrol__CreateRecordingResponse.soap_serialize(soap);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || recordingcontrol__CreateRecordingResponse.soap_put(soap, "recordingcontrol:CreateRecordingResponse", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || recordingcontrol__CreateRecordingResponse.soap_put(soap, "recordingcontrol:CreateRecordingResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}

static int serve___recordingcontrol__DeleteRecording(struct soap *soap, RecordingBindingService *service)
{	struct __recordingcontrol__DeleteRecording soap_tmp___recordingcontrol__DeleteRecording;
	_recordingcontrol__DeleteRecordingResponse recordingcontrol__DeleteRecordingResponse;
	recordingcontrol__DeleteRecordingResponse.soap_default(soap);
	soap_default___recordingcontrol__DeleteRecording(soap, &soap_tmp___recordingcontrol__DeleteRecording);
	if (!soap_get___recordingcontrol__DeleteRecording(soap, &soap_tmp___recordingcontrol__DeleteRecording, "-recordingcontrol:DeleteRecording", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = service->DeleteRecording(soap_tmp___recordingcontrol__DeleteRecording.recordingcontrol__DeleteRecording, recordingcontrol__DeleteRecordingResponse);
	if (soap->error)
		return soap->error;
	soap->encodingStyle = NULL;
	soap_serializeheader(soap);
	recordingcontrol__DeleteRecordingResponse.soap_serialize(soap);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || recordingcontrol__DeleteRecordingResponse.soap_put(soap, "recordingcontrol:DeleteRecordingResponse", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || recordingcontrol__DeleteRecordingResponse.soap_put(soap, "recordingcontrol:DeleteRecordingResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}

static int serve___recordingcontrol__GetRecordings(struct soap *soap, RecordingBindingService *service)
{	struct __recordingcontrol__GetRecordings soap_tmp___recordingcontrol__GetRecordings;
	_recordingcontrol__GetRecordingsResponse recordingcontrol__GetRecordingsResponse;
	recordingcontrol__GetRecordingsResponse.soap_default(soap);
	soap_default___recordingcontrol__GetRecordings(soap, &soap_tmp___recordingcontrol__GetRecordings);
	if (!soap_get___recordingcontrol__GetRecordings(soap, &soap_tmp___recordingcontrol__GetRecordings, "-recordingcontrol:GetRecordings", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = service->GetRecordings(soap_tmp___recordingcontrol__GetRecordings.recordingcontrol__GetRecordings, recordingcontrol__GetRecordingsResponse);
	if (soap->error)
		return soap->error;
	soap->encodingStyle = NULL;
	soap_serializeheader(soap);
	recordingcontrol__GetRecordingsResponse.soap_serialize(soap);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || recordingcontrol__GetRecordingsResponse.soap_put(soap, "recordingcontrol:GetRecordingsResponse", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || recordingcontrol__GetRecordingsResponse.soap_put(soap, "recordingcontrol:GetRecordingsResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}

static int serve___recordingcontrol__SetRecordingConfiguration(struct soap *soap, RecordingBindingService *service)
{	struct __recordingcontrol__SetRecordingConfiguration soap_tmp___recordingcontrol__SetRecordingConfiguration;
	_recordingcontrol__SetRecordingConfigurationResponse recordingcontrol__SetRecordingConfigurationResponse;
	recordingcontrol__SetRecordingConfigurationResponse.soap_default(soap);
	soap_default___recordingcontrol__SetRecordingConfiguration(soap, &soap_tmp___recordingcontrol__SetRecordingConfiguration);
	if (!soap_get___recordingcontrol__SetRecordingConfiguration(soap, &soap_tmp___recordingcontrol__SetRecordingConfiguration, "-recordingcontrol:SetRecordingConfiguration", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = service->SetRecordingConfiguration(soap_tmp___recordingcontrol__SetRecordingConfiguration.recordingcontrol__SetRecordingConfiguration, recordingcontrol__SetRecordingConfigurationResponse);
	if (soap->error)
		return soap->error;
	soap->encodingStyle = NULL;
	soap_serializeheader(soap);
	recordingcontrol__SetRecordingConfigurationResponse.soap_serialize(soap);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || recordingcontrol__SetRecordingConfigurationResponse.soap_put(soap, "recordingcontrol:SetRecordingConfigurationResponse", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || recordingcontrol__SetRecordingConfigurationResponse.soap_put(soap, "recordingcontrol:SetRecordingConfigurationResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}

static int serve___recordingcontrol__GetRecordingConfiguration(struct soap *soap, RecordingBindingService *service)
{	struct __recordingcontrol__GetRecordingConfiguration soap_tmp___recordingcontrol__GetRecordingConfiguration;
	_recordingcontrol__GetRecordingConfigurationResponse recordingcontrol__GetRecordingConfigurationResponse;
	recordingcontrol__GetRecordingConfigurationResponse.soap_default(soap);
	soap_default___recordingcontrol__GetRecordingConfiguration(soap, &soap_tmp___recordingcontrol__GetRecordingConfiguration);
	if (!soap_get___recordingcontrol__GetRecordingConfiguration(soap, &soap_tmp___recordingcontrol__GetRecordingConfiguration, "-recordingcontrol:GetRecordingConfiguration", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = service->GetRecordingConfiguration(soap_tmp___recordingcontrol__GetRecordingConfiguration.recordingcontrol__GetRecordingConfiguration, recordingcontrol__GetRecordingConfigurationResponse);
	if (soap->error)
		return soap->error;
	soap->encodingStyle = NULL;
	soap_serializeheader(soap);
	recordingcontrol__GetRecordingConfigurationResponse.soap_serialize(soap);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || recordingcontrol__GetRecordingConfigurationResponse.soap_put(soap, "recordingcontrol:GetRecordingConfigurationResponse", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || recordingcontrol__GetRecordingConfigurationResponse.soap_put(soap, "recordingcontrol:GetRecordingConfigurationResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}

static int serve___recordingcontrol__GetRecordingOptions(struct soap *soap, RecordingBindingService *service)
{	struct __recordingcontrol__GetRecordingOptions soap_tmp___recordingcontrol__GetRecordingOptions;
	_recordingcontrol__GetRecordingOptionsResponse recordingcontrol__GetRecordingOptionsResponse;
	recordingcontrol__GetRecordingOptionsResponse.soap_default(soap);
	soap_default___recordingcontrol__GetRecordingOptions(soap, &soap_tmp___recordingcontrol__GetRecordingOptions);
	if (!soap_get___recordingcontrol__GetRecordingOptions(soap, &soap_tmp___recordingcontrol__GetRecordingOptions, "-recordingcontrol:GetRecordingOptions", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = service->GetRecordingOptions(soap_tmp___recordingcontrol__GetRecordingOptions.recordingcontrol__GetRecordingOptions, recordingcontrol__GetRecordingOptionsResponse);
	if (soap->error)
		return soap->error;
	soap->encodingStyle = NULL;
	soap_serializeheader(soap);
	recordingcontrol__GetRecordingOptionsResponse.soap_serialize(soap);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || recordingcontrol__GetRecordingOptionsResponse.soap_put(soap, "recordingcontrol:GetRecordingOptionsResponse", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || recordingcontrol__GetRecordingOptionsResponse.soap_put(soap, "recordingcontrol:GetRecordingOptionsResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}

static int serve___recordingcontrol__CreateTrack(struct soap *soap, RecordingBindingService *service)
{	struct __recordingcontrol__CreateTrack soap_tmp___recordingcontrol__CreateTrack;
	_recordingcontrol__CreateTrackResponse recordingcontrol__CreateTrackResponse;
	recordingcontrol__CreateTrackResponse.soap_default(soap);
	soap_default___recordingcontrol__CreateTrack(soap, &soap_tmp___recordingcontrol__CreateTrack);
	if (!soap_get___recordingcontrol__CreateTrack(soap, &soap_tmp___recordingcontrol__CreateTrack, "-recordingcontrol:CreateTrack", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = service->CreateTrack(soap_tmp___recordingcontrol__CreateTrack.recordingcontrol__CreateTrack, recordingcontrol__CreateTrackResponse);
	if (soap->error)
		return soap->error;
	soap->encodingStyle = NULL;
	soap_serializeheader(soap);
	recordingcontrol__CreateTrackResponse.soap_serialize(soap);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || recordingcontrol__CreateTrackResponse.soap_put(soap, "recordingcontrol:CreateTrackResponse", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || recordingcontrol__CreateTrackResponse.soap_put(soap, "recordingcontrol:CreateTrackResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}

static int serve___recordingcontrol__DeleteTrack(struct soap *soap, RecordingBindingService *service)
{	struct __recordingcontrol__DeleteTrack soap_tmp___recordingcontrol__DeleteTrack;
	_recordingcontrol__DeleteTrackResponse recordingcontrol__DeleteTrackResponse;
	recordingcontrol__DeleteTrackResponse.soap_default(soap);
	soap_default___recordingcontrol__DeleteTrack(soap, &soap_tmp___recordingcontrol__DeleteTrack);
	if (!soap_get___recordingcontrol__DeleteTrack(soap, &soap_tmp___recordingcontrol__DeleteTrack, "-recordingcontrol:DeleteTrack", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = service->DeleteTrack(soap_tmp___recordingcontrol__DeleteTrack.recordingcontrol__DeleteTrack, recordingcontrol__DeleteTrackResponse);
	if (soap->error)
		return soap->error;
	soap->encodingStyle = NULL;
	soap_serializeheader(soap);
	recordingcontrol__DeleteTrackResponse.soap_serialize(soap);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || recordingcontrol__DeleteTrackResponse.soap_put(soap, "recordingcontrol:DeleteTrackResponse", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || recordingcontrol__DeleteTrackResponse.soap_put(soap, "recordingcontrol:DeleteTrackResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}

static int serve___recordingcontrol__GetTrackConfiguration(struct soap *soap, RecordingBindingService *service)
{	struct __recordingcontrol__GetTrackConfiguration soap_tmp___recordingcontrol__GetTrackConfiguration;
	_recordingcontrol__GetTrackConfigurationResponse recordingcontrol__GetTrackConfigurationResponse;
	recordingcontrol__GetTrackConfigurationResponse.soap_default(soap);
	soap_default___recordingcontrol__GetTrackConfiguration(soap, &soap_tmp___recordingcontrol__GetTrackConfiguration);
	if (!soap_get___recordingcontrol__GetTrackConfiguration(soap, &soap_tmp___recordingcontrol__GetTrackConfiguration, "-recordingcontrol:GetTrackConfiguration", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = service->GetTrackConfiguration(soap_tmp___recordingcontrol__GetTrackConfiguration.recordingcontrol__GetTrackConfiguration, recordingcontrol__GetTrackConfigurationResponse);
	if (soap->error)
		return soap->error;
	soap->encodingStyle = NULL;
	soap_serializeheader(soap);
	recordingcontrol__GetTrackConfigurationResponse.soap_serialize(soap);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || recordingcontrol__GetTrackConfigurationResponse.soap_put(soap, "recordingcontrol:GetTrackConfigurationResponse", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || recordingcontrol__GetTrackConfigurationResponse.soap_put(soap, "recordingcontrol:GetTrackConfigurationResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}

static int serve___recordingcontrol__SetTrackConfiguration(struct soap *soap, RecordingBindingService *service)
{	struct __recordingcontrol__SetTrackConfiguration soap_tmp___recordingcontrol__SetTrackConfiguration;
	_recordingcontrol__SetTrackConfigurationResponse recordingcontrol__SetTrackConfigurationResponse;
	recordingcontrol__SetTrackConfigurationResponse.soap_default(soap);
	soap_default___recordingcontrol__SetTrackConfiguration(soap, &soap_tmp___recordingcontrol__SetTrackConfiguration);
	if (!soap_get___recordingcontrol__SetTrackConfiguration(soap, &soap_tmp___recordingcontrol__SetTrackConfiguration, "-recordingcontrol:SetTrackConfiguration", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = service->SetTrackConfiguration(soap_tmp___recordingcontrol__SetTrackConfiguration.recordingcontrol__SetTrackConfiguration, recordingcontrol__SetTrackConfigurationResponse);
	if (soap->error)
		return soap->error;
	soap->encodingStyle = NULL;
	soap_serializeheader(soap);
	recordingcontrol__SetTrackConfigurationResponse.soap_serialize(soap);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || recordingcontrol__SetTrackConfigurationResponse.soap_put(soap, "recordingcontrol:SetTrackConfigurationResponse", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || recordingcontrol__SetTrackConfigurationResponse.soap_put(soap, "recordingcontrol:SetTrackConfigurationResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}

static int serve___recordingcontrol__CreateRecordingJob(struct soap *soap, RecordingBindingService *service)
{	struct __recordingcontrol__CreateRecordingJob soap_tmp___recordingcontrol__CreateRecordingJob;
	_recordingcontrol__CreateRecordingJobResponse recordingcontrol__CreateRecordingJobResponse;
	recordingcontrol__CreateRecordingJobResponse.soap_default(soap);
	soap_default___recordingcontrol__CreateRecordingJob(soap, &soap_tmp___recordingcontrol__CreateRecordingJob);
	if (!soap_get___recordingcontrol__CreateRecordingJob(soap, &soap_tmp___recordingcontrol__CreateRecordingJob, "-recordingcontrol:CreateRecordingJob", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = service->CreateRecordingJob(soap_tmp___recordingcontrol__CreateRecordingJob.recordingcontrol__CreateRecordingJob, recordingcontrol__CreateRecordingJobResponse);
	if (soap->error)
		return soap->error;
	soap->encodingStyle = NULL;
	soap_serializeheader(soap);
	recordingcontrol__CreateRecordingJobResponse.soap_serialize(soap);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || recordingcontrol__CreateRecordingJobResponse.soap_put(soap, "recordingcontrol:CreateRecordingJobResponse", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || recordingcontrol__CreateRecordingJobResponse.soap_put(soap, "recordingcontrol:CreateRecordingJobResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}

static int serve___recordingcontrol__DeleteRecordingJob(struct soap *soap, RecordingBindingService *service)
{	struct __recordingcontrol__DeleteRecordingJob soap_tmp___recordingcontrol__DeleteRecordingJob;
	_recordingcontrol__DeleteRecordingJobResponse recordingcontrol__DeleteRecordingJobResponse;
	recordingcontrol__DeleteRecordingJobResponse.soap_default(soap);
	soap_default___recordingcontrol__DeleteRecordingJob(soap, &soap_tmp___recordingcontrol__DeleteRecordingJob);
	if (!soap_get___recordingcontrol__DeleteRecordingJob(soap, &soap_tmp___recordingcontrol__DeleteRecordingJob, "-recordingcontrol:DeleteRecordingJob", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = service->DeleteRecordingJob(soap_tmp___recordingcontrol__DeleteRecordingJob.recordingcontrol__DeleteRecordingJob, recordingcontrol__DeleteRecordingJobResponse);
	if (soap->error)
		return soap->error;
	soap->encodingStyle = NULL;
	soap_serializeheader(soap);
	recordingcontrol__DeleteRecordingJobResponse.soap_serialize(soap);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || recordingcontrol__DeleteRecordingJobResponse.soap_put(soap, "recordingcontrol:DeleteRecordingJobResponse", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || recordingcontrol__DeleteRecordingJobResponse.soap_put(soap, "recordingcontrol:DeleteRecordingJobResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}

static int serve___recordingcontrol__GetRecordingJobs(struct soap *soap, RecordingBindingService *service)
{	struct __recordingcontrol__GetRecordingJobs soap_tmp___recordingcontrol__GetRecordingJobs;
	_recordingcontrol__GetRecordingJobsResponse recordingcontrol__GetRecordingJobsResponse;
	recordingcontrol__GetRecordingJobsResponse.soap_default(soap);
	soap_default___recordingcontrol__GetRecordingJobs(soap, &soap_tmp___recordingcontrol__GetRecordingJobs);
	if (!soap_get___recordingcontrol__GetRecordingJobs(soap, &soap_tmp___recordingcontrol__GetRecordingJobs, "-recordingcontrol:GetRecordingJobs", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = service->GetRecordingJobs(soap_tmp___recordingcontrol__GetRecordingJobs.recordingcontrol__GetRecordingJobs, recordingcontrol__GetRecordingJobsResponse);
	if (soap->error)
		return soap->error;
	soap->encodingStyle = NULL;
	soap_serializeheader(soap);
	recordingcontrol__GetRecordingJobsResponse.soap_serialize(soap);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || recordingcontrol__GetRecordingJobsResponse.soap_put(soap, "recordingcontrol:GetRecordingJobsResponse", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || recordingcontrol__GetRecordingJobsResponse.soap_put(soap, "recordingcontrol:GetRecordingJobsResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}

static int serve___recordingcontrol__SetRecordingJobConfiguration(struct soap *soap, RecordingBindingService *service)
{	struct __recordingcontrol__SetRecordingJobConfiguration soap_tmp___recordingcontrol__SetRecordingJobConfiguration;
	_recordingcontrol__SetRecordingJobConfigurationResponse recordingcontrol__SetRecordingJobConfigurationResponse;
	recordingcontrol__SetRecordingJobConfigurationResponse.soap_default(soap);
	soap_default___recordingcontrol__SetRecordingJobConfiguration(soap, &soap_tmp___recordingcontrol__SetRecordingJobConfiguration);
	if (!soap_get___recordingcontrol__SetRecordingJobConfiguration(soap, &soap_tmp___recordingcontrol__SetRecordingJobConfiguration, "-recordingcontrol:SetRecordingJobConfiguration", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = service->SetRecordingJobConfiguration(soap_tmp___recordingcontrol__SetRecordingJobConfiguration.recordingcontrol__SetRecordingJobConfiguration, recordingcontrol__SetRecordingJobConfigurationResponse);
	if (soap->error)
		return soap->error;
	soap->encodingStyle = NULL;
	soap_serializeheader(soap);
	recordingcontrol__SetRecordingJobConfigurationResponse.soap_serialize(soap);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || recordingcontrol__SetRecordingJobConfigurationResponse.soap_put(soap, "recordingcontrol:SetRecordingJobConfigurationResponse", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || recordingcontrol__SetRecordingJobConfigurationResponse.soap_put(soap, "recordingcontrol:SetRecordingJobConfigurationResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}

static int serve___recordingcontrol__GetRecordingJobConfiguration(struct soap *soap, RecordingBindingService *service)
{	struct __recordingcontrol__GetRecordingJobConfiguration soap_tmp___recordingcontrol__GetRecordingJobConfiguration;
	_recordingcontrol__GetRecordingJobConfigurationResponse recordingcontrol__GetRecordingJobConfigurationResponse;
	recordingcontrol__GetRecordingJobConfigurationResponse.soap_default(soap);
	soap_default___recordingcontrol__GetRecordingJobConfiguration(soap, &soap_tmp___recordingcontrol__GetRecordingJobConfiguration);
	if (!soap_get___recordingcontrol__GetRecordingJobConfiguration(soap, &soap_tmp___recordingcontrol__GetRecordingJobConfiguration, "-recordingcontrol:GetRecordingJobConfiguration", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = service->GetRecordingJobConfiguration(soap_tmp___recordingcontrol__GetRecordingJobConfiguration.recordingcontrol__GetRecordingJobConfiguration, recordingcontrol__GetRecordingJobConfigurationResponse);
	if (soap->error)
		return soap->error;
	soap->encodingStyle = NULL;
	soap_serializeheader(soap);
	recordingcontrol__GetRecordingJobConfigurationResponse.soap_serialize(soap);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || recordingcontrol__GetRecordingJobConfigurationResponse.soap_put(soap, "recordingcontrol:GetRecordingJobConfigurationResponse", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || recordingcontrol__GetRecordingJobConfigurationResponse.soap_put(soap, "recordingcontrol:GetRecordingJobConfigurationResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}

static int serve___recordingcontrol__SetRecordingJobMode(struct soap *soap, RecordingBindingService *service)
{	struct __recordingcontrol__SetRecordingJobMode soap_tmp___recordingcontrol__SetRecordingJobMode;
	_recordingcontrol__SetRecordingJobModeResponse recordingcontrol__SetRecordingJobModeResponse;
	recordingcontrol__SetRecordingJobModeResponse.soap_default(soap);
	soap_default___recordingcontrol__SetRecordingJobMode(soap, &soap_tmp___recordingcontrol__SetRecordingJobMode);
	if (!soap_get___recordingcontrol__SetRecordingJobMode(soap, &soap_tmp___recordingcontrol__SetRecordingJobMode, "-recordingcontrol:SetRecordingJobMode", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = service->SetRecordingJobMode(soap_tmp___recordingcontrol__SetRecordingJobMode.recordingcontrol__SetRecordingJobMode, recordingcontrol__SetRecordingJobModeResponse);
	if (soap->error)
		return soap->error;
	soap->encodingStyle = NULL;
	soap_serializeheader(soap);
	recordingcontrol__SetRecordingJobModeResponse.soap_serialize(soap);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || recordingcontrol__SetRecordingJobModeResponse.soap_put(soap, "recordingcontrol:SetRecordingJobModeResponse", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || recordingcontrol__SetRecordingJobModeResponse.soap_put(soap, "recordingcontrol:SetRecordingJobModeResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}

static int serve___recordingcontrol__GetRecordingJobState(struct soap *soap, RecordingBindingService *service)
{	struct __recordingcontrol__GetRecordingJobState soap_tmp___recordingcontrol__GetRecordingJobState;
	_recordingcontrol__GetRecordingJobStateResponse recordingcontrol__GetRecordingJobStateResponse;
	recordingcontrol__GetRecordingJobStateResponse.soap_default(soap);
	soap_default___recordingcontrol__GetRecordingJobState(soap, &soap_tmp___recordingcontrol__GetRecordingJobState);
	if (!soap_get___recordingcontrol__GetRecordingJobState(soap, &soap_tmp___recordingcontrol__GetRecordingJobState, "-recordingcontrol:GetRecordingJobState", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = service->GetRecordingJobState(soap_tmp___recordingcontrol__GetRecordingJobState.recordingcontrol__GetRecordingJobState, recordingcontrol__GetRecordingJobStateResponse);
	if (soap->error)
		return soap->error;
	soap->encodingStyle = NULL;
	soap_serializeheader(soap);
	recordingcontrol__GetRecordingJobStateResponse.soap_serialize(soap);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || recordingcontrol__GetRecordingJobStateResponse.soap_put(soap, "recordingcontrol:GetRecordingJobStateResponse", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || recordingcontrol__GetRecordingJobStateResponse.soap_put(soap, "recordingcontrol:GetRecordingJobStateResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}

static int serve___recordingcontrol__ExportRecordedData(struct soap *soap, RecordingBindingService *service)
{	struct __recordingcontrol__ExportRecordedData soap_tmp___recordingcontrol__ExportRecordedData;
	_recordingcontrol__ExportRecordedDataResponse recordingcontrol__ExportRecordedDataResponse;
	recordingcontrol__ExportRecordedDataResponse.soap_default(soap);
	soap_default___recordingcontrol__ExportRecordedData(soap, &soap_tmp___recordingcontrol__ExportRecordedData);
	if (!soap_get___recordingcontrol__ExportRecordedData(soap, &soap_tmp___recordingcontrol__ExportRecordedData, "-recordingcontrol:ExportRecordedData", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = service->ExportRecordedData(soap_tmp___recordingcontrol__ExportRecordedData.recordingcontrol__ExportRecordedData, recordingcontrol__ExportRecordedDataResponse);
	if (soap->error)
		return soap->error;
	soap->encodingStyle = NULL;
	soap_serializeheader(soap);
	recordingcontrol__ExportRecordedDataResponse.soap_serialize(soap);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || recordingcontrol__ExportRecordedDataResponse.soap_put(soap, "recordingcontrol:ExportRecordedDataResponse", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || recordingcontrol__ExportRecordedDataResponse.soap_put(soap, "recordingcontrol:ExportRecordedDataResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}

static int serve___recordingcontrol__StopExportRecordedData(struct soap *soap, RecordingBindingService *service)
{	struct __recordingcontrol__StopExportRecordedData soap_tmp___recordingcontrol__StopExportRecordedData;
	_recordingcontrol__StopExportRecordedDataResponse recordingcontrol__StopExportRecordedDataResponse;
	recordingcontrol__StopExportRecordedDataResponse.soap_default(soap);
	soap_default___recordingcontrol__StopExportRecordedData(soap, &soap_tmp___recordingcontrol__StopExportRecordedData);
	if (!soap_get___recordingcontrol__StopExportRecordedData(soap, &soap_tmp___recordingcontrol__StopExportRecordedData, "-recordingcontrol:StopExportRecordedData", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = service->StopExportRecordedData(soap_tmp___recordingcontrol__StopExportRecordedData.recordingcontrol__StopExportRecordedData, recordingcontrol__StopExportRecordedDataResponse);
	if (soap->error)
		return soap->error;
	soap->encodingStyle = NULL;
	soap_serializeheader(soap);
	recordingcontrol__StopExportRecordedDataResponse.soap_serialize(soap);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || recordingcontrol__StopExportRecordedDataResponse.soap_put(soap, "recordingcontrol:StopExportRecordedDataResponse", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || recordingcontrol__StopExportRecordedDataResponse.soap_put(soap, "recordingcontrol:StopExportRecordedDataResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}

static int serve___recordingcontrol__GetExportRecordedDataState(struct soap *soap, RecordingBindingService *service)
{	struct __recordingcontrol__GetExportRecordedDataState soap_tmp___recordingcontrol__GetExportRecordedDataState;
	_recordingcontrol__GetExportRecordedDataStateResponse recordingcontrol__GetExportRecordedDataStateResponse;
	recordingcontrol__GetExportRecordedDataStateResponse.soap_default(soap);
	soap_default___recordingcontrol__GetExportRecordedDataState(soap, &soap_tmp___recordingcontrol__GetExportRecordedDataState);
	if (!soap_get___recordingcontrol__GetExportRecordedDataState(soap, &soap_tmp___recordingcontrol__GetExportRecordedDataState, "-recordingcontrol:GetExportRecordedDataState", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = service->GetExportRecordedDataState(soap_tmp___recordingcontrol__GetExportRecordedDataState.recordingcontrol__GetExportRecordedDataState, recordingcontrol__GetExportRecordedDataStateResponse);
	if (soap->error)
		return soap->error;
	soap->encodingStyle = NULL;
	soap_serializeheader(soap);
	recordingcontrol__GetExportRecordedDataStateResponse.soap_serialize(soap);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || recordingcontrol__GetExportRecordedDataStateResponse.soap_put(soap, "recordingcontrol:GetExportRecordedDataStateResponse", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || recordingcontrol__GetExportRecordedDataStateResponse.soap_put(soap, "recordingcontrol:GetExportRecordedDataStateResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}
/* End of server object code */
