/* onvifrecordingcontrolRecordingBindingService.h
   Generated by gSOAP 2.8.22 from rcx.h

Copyright(C) 2000-2015, Robert van Engelen, Genivia Inc. All Rights Reserved.
The generated code is released under one of the following licenses:
GPL or Genivia's license for commercial use.
This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
*/

#ifndef onvifrecordingcontrolRecordingBindingService_H
#define onvifrecordingcontrolRecordingBindingService_H
#include "onvifrecordingcontrolH.h"
class SOAP_CMAC RecordingBindingService
{ public:
	struct soap *soap;
	bool soap_own;
	/// Variables globally declared in rcx.h (non-static)
	/// Constructor
	RecordingBindingService();
	/// Constructor to use/share an engine state
	RecordingBindingService(struct soap*);
	/// Constructor with engine input+output mode control
	RecordingBindingService(soap_mode iomode);
	/// Constructor with engine input and output mode control
	RecordingBindingService(soap_mode imode, soap_mode omode);
	/// Destructor, also frees all deserialized data
	virtual ~RecordingBindingService();
	/// Delete all deserialized data (with soap_destroy and soap_end)
	virtual	void destroy();
	/// Delete all deserialized data and reset to defaults
	virtual	void reset();
	/// Initializer used by constructor
	virtual	void RecordingBindingService_init(soap_mode imode, soap_mode omode);
	/// Create a copy
	virtual	RecordingBindingService *copy() SOAP_PURE_VIRTUAL;
	/// Close connection (normally automatic)
	virtual	int soap_close_socket();
	/// Force close connection (can kill a thread blocked on IO)
	virtual	int soap_force_close_socket();
	/// Return sender-related fault to sender
	virtual	int soap_senderfault(const char *string, const char *detailXML);
	/// Return sender-related fault with SOAP 1.2 subcode to sender
	virtual	int soap_senderfault(const char *subcodeQName, const char *string, const char *detailXML);
	/// Return receiver-related fault to sender
	virtual	int soap_receiverfault(const char *string, const char *detailXML);
	/// Return receiver-related fault with SOAP 1.2 subcode to sender
	virtual	int soap_receiverfault(const char *subcodeQName, const char *string, const char *detailXML);
	/// Print fault
	virtual	void soap_print_fault(FILE*);
#ifndef WITH_LEAN
	/// Print fault to stream
#ifndef WITH_COMPAT
	virtual	void soap_stream_fault(std::ostream&);
#endif
	/// Put fault into buffer
	virtual	char *soap_sprint_fault(char *buf, size_t len);
#endif
	/// Disables and removes SOAP Header from message
	virtual	void soap_noheader();
	/// Put SOAP Header in message
	virtual	void soap_header(char *wsa5__MessageID, struct wsa5__RelatesToType *wsa5__RelatesTo, struct wsa5__EndpointReferenceType *wsa5__From, struct wsa5__EndpointReferenceType *wsa5__ReplyTo, struct wsa5__EndpointReferenceType *wsa5__FaultTo, char *wsa5__To, char *wsa5__Action, struct chan__ChannelInstanceType *chan__ChannelInstance);
	/// Get SOAP Header structure (NULL when absent)
	virtual	const SOAP_ENV__Header *soap_header();
	/// Run simple single-thread (iterative, non-SSL) service on port until a connection error occurs (returns error code or SOAP_OK), use this->bind_flag = SO_REUSEADDR to rebind for a rerun
	virtual	int run(int port);
	/// Bind service to port (returns master socket or SOAP_INVALID_SOCKET)
	virtual	SOAP_SOCKET bind(const char *host, int port, int backlog);
	/// Accept next request (returns socket or SOAP_INVALID_SOCKET)
	virtual	SOAP_SOCKET accept();
#if defined(WITH_OPENSSL) || defined(WITH_GNUTLS)
	/// Then accept SSL handshake, when SSL is used
	virtual	int ssl_accept();
#endif
	/// Serve this request (returns error code or SOAP_OK)
	virtual	int serve();
	/// Used by serve() to dispatch a request (returns error or SOAP_OK)
	virtual	int dispatch();
	virtual	int dispatch(struct soap *soap);

	///
	/// Service operations (you should define these):
	/// Note: compile with -DWITH_PURE_VIRTUAL for pure virtual methods
	///

	/// Web service operation 'GetServiceCapabilities' (returns error code or SOAP_OK)
	virtual	int GetServiceCapabilities(_recordingcontrol__GetServiceCapabilities *recordingcontrol__GetServiceCapabilities, _recordingcontrol__GetServiceCapabilitiesResponse &recordingcontrol__GetServiceCapabilitiesResponse) SOAP_PURE_VIRTUAL;

	/// Web service operation 'CreateRecording' (returns error code or SOAP_OK)
	virtual	int CreateRecording(_recordingcontrol__CreateRecording *recordingcontrol__CreateRecording, _recordingcontrol__CreateRecordingResponse &recordingcontrol__CreateRecordingResponse) SOAP_PURE_VIRTUAL;

	/// Web service operation 'DeleteRecording' (returns error code or SOAP_OK)
	virtual	int DeleteRecording(_recordingcontrol__DeleteRecording *recordingcontrol__DeleteRecording, _recordingcontrol__DeleteRecordingResponse &recordingcontrol__DeleteRecordingResponse) SOAP_PURE_VIRTUAL;

	/// Web service operation 'GetRecordings' (returns error code or SOAP_OK)
	virtual	int GetRecordings(_recordingcontrol__GetRecordings *recordingcontrol__GetRecordings, _recordingcontrol__GetRecordingsResponse &recordingcontrol__GetRecordingsResponse) SOAP_PURE_VIRTUAL;

	/// Web service operation 'SetRecordingConfiguration' (returns error code or SOAP_OK)
	virtual	int SetRecordingConfiguration(_recordingcontrol__SetRecordingConfiguration *recordingcontrol__SetRecordingConfiguration, _recordingcontrol__SetRecordingConfigurationResponse &recordingcontrol__SetRecordingConfigurationResponse) SOAP_PURE_VIRTUAL;

	/// Web service operation 'GetRecordingConfiguration' (returns error code or SOAP_OK)
	virtual	int GetRecordingConfiguration(_recordingcontrol__GetRecordingConfiguration *recordingcontrol__GetRecordingConfiguration, _recordingcontrol__GetRecordingConfigurationResponse &recordingcontrol__GetRecordingConfigurationResponse) SOAP_PURE_VIRTUAL;

	/// Web service operation 'GetRecordingOptions' (returns error code or SOAP_OK)
	virtual	int GetRecordingOptions(_recordingcontrol__GetRecordingOptions *recordingcontrol__GetRecordingOptions, _recordingcontrol__GetRecordingOptionsResponse &recordingcontrol__GetRecordingOptionsResponse) SOAP_PURE_VIRTUAL;

	/// Web service operation 'CreateTrack' (returns error code or SOAP_OK)
	virtual	int CreateTrack(_recordingcontrol__CreateTrack *recordingcontrol__CreateTrack, _recordingcontrol__CreateTrackResponse &recordingcontrol__CreateTrackResponse) SOAP_PURE_VIRTUAL;

	/// Web service operation 'DeleteTrack' (returns error code or SOAP_OK)
	virtual	int DeleteTrack(_recordingcontrol__DeleteTrack *recordingcontrol__DeleteTrack, _recordingcontrol__DeleteTrackResponse &recordingcontrol__DeleteTrackResponse) SOAP_PURE_VIRTUAL;

	/// Web service operation 'GetTrackConfiguration' (returns error code or SOAP_OK)
	virtual	int GetTrackConfiguration(_recordingcontrol__GetTrackConfiguration *recordingcontrol__GetTrackConfiguration, _recordingcontrol__GetTrackConfigurationResponse &recordingcontrol__GetTrackConfigurationResponse) SOAP_PURE_VIRTUAL;

	/// Web service operation 'SetTrackConfiguration' (returns error code or SOAP_OK)
	virtual	int SetTrackConfiguration(_recordingcontrol__SetTrackConfiguration *recordingcontrol__SetTrackConfiguration, _recordingcontrol__SetTrackConfigurationResponse &recordingcontrol__SetTrackConfigurationResponse) SOAP_PURE_VIRTUAL;

	/// Web service operation 'CreateRecordingJob' (returns error code or SOAP_OK)
	virtual	int CreateRecordingJob(_recordingcontrol__CreateRecordingJob *recordingcontrol__CreateRecordingJob, _recordingcontrol__CreateRecordingJobResponse &recordingcontrol__CreateRecordingJobResponse) SOAP_PURE_VIRTUAL;

	/// Web service operation 'DeleteRecordingJob' (returns error code or SOAP_OK)
	virtual	int DeleteRecordingJob(_recordingcontrol__DeleteRecordingJob *recordingcontrol__DeleteRecordingJob, _recordingcontrol__DeleteRecordingJobResponse &recordingcontrol__DeleteRecordingJobResponse) SOAP_PURE_VIRTUAL;

	/// Web service operation 'GetRecordingJobs' (returns error code or SOAP_OK)
	virtual	int GetRecordingJobs(_recordingcontrol__GetRecordingJobs *recordingcontrol__GetRecordingJobs, _recordingcontrol__GetRecordingJobsResponse &recordingcontrol__GetRecordingJobsResponse) SOAP_PURE_VIRTUAL;

	/// Web service operation 'SetRecordingJobConfiguration' (returns error code or SOAP_OK)
	virtual	int SetRecordingJobConfiguration(_recordingcontrol__SetRecordingJobConfiguration *recordingcontrol__SetRecordingJobConfiguration, _recordingcontrol__SetRecordingJobConfigurationResponse &recordingcontrol__SetRecordingJobConfigurationResponse) SOAP_PURE_VIRTUAL;

	/// Web service operation 'GetRecordingJobConfiguration' (returns error code or SOAP_OK)
	virtual	int GetRecordingJobConfiguration(_recordingcontrol__GetRecordingJobConfiguration *recordingcontrol__GetRecordingJobConfiguration, _recordingcontrol__GetRecordingJobConfigurationResponse &recordingcontrol__GetRecordingJobConfigurationResponse) SOAP_PURE_VIRTUAL;

	/// Web service operation 'SetRecordingJobMode' (returns error code or SOAP_OK)
	virtual	int SetRecordingJobMode(_recordingcontrol__SetRecordingJobMode *recordingcontrol__SetRecordingJobMode, _recordingcontrol__SetRecordingJobModeResponse &recordingcontrol__SetRecordingJobModeResponse) SOAP_PURE_VIRTUAL;

	/// Web service operation 'GetRecordingJobState' (returns error code or SOAP_OK)
	virtual	int GetRecordingJobState(_recordingcontrol__GetRecordingJobState *recordingcontrol__GetRecordingJobState, _recordingcontrol__GetRecordingJobStateResponse &recordingcontrol__GetRecordingJobStateResponse) SOAP_PURE_VIRTUAL;

	/// Web service operation 'ExportRecordedData' (returns error code or SOAP_OK)
	virtual	int ExportRecordedData(_recordingcontrol__ExportRecordedData *recordingcontrol__ExportRecordedData, _recordingcontrol__ExportRecordedDataResponse &recordingcontrol__ExportRecordedDataResponse) SOAP_PURE_VIRTUAL;

	/// Web service operation 'StopExportRecordedData' (returns error code or SOAP_OK)
	virtual	int StopExportRecordedData(_recordingcontrol__StopExportRecordedData *recordingcontrol__StopExportRecordedData, _recordingcontrol__StopExportRecordedDataResponse &recordingcontrol__StopExportRecordedDataResponse) SOAP_PURE_VIRTUAL;

	/// Web service operation 'GetExportRecordedDataState' (returns error code or SOAP_OK)
	virtual	int GetExportRecordedDataState(_recordingcontrol__GetExportRecordedDataState *recordingcontrol__GetExportRecordedDataState, _recordingcontrol__GetExportRecordedDataStateResponse &recordingcontrol__GetExportRecordedDataStateResponse) SOAP_PURE_VIRTUAL;
};
#endif
