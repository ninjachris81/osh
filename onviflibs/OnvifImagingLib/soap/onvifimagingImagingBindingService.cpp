/* onvifimagingImagingBindingService.cpp
   Generated by gSOAP 2.8.22 from rcx.h

Copyright(C) 2000-2015, Robert van Engelen, Genivia Inc. All Rights Reserved.
The generated code is released under one of the following licenses:
GPL or Genivia's license for commercial use.
This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
*/

#include "onvifimagingImagingBindingService.h"

ImagingBindingService::ImagingBindingService()
{	this->soap = soap_new();
	this->soap_own = true;
	ImagingBindingService_init(SOAP_IO_DEFAULT, SOAP_IO_DEFAULT);
}

ImagingBindingService::ImagingBindingService(struct soap *_soap)
{	this->soap = _soap;
	this->soap_own = false;
	ImagingBindingService_init(_soap->imode, _soap->omode);
}

ImagingBindingService::ImagingBindingService(soap_mode iomode)
{	this->soap = soap_new();
	this->soap_own = true;
	ImagingBindingService_init(iomode, iomode);
}

ImagingBindingService::ImagingBindingService(soap_mode imode, soap_mode omode)
{	this->soap = soap_new();
	this->soap_own = true;
	ImagingBindingService_init(imode, omode);
}

ImagingBindingService::~ImagingBindingService()
{	if (this->soap_own)
		soap_free(this->soap);
}

void ImagingBindingService::ImagingBindingService_init(soap_mode imode, soap_mode omode)
{	soap_imode(this->soap, imode);
	soap_omode(this->soap, omode);
	static const struct Namespace namespaces[] =
{
	{"SOAP-ENV", "http://www.w3.org/2003/05/soap-envelope", "http://schemas.xmlsoap.org/soap/envelope/", NULL},
	{"SOAP-ENC", "http://www.w3.org/2003/05/soap-encoding", "http://schemas.xmlsoap.org/soap/encoding/", NULL},
	{"xsi", "http://www.w3.org/2001/XMLSchema-instance", "http://www.w3.org/*/XMLSchema-instance", NULL},
	{"xsd", "http://www.w3.org/2001/XMLSchema", "http://www.w3.org/*/XMLSchema", NULL},
	{"chan", "http://schemas.microsoft.com/ws/2005/02/duplex", NULL, NULL},
	{"wsa5", "http://www.w3.org/2005/08/addressing", "http://schemas.xmlsoap.org/ws/2004/08/addressing", NULL},
	{"xmime", "http://tempuri.org/xmime.xsd", NULL, NULL},
	{"xop", "http://www.w3.org/2004/08/xop/include", NULL, NULL},
	{"tt", "http://www.onvif.org/ver10/schema", NULL, NULL},
	{"wsnt", "http://docs.oasis-open.org/wsn/b-2", NULL, NULL},
	{"wsrfbf", "http://docs.oasis-open.org/wsrf/bf-2", NULL, NULL},
	{"wstop", "http://docs.oasis-open.org/wsn/t-1", NULL, NULL},
	{"imagingws", "http://www.onvif.org/ver20/imaging/wsdl", NULL, NULL},
	{NULL, NULL, NULL, NULL}
};
	soap_set_namespaces(this->soap, namespaces);
}

void ImagingBindingService::destroy()
{	soap_destroy(this->soap);
	soap_end(this->soap);
}

void ImagingBindingService::reset()
{	destroy();
	soap_done(this->soap);
	soap_initialize(this->soap);
	ImagingBindingService_init(SOAP_IO_DEFAULT, SOAP_IO_DEFAULT);
}

#ifndef WITH_PURE_VIRTUAL
ImagingBindingService *ImagingBindingService::copy()
{	ImagingBindingService *dup = SOAP_NEW_COPY(ImagingBindingService);
	if (dup)
		soap_copy_context(dup->soap, this->soap);
	return dup;
}
#endif

int ImagingBindingService::soap_close_socket()
{	return soap_closesock(this->soap);
}

int ImagingBindingService::soap_force_close_socket()
{	return soap_force_closesock(this->soap);
}

int ImagingBindingService::soap_senderfault(const char *string, const char *detailXML)
{	return ::soap_sender_fault(this->soap, string, detailXML);
}

int ImagingBindingService::soap_senderfault(const char *subcodeQName, const char *string, const char *detailXML)
{	return ::soap_sender_fault_subcode(this->soap, subcodeQName, string, detailXML);
}

int ImagingBindingService::soap_receiverfault(const char *string, const char *detailXML)
{	return ::soap_receiver_fault(this->soap, string, detailXML);
}

int ImagingBindingService::soap_receiverfault(const char *subcodeQName, const char *string, const char *detailXML)
{	return ::soap_receiver_fault_subcode(this->soap, subcodeQName, string, detailXML);
}

void ImagingBindingService::soap_print_fault(FILE *fd)
{	::soap_print_fault(this->soap, fd);
}

#ifndef WITH_LEAN
#ifndef WITH_COMPAT
void ImagingBindingService::soap_stream_fault(std::ostream& os)
{	::soap_stream_fault(this->soap, os);
}
#endif

char *ImagingBindingService::soap_sprint_fault(char *buf, size_t len)
{	return ::soap_sprint_fault(this->soap, buf, len);
}
#endif

void ImagingBindingService::soap_noheader()
{	this->soap->header = NULL;
}

void ImagingBindingService::soap_header(char *wsa5__MessageID, struct wsa5__RelatesToType *wsa5__RelatesTo, struct wsa5__EndpointReferenceType *wsa5__From, struct wsa5__EndpointReferenceType *wsa5__ReplyTo, struct wsa5__EndpointReferenceType *wsa5__FaultTo, char *wsa5__To, char *wsa5__Action, struct chan__ChannelInstanceType *chan__ChannelInstance)
{	::soap_header(this->soap);
	this->soap->header->wsa5__MessageID = wsa5__MessageID;
	this->soap->header->wsa5__RelatesTo = wsa5__RelatesTo;
	this->soap->header->wsa5__From = wsa5__From;
	this->soap->header->wsa5__ReplyTo = wsa5__ReplyTo;
	this->soap->header->wsa5__FaultTo = wsa5__FaultTo;
	this->soap->header->wsa5__To = wsa5__To;
	this->soap->header->wsa5__Action = wsa5__Action;
	this->soap->header->chan__ChannelInstance = chan__ChannelInstance;
}

const SOAP_ENV__Header *ImagingBindingService::soap_header()
{	return this->soap->header;
}

int ImagingBindingService::run(int port)
{	if (soap_valid_socket(this->soap->master) || soap_valid_socket(bind(NULL, port, 100)))
	{	for (;;)
		{	if (!soap_valid_socket(accept()) || serve())
				break;
			soap_destroy(this->soap);
			soap_end(this->soap);
		}
	}
	return this->soap->error;
}

SOAP_SOCKET ImagingBindingService::bind(const char *host, int port, int backlog)
{	return soap_bind(this->soap, host, port, backlog);
}

SOAP_SOCKET ImagingBindingService::accept()
{	return soap_accept(this->soap);
}

#if defined(WITH_OPENSSL) || defined(WITH_GNUTLS)
int ImagingBindingService::ssl_accept()
{	return soap_ssl_accept(this->soap);
}
#endif

int ImagingBindingService::serve()
{
#ifndef WITH_FASTCGI
	unsigned int k = this->soap->max_keep_alive;
#endif
	do
	{

#ifndef WITH_FASTCGI
		if (this->soap->max_keep_alive > 0 && !--k)
			this->soap->keep_alive = 0;
#endif

		if (soap_begin_serve(this->soap))
		{	if (this->soap->error >= SOAP_STOP)
				continue;
			return this->soap->error;
		}
		if (dispatch() || (this->soap->fserveloop && this->soap->fserveloop(this->soap)))
		{
#ifdef WITH_FASTCGI
			soap_send_fault(this->soap);
#else
			return soap_send_fault(this->soap);
#endif
		}

#ifdef WITH_FASTCGI
		soap_destroy(this->soap);
		soap_end(this->soap);
	} while (1);
#else
	} while (this->soap->keep_alive);
#endif
	return SOAP_OK;
}

static int serve___imagingws__GetServiceCapabilities(struct soap*, ImagingBindingService*);
static int serve___imagingws__GetImagingSettings(struct soap*, ImagingBindingService*);
static int serve___imagingws__SetImagingSettings(struct soap*, ImagingBindingService*);
static int serve___imagingws__GetOptions(struct soap*, ImagingBindingService*);
static int serve___imagingws__Move(struct soap*, ImagingBindingService*);
static int serve___imagingws__Stop(struct soap*, ImagingBindingService*);
static int serve___imagingws__GetStatus(struct soap*, ImagingBindingService*);
static int serve___imagingws__GetMoveOptions(struct soap*, ImagingBindingService*);

int ImagingBindingService::dispatch()
{	return dispatch(this->soap);
}

int ImagingBindingService::dispatch(struct soap* soap)
{	ImagingBindingService_init(soap->imode, soap->omode);
	soap_peek_element(soap);
	if (!soap_match_tag(soap, soap->tag, "imagingws:GetServiceCapabilities"))
		return serve___imagingws__GetServiceCapabilities(soap, this);
	if (!soap_match_tag(soap, soap->tag, "imagingws:GetImagingSettings"))
		return serve___imagingws__GetImagingSettings(soap, this);
	if (!soap_match_tag(soap, soap->tag, "imagingws:SetImagingSettings"))
		return serve___imagingws__SetImagingSettings(soap, this);
	if (!soap_match_tag(soap, soap->tag, "imagingws:GetOptions"))
		return serve___imagingws__GetOptions(soap, this);
	if (!soap_match_tag(soap, soap->tag, "imagingws:Move"))
		return serve___imagingws__Move(soap, this);
	if (!soap_match_tag(soap, soap->tag, "imagingws:Stop"))
		return serve___imagingws__Stop(soap, this);
	if (!soap_match_tag(soap, soap->tag, "imagingws:GetStatus"))
		return serve___imagingws__GetStatus(soap, this);
	if (!soap_match_tag(soap, soap->tag, "imagingws:GetMoveOptions"))
		return serve___imagingws__GetMoveOptions(soap, this);
	return soap->error = SOAP_NO_METHOD;
}

static int serve___imagingws__GetServiceCapabilities(struct soap *soap, ImagingBindingService *service)
{	struct __imagingws__GetServiceCapabilities soap_tmp___imagingws__GetServiceCapabilities;
	_imagingws__GetServiceCapabilitiesResponse imagingws__GetServiceCapabilitiesResponse;
	imagingws__GetServiceCapabilitiesResponse.soap_default(soap);
	soap_default___imagingws__GetServiceCapabilities(soap, &soap_tmp___imagingws__GetServiceCapabilities);
	if (!soap_get___imagingws__GetServiceCapabilities(soap, &soap_tmp___imagingws__GetServiceCapabilities, "-imagingws:GetServiceCapabilities", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = service->GetServiceCapabilities(soap_tmp___imagingws__GetServiceCapabilities.imagingws__GetServiceCapabilities, imagingws__GetServiceCapabilitiesResponse);
	if (soap->error)
		return soap->error;
	soap->encodingStyle = NULL;
	soap_serializeheader(soap);
	imagingws__GetServiceCapabilitiesResponse.soap_serialize(soap);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || imagingws__GetServiceCapabilitiesResponse.soap_put(soap, "imagingws:GetServiceCapabilitiesResponse", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || imagingws__GetServiceCapabilitiesResponse.soap_put(soap, "imagingws:GetServiceCapabilitiesResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}

static int serve___imagingws__GetImagingSettings(struct soap *soap, ImagingBindingService *service)
{	struct __imagingws__GetImagingSettings soap_tmp___imagingws__GetImagingSettings;
	_imagingws__GetImagingSettingsResponse imagingws__GetImagingSettingsResponse;
	imagingws__GetImagingSettingsResponse.soap_default(soap);
	soap_default___imagingws__GetImagingSettings(soap, &soap_tmp___imagingws__GetImagingSettings);
	if (!soap_get___imagingws__GetImagingSettings(soap, &soap_tmp___imagingws__GetImagingSettings, "-imagingws:GetImagingSettings", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = service->GetImagingSettings(soap_tmp___imagingws__GetImagingSettings.imagingws__GetImagingSettings, imagingws__GetImagingSettingsResponse);
	if (soap->error)
		return soap->error;
	soap->encodingStyle = NULL;
	soap_serializeheader(soap);
	imagingws__GetImagingSettingsResponse.soap_serialize(soap);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || imagingws__GetImagingSettingsResponse.soap_put(soap, "imagingws:GetImagingSettingsResponse", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || imagingws__GetImagingSettingsResponse.soap_put(soap, "imagingws:GetImagingSettingsResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}

static int serve___imagingws__SetImagingSettings(struct soap *soap, ImagingBindingService *service)
{	struct __imagingws__SetImagingSettings soap_tmp___imagingws__SetImagingSettings;
	_imagingws__SetImagingSettingsResponse imagingws__SetImagingSettingsResponse;
	imagingws__SetImagingSettingsResponse.soap_default(soap);
	soap_default___imagingws__SetImagingSettings(soap, &soap_tmp___imagingws__SetImagingSettings);
	if (!soap_get___imagingws__SetImagingSettings(soap, &soap_tmp___imagingws__SetImagingSettings, "-imagingws:SetImagingSettings", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = service->SetImagingSettings(soap_tmp___imagingws__SetImagingSettings.imagingws__SetImagingSettings, imagingws__SetImagingSettingsResponse);
	if (soap->error)
		return soap->error;
	soap->encodingStyle = NULL;
	soap_serializeheader(soap);
	imagingws__SetImagingSettingsResponse.soap_serialize(soap);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || imagingws__SetImagingSettingsResponse.soap_put(soap, "imagingws:SetImagingSettingsResponse", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || imagingws__SetImagingSettingsResponse.soap_put(soap, "imagingws:SetImagingSettingsResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}

static int serve___imagingws__GetOptions(struct soap *soap, ImagingBindingService *service)
{	struct __imagingws__GetOptions soap_tmp___imagingws__GetOptions;
	_imagingws__GetOptionsResponse imagingws__GetOptionsResponse;
	imagingws__GetOptionsResponse.soap_default(soap);
	soap_default___imagingws__GetOptions(soap, &soap_tmp___imagingws__GetOptions);
	if (!soap_get___imagingws__GetOptions(soap, &soap_tmp___imagingws__GetOptions, "-imagingws:GetOptions", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = service->GetOptions(soap_tmp___imagingws__GetOptions.imagingws__GetOptions, imagingws__GetOptionsResponse);
	if (soap->error)
		return soap->error;
	soap->encodingStyle = NULL;
	soap_serializeheader(soap);
	imagingws__GetOptionsResponse.soap_serialize(soap);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || imagingws__GetOptionsResponse.soap_put(soap, "imagingws:GetOptionsResponse", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || imagingws__GetOptionsResponse.soap_put(soap, "imagingws:GetOptionsResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}

static int serve___imagingws__Move(struct soap *soap, ImagingBindingService *service)
{	struct __imagingws__Move soap_tmp___imagingws__Move;
	_imagingws__MoveResponse imagingws__MoveResponse;
	imagingws__MoveResponse.soap_default(soap);
	soap_default___imagingws__Move(soap, &soap_tmp___imagingws__Move);
	if (!soap_get___imagingws__Move(soap, &soap_tmp___imagingws__Move, "-imagingws:Move", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = service->Move(soap_tmp___imagingws__Move.imagingws__Move, imagingws__MoveResponse);
	if (soap->error)
		return soap->error;
	soap->encodingStyle = NULL;
	soap_serializeheader(soap);
	imagingws__MoveResponse.soap_serialize(soap);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || imagingws__MoveResponse.soap_put(soap, "imagingws:MoveResponse", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || imagingws__MoveResponse.soap_put(soap, "imagingws:MoveResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}

static int serve___imagingws__Stop(struct soap *soap, ImagingBindingService *service)
{	struct __imagingws__Stop soap_tmp___imagingws__Stop;
	_imagingws__StopResponse imagingws__StopResponse;
	imagingws__StopResponse.soap_default(soap);
	soap_default___imagingws__Stop(soap, &soap_tmp___imagingws__Stop);
	if (!soap_get___imagingws__Stop(soap, &soap_tmp___imagingws__Stop, "-imagingws:Stop", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = service->Stop(soap_tmp___imagingws__Stop.imagingws__Stop, imagingws__StopResponse);
	if (soap->error)
		return soap->error;
	soap->encodingStyle = NULL;
	soap_serializeheader(soap);
	imagingws__StopResponse.soap_serialize(soap);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || imagingws__StopResponse.soap_put(soap, "imagingws:StopResponse", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || imagingws__StopResponse.soap_put(soap, "imagingws:StopResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}

static int serve___imagingws__GetStatus(struct soap *soap, ImagingBindingService *service)
{	struct __imagingws__GetStatus soap_tmp___imagingws__GetStatus;
	_imagingws__GetStatusResponse imagingws__GetStatusResponse;
	imagingws__GetStatusResponse.soap_default(soap);
	soap_default___imagingws__GetStatus(soap, &soap_tmp___imagingws__GetStatus);
	if (!soap_get___imagingws__GetStatus(soap, &soap_tmp___imagingws__GetStatus, "-imagingws:GetStatus", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = service->GetStatus(soap_tmp___imagingws__GetStatus.imagingws__GetStatus, imagingws__GetStatusResponse);
	if (soap->error)
		return soap->error;
	soap->encodingStyle = NULL;
	soap_serializeheader(soap);
	imagingws__GetStatusResponse.soap_serialize(soap);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || imagingws__GetStatusResponse.soap_put(soap, "imagingws:GetStatusResponse", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || imagingws__GetStatusResponse.soap_put(soap, "imagingws:GetStatusResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}

static int serve___imagingws__GetMoveOptions(struct soap *soap, ImagingBindingService *service)
{	struct __imagingws__GetMoveOptions soap_tmp___imagingws__GetMoveOptions;
	_imagingws__GetMoveOptionsResponse imagingws__GetMoveOptionsResponse;
	imagingws__GetMoveOptionsResponse.soap_default(soap);
	soap_default___imagingws__GetMoveOptions(soap, &soap_tmp___imagingws__GetMoveOptions);
	if (!soap_get___imagingws__GetMoveOptions(soap, &soap_tmp___imagingws__GetMoveOptions, "-imagingws:GetMoveOptions", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = service->GetMoveOptions(soap_tmp___imagingws__GetMoveOptions.imagingws__GetMoveOptions, imagingws__GetMoveOptionsResponse);
	if (soap->error)
		return soap->error;
	soap->encodingStyle = NULL;
	soap_serializeheader(soap);
	imagingws__GetMoveOptionsResponse.soap_serialize(soap);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || imagingws__GetMoveOptionsResponse.soap_put(soap, "imagingws:GetMoveOptionsResponse", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || imagingws__GetMoveOptionsResponse.soap_put(soap, "imagingws:GetMoveOptionsResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}
/* End of server object code */
