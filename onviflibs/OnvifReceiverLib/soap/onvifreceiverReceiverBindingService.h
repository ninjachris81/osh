/* onvifreceiverReceiverBindingService.h
   Generated by gSOAP 2.8.22 from rcx.h

Copyright(C) 2000-2015, Robert van Engelen, Genivia Inc. All Rights Reserved.
The generated code is released under one of the following licenses:
GPL or Genivia's license for commercial use.
This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
*/

#ifndef onvifreceiverReceiverBindingService_H
#define onvifreceiverReceiverBindingService_H
#include "onvifreceiverH.h"
class SOAP_CMAC ReceiverBindingService
{ public:
	struct soap *soap;
	bool soap_own;
	/// Variables globally declared in rcx.h (non-static)
	/// Constructor
	ReceiverBindingService();
	/// Constructor to use/share an engine state
	ReceiverBindingService(struct soap*);
	/// Constructor with engine input+output mode control
	ReceiverBindingService(soap_mode iomode);
	/// Constructor with engine input and output mode control
	ReceiverBindingService(soap_mode imode, soap_mode omode);
	/// Destructor, also frees all deserialized data
	virtual ~ReceiverBindingService();
	/// Delete all deserialized data (with soap_destroy and soap_end)
	virtual	void destroy();
	/// Delete all deserialized data and reset to defaults
	virtual	void reset();
	/// Initializer used by constructor
	virtual	void ReceiverBindingService_init(soap_mode imode, soap_mode omode);
	/// Create a copy
	virtual	ReceiverBindingService *copy() SOAP_PURE_VIRTUAL;
	/// Close connection (normally automatic)
	virtual	int soap_close_socket();
	/// Force close connection (can kill a thread blocked on IO)
	virtual	int soap_force_close_socket();
	/// Return sender-related fault to sender
	virtual	int soap_senderfault(const char *string, const char *detailXML);
	/// Return sender-related fault with SOAP 1.2 subcode to sender
	virtual	int soap_senderfault(const char *subcodeQName, const char *string, const char *detailXML);
	/// Return receiver-related fault to sender
	virtual	int soap_receiverfault(const char *string, const char *detailXML);
	/// Return receiver-related fault with SOAP 1.2 subcode to sender
	virtual	int soap_receiverfault(const char *subcodeQName, const char *string, const char *detailXML);
	/// Print fault
	virtual	void soap_print_fault(FILE*);
#ifndef WITH_LEAN
	/// Print fault to stream
#ifndef WITH_COMPAT
	virtual	void soap_stream_fault(std::ostream&);
#endif
	/// Put fault into buffer
	virtual	char *soap_sprint_fault(char *buf, size_t len);
#endif
	/// Disables and removes SOAP Header from message
	virtual	void soap_noheader();
	/// Put SOAP Header in message
	virtual	void soap_header(char *wsa5__MessageID, struct wsa5__RelatesToType *wsa5__RelatesTo, struct wsa5__EndpointReferenceType *wsa5__From, struct wsa5__EndpointReferenceType *wsa5__ReplyTo, struct wsa5__EndpointReferenceType *wsa5__FaultTo, char *wsa5__To, char *wsa5__Action, struct chan__ChannelInstanceType *chan__ChannelInstance);
	/// Get SOAP Header structure (NULL when absent)
	virtual	const SOAP_ENV__Header *soap_header();
	/// Run simple single-thread (iterative, non-SSL) service on port until a connection error occurs (returns error code or SOAP_OK), use this->bind_flag = SO_REUSEADDR to rebind for a rerun
	virtual	int run(int port);
	/// Bind service to port (returns master socket or SOAP_INVALID_SOCKET)
	virtual	SOAP_SOCKET bind(const char *host, int port, int backlog);
	/// Accept next request (returns socket or SOAP_INVALID_SOCKET)
	virtual	SOAP_SOCKET accept();
#if defined(WITH_OPENSSL) || defined(WITH_GNUTLS)
	/// Then accept SSL handshake, when SSL is used
	virtual	int ssl_accept();
#endif
	/// Serve this request (returns error code or SOAP_OK)
	virtual	int serve();
	/// Used by serve() to dispatch a request (returns error or SOAP_OK)
	virtual	int dispatch();
	virtual	int dispatch(struct soap *soap);

	///
	/// Service operations (you should define these):
	/// Note: compile with -DWITH_PURE_VIRTUAL for pure virtual methods
	///

	/// Web service operation 'GetServiceCapabilities' (returns error code or SOAP_OK)
	virtual	int GetServiceCapabilities(_receiverws__GetServiceCapabilities *receiverws__GetServiceCapabilities, _receiverws__GetServiceCapabilitiesResponse &receiverws__GetServiceCapabilitiesResponse) SOAP_PURE_VIRTUAL;

	/// Web service operation 'GetReceivers' (returns error code or SOAP_OK)
	virtual	int GetReceivers(_receiverws__GetReceivers *receiverws__GetReceivers, _receiverws__GetReceiversResponse &receiverws__GetReceiversResponse) SOAP_PURE_VIRTUAL;

	/// Web service operation 'GetReceiver' (returns error code or SOAP_OK)
	virtual	int GetReceiver(_receiverws__GetReceiver *receiverws__GetReceiver, _receiverws__GetReceiverResponse &receiverws__GetReceiverResponse) SOAP_PURE_VIRTUAL;

	/// Web service operation 'CreateReceiver' (returns error code or SOAP_OK)
	virtual	int CreateReceiver(_receiverws__CreateReceiver *receiverws__CreateReceiver, _receiverws__CreateReceiverResponse &receiverws__CreateReceiverResponse) SOAP_PURE_VIRTUAL;

	/// Web service operation 'DeleteReceiver' (returns error code or SOAP_OK)
	virtual	int DeleteReceiver(_receiverws__DeleteReceiver *receiverws__DeleteReceiver, _receiverws__DeleteReceiverResponse &receiverws__DeleteReceiverResponse) SOAP_PURE_VIRTUAL;

	/// Web service operation 'ConfigureReceiver' (returns error code or SOAP_OK)
	virtual	int ConfigureReceiver(_receiverws__ConfigureReceiver *receiverws__ConfigureReceiver, _receiverws__ConfigureReceiverResponse &receiverws__ConfigureReceiverResponse) SOAP_PURE_VIRTUAL;

	/// Web service operation 'SetReceiverMode' (returns error code or SOAP_OK)
	virtual	int SetReceiverMode(_receiverws__SetReceiverMode *receiverws__SetReceiverMode, _receiverws__SetReceiverModeResponse &receiverws__SetReceiverModeResponse) SOAP_PURE_VIRTUAL;

	/// Web service operation 'GetReceiverState' (returns error code or SOAP_OK)
	virtual	int GetReceiverState(_receiverws__GetReceiverState *receiverws__GetReceiverState, _receiverws__GetReceiverStateResponse &receiverws__GetReceiverStateResponse) SOAP_PURE_VIRTUAL;
};
#endif
