/* onvifreceiverReceiverBindingService.cpp
   Generated by gSOAP 2.8.22 from rcx.h

Copyright(C) 2000-2015, Robert van Engelen, Genivia Inc. All Rights Reserved.
The generated code is released under one of the following licenses:
GPL or Genivia's license for commercial use.
This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
*/

#include "onvifreceiverReceiverBindingService.h"

ReceiverBindingService::ReceiverBindingService()
{	this->soap = soap_new();
	this->soap_own = true;
	ReceiverBindingService_init(SOAP_IO_DEFAULT, SOAP_IO_DEFAULT);
}

ReceiverBindingService::ReceiverBindingService(struct soap *_soap)
{	this->soap = _soap;
	this->soap_own = false;
	ReceiverBindingService_init(_soap->imode, _soap->omode);
}

ReceiverBindingService::ReceiverBindingService(soap_mode iomode)
{	this->soap = soap_new();
	this->soap_own = true;
	ReceiverBindingService_init(iomode, iomode);
}

ReceiverBindingService::ReceiverBindingService(soap_mode imode, soap_mode omode)
{	this->soap = soap_new();
	this->soap_own = true;
	ReceiverBindingService_init(imode, omode);
}

ReceiverBindingService::~ReceiverBindingService()
{	if (this->soap_own)
		soap_free(this->soap);
}

void ReceiverBindingService::ReceiverBindingService_init(soap_mode imode, soap_mode omode)
{	soap_imode(this->soap, imode);
	soap_omode(this->soap, omode);
	static const struct Namespace namespaces[] =
{
	{"SOAP-ENV", "http://www.w3.org/2003/05/soap-envelope", "http://schemas.xmlsoap.org/soap/envelope/", NULL},
	{"SOAP-ENC", "http://www.w3.org/2003/05/soap-encoding", "http://schemas.xmlsoap.org/soap/encoding/", NULL},
	{"xsi", "http://www.w3.org/2001/XMLSchema-instance", "http://www.w3.org/*/XMLSchema-instance", NULL},
	{"xsd", "http://www.w3.org/2001/XMLSchema", "http://www.w3.org/*/XMLSchema", NULL},
	{"chan", "http://schemas.microsoft.com/ws/2005/02/duplex", NULL, NULL},
	{"wsa5", "http://www.w3.org/2005/08/addressing", "http://schemas.xmlsoap.org/ws/2004/08/addressing", NULL},
	{"xmime", "http://tempuri.org/xmime.xsd", NULL, NULL},
	{"xop", "http://www.w3.org/2004/08/xop/include", NULL, NULL},
	{"tt", "http://www.onvif.org/ver10/schema", NULL, NULL},
	{"wsnt", "http://docs.oasis-open.org/wsn/b-2", NULL, NULL},
	{"wsrfbf", "http://docs.oasis-open.org/wsrf/bf-2", NULL, NULL},
	{"wstop", "http://docs.oasis-open.org/wsn/t-1", NULL, NULL},
	{"receiverws", "http://www.onvif.org/ver10/receiver/wsdl", NULL, NULL},
	{NULL, NULL, NULL, NULL}
};
	soap_set_namespaces(this->soap, namespaces);
}

void ReceiverBindingService::destroy()
{	soap_destroy(this->soap);
	soap_end(this->soap);
}

void ReceiverBindingService::reset()
{	destroy();
	soap_done(this->soap);
	soap_initialize(this->soap);
	ReceiverBindingService_init(SOAP_IO_DEFAULT, SOAP_IO_DEFAULT);
}

#ifndef WITH_PURE_VIRTUAL
ReceiverBindingService *ReceiverBindingService::copy()
{	ReceiverBindingService *dup = SOAP_NEW_COPY(ReceiverBindingService);
	if (dup)
		soap_copy_context(dup->soap, this->soap);
	return dup;
}
#endif

int ReceiverBindingService::soap_close_socket()
{	return soap_closesock(this->soap);
}

int ReceiverBindingService::soap_force_close_socket()
{	return soap_force_closesock(this->soap);
}

int ReceiverBindingService::soap_senderfault(const char *string, const char *detailXML)
{	return ::soap_sender_fault(this->soap, string, detailXML);
}

int ReceiverBindingService::soap_senderfault(const char *subcodeQName, const char *string, const char *detailXML)
{	return ::soap_sender_fault_subcode(this->soap, subcodeQName, string, detailXML);
}

int ReceiverBindingService::soap_receiverfault(const char *string, const char *detailXML)
{	return ::soap_receiver_fault(this->soap, string, detailXML);
}

int ReceiverBindingService::soap_receiverfault(const char *subcodeQName, const char *string, const char *detailXML)
{	return ::soap_receiver_fault_subcode(this->soap, subcodeQName, string, detailXML);
}

void ReceiverBindingService::soap_print_fault(FILE *fd)
{	::soap_print_fault(this->soap, fd);
}

#ifndef WITH_LEAN
#ifndef WITH_COMPAT
void ReceiverBindingService::soap_stream_fault(std::ostream& os)
{	::soap_stream_fault(this->soap, os);
}
#endif

char *ReceiverBindingService::soap_sprint_fault(char *buf, size_t len)
{	return ::soap_sprint_fault(this->soap, buf, len);
}
#endif

void ReceiverBindingService::soap_noheader()
{	this->soap->header = NULL;
}

void ReceiverBindingService::soap_header(char *wsa5__MessageID, struct wsa5__RelatesToType *wsa5__RelatesTo, struct wsa5__EndpointReferenceType *wsa5__From, struct wsa5__EndpointReferenceType *wsa5__ReplyTo, struct wsa5__EndpointReferenceType *wsa5__FaultTo, char *wsa5__To, char *wsa5__Action, struct chan__ChannelInstanceType *chan__ChannelInstance)
{	::soap_header(this->soap);
	this->soap->header->wsa5__MessageID = wsa5__MessageID;
	this->soap->header->wsa5__RelatesTo = wsa5__RelatesTo;
	this->soap->header->wsa5__From = wsa5__From;
	this->soap->header->wsa5__ReplyTo = wsa5__ReplyTo;
	this->soap->header->wsa5__FaultTo = wsa5__FaultTo;
	this->soap->header->wsa5__To = wsa5__To;
	this->soap->header->wsa5__Action = wsa5__Action;
	this->soap->header->chan__ChannelInstance = chan__ChannelInstance;
}

const SOAP_ENV__Header *ReceiverBindingService::soap_header()
{	return this->soap->header;
}

int ReceiverBindingService::run(int port)
{	if (soap_valid_socket(this->soap->master) || soap_valid_socket(bind(NULL, port, 100)))
	{	for (;;)
		{	if (!soap_valid_socket(accept()) || serve())
				break;
			soap_destroy(this->soap);
			soap_end(this->soap);
		}
	}
	return this->soap->error;
}

SOAP_SOCKET ReceiverBindingService::bind(const char *host, int port, int backlog)
{	return soap_bind(this->soap, host, port, backlog);
}

SOAP_SOCKET ReceiverBindingService::accept()
{	return soap_accept(this->soap);
}

#if defined(WITH_OPENSSL) || defined(WITH_GNUTLS)
int ReceiverBindingService::ssl_accept()
{	return soap_ssl_accept(this->soap);
}
#endif

int ReceiverBindingService::serve()
{
#ifndef WITH_FASTCGI
	unsigned int k = this->soap->max_keep_alive;
#endif
	do
	{

#ifndef WITH_FASTCGI
		if (this->soap->max_keep_alive > 0 && !--k)
			this->soap->keep_alive = 0;
#endif

		if (soap_begin_serve(this->soap))
		{	if (this->soap->error >= SOAP_STOP)
				continue;
			return this->soap->error;
		}
		if (dispatch() || (this->soap->fserveloop && this->soap->fserveloop(this->soap)))
		{
#ifdef WITH_FASTCGI
			soap_send_fault(this->soap);
#else
			return soap_send_fault(this->soap);
#endif
		}

#ifdef WITH_FASTCGI
		soap_destroy(this->soap);
		soap_end(this->soap);
	} while (1);
#else
	} while (this->soap->keep_alive);
#endif
	return SOAP_OK;
}

static int serve___receiverws__GetServiceCapabilities(struct soap*, ReceiverBindingService*);
static int serve___receiverws__GetReceivers(struct soap*, ReceiverBindingService*);
static int serve___receiverws__GetReceiver(struct soap*, ReceiverBindingService*);
static int serve___receiverws__CreateReceiver(struct soap*, ReceiverBindingService*);
static int serve___receiverws__DeleteReceiver(struct soap*, ReceiverBindingService*);
static int serve___receiverws__ConfigureReceiver(struct soap*, ReceiverBindingService*);
static int serve___receiverws__SetReceiverMode(struct soap*, ReceiverBindingService*);
static int serve___receiverws__GetReceiverState(struct soap*, ReceiverBindingService*);

int ReceiverBindingService::dispatch()
{	return dispatch(this->soap);
}

int ReceiverBindingService::dispatch(struct soap* soap)
{	ReceiverBindingService_init(soap->imode, soap->omode);
	soap_peek_element(soap);
	if (!soap_match_tag(soap, soap->tag, "receiverws:GetServiceCapabilities"))
		return serve___receiverws__GetServiceCapabilities(soap, this);
	if (!soap_match_tag(soap, soap->tag, "receiverws:GetReceivers"))
		return serve___receiverws__GetReceivers(soap, this);
	if (!soap_match_tag(soap, soap->tag, "receiverws:GetReceiver"))
		return serve___receiverws__GetReceiver(soap, this);
	if (!soap_match_tag(soap, soap->tag, "receiverws:CreateReceiver"))
		return serve___receiverws__CreateReceiver(soap, this);
	if (!soap_match_tag(soap, soap->tag, "receiverws:DeleteReceiver"))
		return serve___receiverws__DeleteReceiver(soap, this);
	if (!soap_match_tag(soap, soap->tag, "receiverws:ConfigureReceiver"))
		return serve___receiverws__ConfigureReceiver(soap, this);
	if (!soap_match_tag(soap, soap->tag, "receiverws:SetReceiverMode"))
		return serve___receiverws__SetReceiverMode(soap, this);
	if (!soap_match_tag(soap, soap->tag, "receiverws:GetReceiverState"))
		return serve___receiverws__GetReceiverState(soap, this);
	return soap->error = SOAP_NO_METHOD;
}

static int serve___receiverws__GetServiceCapabilities(struct soap *soap, ReceiverBindingService *service)
{	struct __receiverws__GetServiceCapabilities soap_tmp___receiverws__GetServiceCapabilities;
	_receiverws__GetServiceCapabilitiesResponse receiverws__GetServiceCapabilitiesResponse;
	receiverws__GetServiceCapabilitiesResponse.soap_default(soap);
	soap_default___receiverws__GetServiceCapabilities(soap, &soap_tmp___receiverws__GetServiceCapabilities);
	if (!soap_get___receiverws__GetServiceCapabilities(soap, &soap_tmp___receiverws__GetServiceCapabilities, "-receiverws:GetServiceCapabilities", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = service->GetServiceCapabilities(soap_tmp___receiverws__GetServiceCapabilities.receiverws__GetServiceCapabilities, receiverws__GetServiceCapabilitiesResponse);
	if (soap->error)
		return soap->error;
	soap->encodingStyle = NULL;
	soap_serializeheader(soap);
	receiverws__GetServiceCapabilitiesResponse.soap_serialize(soap);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || receiverws__GetServiceCapabilitiesResponse.soap_put(soap, "receiverws:GetServiceCapabilitiesResponse", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || receiverws__GetServiceCapabilitiesResponse.soap_put(soap, "receiverws:GetServiceCapabilitiesResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}

static int serve___receiverws__GetReceivers(struct soap *soap, ReceiverBindingService *service)
{	struct __receiverws__GetReceivers soap_tmp___receiverws__GetReceivers;
	_receiverws__GetReceiversResponse receiverws__GetReceiversResponse;
	receiverws__GetReceiversResponse.soap_default(soap);
	soap_default___receiverws__GetReceivers(soap, &soap_tmp___receiverws__GetReceivers);
	if (!soap_get___receiverws__GetReceivers(soap, &soap_tmp___receiverws__GetReceivers, "-receiverws:GetReceivers", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = service->GetReceivers(soap_tmp___receiverws__GetReceivers.receiverws__GetReceivers, receiverws__GetReceiversResponse);
	if (soap->error)
		return soap->error;
	soap->encodingStyle = NULL;
	soap_serializeheader(soap);
	receiverws__GetReceiversResponse.soap_serialize(soap);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || receiverws__GetReceiversResponse.soap_put(soap, "receiverws:GetReceiversResponse", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || receiverws__GetReceiversResponse.soap_put(soap, "receiverws:GetReceiversResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}

static int serve___receiverws__GetReceiver(struct soap *soap, ReceiverBindingService *service)
{	struct __receiverws__GetReceiver soap_tmp___receiverws__GetReceiver;
	_receiverws__GetReceiverResponse receiverws__GetReceiverResponse;
	receiverws__GetReceiverResponse.soap_default(soap);
	soap_default___receiverws__GetReceiver(soap, &soap_tmp___receiverws__GetReceiver);
	if (!soap_get___receiverws__GetReceiver(soap, &soap_tmp___receiverws__GetReceiver, "-receiverws:GetReceiver", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = service->GetReceiver(soap_tmp___receiverws__GetReceiver.receiverws__GetReceiver, receiverws__GetReceiverResponse);
	if (soap->error)
		return soap->error;
	soap->encodingStyle = NULL;
	soap_serializeheader(soap);
	receiverws__GetReceiverResponse.soap_serialize(soap);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || receiverws__GetReceiverResponse.soap_put(soap, "receiverws:GetReceiverResponse", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || receiverws__GetReceiverResponse.soap_put(soap, "receiverws:GetReceiverResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}

static int serve___receiverws__CreateReceiver(struct soap *soap, ReceiverBindingService *service)
{	struct __receiverws__CreateReceiver soap_tmp___receiverws__CreateReceiver;
	_receiverws__CreateReceiverResponse receiverws__CreateReceiverResponse;
	receiverws__CreateReceiverResponse.soap_default(soap);
	soap_default___receiverws__CreateReceiver(soap, &soap_tmp___receiverws__CreateReceiver);
	if (!soap_get___receiverws__CreateReceiver(soap, &soap_tmp___receiverws__CreateReceiver, "-receiverws:CreateReceiver", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = service->CreateReceiver(soap_tmp___receiverws__CreateReceiver.receiverws__CreateReceiver, receiverws__CreateReceiverResponse);
	if (soap->error)
		return soap->error;
	soap->encodingStyle = NULL;
	soap_serializeheader(soap);
	receiverws__CreateReceiverResponse.soap_serialize(soap);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || receiverws__CreateReceiverResponse.soap_put(soap, "receiverws:CreateReceiverResponse", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || receiverws__CreateReceiverResponse.soap_put(soap, "receiverws:CreateReceiverResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}

static int serve___receiverws__DeleteReceiver(struct soap *soap, ReceiverBindingService *service)
{	struct __receiverws__DeleteReceiver soap_tmp___receiverws__DeleteReceiver;
	_receiverws__DeleteReceiverResponse receiverws__DeleteReceiverResponse;
	receiverws__DeleteReceiverResponse.soap_default(soap);
	soap_default___receiverws__DeleteReceiver(soap, &soap_tmp___receiverws__DeleteReceiver);
	if (!soap_get___receiverws__DeleteReceiver(soap, &soap_tmp___receiverws__DeleteReceiver, "-receiverws:DeleteReceiver", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = service->DeleteReceiver(soap_tmp___receiverws__DeleteReceiver.receiverws__DeleteReceiver, receiverws__DeleteReceiverResponse);
	if (soap->error)
		return soap->error;
	soap->encodingStyle = NULL;
	soap_serializeheader(soap);
	receiverws__DeleteReceiverResponse.soap_serialize(soap);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || receiverws__DeleteReceiverResponse.soap_put(soap, "receiverws:DeleteReceiverResponse", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || receiverws__DeleteReceiverResponse.soap_put(soap, "receiverws:DeleteReceiverResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}

static int serve___receiverws__ConfigureReceiver(struct soap *soap, ReceiverBindingService *service)
{	struct __receiverws__ConfigureReceiver soap_tmp___receiverws__ConfigureReceiver;
	_receiverws__ConfigureReceiverResponse receiverws__ConfigureReceiverResponse;
	receiverws__ConfigureReceiverResponse.soap_default(soap);
	soap_default___receiverws__ConfigureReceiver(soap, &soap_tmp___receiverws__ConfigureReceiver);
	if (!soap_get___receiverws__ConfigureReceiver(soap, &soap_tmp___receiverws__ConfigureReceiver, "-receiverws:ConfigureReceiver", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = service->ConfigureReceiver(soap_tmp___receiverws__ConfigureReceiver.receiverws__ConfigureReceiver, receiverws__ConfigureReceiverResponse);
	if (soap->error)
		return soap->error;
	soap->encodingStyle = NULL;
	soap_serializeheader(soap);
	receiverws__ConfigureReceiverResponse.soap_serialize(soap);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || receiverws__ConfigureReceiverResponse.soap_put(soap, "receiverws:ConfigureReceiverResponse", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || receiverws__ConfigureReceiverResponse.soap_put(soap, "receiverws:ConfigureReceiverResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}

static int serve___receiverws__SetReceiverMode(struct soap *soap, ReceiverBindingService *service)
{	struct __receiverws__SetReceiverMode soap_tmp___receiverws__SetReceiverMode;
	_receiverws__SetReceiverModeResponse receiverws__SetReceiverModeResponse;
	receiverws__SetReceiverModeResponse.soap_default(soap);
	soap_default___receiverws__SetReceiverMode(soap, &soap_tmp___receiverws__SetReceiverMode);
	if (!soap_get___receiverws__SetReceiverMode(soap, &soap_tmp___receiverws__SetReceiverMode, "-receiverws:SetReceiverMode", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = service->SetReceiverMode(soap_tmp___receiverws__SetReceiverMode.receiverws__SetReceiverMode, receiverws__SetReceiverModeResponse);
	if (soap->error)
		return soap->error;
	soap->encodingStyle = NULL;
	soap_serializeheader(soap);
	receiverws__SetReceiverModeResponse.soap_serialize(soap);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || receiverws__SetReceiverModeResponse.soap_put(soap, "receiverws:SetReceiverModeResponse", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || receiverws__SetReceiverModeResponse.soap_put(soap, "receiverws:SetReceiverModeResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}

static int serve___receiverws__GetReceiverState(struct soap *soap, ReceiverBindingService *service)
{	struct __receiverws__GetReceiverState soap_tmp___receiverws__GetReceiverState;
	_receiverws__GetReceiverStateResponse receiverws__GetReceiverStateResponse;
	receiverws__GetReceiverStateResponse.soap_default(soap);
	soap_default___receiverws__GetReceiverState(soap, &soap_tmp___receiverws__GetReceiverState);
	if (!soap_get___receiverws__GetReceiverState(soap, &soap_tmp___receiverws__GetReceiverState, "-receiverws:GetReceiverState", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = service->GetReceiverState(soap_tmp___receiverws__GetReceiverState.receiverws__GetReceiverState, receiverws__GetReceiverStateResponse);
	if (soap->error)
		return soap->error;
	soap->encodingStyle = NULL;
	soap_serializeheader(soap);
	receiverws__GetReceiverStateResponse.soap_serialize(soap);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || receiverws__GetReceiverStateResponse.soap_put(soap, "receiverws:GetReceiverStateResponse", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || receiverws__GetReceiverStateResponse.soap_put(soap, "receiverws:GetReceiverStateResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}
/* End of server object code */
