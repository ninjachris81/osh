/* onvifeventH.h
   Generated by gSOAP 2.8.22 from rcx.h

Copyright(C) 2000-2015, Robert van Engelen, Genivia Inc. All Rights Reserved.
The generated code is released under one of the following licenses:
GPL or Genivia's license for commercial use.
This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
*/

#ifndef onvifeventH_H
#define onvifeventH_H
#include "onvifeventStub.h"
#ifndef WITH_NOIDREF

#ifdef __cplusplus
extern "C" {
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_markelement(struct soap*, const void*, int);

#ifdef __cplusplus
}
#endif
SOAP_FMAC3 int SOAP_FMAC4 soap_putindependent(struct soap*);
SOAP_FMAC3 int SOAP_FMAC4 soap_getindependent(struct soap*);
#endif

#ifdef __cplusplus
extern "C" {
#endif
SOAP_FMAC3 void *SOAP_FMAC4 soap_getelement(struct soap*, int*);
SOAP_FMAC3 int SOAP_FMAC4 soap_putelement(struct soap*, const void*, const char*, int, int);

#ifdef __cplusplus
}
#endif
SOAP_FMAC3 int SOAP_FMAC4 soap_ignore_element(struct soap*);

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultcode(struct soap *soap);

SOAP_FMAC3 void * SOAP_FMAC4 onvifevent_instantiate(struct soap*, int, const char*, const char*, size_t*);
SOAP_FMAC3 int SOAP_FMAC4 onvifevent_fdelete(struct soap_clist*);
SOAP_FMAC3 void* SOAP_FMAC4 soap_class_id_enter(struct soap*, const char*, void*, int, size_t, const char*, const char*);

SOAP_FMAC3 void* SOAP_FMAC4 soap_container_id_forward(struct soap*, const char*, void*, size_t, int, int, size_t, unsigned int);

SOAP_FMAC3 void SOAP_FMAC4 onvifevent_container_insert(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_byte
#define SOAP_TYPE_byte (3)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_byte(struct soap*, char *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_byte(struct soap*, const char*, int, const char *, const char*);
SOAP_FMAC3 char * SOAP_FMAC4 soap_in_byte(struct soap*, const char*, char *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_byte(struct soap*, const char *, const char*, const char*);

#ifndef soap_write_byte
#define soap_write_byte(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_byte(soap, data), 0) || soap_put_byte(soap, data, "byte", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 char * SOAP_FMAC4 soap_get_byte(struct soap*, char *, const char*, const char*);

#ifndef soap_read_byte
#define soap_read_byte(soap, data) ( soap_begin_recv(soap) || !soap_get_byte(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_int
#define SOAP_TYPE_int (1)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_int(struct soap*, int *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_int(struct soap*, const char*, int, const int *, const char*);
SOAP_FMAC3 int * SOAP_FMAC4 soap_in_int(struct soap*, const char*, int *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_int(struct soap*, const int *, const char*, const char*);

#ifndef soap_write_int
#define soap_write_int(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_int(soap, data), 0) || soap_put_int(soap, data, "int", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 int * SOAP_FMAC4 soap_get_int(struct soap*, int *, const char*, const char*);

#ifndef soap_read_int
#define soap_read_int(soap, data) ( soap_begin_recv(soap) || !soap_get_int(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_xsd__duration
#define SOAP_TYPE_xsd__duration (60)
#endif
SOAP_FMAC1 void SOAP_FMAC2 soap_default_xsd__duration(struct soap*, LONG64 *);

SOAP_FMAC3S const char* SOAP_FMAC4S soap_xsd__duration2s(struct soap*, LONG64);
SOAP_FMAC1 int SOAP_FMAC2 soap_out_xsd__duration(struct soap*, const char*, int, const LONG64 *, const char*);

SOAP_FMAC3S int SOAP_FMAC4S soap_s2xsd__duration(struct soap*, const char*, LONG64 *);
SOAP_FMAC1 LONG64 * SOAP_FMAC2 soap_in_xsd__duration(struct soap*, const char*, LONG64 *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_xsd__duration(struct soap*, const LONG64 *, const char*, const char*);

#ifndef soap_write_xsd__duration
#define soap_write_xsd__duration(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_xsd__duration(soap, data), 0) || soap_put_xsd__duration(soap, data, "xsd:duration", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 LONG64 * SOAP_FMAC4 soap_get_xsd__duration(struct soap*, LONG64 *, const char*, const char*);

#ifndef soap_read_xsd__duration
#define soap_read_xsd__duration(soap, data) ( soap_begin_recv(soap) || !soap_get_xsd__duration(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


/* _wsa5__RetryAfter is a typedef element/attribute synonym for unsignedLONG64 */

#ifndef SOAP_TYPE__wsa5__RetryAfter
#define SOAP_TYPE__wsa5__RetryAfter (32)
#endif

#define soap_default__wsa5__RetryAfter(soap, a) soap_default_unsignedLONG64(soap, a)


#define soap_out__wsa5__RetryAfter soap_out_unsignedLONG64


#define soap_in__wsa5__RetryAfter soap_in_unsignedLONG64


#define soap_put__wsa5__RetryAfter soap_put_unsignedLONG64


#define soap_get__wsa5__RetryAfter soap_get_unsignedLONG64


#ifndef SOAP_TYPE_unsignedLONG64
#define SOAP_TYPE_unsignedLONG64 (31)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_unsignedLONG64(struct soap*, ULONG64 *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_unsignedLONG64(struct soap*, const char*, int, const ULONG64 *, const char*);
SOAP_FMAC3 ULONG64 * SOAP_FMAC4 soap_in_unsignedLONG64(struct soap*, const char*, ULONG64 *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_unsignedLONG64(struct soap*, const ULONG64 *, const char*, const char*);

#ifndef soap_write_unsignedLONG64
#define soap_write_unsignedLONG64(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_unsignedLONG64(soap, data), 0) || soap_put_unsignedLONG64(soap, data, "unsignedLong", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ULONG64 * SOAP_FMAC4 soap_get_unsignedLONG64(struct soap*, ULONG64 *, const char*, const char*);

#ifndef soap_read_unsignedLONG64
#define soap_read_unsignedLONG64(soap, data) ( soap_begin_recv(soap) || !soap_get_unsignedLONG64(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_time
#define SOAP_TYPE_time (69)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_time(struct soap*, time_t *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_time(struct soap*, const char*, int, const time_t *, const char*);
SOAP_FMAC3 time_t * SOAP_FMAC4 soap_in_time(struct soap*, const char*, time_t *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_time(struct soap*, const time_t *, const char*, const char*);

#ifndef soap_write_time
#define soap_write_time(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_time(soap, data), 0) || soap_put_time(soap, data, "dateTime", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 time_t * SOAP_FMAC4 soap_get_time(struct soap*, time_t *, const char*, const char*);

#ifndef soap_read_time
#define soap_read_time(soap, data) ( soap_begin_recv(soap) || !soap_get_time(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_bool
#define SOAP_TYPE_bool (67)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_bool(struct soap*, bool *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_bool(struct soap*, const char*, int, const bool *, const char*);

SOAP_FMAC3S const char* SOAP_FMAC4S soap_bool2s(struct soap*, bool);
SOAP_FMAC3 bool * SOAP_FMAC4 soap_in_bool(struct soap*, const char*, bool *, const char*);

SOAP_FMAC3S int SOAP_FMAC4S soap_s2bool(struct soap*, const char*, bool *);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_bool(struct soap*, const bool *, const char*, const char*);

#ifndef soap_write_bool
#define soap_write_bool(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_bool(soap, data), 0) || soap_put_bool(soap, data, "boolean", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 bool * SOAP_FMAC4 soap_get_bool(struct soap*, bool *, const char*, const char*);

#ifndef soap_read_bool
#define soap_read_bool(soap, data) ( soap_begin_recv(soap) || !soap_get_bool(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE__wsa5__IsReferenceParameter
#define SOAP_TYPE__wsa5__IsReferenceParameter (36)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default__wsa5__IsReferenceParameter(struct soap*, enum _wsa5__IsReferenceParameter *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out__wsa5__IsReferenceParameter(struct soap*, const char*, int, const enum _wsa5__IsReferenceParameter *, const char*);

SOAP_FMAC3S const char* SOAP_FMAC4S soap__wsa5__IsReferenceParameter2s(struct soap*, enum _wsa5__IsReferenceParameter);
SOAP_FMAC3 enum _wsa5__IsReferenceParameter * SOAP_FMAC4 soap_in__wsa5__IsReferenceParameter(struct soap*, const char*, enum _wsa5__IsReferenceParameter *, const char*);

SOAP_FMAC3S int SOAP_FMAC4S soap_s2_wsa5__IsReferenceParameter(struct soap*, const char*, enum _wsa5__IsReferenceParameter *);

SOAP_FMAC3 int SOAP_FMAC4 soap_put__wsa5__IsReferenceParameter(struct soap*, const enum _wsa5__IsReferenceParameter *, const char*, const char*);

#ifndef soap_write__wsa5__IsReferenceParameter
#define soap_write__wsa5__IsReferenceParameter(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize__wsa5__IsReferenceParameter(soap, data), 0) || soap_put__wsa5__IsReferenceParameter(soap, data, "wsa5:IsReferenceParameter", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 enum _wsa5__IsReferenceParameter * SOAP_FMAC4 soap_get__wsa5__IsReferenceParameter(struct soap*, enum _wsa5__IsReferenceParameter *, const char*, const char*);

#ifndef soap_read__wsa5__IsReferenceParameter
#define soap_read__wsa5__IsReferenceParameter(soap, data) ( soap_begin_recv(soap) || !soap_get__wsa5__IsReferenceParameter(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_wsa5__FaultCodesType
#define SOAP_TYPE_wsa5__FaultCodesType (16)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_wsa5__FaultCodesType(struct soap*, enum wsa5__FaultCodesType *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_wsa5__FaultCodesType(struct soap*, const char*, int, const enum wsa5__FaultCodesType *, const char*);

SOAP_FMAC3S const char* SOAP_FMAC4S soap_wsa5__FaultCodesType2s(struct soap*, enum wsa5__FaultCodesType);
SOAP_FMAC3 enum wsa5__FaultCodesType * SOAP_FMAC4 soap_in_wsa5__FaultCodesType(struct soap*, const char*, enum wsa5__FaultCodesType *, const char*);

SOAP_FMAC3S int SOAP_FMAC4S soap_s2wsa5__FaultCodesType(struct soap*, const char*, enum wsa5__FaultCodesType *);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_wsa5__FaultCodesType(struct soap*, const enum wsa5__FaultCodesType *, const char*, const char*);

#ifndef soap_write_wsa5__FaultCodesType
#define soap_write_wsa5__FaultCodesType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_wsa5__FaultCodesType(soap, data), 0) || soap_put_wsa5__FaultCodesType(soap, data, "wsa5:FaultCodesType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 enum wsa5__FaultCodesType * SOAP_FMAC4 soap_get_wsa5__FaultCodesType(struct soap*, enum wsa5__FaultCodesType *, const char*, const char*);

#ifndef soap_read_wsa5__FaultCodesType
#define soap_read_wsa5__FaultCodesType(soap, data) ( soap_begin_recv(soap) || !soap_get_wsa5__FaultCodesType(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_wsa5__RelationshipType
#define SOAP_TYPE_wsa5__RelationshipType (15)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_wsa5__RelationshipType(struct soap*, enum wsa5__RelationshipType *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_wsa5__RelationshipType(struct soap*, const char*, int, const enum wsa5__RelationshipType *, const char*);

SOAP_FMAC3S const char* SOAP_FMAC4S soap_wsa5__RelationshipType2s(struct soap*, enum wsa5__RelationshipType);
SOAP_FMAC3 enum wsa5__RelationshipType * SOAP_FMAC4 soap_in_wsa5__RelationshipType(struct soap*, const char*, enum wsa5__RelationshipType *, const char*);

SOAP_FMAC3S int SOAP_FMAC4S soap_s2wsa5__RelationshipType(struct soap*, const char*, enum wsa5__RelationshipType *);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_wsa5__RelationshipType(struct soap*, const enum wsa5__RelationshipType *, const char*, const char*);

#ifndef soap_write_wsa5__RelationshipType
#define soap_write_wsa5__RelationshipType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_wsa5__RelationshipType(soap, data), 0) || soap_put_wsa5__RelationshipType(soap, data, "wsa5:RelationshipType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 enum wsa5__RelationshipType * SOAP_FMAC4 soap_get_wsa5__RelationshipType(struct soap*, enum wsa5__RelationshipType *, const char*, const char*);

#ifndef soap_read_wsa5__RelationshipType
#define soap_read_wsa5__RelationshipType(soap, data) ( soap_begin_recv(soap) || !soap_get_wsa5__RelationshipType(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE__wstop__TopicNamespaceType_Topic
#define SOAP_TYPE__wstop__TopicNamespaceType_Topic (186)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__wstop__TopicNamespaceType_Topic(struct soap*, const char*, int, const _wstop__TopicNamespaceType_Topic *, const char*);
SOAP_FMAC3 _wstop__TopicNamespaceType_Topic * SOAP_FMAC4 soap_in__wstop__TopicNamespaceType_Topic(struct soap*, const char*, _wstop__TopicNamespaceType_Topic *, const char*);

#ifndef soap_write__wstop__TopicNamespaceType_Topic
#define soap_write__wstop__TopicNamespaceType_Topic(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "wstop:TopicNamespaceType-Topic", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _wstop__TopicNamespaceType_Topic * SOAP_FMAC4 soap_get__wstop__TopicNamespaceType_Topic(struct soap*, _wstop__TopicNamespaceType_Topic *, const char*, const char*);

#ifndef soap_read__wstop__TopicNamespaceType_Topic
#define soap_read__wstop__TopicNamespaceType_Topic(soap, data) ( soap_begin_recv(soap) || !soap_get__wstop__TopicNamespaceType_Topic(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 _wstop__TopicNamespaceType_Topic * SOAP_FMAC2 soap_instantiate__wstop__TopicNamespaceType_Topic(struct soap*, int, const char*, const char*, size_t*);

inline _wstop__TopicNamespaceType_Topic * soap_new__wstop__TopicNamespaceType_Topic(struct soap *soap, int n = -1) { return soap_instantiate__wstop__TopicNamespaceType_Topic(soap, n, NULL, NULL, NULL); }

inline _wstop__TopicNamespaceType_Topic * soap_new_req__wstop__TopicNamespaceType_Topic(struct soap *soap, std::string& name) { _wstop__TopicNamespaceType_Topic *_p = soap_instantiate__wstop__TopicNamespaceType_Topic(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_wstop__TopicNamespaceType_Topic::name = name; } return _p; }

inline _wstop__TopicNamespaceType_Topic * soap_new_set__wstop__TopicNamespaceType_Topic(struct soap *soap, wstop__Documentation *documentation, char *__anyAttribute, wstop__QueryExpressionType *MessagePattern, std::vector<wstop__TopicType * >& Topic, std::vector<char * >& __any, std::string& name, std::string *messageTypes, bool final_, std::string *parent) { _wstop__TopicNamespaceType_Topic *_p = soap_instantiate__wstop__TopicNamespaceType_Topic(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_wstop__TopicNamespaceType_Topic::documentation = documentation; _p->_wstop__TopicNamespaceType_Topic::__anyAttribute = __anyAttribute; _p->_wstop__TopicNamespaceType_Topic::MessagePattern = MessagePattern; _p->_wstop__TopicNamespaceType_Topic::Topic = Topic; _p->_wstop__TopicNamespaceType_Topic::__any = __any; _p->_wstop__TopicNamespaceType_Topic::name = name; _p->_wstop__TopicNamespaceType_Topic::messageTypes = messageTypes; _p->_wstop__TopicNamespaceType_Topic::final_ = final_; _p->_wstop__TopicNamespaceType_Topic::parent = parent; } return _p; }

inline void soap_delete__wstop__TopicNamespaceType_Topic(struct soap *soap, _wstop__TopicNamespaceType_Topic *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__wstop__TopicNamespaceType_Topic(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE__wsnt__Subscribe_SubscriptionPolicy
#define SOAP_TYPE__wsnt__Subscribe_SubscriptionPolicy (181)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__wsnt__Subscribe_SubscriptionPolicy(struct soap*, const char*, int, const _wsnt__Subscribe_SubscriptionPolicy *, const char*);
SOAP_FMAC3 _wsnt__Subscribe_SubscriptionPolicy * SOAP_FMAC4 soap_in__wsnt__Subscribe_SubscriptionPolicy(struct soap*, const char*, _wsnt__Subscribe_SubscriptionPolicy *, const char*);

#ifndef soap_write__wsnt__Subscribe_SubscriptionPolicy
#define soap_write__wsnt__Subscribe_SubscriptionPolicy(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "wsnt:Subscribe-SubscriptionPolicy", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _wsnt__Subscribe_SubscriptionPolicy * SOAP_FMAC4 soap_get__wsnt__Subscribe_SubscriptionPolicy(struct soap*, _wsnt__Subscribe_SubscriptionPolicy *, const char*, const char*);

#ifndef soap_read__wsnt__Subscribe_SubscriptionPolicy
#define soap_read__wsnt__Subscribe_SubscriptionPolicy(soap, data) ( soap_begin_recv(soap) || !soap_get__wsnt__Subscribe_SubscriptionPolicy(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 _wsnt__Subscribe_SubscriptionPolicy * SOAP_FMAC2 soap_instantiate__wsnt__Subscribe_SubscriptionPolicy(struct soap*, int, const char*, const char*, size_t*);

inline _wsnt__Subscribe_SubscriptionPolicy * soap_new__wsnt__Subscribe_SubscriptionPolicy(struct soap *soap, int n = -1) { return soap_instantiate__wsnt__Subscribe_SubscriptionPolicy(soap, n, NULL, NULL, NULL); }

inline _wsnt__Subscribe_SubscriptionPolicy * soap_new_req__wsnt__Subscribe_SubscriptionPolicy(struct soap *soap) { _wsnt__Subscribe_SubscriptionPolicy *_p = soap_instantiate__wsnt__Subscribe_SubscriptionPolicy(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline _wsnt__Subscribe_SubscriptionPolicy * soap_new_set__wsnt__Subscribe_SubscriptionPolicy(struct soap *soap, std::vector<char * >& __any) { _wsnt__Subscribe_SubscriptionPolicy *_p = soap_instantiate__wsnt__Subscribe_SubscriptionPolicy(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_wsnt__Subscribe_SubscriptionPolicy::__any = __any; } return _p; }

inline void soap_delete__wsnt__Subscribe_SubscriptionPolicy(struct soap *soap, _wsnt__Subscribe_SubscriptionPolicy *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__wsnt__Subscribe_SubscriptionPolicy(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE__wsnt__NotificationMessageHolderType_Message
#define SOAP_TYPE__wsnt__NotificationMessageHolderType_Message (177)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__wsnt__NotificationMessageHolderType_Message(struct soap*, const char*, int, const _wsnt__NotificationMessageHolderType_Message *, const char*);
SOAP_FMAC3 _wsnt__NotificationMessageHolderType_Message * SOAP_FMAC4 soap_in__wsnt__NotificationMessageHolderType_Message(struct soap*, const char*, _wsnt__NotificationMessageHolderType_Message *, const char*);

#ifndef soap_write__wsnt__NotificationMessageHolderType_Message
#define soap_write__wsnt__NotificationMessageHolderType_Message(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "wsnt:NotificationMessageHolderType-Message", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _wsnt__NotificationMessageHolderType_Message * SOAP_FMAC4 soap_get__wsnt__NotificationMessageHolderType_Message(struct soap*, _wsnt__NotificationMessageHolderType_Message *, const char*, const char*);

#ifndef soap_read__wsnt__NotificationMessageHolderType_Message
#define soap_read__wsnt__NotificationMessageHolderType_Message(soap, data) ( soap_begin_recv(soap) || !soap_get__wsnt__NotificationMessageHolderType_Message(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 _wsnt__NotificationMessageHolderType_Message * SOAP_FMAC2 soap_instantiate__wsnt__NotificationMessageHolderType_Message(struct soap*, int, const char*, const char*, size_t*);

inline _wsnt__NotificationMessageHolderType_Message * soap_new__wsnt__NotificationMessageHolderType_Message(struct soap *soap, int n = -1) { return soap_instantiate__wsnt__NotificationMessageHolderType_Message(soap, n, NULL, NULL, NULL); }

inline _wsnt__NotificationMessageHolderType_Message * soap_new_req__wsnt__NotificationMessageHolderType_Message(struct soap *soap) { _wsnt__NotificationMessageHolderType_Message *_p = soap_instantiate__wsnt__NotificationMessageHolderType_Message(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline _wsnt__NotificationMessageHolderType_Message * soap_new_set__wsnt__NotificationMessageHolderType_Message(struct soap *soap, char *__any) { _wsnt__NotificationMessageHolderType_Message *_p = soap_instantiate__wsnt__NotificationMessageHolderType_Message(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_wsnt__NotificationMessageHolderType_Message::__any = __any; } return _p; }

inline void soap_delete__wsnt__NotificationMessageHolderType_Message(struct soap *soap, _wsnt__NotificationMessageHolderType_Message *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__wsnt__NotificationMessageHolderType_Message(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE__wsrfbf__BaseFaultType_FaultCause
#define SOAP_TYPE__wsrfbf__BaseFaultType_FaultCause (174)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__wsrfbf__BaseFaultType_FaultCause(struct soap*, const char*, int, const _wsrfbf__BaseFaultType_FaultCause *, const char*);
SOAP_FMAC3 _wsrfbf__BaseFaultType_FaultCause * SOAP_FMAC4 soap_in__wsrfbf__BaseFaultType_FaultCause(struct soap*, const char*, _wsrfbf__BaseFaultType_FaultCause *, const char*);

#ifndef soap_write__wsrfbf__BaseFaultType_FaultCause
#define soap_write__wsrfbf__BaseFaultType_FaultCause(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "wsrfbf:BaseFaultType-FaultCause", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _wsrfbf__BaseFaultType_FaultCause * SOAP_FMAC4 soap_get__wsrfbf__BaseFaultType_FaultCause(struct soap*, _wsrfbf__BaseFaultType_FaultCause *, const char*, const char*);

#ifndef soap_read__wsrfbf__BaseFaultType_FaultCause
#define soap_read__wsrfbf__BaseFaultType_FaultCause(soap, data) ( soap_begin_recv(soap) || !soap_get__wsrfbf__BaseFaultType_FaultCause(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 _wsrfbf__BaseFaultType_FaultCause * SOAP_FMAC2 soap_instantiate__wsrfbf__BaseFaultType_FaultCause(struct soap*, int, const char*, const char*, size_t*);

inline _wsrfbf__BaseFaultType_FaultCause * soap_new__wsrfbf__BaseFaultType_FaultCause(struct soap *soap, int n = -1) { return soap_instantiate__wsrfbf__BaseFaultType_FaultCause(soap, n, NULL, NULL, NULL); }

inline _wsrfbf__BaseFaultType_FaultCause * soap_new_req__wsrfbf__BaseFaultType_FaultCause(struct soap *soap) { _wsrfbf__BaseFaultType_FaultCause *_p = soap_instantiate__wsrfbf__BaseFaultType_FaultCause(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline _wsrfbf__BaseFaultType_FaultCause * soap_new_set__wsrfbf__BaseFaultType_FaultCause(struct soap *soap, char *__any) { _wsrfbf__BaseFaultType_FaultCause *_p = soap_instantiate__wsrfbf__BaseFaultType_FaultCause(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_wsrfbf__BaseFaultType_FaultCause::__any = __any; } return _p; }

inline void soap_delete__wsrfbf__BaseFaultType_FaultCause(struct soap *soap, _wsrfbf__BaseFaultType_FaultCause *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__wsrfbf__BaseFaultType_FaultCause(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE__wsrfbf__BaseFaultType_Description
#define SOAP_TYPE__wsrfbf__BaseFaultType_Description (170)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__wsrfbf__BaseFaultType_Description(struct soap*, const char*, int, const _wsrfbf__BaseFaultType_Description *, const char*);
SOAP_FMAC3 _wsrfbf__BaseFaultType_Description * SOAP_FMAC4 soap_in__wsrfbf__BaseFaultType_Description(struct soap*, const char*, _wsrfbf__BaseFaultType_Description *, const char*);

#ifndef soap_write__wsrfbf__BaseFaultType_Description
#define soap_write__wsrfbf__BaseFaultType_Description(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "wsrfbf:BaseFaultType-Description", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _wsrfbf__BaseFaultType_Description * SOAP_FMAC4 soap_get__wsrfbf__BaseFaultType_Description(struct soap*, _wsrfbf__BaseFaultType_Description *, const char*, const char*);

#ifndef soap_read__wsrfbf__BaseFaultType_Description
#define soap_read__wsrfbf__BaseFaultType_Description(soap, data) ( soap_begin_recv(soap) || !soap_get__wsrfbf__BaseFaultType_Description(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 _wsrfbf__BaseFaultType_Description * SOAP_FMAC2 soap_instantiate__wsrfbf__BaseFaultType_Description(struct soap*, int, const char*, const char*, size_t*);

inline _wsrfbf__BaseFaultType_Description * soap_new__wsrfbf__BaseFaultType_Description(struct soap *soap, int n = -1) { return soap_instantiate__wsrfbf__BaseFaultType_Description(soap, n, NULL, NULL, NULL); }

inline _wsrfbf__BaseFaultType_Description * soap_new_req__wsrfbf__BaseFaultType_Description(struct soap *soap, std::string& __item) { _wsrfbf__BaseFaultType_Description *_p = soap_instantiate__wsrfbf__BaseFaultType_Description(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_wsrfbf__BaseFaultType_Description::__item = __item; } return _p; }

inline _wsrfbf__BaseFaultType_Description * soap_new_set__wsrfbf__BaseFaultType_Description(struct soap *soap, std::string& __item, std::string *xml__lang) { _wsrfbf__BaseFaultType_Description *_p = soap_instantiate__wsrfbf__BaseFaultType_Description(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_wsrfbf__BaseFaultType_Description::__item = __item; _p->_wsrfbf__BaseFaultType_Description::xml__lang = xml__lang; } return _p; }

inline void soap_delete__wsrfbf__BaseFaultType_Description(struct soap *soap, _wsrfbf__BaseFaultType_Description *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__wsrfbf__BaseFaultType_Description(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE__wsrfbf__BaseFaultType_ErrorCode
#define SOAP_TYPE__wsrfbf__BaseFaultType_ErrorCode (168)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__wsrfbf__BaseFaultType_ErrorCode(struct soap*, const char*, int, const _wsrfbf__BaseFaultType_ErrorCode *, const char*);
SOAP_FMAC3 _wsrfbf__BaseFaultType_ErrorCode * SOAP_FMAC4 soap_in__wsrfbf__BaseFaultType_ErrorCode(struct soap*, const char*, _wsrfbf__BaseFaultType_ErrorCode *, const char*);

#ifndef soap_write__wsrfbf__BaseFaultType_ErrorCode
#define soap_write__wsrfbf__BaseFaultType_ErrorCode(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "wsrfbf:BaseFaultType-ErrorCode", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _wsrfbf__BaseFaultType_ErrorCode * SOAP_FMAC4 soap_get__wsrfbf__BaseFaultType_ErrorCode(struct soap*, _wsrfbf__BaseFaultType_ErrorCode *, const char*, const char*);

#ifndef soap_read__wsrfbf__BaseFaultType_ErrorCode
#define soap_read__wsrfbf__BaseFaultType_ErrorCode(soap, data) ( soap_begin_recv(soap) || !soap_get__wsrfbf__BaseFaultType_ErrorCode(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 _wsrfbf__BaseFaultType_ErrorCode * SOAP_FMAC2 soap_instantiate__wsrfbf__BaseFaultType_ErrorCode(struct soap*, int, const char*, const char*, size_t*);

inline _wsrfbf__BaseFaultType_ErrorCode * soap_new__wsrfbf__BaseFaultType_ErrorCode(struct soap *soap, int n = -1) { return soap_instantiate__wsrfbf__BaseFaultType_ErrorCode(soap, n, NULL, NULL, NULL); }

inline _wsrfbf__BaseFaultType_ErrorCode * soap_new_req__wsrfbf__BaseFaultType_ErrorCode(struct soap *soap, std::string& dialect) { _wsrfbf__BaseFaultType_ErrorCode *_p = soap_instantiate__wsrfbf__BaseFaultType_ErrorCode(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_wsrfbf__BaseFaultType_ErrorCode::dialect = dialect; } return _p; }

inline _wsrfbf__BaseFaultType_ErrorCode * soap_new_set__wsrfbf__BaseFaultType_ErrorCode(struct soap *soap, std::string& dialect) { _wsrfbf__BaseFaultType_ErrorCode *_p = soap_instantiate__wsrfbf__BaseFaultType_ErrorCode(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_wsrfbf__BaseFaultType_ErrorCode::dialect = dialect; } return _p; }

inline void soap_delete__wsrfbf__BaseFaultType_ErrorCode(struct soap *soap, _wsrfbf__BaseFaultType_ErrorCode *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__wsrfbf__BaseFaultType_ErrorCode(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE__eventws__CreatePullPointSubscription_SubscriptionPolicy
#define SOAP_TYPE__eventws__CreatePullPointSubscription_SubscriptionPolicy (161)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__eventws__CreatePullPointSubscription_SubscriptionPolicy(struct soap*, const char*, int, const _eventws__CreatePullPointSubscription_SubscriptionPolicy *, const char*);
SOAP_FMAC3 _eventws__CreatePullPointSubscription_SubscriptionPolicy * SOAP_FMAC4 soap_in__eventws__CreatePullPointSubscription_SubscriptionPolicy(struct soap*, const char*, _eventws__CreatePullPointSubscription_SubscriptionPolicy *, const char*);

#ifndef soap_write__eventws__CreatePullPointSubscription_SubscriptionPolicy
#define soap_write__eventws__CreatePullPointSubscription_SubscriptionPolicy(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "eventws:CreatePullPointSubscription-SubscriptionPolicy", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _eventws__CreatePullPointSubscription_SubscriptionPolicy * SOAP_FMAC4 soap_get__eventws__CreatePullPointSubscription_SubscriptionPolicy(struct soap*, _eventws__CreatePullPointSubscription_SubscriptionPolicy *, const char*, const char*);

#ifndef soap_read__eventws__CreatePullPointSubscription_SubscriptionPolicy
#define soap_read__eventws__CreatePullPointSubscription_SubscriptionPolicy(soap, data) ( soap_begin_recv(soap) || !soap_get__eventws__CreatePullPointSubscription_SubscriptionPolicy(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 _eventws__CreatePullPointSubscription_SubscriptionPolicy * SOAP_FMAC2 soap_instantiate__eventws__CreatePullPointSubscription_SubscriptionPolicy(struct soap*, int, const char*, const char*, size_t*);

inline _eventws__CreatePullPointSubscription_SubscriptionPolicy * soap_new__eventws__CreatePullPointSubscription_SubscriptionPolicy(struct soap *soap, int n = -1) { return soap_instantiate__eventws__CreatePullPointSubscription_SubscriptionPolicy(soap, n, NULL, NULL, NULL); }

inline _eventws__CreatePullPointSubscription_SubscriptionPolicy * soap_new_req__eventws__CreatePullPointSubscription_SubscriptionPolicy(struct soap *soap) { _eventws__CreatePullPointSubscription_SubscriptionPolicy *_p = soap_instantiate__eventws__CreatePullPointSubscription_SubscriptionPolicy(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline _eventws__CreatePullPointSubscription_SubscriptionPolicy * soap_new_set__eventws__CreatePullPointSubscription_SubscriptionPolicy(struct soap *soap, std::vector<char * >& __any) { _eventws__CreatePullPointSubscription_SubscriptionPolicy *_p = soap_instantiate__eventws__CreatePullPointSubscription_SubscriptionPolicy(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_eventws__CreatePullPointSubscription_SubscriptionPolicy::__any = __any; } return _p; }

inline void soap_delete__eventws__CreatePullPointSubscription_SubscriptionPolicy(struct soap *soap, _eventws__CreatePullPointSubscription_SubscriptionPolicy *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__eventws__CreatePullPointSubscription_SubscriptionPolicy(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_wstop__SimpleTopicExpression__
#define SOAP_TYPE_wstop__SimpleTopicExpression__ (155)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_wstop__SimpleTopicExpression__(struct soap*, const char*, int, const wstop__SimpleTopicExpression__ *, const char*);
SOAP_FMAC3 wstop__SimpleTopicExpression__ * SOAP_FMAC4 soap_in_wstop__SimpleTopicExpression__(struct soap*, const char*, wstop__SimpleTopicExpression__ *, const char*);

#ifndef soap_write_wstop__SimpleTopicExpression__
#define soap_write_wstop__SimpleTopicExpression__(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "wstop:SimpleTopicExpression", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 wstop__SimpleTopicExpression__ * SOAP_FMAC4 soap_get_wstop__SimpleTopicExpression__(struct soap*, wstop__SimpleTopicExpression__ *, const char*, const char*);

#ifndef soap_read_wstop__SimpleTopicExpression__
#define soap_read_wstop__SimpleTopicExpression__(soap, data) ( soap_begin_recv(soap) || !soap_get_wstop__SimpleTopicExpression__(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 wstop__SimpleTopicExpression__ * SOAP_FMAC2 soap_instantiate_wstop__SimpleTopicExpression__(struct soap*, int, const char*, const char*, size_t*);

inline wstop__SimpleTopicExpression__ * soap_new_wstop__SimpleTopicExpression__(struct soap *soap, int n = -1) { return soap_instantiate_wstop__SimpleTopicExpression__(soap, n, NULL, NULL, NULL); }

inline wstop__SimpleTopicExpression__ * soap_new_req_wstop__SimpleTopicExpression__(struct soap *soap, std::string& __item) { wstop__SimpleTopicExpression__ *_p = soap_instantiate_wstop__SimpleTopicExpression__(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->wstop__SimpleTopicExpression__::__item = __item; } return _p; }

inline wstop__SimpleTopicExpression__ * soap_new_set_wstop__SimpleTopicExpression__(struct soap *soap, std::string& __item, char *__item1) { wstop__SimpleTopicExpression__ *_p = soap_instantiate_wstop__SimpleTopicExpression__(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->wstop__SimpleTopicExpression__::__item = __item; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_wstop__SimpleTopicExpression__(struct soap *soap, wstop__SimpleTopicExpression__ *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_wstop__SimpleTopicExpression__(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_wstop__SimpleTopicExpression
#define SOAP_TYPE_wstop__SimpleTopicExpression (154)
#endif

#define soap_default_wstop__SimpleTopicExpression(soap, a) soap_default_std__string(soap, a)

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_wstop__SimpleTopicExpression(struct soap*, const std::string *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_wstop__SimpleTopicExpression(struct soap*, const char*, int, const std::string*, const char*);
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_wstop__SimpleTopicExpression(struct soap*, const char*, std::string*, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_wstop__SimpleTopicExpression(struct soap*, const std::string *, const char*, const char*);

#ifndef soap_write_wstop__SimpleTopicExpression
#define soap_write_wstop__SimpleTopicExpression(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_wstop__SimpleTopicExpression(soap, data), 0) || soap_put_wstop__SimpleTopicExpression(soap, data, "wstop:SimpleTopicExpression", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_wstop__SimpleTopicExpression(struct soap*, std::string *, const char*, const char*);

#ifndef soap_read_wstop__SimpleTopicExpression
#define soap_read_wstop__SimpleTopicExpression(soap, data) ( soap_begin_recv(soap) || !soap_get_wstop__SimpleTopicExpression(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#define soap_instantiate_wstop__SimpleTopicExpression soap_instantiate_std__string


#define soap_copy_wstop__SimpleTopicExpression soap_copy_std__string

#ifndef SOAP_TYPE_wstop__ConcreteTopicExpression__
#define SOAP_TYPE_wstop__ConcreteTopicExpression__ (153)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_wstop__ConcreteTopicExpression__(struct soap*, const char*, int, const wstop__ConcreteTopicExpression__ *, const char*);
SOAP_FMAC3 wstop__ConcreteTopicExpression__ * SOAP_FMAC4 soap_in_wstop__ConcreteTopicExpression__(struct soap*, const char*, wstop__ConcreteTopicExpression__ *, const char*);

#ifndef soap_write_wstop__ConcreteTopicExpression__
#define soap_write_wstop__ConcreteTopicExpression__(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "wstop:ConcreteTopicExpression", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 wstop__ConcreteTopicExpression__ * SOAP_FMAC4 soap_get_wstop__ConcreteTopicExpression__(struct soap*, wstop__ConcreteTopicExpression__ *, const char*, const char*);

#ifndef soap_read_wstop__ConcreteTopicExpression__
#define soap_read_wstop__ConcreteTopicExpression__(soap, data) ( soap_begin_recv(soap) || !soap_get_wstop__ConcreteTopicExpression__(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 wstop__ConcreteTopicExpression__ * SOAP_FMAC2 soap_instantiate_wstop__ConcreteTopicExpression__(struct soap*, int, const char*, const char*, size_t*);

inline wstop__ConcreteTopicExpression__ * soap_new_wstop__ConcreteTopicExpression__(struct soap *soap, int n = -1) { return soap_instantiate_wstop__ConcreteTopicExpression__(soap, n, NULL, NULL, NULL); }

inline wstop__ConcreteTopicExpression__ * soap_new_req_wstop__ConcreteTopicExpression__(struct soap *soap, std::string& __item) { wstop__ConcreteTopicExpression__ *_p = soap_instantiate_wstop__ConcreteTopicExpression__(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->wstop__ConcreteTopicExpression__::__item = __item; } return _p; }

inline wstop__ConcreteTopicExpression__ * soap_new_set_wstop__ConcreteTopicExpression__(struct soap *soap, std::string& __item, char *__item1) { wstop__ConcreteTopicExpression__ *_p = soap_instantiate_wstop__ConcreteTopicExpression__(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->wstop__ConcreteTopicExpression__::__item = __item; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_wstop__ConcreteTopicExpression__(struct soap *soap, wstop__ConcreteTopicExpression__ *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_wstop__ConcreteTopicExpression__(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_wstop__ConcreteTopicExpression
#define SOAP_TYPE_wstop__ConcreteTopicExpression (152)
#endif

#define soap_default_wstop__ConcreteTopicExpression(soap, a) soap_default_std__string(soap, a)

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_wstop__ConcreteTopicExpression(struct soap*, const std::string *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_wstop__ConcreteTopicExpression(struct soap*, const char*, int, const std::string*, const char*);
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_wstop__ConcreteTopicExpression(struct soap*, const char*, std::string*, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_wstop__ConcreteTopicExpression(struct soap*, const std::string *, const char*, const char*);

#ifndef soap_write_wstop__ConcreteTopicExpression
#define soap_write_wstop__ConcreteTopicExpression(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_wstop__ConcreteTopicExpression(soap, data), 0) || soap_put_wstop__ConcreteTopicExpression(soap, data, "wstop:ConcreteTopicExpression", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_wstop__ConcreteTopicExpression(struct soap*, std::string *, const char*, const char*);

#ifndef soap_read_wstop__ConcreteTopicExpression
#define soap_read_wstop__ConcreteTopicExpression(soap, data) ( soap_begin_recv(soap) || !soap_get_wstop__ConcreteTopicExpression(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#define soap_instantiate_wstop__ConcreteTopicExpression soap_instantiate_std__string


#define soap_copy_wstop__ConcreteTopicExpression soap_copy_std__string

#ifndef SOAP_TYPE_wstop__FullTopicExpression__
#define SOAP_TYPE_wstop__FullTopicExpression__ (151)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_wstop__FullTopicExpression__(struct soap*, const char*, int, const wstop__FullTopicExpression__ *, const char*);
SOAP_FMAC3 wstop__FullTopicExpression__ * SOAP_FMAC4 soap_in_wstop__FullTopicExpression__(struct soap*, const char*, wstop__FullTopicExpression__ *, const char*);

#ifndef soap_write_wstop__FullTopicExpression__
#define soap_write_wstop__FullTopicExpression__(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "wstop:FullTopicExpression", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 wstop__FullTopicExpression__ * SOAP_FMAC4 soap_get_wstop__FullTopicExpression__(struct soap*, wstop__FullTopicExpression__ *, const char*, const char*);

#ifndef soap_read_wstop__FullTopicExpression__
#define soap_read_wstop__FullTopicExpression__(soap, data) ( soap_begin_recv(soap) || !soap_get_wstop__FullTopicExpression__(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 wstop__FullTopicExpression__ * SOAP_FMAC2 soap_instantiate_wstop__FullTopicExpression__(struct soap*, int, const char*, const char*, size_t*);

inline wstop__FullTopicExpression__ * soap_new_wstop__FullTopicExpression__(struct soap *soap, int n = -1) { return soap_instantiate_wstop__FullTopicExpression__(soap, n, NULL, NULL, NULL); }

inline wstop__FullTopicExpression__ * soap_new_req_wstop__FullTopicExpression__(struct soap *soap, std::string& __item) { wstop__FullTopicExpression__ *_p = soap_instantiate_wstop__FullTopicExpression__(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->wstop__FullTopicExpression__::__item = __item; } return _p; }

inline wstop__FullTopicExpression__ * soap_new_set_wstop__FullTopicExpression__(struct soap *soap, std::string& __item, char *__item1) { wstop__FullTopicExpression__ *_p = soap_instantiate_wstop__FullTopicExpression__(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->wstop__FullTopicExpression__::__item = __item; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_wstop__FullTopicExpression__(struct soap *soap, wstop__FullTopicExpression__ *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_wstop__FullTopicExpression__(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_wstop__FullTopicExpression
#define SOAP_TYPE_wstop__FullTopicExpression (150)
#endif

#define soap_default_wstop__FullTopicExpression(soap, a) soap_default_std__string(soap, a)

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_wstop__FullTopicExpression(struct soap*, const std::string *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_wstop__FullTopicExpression(struct soap*, const char*, int, const std::string*, const char*);
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_wstop__FullTopicExpression(struct soap*, const char*, std::string*, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_wstop__FullTopicExpression(struct soap*, const std::string *, const char*, const char*);

#ifndef soap_write_wstop__FullTopicExpression
#define soap_write_wstop__FullTopicExpression(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_wstop__FullTopicExpression(soap, data), 0) || soap_put_wstop__FullTopicExpression(soap, data, "wstop:FullTopicExpression", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_wstop__FullTopicExpression(struct soap*, std::string *, const char*, const char*);

#ifndef soap_read_wstop__FullTopicExpression
#define soap_read_wstop__FullTopicExpression(soap, data) ( soap_begin_recv(soap) || !soap_get_wstop__FullTopicExpression(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#define soap_instantiate_wstop__FullTopicExpression soap_instantiate_std__string


#define soap_copy_wstop__FullTopicExpression soap_copy_std__string

#ifndef SOAP_TYPE_wsnt__AbsoluteOrRelativeTimeType
#define SOAP_TYPE_wsnt__AbsoluteOrRelativeTimeType (149)
#endif

#define soap_default_wsnt__AbsoluteOrRelativeTimeType(soap, a) soap_default_std__string(soap, a)

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_wsnt__AbsoluteOrRelativeTimeType(struct soap*, const std::string *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_wsnt__AbsoluteOrRelativeTimeType(struct soap*, const char*, int, const std::string*, const char*);
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_wsnt__AbsoluteOrRelativeTimeType(struct soap*, const char*, std::string*, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_wsnt__AbsoluteOrRelativeTimeType(struct soap*, const std::string *, const char*, const char*);

#ifndef soap_write_wsnt__AbsoluteOrRelativeTimeType
#define soap_write_wsnt__AbsoluteOrRelativeTimeType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_wsnt__AbsoluteOrRelativeTimeType(soap, data), 0) || soap_put_wsnt__AbsoluteOrRelativeTimeType(soap, data, "wsnt:AbsoluteOrRelativeTimeType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_wsnt__AbsoluteOrRelativeTimeType(struct soap*, std::string *, const char*, const char*);

#ifndef soap_read_wsnt__AbsoluteOrRelativeTimeType
#define soap_read_wsnt__AbsoluteOrRelativeTimeType(soap, data) ( soap_begin_recv(soap) || !soap_get_wsnt__AbsoluteOrRelativeTimeType(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#define soap_instantiate_wsnt__AbsoluteOrRelativeTimeType soap_instantiate_std__string


#define soap_copy_wsnt__AbsoluteOrRelativeTimeType soap_copy_std__string

#ifndef SOAP_TYPE_wstop__TopicSetType
#define SOAP_TYPE_wstop__TopicSetType (148)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_wstop__TopicSetType(struct soap*, const char*, int, const wstop__TopicSetType *, const char*);
SOAP_FMAC3 wstop__TopicSetType * SOAP_FMAC4 soap_in_wstop__TopicSetType(struct soap*, const char*, wstop__TopicSetType *, const char*);

#ifndef soap_write_wstop__TopicSetType
#define soap_write_wstop__TopicSetType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "wstop:TopicSetType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 wstop__TopicSetType * SOAP_FMAC4 soap_get_wstop__TopicSetType(struct soap*, wstop__TopicSetType *, const char*, const char*);

#ifndef soap_read_wstop__TopicSetType
#define soap_read_wstop__TopicSetType(soap, data) ( soap_begin_recv(soap) || !soap_get_wstop__TopicSetType(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 wstop__TopicSetType * SOAP_FMAC2 soap_instantiate_wstop__TopicSetType(struct soap*, int, const char*, const char*, size_t*);

inline wstop__TopicSetType * soap_new_wstop__TopicSetType(struct soap *soap, int n = -1) { return soap_instantiate_wstop__TopicSetType(soap, n, NULL, NULL, NULL); }

inline wstop__TopicSetType * soap_new_req_wstop__TopicSetType(struct soap *soap) { wstop__TopicSetType *_p = soap_instantiate_wstop__TopicSetType(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline wstop__TopicSetType * soap_new_set_wstop__TopicSetType(struct soap *soap, std::vector<char * >& __any, wstop__Documentation *documentation1, char *__anyAttribute1, char *__item2) { wstop__TopicSetType *_p = soap_instantiate_wstop__TopicSetType(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->wstop__TopicSetType::__any = __any; _p->wstop__ExtensibleDocumented::documentation = documentation1; _p->wstop__ExtensibleDocumented::__anyAttribute = __anyAttribute1; _p->xsd__anyType::__item = __item2; } return _p; }

inline void soap_delete_wstop__TopicSetType(struct soap *soap, wstop__TopicSetType *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_wstop__TopicSetType(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_wstop__TopicType
#define SOAP_TYPE_wstop__TopicType (147)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_wstop__TopicType(struct soap*, const char*, int, const wstop__TopicType *, const char*);
SOAP_FMAC3 wstop__TopicType * SOAP_FMAC4 soap_in_wstop__TopicType(struct soap*, const char*, wstop__TopicType *, const char*);

#ifndef soap_write_wstop__TopicType
#define soap_write_wstop__TopicType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "wstop:TopicType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 wstop__TopicType * SOAP_FMAC4 soap_get_wstop__TopicType(struct soap*, wstop__TopicType *, const char*, const char*);

#ifndef soap_read_wstop__TopicType
#define soap_read_wstop__TopicType(soap, data) ( soap_begin_recv(soap) || !soap_get_wstop__TopicType(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 wstop__TopicType * SOAP_FMAC2 soap_instantiate_wstop__TopicType(struct soap*, int, const char*, const char*, size_t*);

inline wstop__TopicType * soap_new_wstop__TopicType(struct soap *soap, int n = -1) { return soap_instantiate_wstop__TopicType(soap, n, NULL, NULL, NULL); }

inline wstop__TopicType * soap_new_req_wstop__TopicType(struct soap *soap, std::string& name) { wstop__TopicType *_p = soap_instantiate_wstop__TopicType(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->wstop__TopicType::name = name; } return _p; }

inline wstop__TopicType * soap_new_set_wstop__TopicType(struct soap *soap, wstop__QueryExpressionType *MessagePattern, std::vector<wstop__TopicType * >& Topic, std::vector<char * >& __any, std::string& name, std::string *messageTypes, bool final_, wstop__Documentation *documentation1, char *__anyAttribute1, char *__item2) { wstop__TopicType *_p = soap_instantiate_wstop__TopicType(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->wstop__TopicType::MessagePattern = MessagePattern; _p->wstop__TopicType::Topic = Topic; _p->wstop__TopicType::__any = __any; _p->wstop__TopicType::name = name; _p->wstop__TopicType::messageTypes = messageTypes; _p->wstop__TopicType::final_ = final_; _p->wstop__ExtensibleDocumented::documentation = documentation1; _p->wstop__ExtensibleDocumented::__anyAttribute = __anyAttribute1; _p->xsd__anyType::__item = __item2; } return _p; }

inline void soap_delete_wstop__TopicType(struct soap *soap, wstop__TopicType *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_wstop__TopicType(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_wstop__TopicNamespaceType
#define SOAP_TYPE_wstop__TopicNamespaceType (146)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_wstop__TopicNamespaceType(struct soap*, const char*, int, const wstop__TopicNamespaceType *, const char*);
SOAP_FMAC3 wstop__TopicNamespaceType * SOAP_FMAC4 soap_in_wstop__TopicNamespaceType(struct soap*, const char*, wstop__TopicNamespaceType *, const char*);

#ifndef soap_write_wstop__TopicNamespaceType
#define soap_write_wstop__TopicNamespaceType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "wstop:TopicNamespaceType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 wstop__TopicNamespaceType * SOAP_FMAC4 soap_get_wstop__TopicNamespaceType(struct soap*, wstop__TopicNamespaceType *, const char*, const char*);

#ifndef soap_read_wstop__TopicNamespaceType
#define soap_read_wstop__TopicNamespaceType(soap, data) ( soap_begin_recv(soap) || !soap_get_wstop__TopicNamespaceType(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 wstop__TopicNamespaceType * SOAP_FMAC2 soap_instantiate_wstop__TopicNamespaceType(struct soap*, int, const char*, const char*, size_t*);

inline wstop__TopicNamespaceType * soap_new_wstop__TopicNamespaceType(struct soap *soap, int n = -1) { return soap_instantiate_wstop__TopicNamespaceType(soap, n, NULL, NULL, NULL); }

inline wstop__TopicNamespaceType * soap_new_req_wstop__TopicNamespaceType(struct soap *soap, std::string& targetNamespace) { wstop__TopicNamespaceType *_p = soap_instantiate_wstop__TopicNamespaceType(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->wstop__TopicNamespaceType::targetNamespace = targetNamespace; } return _p; }

inline wstop__TopicNamespaceType * soap_new_set_wstop__TopicNamespaceType(struct soap *soap, std::vector<_wstop__TopicNamespaceType_Topic >*Topic, std::vector<char * >& __any, std::string *name, std::string& targetNamespace, bool final_, wstop__Documentation *documentation1, char *__anyAttribute1, char *__item2) { wstop__TopicNamespaceType *_p = soap_instantiate_wstop__TopicNamespaceType(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->wstop__TopicNamespaceType::Topic = Topic; _p->wstop__TopicNamespaceType::__any = __any; _p->wstop__TopicNamespaceType::name = name; _p->wstop__TopicNamespaceType::targetNamespace = targetNamespace; _p->wstop__TopicNamespaceType::final_ = final_; _p->wstop__ExtensibleDocumented::documentation = documentation1; _p->wstop__ExtensibleDocumented::__anyAttribute = __anyAttribute1; _p->xsd__anyType::__item = __item2; } return _p; }

inline void soap_delete_wstop__TopicNamespaceType(struct soap *soap, wstop__TopicNamespaceType *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_wstop__TopicNamespaceType(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_wstop__QueryExpressionType
#define SOAP_TYPE_wstop__QueryExpressionType (145)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_wstop__QueryExpressionType(struct soap*, const char*, int, const wstop__QueryExpressionType *, const char*);
SOAP_FMAC3 wstop__QueryExpressionType * SOAP_FMAC4 soap_in_wstop__QueryExpressionType(struct soap*, const char*, wstop__QueryExpressionType *, const char*);

#ifndef soap_write_wstop__QueryExpressionType
#define soap_write_wstop__QueryExpressionType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "wstop:QueryExpressionType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 wstop__QueryExpressionType * SOAP_FMAC4 soap_get_wstop__QueryExpressionType(struct soap*, wstop__QueryExpressionType *, const char*, const char*);

#ifndef soap_read_wstop__QueryExpressionType
#define soap_read_wstop__QueryExpressionType(soap, data) ( soap_begin_recv(soap) || !soap_get_wstop__QueryExpressionType(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 wstop__QueryExpressionType * SOAP_FMAC2 soap_instantiate_wstop__QueryExpressionType(struct soap*, int, const char*, const char*, size_t*);

inline wstop__QueryExpressionType * soap_new_wstop__QueryExpressionType(struct soap *soap, int n = -1) { return soap_instantiate_wstop__QueryExpressionType(soap, n, NULL, NULL, NULL); }

inline wstop__QueryExpressionType * soap_new_req_wstop__QueryExpressionType(struct soap *soap, std::string& Dialect) { wstop__QueryExpressionType *_p = soap_instantiate_wstop__QueryExpressionType(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->wstop__QueryExpressionType::Dialect = Dialect; } return _p; }

inline wstop__QueryExpressionType * soap_new_set_wstop__QueryExpressionType(struct soap *soap, char *__any, std::string& Dialect, char *__mixed, char *__item1) { wstop__QueryExpressionType *_p = soap_instantiate_wstop__QueryExpressionType(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->wstop__QueryExpressionType::__any = __any; _p->wstop__QueryExpressionType::Dialect = Dialect; _p->wstop__QueryExpressionType::__mixed = __mixed; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_wstop__QueryExpressionType(struct soap *soap, wstop__QueryExpressionType *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_wstop__QueryExpressionType(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_wstop__ExtensibleDocumented
#define SOAP_TYPE_wstop__ExtensibleDocumented (144)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_wstop__ExtensibleDocumented(struct soap*, const char*, int, const wstop__ExtensibleDocumented *, const char*);
SOAP_FMAC3 wstop__ExtensibleDocumented * SOAP_FMAC4 soap_in_wstop__ExtensibleDocumented(struct soap*, const char*, wstop__ExtensibleDocumented *, const char*);

#ifndef soap_write_wstop__ExtensibleDocumented
#define soap_write_wstop__ExtensibleDocumented(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "wstop:ExtensibleDocumented", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 wstop__ExtensibleDocumented * SOAP_FMAC4 soap_get_wstop__ExtensibleDocumented(struct soap*, wstop__ExtensibleDocumented *, const char*, const char*);

#ifndef soap_read_wstop__ExtensibleDocumented
#define soap_read_wstop__ExtensibleDocumented(soap, data) ( soap_begin_recv(soap) || !soap_get_wstop__ExtensibleDocumented(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 wstop__ExtensibleDocumented * SOAP_FMAC2 soap_instantiate_wstop__ExtensibleDocumented(struct soap*, int, const char*, const char*, size_t*);

inline wstop__ExtensibleDocumented * soap_new_wstop__ExtensibleDocumented(struct soap *soap, int n = -1) { return soap_instantiate_wstop__ExtensibleDocumented(soap, n, NULL, NULL, NULL); }

inline wstop__ExtensibleDocumented * soap_new_req_wstop__ExtensibleDocumented(struct soap *soap) { wstop__ExtensibleDocumented *_p = soap_instantiate_wstop__ExtensibleDocumented(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline wstop__ExtensibleDocumented * soap_new_set_wstop__ExtensibleDocumented(struct soap *soap, wstop__Documentation *documentation, char *__anyAttribute, char *__item1) { wstop__ExtensibleDocumented *_p = soap_instantiate_wstop__ExtensibleDocumented(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->wstop__ExtensibleDocumented::documentation = documentation; _p->wstop__ExtensibleDocumented::__anyAttribute = __anyAttribute; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_wstop__ExtensibleDocumented(struct soap *soap, wstop__ExtensibleDocumented *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_wstop__ExtensibleDocumented(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_wstop__Documentation
#define SOAP_TYPE_wstop__Documentation (143)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_wstop__Documentation(struct soap*, const char*, int, const wstop__Documentation *, const char*);
SOAP_FMAC3 wstop__Documentation * SOAP_FMAC4 soap_in_wstop__Documentation(struct soap*, const char*, wstop__Documentation *, const char*);

#ifndef soap_write_wstop__Documentation
#define soap_write_wstop__Documentation(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "wstop:Documentation", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 wstop__Documentation * SOAP_FMAC4 soap_get_wstop__Documentation(struct soap*, wstop__Documentation *, const char*, const char*);

#ifndef soap_read_wstop__Documentation
#define soap_read_wstop__Documentation(soap, data) ( soap_begin_recv(soap) || !soap_get_wstop__Documentation(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 wstop__Documentation * SOAP_FMAC2 soap_instantiate_wstop__Documentation(struct soap*, int, const char*, const char*, size_t*);

inline wstop__Documentation * soap_new_wstop__Documentation(struct soap *soap, int n = -1) { return soap_instantiate_wstop__Documentation(soap, n, NULL, NULL, NULL); }

inline wstop__Documentation * soap_new_req_wstop__Documentation(struct soap *soap) { wstop__Documentation *_p = soap_instantiate_wstop__Documentation(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline wstop__Documentation * soap_new_set_wstop__Documentation(struct soap *soap, std::vector<char * >& __any, char *__mixed, char *__item1) { wstop__Documentation *_p = soap_instantiate_wstop__Documentation(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->wstop__Documentation::__any = __any; _p->wstop__Documentation::__mixed = __mixed; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_wstop__Documentation(struct soap *soap, wstop__Documentation *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_wstop__Documentation(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE__wsnt__ResumeSubscriptionResponse
#define SOAP_TYPE__wsnt__ResumeSubscriptionResponse (142)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__wsnt__ResumeSubscriptionResponse(struct soap*, const char*, int, const _wsnt__ResumeSubscriptionResponse *, const char*);
SOAP_FMAC3 _wsnt__ResumeSubscriptionResponse * SOAP_FMAC4 soap_in__wsnt__ResumeSubscriptionResponse(struct soap*, const char*, _wsnt__ResumeSubscriptionResponse *, const char*);

#ifndef soap_write__wsnt__ResumeSubscriptionResponse
#define soap_write__wsnt__ResumeSubscriptionResponse(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "wsnt:ResumeSubscriptionResponse", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _wsnt__ResumeSubscriptionResponse * SOAP_FMAC4 soap_get__wsnt__ResumeSubscriptionResponse(struct soap*, _wsnt__ResumeSubscriptionResponse *, const char*, const char*);

#ifndef soap_read__wsnt__ResumeSubscriptionResponse
#define soap_read__wsnt__ResumeSubscriptionResponse(soap, data) ( soap_begin_recv(soap) || !soap_get__wsnt__ResumeSubscriptionResponse(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 _wsnt__ResumeSubscriptionResponse * SOAP_FMAC2 soap_instantiate__wsnt__ResumeSubscriptionResponse(struct soap*, int, const char*, const char*, size_t*);

inline _wsnt__ResumeSubscriptionResponse * soap_new__wsnt__ResumeSubscriptionResponse(struct soap *soap, int n = -1) { return soap_instantiate__wsnt__ResumeSubscriptionResponse(soap, n, NULL, NULL, NULL); }

inline _wsnt__ResumeSubscriptionResponse * soap_new_req__wsnt__ResumeSubscriptionResponse(struct soap *soap) { _wsnt__ResumeSubscriptionResponse *_p = soap_instantiate__wsnt__ResumeSubscriptionResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline _wsnt__ResumeSubscriptionResponse * soap_new_set__wsnt__ResumeSubscriptionResponse(struct soap *soap, std::vector<char * >& __any) { _wsnt__ResumeSubscriptionResponse *_p = soap_instantiate__wsnt__ResumeSubscriptionResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_wsnt__ResumeSubscriptionResponse::__any = __any; } return _p; }

inline void soap_delete__wsnt__ResumeSubscriptionResponse(struct soap *soap, _wsnt__ResumeSubscriptionResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__wsnt__ResumeSubscriptionResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE__wsnt__ResumeSubscription
#define SOAP_TYPE__wsnt__ResumeSubscription (141)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__wsnt__ResumeSubscription(struct soap*, const char*, int, const _wsnt__ResumeSubscription *, const char*);
SOAP_FMAC3 _wsnt__ResumeSubscription * SOAP_FMAC4 soap_in__wsnt__ResumeSubscription(struct soap*, const char*, _wsnt__ResumeSubscription *, const char*);

#ifndef soap_write__wsnt__ResumeSubscription
#define soap_write__wsnt__ResumeSubscription(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "wsnt:ResumeSubscription", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _wsnt__ResumeSubscription * SOAP_FMAC4 soap_get__wsnt__ResumeSubscription(struct soap*, _wsnt__ResumeSubscription *, const char*, const char*);

#ifndef soap_read__wsnt__ResumeSubscription
#define soap_read__wsnt__ResumeSubscription(soap, data) ( soap_begin_recv(soap) || !soap_get__wsnt__ResumeSubscription(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 _wsnt__ResumeSubscription * SOAP_FMAC2 soap_instantiate__wsnt__ResumeSubscription(struct soap*, int, const char*, const char*, size_t*);

inline _wsnt__ResumeSubscription * soap_new__wsnt__ResumeSubscription(struct soap *soap, int n = -1) { return soap_instantiate__wsnt__ResumeSubscription(soap, n, NULL, NULL, NULL); }

inline _wsnt__ResumeSubscription * soap_new_req__wsnt__ResumeSubscription(struct soap *soap) { _wsnt__ResumeSubscription *_p = soap_instantiate__wsnt__ResumeSubscription(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline _wsnt__ResumeSubscription * soap_new_set__wsnt__ResumeSubscription(struct soap *soap, std::vector<char * >& __any) { _wsnt__ResumeSubscription *_p = soap_instantiate__wsnt__ResumeSubscription(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_wsnt__ResumeSubscription::__any = __any; } return _p; }

inline void soap_delete__wsnt__ResumeSubscription(struct soap *soap, _wsnt__ResumeSubscription *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__wsnt__ResumeSubscription(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE__wsnt__PauseSubscriptionResponse
#define SOAP_TYPE__wsnt__PauseSubscriptionResponse (140)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__wsnt__PauseSubscriptionResponse(struct soap*, const char*, int, const _wsnt__PauseSubscriptionResponse *, const char*);
SOAP_FMAC3 _wsnt__PauseSubscriptionResponse * SOAP_FMAC4 soap_in__wsnt__PauseSubscriptionResponse(struct soap*, const char*, _wsnt__PauseSubscriptionResponse *, const char*);

#ifndef soap_write__wsnt__PauseSubscriptionResponse
#define soap_write__wsnt__PauseSubscriptionResponse(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "wsnt:PauseSubscriptionResponse", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _wsnt__PauseSubscriptionResponse * SOAP_FMAC4 soap_get__wsnt__PauseSubscriptionResponse(struct soap*, _wsnt__PauseSubscriptionResponse *, const char*, const char*);

#ifndef soap_read__wsnt__PauseSubscriptionResponse
#define soap_read__wsnt__PauseSubscriptionResponse(soap, data) ( soap_begin_recv(soap) || !soap_get__wsnt__PauseSubscriptionResponse(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 _wsnt__PauseSubscriptionResponse * SOAP_FMAC2 soap_instantiate__wsnt__PauseSubscriptionResponse(struct soap*, int, const char*, const char*, size_t*);

inline _wsnt__PauseSubscriptionResponse * soap_new__wsnt__PauseSubscriptionResponse(struct soap *soap, int n = -1) { return soap_instantiate__wsnt__PauseSubscriptionResponse(soap, n, NULL, NULL, NULL); }

inline _wsnt__PauseSubscriptionResponse * soap_new_req__wsnt__PauseSubscriptionResponse(struct soap *soap) { _wsnt__PauseSubscriptionResponse *_p = soap_instantiate__wsnt__PauseSubscriptionResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline _wsnt__PauseSubscriptionResponse * soap_new_set__wsnt__PauseSubscriptionResponse(struct soap *soap, std::vector<char * >& __any) { _wsnt__PauseSubscriptionResponse *_p = soap_instantiate__wsnt__PauseSubscriptionResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_wsnt__PauseSubscriptionResponse::__any = __any; } return _p; }

inline void soap_delete__wsnt__PauseSubscriptionResponse(struct soap *soap, _wsnt__PauseSubscriptionResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__wsnt__PauseSubscriptionResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE__wsnt__PauseSubscription
#define SOAP_TYPE__wsnt__PauseSubscription (139)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__wsnt__PauseSubscription(struct soap*, const char*, int, const _wsnt__PauseSubscription *, const char*);
SOAP_FMAC3 _wsnt__PauseSubscription * SOAP_FMAC4 soap_in__wsnt__PauseSubscription(struct soap*, const char*, _wsnt__PauseSubscription *, const char*);

#ifndef soap_write__wsnt__PauseSubscription
#define soap_write__wsnt__PauseSubscription(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "wsnt:PauseSubscription", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _wsnt__PauseSubscription * SOAP_FMAC4 soap_get__wsnt__PauseSubscription(struct soap*, _wsnt__PauseSubscription *, const char*, const char*);

#ifndef soap_read__wsnt__PauseSubscription
#define soap_read__wsnt__PauseSubscription(soap, data) ( soap_begin_recv(soap) || !soap_get__wsnt__PauseSubscription(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 _wsnt__PauseSubscription * SOAP_FMAC2 soap_instantiate__wsnt__PauseSubscription(struct soap*, int, const char*, const char*, size_t*);

inline _wsnt__PauseSubscription * soap_new__wsnt__PauseSubscription(struct soap *soap, int n = -1) { return soap_instantiate__wsnt__PauseSubscription(soap, n, NULL, NULL, NULL); }

inline _wsnt__PauseSubscription * soap_new_req__wsnt__PauseSubscription(struct soap *soap) { _wsnt__PauseSubscription *_p = soap_instantiate__wsnt__PauseSubscription(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline _wsnt__PauseSubscription * soap_new_set__wsnt__PauseSubscription(struct soap *soap, std::vector<char * >& __any) { _wsnt__PauseSubscription *_p = soap_instantiate__wsnt__PauseSubscription(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_wsnt__PauseSubscription::__any = __any; } return _p; }

inline void soap_delete__wsnt__PauseSubscription(struct soap *soap, _wsnt__PauseSubscription *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__wsnt__PauseSubscription(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE__wsnt__UnsubscribeResponse
#define SOAP_TYPE__wsnt__UnsubscribeResponse (138)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__wsnt__UnsubscribeResponse(struct soap*, const char*, int, const _wsnt__UnsubscribeResponse *, const char*);
SOAP_FMAC3 _wsnt__UnsubscribeResponse * SOAP_FMAC4 soap_in__wsnt__UnsubscribeResponse(struct soap*, const char*, _wsnt__UnsubscribeResponse *, const char*);

#ifndef soap_write__wsnt__UnsubscribeResponse
#define soap_write__wsnt__UnsubscribeResponse(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "wsnt:UnsubscribeResponse", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _wsnt__UnsubscribeResponse * SOAP_FMAC4 soap_get__wsnt__UnsubscribeResponse(struct soap*, _wsnt__UnsubscribeResponse *, const char*, const char*);

#ifndef soap_read__wsnt__UnsubscribeResponse
#define soap_read__wsnt__UnsubscribeResponse(soap, data) ( soap_begin_recv(soap) || !soap_get__wsnt__UnsubscribeResponse(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 _wsnt__UnsubscribeResponse * SOAP_FMAC2 soap_instantiate__wsnt__UnsubscribeResponse(struct soap*, int, const char*, const char*, size_t*);

inline _wsnt__UnsubscribeResponse * soap_new__wsnt__UnsubscribeResponse(struct soap *soap, int n = -1) { return soap_instantiate__wsnt__UnsubscribeResponse(soap, n, NULL, NULL, NULL); }

inline _wsnt__UnsubscribeResponse * soap_new_req__wsnt__UnsubscribeResponse(struct soap *soap) { _wsnt__UnsubscribeResponse *_p = soap_instantiate__wsnt__UnsubscribeResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline _wsnt__UnsubscribeResponse * soap_new_set__wsnt__UnsubscribeResponse(struct soap *soap, std::vector<char * >& __any) { _wsnt__UnsubscribeResponse *_p = soap_instantiate__wsnt__UnsubscribeResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_wsnt__UnsubscribeResponse::__any = __any; } return _p; }

inline void soap_delete__wsnt__UnsubscribeResponse(struct soap *soap, _wsnt__UnsubscribeResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__wsnt__UnsubscribeResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE__wsnt__Unsubscribe
#define SOAP_TYPE__wsnt__Unsubscribe (137)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__wsnt__Unsubscribe(struct soap*, const char*, int, const _wsnt__Unsubscribe *, const char*);
SOAP_FMAC3 _wsnt__Unsubscribe * SOAP_FMAC4 soap_in__wsnt__Unsubscribe(struct soap*, const char*, _wsnt__Unsubscribe *, const char*);

#ifndef soap_write__wsnt__Unsubscribe
#define soap_write__wsnt__Unsubscribe(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "wsnt:Unsubscribe", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _wsnt__Unsubscribe * SOAP_FMAC4 soap_get__wsnt__Unsubscribe(struct soap*, _wsnt__Unsubscribe *, const char*, const char*);

#ifndef soap_read__wsnt__Unsubscribe
#define soap_read__wsnt__Unsubscribe(soap, data) ( soap_begin_recv(soap) || !soap_get__wsnt__Unsubscribe(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 _wsnt__Unsubscribe * SOAP_FMAC2 soap_instantiate__wsnt__Unsubscribe(struct soap*, int, const char*, const char*, size_t*);

inline _wsnt__Unsubscribe * soap_new__wsnt__Unsubscribe(struct soap *soap, int n = -1) { return soap_instantiate__wsnt__Unsubscribe(soap, n, NULL, NULL, NULL); }

inline _wsnt__Unsubscribe * soap_new_req__wsnt__Unsubscribe(struct soap *soap) { _wsnt__Unsubscribe *_p = soap_instantiate__wsnt__Unsubscribe(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline _wsnt__Unsubscribe * soap_new_set__wsnt__Unsubscribe(struct soap *soap, std::vector<char * >& __any) { _wsnt__Unsubscribe *_p = soap_instantiate__wsnt__Unsubscribe(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_wsnt__Unsubscribe::__any = __any; } return _p; }

inline void soap_delete__wsnt__Unsubscribe(struct soap *soap, _wsnt__Unsubscribe *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__wsnt__Unsubscribe(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE__wsnt__RenewResponse
#define SOAP_TYPE__wsnt__RenewResponse (136)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__wsnt__RenewResponse(struct soap*, const char*, int, const _wsnt__RenewResponse *, const char*);
SOAP_FMAC3 _wsnt__RenewResponse * SOAP_FMAC4 soap_in__wsnt__RenewResponse(struct soap*, const char*, _wsnt__RenewResponse *, const char*);

#ifndef soap_write__wsnt__RenewResponse
#define soap_write__wsnt__RenewResponse(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "wsnt:RenewResponse", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _wsnt__RenewResponse * SOAP_FMAC4 soap_get__wsnt__RenewResponse(struct soap*, _wsnt__RenewResponse *, const char*, const char*);

#ifndef soap_read__wsnt__RenewResponse
#define soap_read__wsnt__RenewResponse(soap, data) ( soap_begin_recv(soap) || !soap_get__wsnt__RenewResponse(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 _wsnt__RenewResponse * SOAP_FMAC2 soap_instantiate__wsnt__RenewResponse(struct soap*, int, const char*, const char*, size_t*);

inline _wsnt__RenewResponse * soap_new__wsnt__RenewResponse(struct soap *soap, int n = -1) { return soap_instantiate__wsnt__RenewResponse(soap, n, NULL, NULL, NULL); }

inline _wsnt__RenewResponse * soap_new_req__wsnt__RenewResponse(struct soap *soap, time_t TerminationTime) { _wsnt__RenewResponse *_p = soap_instantiate__wsnt__RenewResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_wsnt__RenewResponse::TerminationTime = TerminationTime; } return _p; }

inline _wsnt__RenewResponse * soap_new_set__wsnt__RenewResponse(struct soap *soap, time_t TerminationTime, time_t *CurrentTime, std::vector<char * >& __any) { _wsnt__RenewResponse *_p = soap_instantiate__wsnt__RenewResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_wsnt__RenewResponse::TerminationTime = TerminationTime; _p->_wsnt__RenewResponse::CurrentTime = CurrentTime; _p->_wsnt__RenewResponse::__any = __any; } return _p; }

inline void soap_delete__wsnt__RenewResponse(struct soap *soap, _wsnt__RenewResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__wsnt__RenewResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE__wsnt__Renew
#define SOAP_TYPE__wsnt__Renew (135)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__wsnt__Renew(struct soap*, const char*, int, const _wsnt__Renew *, const char*);
SOAP_FMAC3 _wsnt__Renew * SOAP_FMAC4 soap_in__wsnt__Renew(struct soap*, const char*, _wsnt__Renew *, const char*);

#ifndef soap_write__wsnt__Renew
#define soap_write__wsnt__Renew(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "wsnt:Renew", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _wsnt__Renew * SOAP_FMAC4 soap_get__wsnt__Renew(struct soap*, _wsnt__Renew *, const char*, const char*);

#ifndef soap_read__wsnt__Renew
#define soap_read__wsnt__Renew(soap, data) ( soap_begin_recv(soap) || !soap_get__wsnt__Renew(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 _wsnt__Renew * SOAP_FMAC2 soap_instantiate__wsnt__Renew(struct soap*, int, const char*, const char*, size_t*);

inline _wsnt__Renew * soap_new__wsnt__Renew(struct soap *soap, int n = -1) { return soap_instantiate__wsnt__Renew(soap, n, NULL, NULL, NULL); }

inline _wsnt__Renew * soap_new_req__wsnt__Renew(struct soap *soap, std::string *TerminationTime) { _wsnt__Renew *_p = soap_instantiate__wsnt__Renew(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_wsnt__Renew::TerminationTime = TerminationTime; } return _p; }

inline _wsnt__Renew * soap_new_set__wsnt__Renew(struct soap *soap, std::string *TerminationTime, std::vector<char * >& __any) { _wsnt__Renew *_p = soap_instantiate__wsnt__Renew(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_wsnt__Renew::TerminationTime = TerminationTime; _p->_wsnt__Renew::__any = __any; } return _p; }

inline void soap_delete__wsnt__Renew(struct soap *soap, _wsnt__Renew *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__wsnt__Renew(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE__wsnt__CreatePullPointResponse
#define SOAP_TYPE__wsnt__CreatePullPointResponse (134)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__wsnt__CreatePullPointResponse(struct soap*, const char*, int, const _wsnt__CreatePullPointResponse *, const char*);
SOAP_FMAC3 _wsnt__CreatePullPointResponse * SOAP_FMAC4 soap_in__wsnt__CreatePullPointResponse(struct soap*, const char*, _wsnt__CreatePullPointResponse *, const char*);

#ifndef soap_write__wsnt__CreatePullPointResponse
#define soap_write__wsnt__CreatePullPointResponse(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "wsnt:CreatePullPointResponse", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _wsnt__CreatePullPointResponse * SOAP_FMAC4 soap_get__wsnt__CreatePullPointResponse(struct soap*, _wsnt__CreatePullPointResponse *, const char*, const char*);

#ifndef soap_read__wsnt__CreatePullPointResponse
#define soap_read__wsnt__CreatePullPointResponse(soap, data) ( soap_begin_recv(soap) || !soap_get__wsnt__CreatePullPointResponse(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 _wsnt__CreatePullPointResponse * SOAP_FMAC2 soap_instantiate__wsnt__CreatePullPointResponse(struct soap*, int, const char*, const char*, size_t*);

inline _wsnt__CreatePullPointResponse * soap_new__wsnt__CreatePullPointResponse(struct soap *soap, int n = -1) { return soap_instantiate__wsnt__CreatePullPointResponse(soap, n, NULL, NULL, NULL); }

inline _wsnt__CreatePullPointResponse * soap_new_req__wsnt__CreatePullPointResponse(struct soap *soap, struct wsa5__EndpointReferenceType& PullPoint) { _wsnt__CreatePullPointResponse *_p = soap_instantiate__wsnt__CreatePullPointResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_wsnt__CreatePullPointResponse::PullPoint = PullPoint; } return _p; }

inline _wsnt__CreatePullPointResponse * soap_new_set__wsnt__CreatePullPointResponse(struct soap *soap, struct wsa5__EndpointReferenceType& PullPoint, std::vector<char * >& __any, char *__anyAttribute) { _wsnt__CreatePullPointResponse *_p = soap_instantiate__wsnt__CreatePullPointResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_wsnt__CreatePullPointResponse::PullPoint = PullPoint; _p->_wsnt__CreatePullPointResponse::__any = __any; _p->_wsnt__CreatePullPointResponse::__anyAttribute = __anyAttribute; } return _p; }

inline void soap_delete__wsnt__CreatePullPointResponse(struct soap *soap, _wsnt__CreatePullPointResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__wsnt__CreatePullPointResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE__wsnt__CreatePullPoint
#define SOAP_TYPE__wsnt__CreatePullPoint (133)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__wsnt__CreatePullPoint(struct soap*, const char*, int, const _wsnt__CreatePullPoint *, const char*);
SOAP_FMAC3 _wsnt__CreatePullPoint * SOAP_FMAC4 soap_in__wsnt__CreatePullPoint(struct soap*, const char*, _wsnt__CreatePullPoint *, const char*);

#ifndef soap_write__wsnt__CreatePullPoint
#define soap_write__wsnt__CreatePullPoint(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "wsnt:CreatePullPoint", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _wsnt__CreatePullPoint * SOAP_FMAC4 soap_get__wsnt__CreatePullPoint(struct soap*, _wsnt__CreatePullPoint *, const char*, const char*);

#ifndef soap_read__wsnt__CreatePullPoint
#define soap_read__wsnt__CreatePullPoint(soap, data) ( soap_begin_recv(soap) || !soap_get__wsnt__CreatePullPoint(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 _wsnt__CreatePullPoint * SOAP_FMAC2 soap_instantiate__wsnt__CreatePullPoint(struct soap*, int, const char*, const char*, size_t*);

inline _wsnt__CreatePullPoint * soap_new__wsnt__CreatePullPoint(struct soap *soap, int n = -1) { return soap_instantiate__wsnt__CreatePullPoint(soap, n, NULL, NULL, NULL); }

inline _wsnt__CreatePullPoint * soap_new_req__wsnt__CreatePullPoint(struct soap *soap) { _wsnt__CreatePullPoint *_p = soap_instantiate__wsnt__CreatePullPoint(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline _wsnt__CreatePullPoint * soap_new_set__wsnt__CreatePullPoint(struct soap *soap, std::vector<char * >& __any, char *__anyAttribute) { _wsnt__CreatePullPoint *_p = soap_instantiate__wsnt__CreatePullPoint(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_wsnt__CreatePullPoint::__any = __any; _p->_wsnt__CreatePullPoint::__anyAttribute = __anyAttribute; } return _p; }

inline void soap_delete__wsnt__CreatePullPoint(struct soap *soap, _wsnt__CreatePullPoint *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__wsnt__CreatePullPoint(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE__wsnt__DestroyPullPointResponse
#define SOAP_TYPE__wsnt__DestroyPullPointResponse (132)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__wsnt__DestroyPullPointResponse(struct soap*, const char*, int, const _wsnt__DestroyPullPointResponse *, const char*);
SOAP_FMAC3 _wsnt__DestroyPullPointResponse * SOAP_FMAC4 soap_in__wsnt__DestroyPullPointResponse(struct soap*, const char*, _wsnt__DestroyPullPointResponse *, const char*);

#ifndef soap_write__wsnt__DestroyPullPointResponse
#define soap_write__wsnt__DestroyPullPointResponse(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "wsnt:DestroyPullPointResponse", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _wsnt__DestroyPullPointResponse * SOAP_FMAC4 soap_get__wsnt__DestroyPullPointResponse(struct soap*, _wsnt__DestroyPullPointResponse *, const char*, const char*);

#ifndef soap_read__wsnt__DestroyPullPointResponse
#define soap_read__wsnt__DestroyPullPointResponse(soap, data) ( soap_begin_recv(soap) || !soap_get__wsnt__DestroyPullPointResponse(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 _wsnt__DestroyPullPointResponse * SOAP_FMAC2 soap_instantiate__wsnt__DestroyPullPointResponse(struct soap*, int, const char*, const char*, size_t*);

inline _wsnt__DestroyPullPointResponse * soap_new__wsnt__DestroyPullPointResponse(struct soap *soap, int n = -1) { return soap_instantiate__wsnt__DestroyPullPointResponse(soap, n, NULL, NULL, NULL); }

inline _wsnt__DestroyPullPointResponse * soap_new_req__wsnt__DestroyPullPointResponse(struct soap *soap) { _wsnt__DestroyPullPointResponse *_p = soap_instantiate__wsnt__DestroyPullPointResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline _wsnt__DestroyPullPointResponse * soap_new_set__wsnt__DestroyPullPointResponse(struct soap *soap, std::vector<char * >& __any, char *__anyAttribute) { _wsnt__DestroyPullPointResponse *_p = soap_instantiate__wsnt__DestroyPullPointResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_wsnt__DestroyPullPointResponse::__any = __any; _p->_wsnt__DestroyPullPointResponse::__anyAttribute = __anyAttribute; } return _p; }

inline void soap_delete__wsnt__DestroyPullPointResponse(struct soap *soap, _wsnt__DestroyPullPointResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__wsnt__DestroyPullPointResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE__wsnt__DestroyPullPoint
#define SOAP_TYPE__wsnt__DestroyPullPoint (131)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__wsnt__DestroyPullPoint(struct soap*, const char*, int, const _wsnt__DestroyPullPoint *, const char*);
SOAP_FMAC3 _wsnt__DestroyPullPoint * SOAP_FMAC4 soap_in__wsnt__DestroyPullPoint(struct soap*, const char*, _wsnt__DestroyPullPoint *, const char*);

#ifndef soap_write__wsnt__DestroyPullPoint
#define soap_write__wsnt__DestroyPullPoint(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "wsnt:DestroyPullPoint", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _wsnt__DestroyPullPoint * SOAP_FMAC4 soap_get__wsnt__DestroyPullPoint(struct soap*, _wsnt__DestroyPullPoint *, const char*, const char*);

#ifndef soap_read__wsnt__DestroyPullPoint
#define soap_read__wsnt__DestroyPullPoint(soap, data) ( soap_begin_recv(soap) || !soap_get__wsnt__DestroyPullPoint(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 _wsnt__DestroyPullPoint * SOAP_FMAC2 soap_instantiate__wsnt__DestroyPullPoint(struct soap*, int, const char*, const char*, size_t*);

inline _wsnt__DestroyPullPoint * soap_new__wsnt__DestroyPullPoint(struct soap *soap, int n = -1) { return soap_instantiate__wsnt__DestroyPullPoint(soap, n, NULL, NULL, NULL); }

inline _wsnt__DestroyPullPoint * soap_new_req__wsnt__DestroyPullPoint(struct soap *soap) { _wsnt__DestroyPullPoint *_p = soap_instantiate__wsnt__DestroyPullPoint(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline _wsnt__DestroyPullPoint * soap_new_set__wsnt__DestroyPullPoint(struct soap *soap, std::vector<char * >& __any, char *__anyAttribute) { _wsnt__DestroyPullPoint *_p = soap_instantiate__wsnt__DestroyPullPoint(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_wsnt__DestroyPullPoint::__any = __any; _p->_wsnt__DestroyPullPoint::__anyAttribute = __anyAttribute; } return _p; }

inline void soap_delete__wsnt__DestroyPullPoint(struct soap *soap, _wsnt__DestroyPullPoint *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__wsnt__DestroyPullPoint(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE__wsnt__GetMessagesResponse
#define SOAP_TYPE__wsnt__GetMessagesResponse (130)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__wsnt__GetMessagesResponse(struct soap*, const char*, int, const _wsnt__GetMessagesResponse *, const char*);
SOAP_FMAC3 _wsnt__GetMessagesResponse * SOAP_FMAC4 soap_in__wsnt__GetMessagesResponse(struct soap*, const char*, _wsnt__GetMessagesResponse *, const char*);

#ifndef soap_write__wsnt__GetMessagesResponse
#define soap_write__wsnt__GetMessagesResponse(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "wsnt:GetMessagesResponse", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _wsnt__GetMessagesResponse * SOAP_FMAC4 soap_get__wsnt__GetMessagesResponse(struct soap*, _wsnt__GetMessagesResponse *, const char*, const char*);

#ifndef soap_read__wsnt__GetMessagesResponse
#define soap_read__wsnt__GetMessagesResponse(soap, data) ( soap_begin_recv(soap) || !soap_get__wsnt__GetMessagesResponse(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 _wsnt__GetMessagesResponse * SOAP_FMAC2 soap_instantiate__wsnt__GetMessagesResponse(struct soap*, int, const char*, const char*, size_t*);

inline _wsnt__GetMessagesResponse * soap_new__wsnt__GetMessagesResponse(struct soap *soap, int n = -1) { return soap_instantiate__wsnt__GetMessagesResponse(soap, n, NULL, NULL, NULL); }

inline _wsnt__GetMessagesResponse * soap_new_req__wsnt__GetMessagesResponse(struct soap *soap) { _wsnt__GetMessagesResponse *_p = soap_instantiate__wsnt__GetMessagesResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline _wsnt__GetMessagesResponse * soap_new_set__wsnt__GetMessagesResponse(struct soap *soap, std::vector<wsnt__NotificationMessageHolderType * >& NotificationMessage, std::vector<char * >& __any, char *__anyAttribute) { _wsnt__GetMessagesResponse *_p = soap_instantiate__wsnt__GetMessagesResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_wsnt__GetMessagesResponse::NotificationMessage = NotificationMessage; _p->_wsnt__GetMessagesResponse::__any = __any; _p->_wsnt__GetMessagesResponse::__anyAttribute = __anyAttribute; } return _p; }

inline void soap_delete__wsnt__GetMessagesResponse(struct soap *soap, _wsnt__GetMessagesResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__wsnt__GetMessagesResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE__wsnt__GetMessages
#define SOAP_TYPE__wsnt__GetMessages (129)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__wsnt__GetMessages(struct soap*, const char*, int, const _wsnt__GetMessages *, const char*);
SOAP_FMAC3 _wsnt__GetMessages * SOAP_FMAC4 soap_in__wsnt__GetMessages(struct soap*, const char*, _wsnt__GetMessages *, const char*);

#ifndef soap_write__wsnt__GetMessages
#define soap_write__wsnt__GetMessages(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "wsnt:GetMessages", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _wsnt__GetMessages * SOAP_FMAC4 soap_get__wsnt__GetMessages(struct soap*, _wsnt__GetMessages *, const char*, const char*);

#ifndef soap_read__wsnt__GetMessages
#define soap_read__wsnt__GetMessages(soap, data) ( soap_begin_recv(soap) || !soap_get__wsnt__GetMessages(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 _wsnt__GetMessages * SOAP_FMAC2 soap_instantiate__wsnt__GetMessages(struct soap*, int, const char*, const char*, size_t*);

inline _wsnt__GetMessages * soap_new__wsnt__GetMessages(struct soap *soap, int n = -1) { return soap_instantiate__wsnt__GetMessages(soap, n, NULL, NULL, NULL); }

inline _wsnt__GetMessages * soap_new_req__wsnt__GetMessages(struct soap *soap) { _wsnt__GetMessages *_p = soap_instantiate__wsnt__GetMessages(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline _wsnt__GetMessages * soap_new_set__wsnt__GetMessages(struct soap *soap, std::string *MaximumNumber, std::vector<char * >& __any, char *__anyAttribute) { _wsnt__GetMessages *_p = soap_instantiate__wsnt__GetMessages(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_wsnt__GetMessages::MaximumNumber = MaximumNumber; _p->_wsnt__GetMessages::__any = __any; _p->_wsnt__GetMessages::__anyAttribute = __anyAttribute; } return _p; }

inline void soap_delete__wsnt__GetMessages(struct soap *soap, _wsnt__GetMessages *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__wsnt__GetMessages(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE__wsnt__GetCurrentMessageResponse
#define SOAP_TYPE__wsnt__GetCurrentMessageResponse (128)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__wsnt__GetCurrentMessageResponse(struct soap*, const char*, int, const _wsnt__GetCurrentMessageResponse *, const char*);
SOAP_FMAC3 _wsnt__GetCurrentMessageResponse * SOAP_FMAC4 soap_in__wsnt__GetCurrentMessageResponse(struct soap*, const char*, _wsnt__GetCurrentMessageResponse *, const char*);

#ifndef soap_write__wsnt__GetCurrentMessageResponse
#define soap_write__wsnt__GetCurrentMessageResponse(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "wsnt:GetCurrentMessageResponse", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _wsnt__GetCurrentMessageResponse * SOAP_FMAC4 soap_get__wsnt__GetCurrentMessageResponse(struct soap*, _wsnt__GetCurrentMessageResponse *, const char*, const char*);

#ifndef soap_read__wsnt__GetCurrentMessageResponse
#define soap_read__wsnt__GetCurrentMessageResponse(soap, data) ( soap_begin_recv(soap) || !soap_get__wsnt__GetCurrentMessageResponse(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 _wsnt__GetCurrentMessageResponse * SOAP_FMAC2 soap_instantiate__wsnt__GetCurrentMessageResponse(struct soap*, int, const char*, const char*, size_t*);

inline _wsnt__GetCurrentMessageResponse * soap_new__wsnt__GetCurrentMessageResponse(struct soap *soap, int n = -1) { return soap_instantiate__wsnt__GetCurrentMessageResponse(soap, n, NULL, NULL, NULL); }

inline _wsnt__GetCurrentMessageResponse * soap_new_req__wsnt__GetCurrentMessageResponse(struct soap *soap) { _wsnt__GetCurrentMessageResponse *_p = soap_instantiate__wsnt__GetCurrentMessageResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline _wsnt__GetCurrentMessageResponse * soap_new_set__wsnt__GetCurrentMessageResponse(struct soap *soap, std::vector<char * >& __any) { _wsnt__GetCurrentMessageResponse *_p = soap_instantiate__wsnt__GetCurrentMessageResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_wsnt__GetCurrentMessageResponse::__any = __any; } return _p; }

inline void soap_delete__wsnt__GetCurrentMessageResponse(struct soap *soap, _wsnt__GetCurrentMessageResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__wsnt__GetCurrentMessageResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE__wsnt__GetCurrentMessage
#define SOAP_TYPE__wsnt__GetCurrentMessage (127)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__wsnt__GetCurrentMessage(struct soap*, const char*, int, const _wsnt__GetCurrentMessage *, const char*);
SOAP_FMAC3 _wsnt__GetCurrentMessage * SOAP_FMAC4 soap_in__wsnt__GetCurrentMessage(struct soap*, const char*, _wsnt__GetCurrentMessage *, const char*);

#ifndef soap_write__wsnt__GetCurrentMessage
#define soap_write__wsnt__GetCurrentMessage(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "wsnt:GetCurrentMessage", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _wsnt__GetCurrentMessage * SOAP_FMAC4 soap_get__wsnt__GetCurrentMessage(struct soap*, _wsnt__GetCurrentMessage *, const char*, const char*);

#ifndef soap_read__wsnt__GetCurrentMessage
#define soap_read__wsnt__GetCurrentMessage(soap, data) ( soap_begin_recv(soap) || !soap_get__wsnt__GetCurrentMessage(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 _wsnt__GetCurrentMessage * SOAP_FMAC2 soap_instantiate__wsnt__GetCurrentMessage(struct soap*, int, const char*, const char*, size_t*);

inline _wsnt__GetCurrentMessage * soap_new__wsnt__GetCurrentMessage(struct soap *soap, int n = -1) { return soap_instantiate__wsnt__GetCurrentMessage(soap, n, NULL, NULL, NULL); }

inline _wsnt__GetCurrentMessage * soap_new_req__wsnt__GetCurrentMessage(struct soap *soap, wsnt__TopicExpressionType *Topic) { _wsnt__GetCurrentMessage *_p = soap_instantiate__wsnt__GetCurrentMessage(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_wsnt__GetCurrentMessage::Topic = Topic; } return _p; }

inline _wsnt__GetCurrentMessage * soap_new_set__wsnt__GetCurrentMessage(struct soap *soap, wsnt__TopicExpressionType *Topic, std::vector<char * >& __any) { _wsnt__GetCurrentMessage *_p = soap_instantiate__wsnt__GetCurrentMessage(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_wsnt__GetCurrentMessage::Topic = Topic; _p->_wsnt__GetCurrentMessage::__any = __any; } return _p; }

inline void soap_delete__wsnt__GetCurrentMessage(struct soap *soap, _wsnt__GetCurrentMessage *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__wsnt__GetCurrentMessage(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE__wsnt__SubscribeResponse
#define SOAP_TYPE__wsnt__SubscribeResponse (126)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__wsnt__SubscribeResponse(struct soap*, const char*, int, const _wsnt__SubscribeResponse *, const char*);
SOAP_FMAC3 _wsnt__SubscribeResponse * SOAP_FMAC4 soap_in__wsnt__SubscribeResponse(struct soap*, const char*, _wsnt__SubscribeResponse *, const char*);

#ifndef soap_write__wsnt__SubscribeResponse
#define soap_write__wsnt__SubscribeResponse(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "wsnt:SubscribeResponse", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _wsnt__SubscribeResponse * SOAP_FMAC4 soap_get__wsnt__SubscribeResponse(struct soap*, _wsnt__SubscribeResponse *, const char*, const char*);

#ifndef soap_read__wsnt__SubscribeResponse
#define soap_read__wsnt__SubscribeResponse(soap, data) ( soap_begin_recv(soap) || !soap_get__wsnt__SubscribeResponse(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 _wsnt__SubscribeResponse * SOAP_FMAC2 soap_instantiate__wsnt__SubscribeResponse(struct soap*, int, const char*, const char*, size_t*);

inline _wsnt__SubscribeResponse * soap_new__wsnt__SubscribeResponse(struct soap *soap, int n = -1) { return soap_instantiate__wsnt__SubscribeResponse(soap, n, NULL, NULL, NULL); }

inline _wsnt__SubscribeResponse * soap_new_req__wsnt__SubscribeResponse(struct soap *soap, struct wsa5__EndpointReferenceType& SubscriptionReference) { _wsnt__SubscribeResponse *_p = soap_instantiate__wsnt__SubscribeResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_wsnt__SubscribeResponse::SubscriptionReference = SubscriptionReference; } return _p; }

inline _wsnt__SubscribeResponse * soap_new_set__wsnt__SubscribeResponse(struct soap *soap, struct wsa5__EndpointReferenceType& SubscriptionReference, time_t *CurrentTime, time_t *TerminationTime, std::vector<char * >& __any) { _wsnt__SubscribeResponse *_p = soap_instantiate__wsnt__SubscribeResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_wsnt__SubscribeResponse::SubscriptionReference = SubscriptionReference; _p->_wsnt__SubscribeResponse::CurrentTime = CurrentTime; _p->_wsnt__SubscribeResponse::TerminationTime = TerminationTime; _p->_wsnt__SubscribeResponse::__any = __any; } return _p; }

inline void soap_delete__wsnt__SubscribeResponse(struct soap *soap, _wsnt__SubscribeResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__wsnt__SubscribeResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE__wsnt__Subscribe
#define SOAP_TYPE__wsnt__Subscribe (125)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__wsnt__Subscribe(struct soap*, const char*, int, const _wsnt__Subscribe *, const char*);
SOAP_FMAC3 _wsnt__Subscribe * SOAP_FMAC4 soap_in__wsnt__Subscribe(struct soap*, const char*, _wsnt__Subscribe *, const char*);

#ifndef soap_write__wsnt__Subscribe
#define soap_write__wsnt__Subscribe(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "wsnt:Subscribe", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _wsnt__Subscribe * SOAP_FMAC4 soap_get__wsnt__Subscribe(struct soap*, _wsnt__Subscribe *, const char*, const char*);

#ifndef soap_read__wsnt__Subscribe
#define soap_read__wsnt__Subscribe(soap, data) ( soap_begin_recv(soap) || !soap_get__wsnt__Subscribe(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 _wsnt__Subscribe * SOAP_FMAC2 soap_instantiate__wsnt__Subscribe(struct soap*, int, const char*, const char*, size_t*);

inline _wsnt__Subscribe * soap_new__wsnt__Subscribe(struct soap *soap, int n = -1) { return soap_instantiate__wsnt__Subscribe(soap, n, NULL, NULL, NULL); }

inline _wsnt__Subscribe * soap_new_req__wsnt__Subscribe(struct soap *soap, struct wsa5__EndpointReferenceType& ConsumerReference) { _wsnt__Subscribe *_p = soap_instantiate__wsnt__Subscribe(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_wsnt__Subscribe::ConsumerReference = ConsumerReference; } return _p; }

inline _wsnt__Subscribe * soap_new_set__wsnt__Subscribe(struct soap *soap, struct wsa5__EndpointReferenceType& ConsumerReference, wsnt__FilterType *Filter, std::string *InitialTerminationTime, _wsnt__Subscribe_SubscriptionPolicy *SubscriptionPolicy, std::vector<char * >& __any) { _wsnt__Subscribe *_p = soap_instantiate__wsnt__Subscribe(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_wsnt__Subscribe::ConsumerReference = ConsumerReference; _p->_wsnt__Subscribe::Filter = Filter; _p->_wsnt__Subscribe::InitialTerminationTime = InitialTerminationTime; _p->_wsnt__Subscribe::SubscriptionPolicy = SubscriptionPolicy; _p->_wsnt__Subscribe::__any = __any; } return _p; }

inline void soap_delete__wsnt__Subscribe(struct soap *soap, _wsnt__Subscribe *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__wsnt__Subscribe(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE__wsnt__UseRaw
#define SOAP_TYPE__wsnt__UseRaw (124)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__wsnt__UseRaw(struct soap*, const char*, int, const _wsnt__UseRaw *, const char*);
SOAP_FMAC3 _wsnt__UseRaw * SOAP_FMAC4 soap_in__wsnt__UseRaw(struct soap*, const char*, _wsnt__UseRaw *, const char*);

#ifndef soap_write__wsnt__UseRaw
#define soap_write__wsnt__UseRaw(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "wsnt:UseRaw", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _wsnt__UseRaw * SOAP_FMAC4 soap_get__wsnt__UseRaw(struct soap*, _wsnt__UseRaw *, const char*, const char*);

#ifndef soap_read__wsnt__UseRaw
#define soap_read__wsnt__UseRaw(soap, data) ( soap_begin_recv(soap) || !soap_get__wsnt__UseRaw(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 _wsnt__UseRaw * SOAP_FMAC2 soap_instantiate__wsnt__UseRaw(struct soap*, int, const char*, const char*, size_t*);

inline _wsnt__UseRaw * soap_new__wsnt__UseRaw(struct soap *soap, int n = -1) { return soap_instantiate__wsnt__UseRaw(soap, n, NULL, NULL, NULL); }

inline _wsnt__UseRaw * soap_new_req__wsnt__UseRaw(struct soap *soap) { _wsnt__UseRaw *_p = soap_instantiate__wsnt__UseRaw(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline _wsnt__UseRaw * soap_new_set__wsnt__UseRaw(struct soap *soap) { _wsnt__UseRaw *_p = soap_instantiate__wsnt__UseRaw(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline void soap_delete__wsnt__UseRaw(struct soap *soap, _wsnt__UseRaw *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__wsnt__UseRaw(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE__wsnt__Notify
#define SOAP_TYPE__wsnt__Notify (123)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__wsnt__Notify(struct soap*, const char*, int, const _wsnt__Notify *, const char*);
SOAP_FMAC3 _wsnt__Notify * SOAP_FMAC4 soap_in__wsnt__Notify(struct soap*, const char*, _wsnt__Notify *, const char*);

#ifndef soap_write__wsnt__Notify
#define soap_write__wsnt__Notify(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "wsnt:Notify", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _wsnt__Notify * SOAP_FMAC4 soap_get__wsnt__Notify(struct soap*, _wsnt__Notify *, const char*, const char*);

#ifndef soap_read__wsnt__Notify
#define soap_read__wsnt__Notify(soap, data) ( soap_begin_recv(soap) || !soap_get__wsnt__Notify(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 _wsnt__Notify * SOAP_FMAC2 soap_instantiate__wsnt__Notify(struct soap*, int, const char*, const char*, size_t*);

inline _wsnt__Notify * soap_new__wsnt__Notify(struct soap *soap, int n = -1) { return soap_instantiate__wsnt__Notify(soap, n, NULL, NULL, NULL); }

inline _wsnt__Notify * soap_new_req__wsnt__Notify(struct soap *soap, std::vector<wsnt__NotificationMessageHolderType * >& NotificationMessage) { _wsnt__Notify *_p = soap_instantiate__wsnt__Notify(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_wsnt__Notify::NotificationMessage = NotificationMessage; } return _p; }

inline _wsnt__Notify * soap_new_set__wsnt__Notify(struct soap *soap, std::vector<wsnt__NotificationMessageHolderType * >& NotificationMessage, std::vector<char * >& __any) { _wsnt__Notify *_p = soap_instantiate__wsnt__Notify(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_wsnt__Notify::NotificationMessage = NotificationMessage; _p->_wsnt__Notify::__any = __any; } return _p; }

inline void soap_delete__wsnt__Notify(struct soap *soap, _wsnt__Notify *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__wsnt__Notify(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE__wsnt__SubscriptionManagerRP
#define SOAP_TYPE__wsnt__SubscriptionManagerRP (122)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__wsnt__SubscriptionManagerRP(struct soap*, const char*, int, const _wsnt__SubscriptionManagerRP *, const char*);
SOAP_FMAC3 _wsnt__SubscriptionManagerRP * SOAP_FMAC4 soap_in__wsnt__SubscriptionManagerRP(struct soap*, const char*, _wsnt__SubscriptionManagerRP *, const char*);

#ifndef soap_write__wsnt__SubscriptionManagerRP
#define soap_write__wsnt__SubscriptionManagerRP(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "wsnt:SubscriptionManagerRP", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _wsnt__SubscriptionManagerRP * SOAP_FMAC4 soap_get__wsnt__SubscriptionManagerRP(struct soap*, _wsnt__SubscriptionManagerRP *, const char*, const char*);

#ifndef soap_read__wsnt__SubscriptionManagerRP
#define soap_read__wsnt__SubscriptionManagerRP(soap, data) ( soap_begin_recv(soap) || !soap_get__wsnt__SubscriptionManagerRP(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 _wsnt__SubscriptionManagerRP * SOAP_FMAC2 soap_instantiate__wsnt__SubscriptionManagerRP(struct soap*, int, const char*, const char*, size_t*);

inline _wsnt__SubscriptionManagerRP * soap_new__wsnt__SubscriptionManagerRP(struct soap *soap, int n = -1) { return soap_instantiate__wsnt__SubscriptionManagerRP(soap, n, NULL, NULL, NULL); }

inline _wsnt__SubscriptionManagerRP * soap_new_req__wsnt__SubscriptionManagerRP(struct soap *soap, struct wsa5__EndpointReferenceType& ConsumerReference) { _wsnt__SubscriptionManagerRP *_p = soap_instantiate__wsnt__SubscriptionManagerRP(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_wsnt__SubscriptionManagerRP::ConsumerReference = ConsumerReference; } return _p; }

inline _wsnt__SubscriptionManagerRP * soap_new_set__wsnt__SubscriptionManagerRP(struct soap *soap, struct wsa5__EndpointReferenceType& ConsumerReference, wsnt__FilterType *Filter, wsnt__SubscriptionPolicyType *SubscriptionPolicy, time_t *CreationTime) { _wsnt__SubscriptionManagerRP *_p = soap_instantiate__wsnt__SubscriptionManagerRP(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_wsnt__SubscriptionManagerRP::ConsumerReference = ConsumerReference; _p->_wsnt__SubscriptionManagerRP::Filter = Filter; _p->_wsnt__SubscriptionManagerRP::SubscriptionPolicy = SubscriptionPolicy; _p->_wsnt__SubscriptionManagerRP::CreationTime = CreationTime; } return _p; }

inline void soap_delete__wsnt__SubscriptionManagerRP(struct soap *soap, _wsnt__SubscriptionManagerRP *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__wsnt__SubscriptionManagerRP(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE__wsnt__NotificationProducerRP
#define SOAP_TYPE__wsnt__NotificationProducerRP (121)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__wsnt__NotificationProducerRP(struct soap*, const char*, int, const _wsnt__NotificationProducerRP *, const char*);
SOAP_FMAC3 _wsnt__NotificationProducerRP * SOAP_FMAC4 soap_in__wsnt__NotificationProducerRP(struct soap*, const char*, _wsnt__NotificationProducerRP *, const char*);

#ifndef soap_write__wsnt__NotificationProducerRP
#define soap_write__wsnt__NotificationProducerRP(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "wsnt:NotificationProducerRP", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _wsnt__NotificationProducerRP * SOAP_FMAC4 soap_get__wsnt__NotificationProducerRP(struct soap*, _wsnt__NotificationProducerRP *, const char*, const char*);

#ifndef soap_read__wsnt__NotificationProducerRP
#define soap_read__wsnt__NotificationProducerRP(soap, data) ( soap_begin_recv(soap) || !soap_get__wsnt__NotificationProducerRP(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 _wsnt__NotificationProducerRP * SOAP_FMAC2 soap_instantiate__wsnt__NotificationProducerRP(struct soap*, int, const char*, const char*, size_t*);

inline _wsnt__NotificationProducerRP * soap_new__wsnt__NotificationProducerRP(struct soap *soap, int n = -1) { return soap_instantiate__wsnt__NotificationProducerRP(soap, n, NULL, NULL, NULL); }

inline _wsnt__NotificationProducerRP * soap_new_req__wsnt__NotificationProducerRP(struct soap *soap) { _wsnt__NotificationProducerRP *_p = soap_instantiate__wsnt__NotificationProducerRP(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline _wsnt__NotificationProducerRP * soap_new_set__wsnt__NotificationProducerRP(struct soap *soap, std::vector<wsnt__TopicExpressionType * >& TopicExpression, bool *FixedTopicSet, std::vector<std::string >& TopicExpressionDialect, wstop__TopicSetType *wstop__TopicSet) { _wsnt__NotificationProducerRP *_p = soap_instantiate__wsnt__NotificationProducerRP(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_wsnt__NotificationProducerRP::TopicExpression = TopicExpression; _p->_wsnt__NotificationProducerRP::FixedTopicSet = FixedTopicSet; _p->_wsnt__NotificationProducerRP::TopicExpressionDialect = TopicExpressionDialect; _p->_wsnt__NotificationProducerRP::wstop__TopicSet = wstop__TopicSet; } return _p; }

inline void soap_delete__wsnt__NotificationProducerRP(struct soap *soap, _wsnt__NotificationProducerRP *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__wsnt__NotificationProducerRP(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_wsnt__ResumeFailedFaultType
#define SOAP_TYPE_wsnt__ResumeFailedFaultType (120)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_wsnt__ResumeFailedFaultType(struct soap*, const char*, int, const wsnt__ResumeFailedFaultType *, const char*);
SOAP_FMAC3 wsnt__ResumeFailedFaultType * SOAP_FMAC4 soap_in_wsnt__ResumeFailedFaultType(struct soap*, const char*, wsnt__ResumeFailedFaultType *, const char*);

#ifndef soap_write_wsnt__ResumeFailedFaultType
#define soap_write_wsnt__ResumeFailedFaultType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "wsnt:ResumeFailedFaultType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 wsnt__ResumeFailedFaultType * SOAP_FMAC4 soap_get_wsnt__ResumeFailedFaultType(struct soap*, wsnt__ResumeFailedFaultType *, const char*, const char*);

#ifndef soap_read_wsnt__ResumeFailedFaultType
#define soap_read_wsnt__ResumeFailedFaultType(soap, data) ( soap_begin_recv(soap) || !soap_get_wsnt__ResumeFailedFaultType(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 wsnt__ResumeFailedFaultType * SOAP_FMAC2 soap_instantiate_wsnt__ResumeFailedFaultType(struct soap*, int, const char*, const char*, size_t*);

inline wsnt__ResumeFailedFaultType * soap_new_wsnt__ResumeFailedFaultType(struct soap *soap, int n = -1) { return soap_instantiate_wsnt__ResumeFailedFaultType(soap, n, NULL, NULL, NULL); }

inline wsnt__ResumeFailedFaultType * soap_new_req_wsnt__ResumeFailedFaultType(struct soap *soap, time_t Timestamp1) { wsnt__ResumeFailedFaultType *_p = soap_instantiate_wsnt__ResumeFailedFaultType(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->wsrfbf__BaseFaultType::Timestamp = Timestamp1; } return _p; }

inline wsnt__ResumeFailedFaultType * soap_new_set_wsnt__ResumeFailedFaultType(struct soap *soap, std::vector<char * >& __any1, time_t Timestamp1, struct wsa5__EndpointReferenceType *Originator1, _wsrfbf__BaseFaultType_ErrorCode *ErrorCode1, std::vector<_wsrfbf__BaseFaultType_Description >*Description1, _wsrfbf__BaseFaultType_FaultCause *FaultCause1, char *__anyAttribute1, char *__item2) { wsnt__ResumeFailedFaultType *_p = soap_instantiate_wsnt__ResumeFailedFaultType(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->wsrfbf__BaseFaultType::__any = __any1; _p->wsrfbf__BaseFaultType::Timestamp = Timestamp1; _p->wsrfbf__BaseFaultType::Originator = Originator1; _p->wsrfbf__BaseFaultType::ErrorCode = ErrorCode1; _p->wsrfbf__BaseFaultType::Description = Description1; _p->wsrfbf__BaseFaultType::FaultCause = FaultCause1; _p->wsrfbf__BaseFaultType::__anyAttribute = __anyAttribute1; _p->xsd__anyType::__item = __item2; } return _p; }

inline void soap_delete_wsnt__ResumeFailedFaultType(struct soap *soap, wsnt__ResumeFailedFaultType *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_wsnt__ResumeFailedFaultType(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_wsnt__PauseFailedFaultType
#define SOAP_TYPE_wsnt__PauseFailedFaultType (119)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_wsnt__PauseFailedFaultType(struct soap*, const char*, int, const wsnt__PauseFailedFaultType *, const char*);
SOAP_FMAC3 wsnt__PauseFailedFaultType * SOAP_FMAC4 soap_in_wsnt__PauseFailedFaultType(struct soap*, const char*, wsnt__PauseFailedFaultType *, const char*);

#ifndef soap_write_wsnt__PauseFailedFaultType
#define soap_write_wsnt__PauseFailedFaultType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "wsnt:PauseFailedFaultType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 wsnt__PauseFailedFaultType * SOAP_FMAC4 soap_get_wsnt__PauseFailedFaultType(struct soap*, wsnt__PauseFailedFaultType *, const char*, const char*);

#ifndef soap_read_wsnt__PauseFailedFaultType
#define soap_read_wsnt__PauseFailedFaultType(soap, data) ( soap_begin_recv(soap) || !soap_get_wsnt__PauseFailedFaultType(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 wsnt__PauseFailedFaultType * SOAP_FMAC2 soap_instantiate_wsnt__PauseFailedFaultType(struct soap*, int, const char*, const char*, size_t*);

inline wsnt__PauseFailedFaultType * soap_new_wsnt__PauseFailedFaultType(struct soap *soap, int n = -1) { return soap_instantiate_wsnt__PauseFailedFaultType(soap, n, NULL, NULL, NULL); }

inline wsnt__PauseFailedFaultType * soap_new_req_wsnt__PauseFailedFaultType(struct soap *soap, time_t Timestamp1) { wsnt__PauseFailedFaultType *_p = soap_instantiate_wsnt__PauseFailedFaultType(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->wsrfbf__BaseFaultType::Timestamp = Timestamp1; } return _p; }

inline wsnt__PauseFailedFaultType * soap_new_set_wsnt__PauseFailedFaultType(struct soap *soap, std::vector<char * >& __any1, time_t Timestamp1, struct wsa5__EndpointReferenceType *Originator1, _wsrfbf__BaseFaultType_ErrorCode *ErrorCode1, std::vector<_wsrfbf__BaseFaultType_Description >*Description1, _wsrfbf__BaseFaultType_FaultCause *FaultCause1, char *__anyAttribute1, char *__item2) { wsnt__PauseFailedFaultType *_p = soap_instantiate_wsnt__PauseFailedFaultType(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->wsrfbf__BaseFaultType::__any = __any1; _p->wsrfbf__BaseFaultType::Timestamp = Timestamp1; _p->wsrfbf__BaseFaultType::Originator = Originator1; _p->wsrfbf__BaseFaultType::ErrorCode = ErrorCode1; _p->wsrfbf__BaseFaultType::Description = Description1; _p->wsrfbf__BaseFaultType::FaultCause = FaultCause1; _p->wsrfbf__BaseFaultType::__anyAttribute = __anyAttribute1; _p->xsd__anyType::__item = __item2; } return _p; }

inline void soap_delete_wsnt__PauseFailedFaultType(struct soap *soap, wsnt__PauseFailedFaultType *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_wsnt__PauseFailedFaultType(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_wsnt__UnableToDestroySubscriptionFaultType
#define SOAP_TYPE_wsnt__UnableToDestroySubscriptionFaultType (118)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_wsnt__UnableToDestroySubscriptionFaultType(struct soap*, const char*, int, const wsnt__UnableToDestroySubscriptionFaultType *, const char*);
SOAP_FMAC3 wsnt__UnableToDestroySubscriptionFaultType * SOAP_FMAC4 soap_in_wsnt__UnableToDestroySubscriptionFaultType(struct soap*, const char*, wsnt__UnableToDestroySubscriptionFaultType *, const char*);

#ifndef soap_write_wsnt__UnableToDestroySubscriptionFaultType
#define soap_write_wsnt__UnableToDestroySubscriptionFaultType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "wsnt:UnableToDestroySubscriptionFaultType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 wsnt__UnableToDestroySubscriptionFaultType * SOAP_FMAC4 soap_get_wsnt__UnableToDestroySubscriptionFaultType(struct soap*, wsnt__UnableToDestroySubscriptionFaultType *, const char*, const char*);

#ifndef soap_read_wsnt__UnableToDestroySubscriptionFaultType
#define soap_read_wsnt__UnableToDestroySubscriptionFaultType(soap, data) ( soap_begin_recv(soap) || !soap_get_wsnt__UnableToDestroySubscriptionFaultType(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 wsnt__UnableToDestroySubscriptionFaultType * SOAP_FMAC2 soap_instantiate_wsnt__UnableToDestroySubscriptionFaultType(struct soap*, int, const char*, const char*, size_t*);

inline wsnt__UnableToDestroySubscriptionFaultType * soap_new_wsnt__UnableToDestroySubscriptionFaultType(struct soap *soap, int n = -1) { return soap_instantiate_wsnt__UnableToDestroySubscriptionFaultType(soap, n, NULL, NULL, NULL); }

inline wsnt__UnableToDestroySubscriptionFaultType * soap_new_req_wsnt__UnableToDestroySubscriptionFaultType(struct soap *soap, time_t Timestamp1) { wsnt__UnableToDestroySubscriptionFaultType *_p = soap_instantiate_wsnt__UnableToDestroySubscriptionFaultType(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->wsrfbf__BaseFaultType::Timestamp = Timestamp1; } return _p; }

inline wsnt__UnableToDestroySubscriptionFaultType * soap_new_set_wsnt__UnableToDestroySubscriptionFaultType(struct soap *soap, std::vector<char * >& __any1, time_t Timestamp1, struct wsa5__EndpointReferenceType *Originator1, _wsrfbf__BaseFaultType_ErrorCode *ErrorCode1, std::vector<_wsrfbf__BaseFaultType_Description >*Description1, _wsrfbf__BaseFaultType_FaultCause *FaultCause1, char *__anyAttribute1, char *__item2) { wsnt__UnableToDestroySubscriptionFaultType *_p = soap_instantiate_wsnt__UnableToDestroySubscriptionFaultType(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->wsrfbf__BaseFaultType::__any = __any1; _p->wsrfbf__BaseFaultType::Timestamp = Timestamp1; _p->wsrfbf__BaseFaultType::Originator = Originator1; _p->wsrfbf__BaseFaultType::ErrorCode = ErrorCode1; _p->wsrfbf__BaseFaultType::Description = Description1; _p->wsrfbf__BaseFaultType::FaultCause = FaultCause1; _p->wsrfbf__BaseFaultType::__anyAttribute = __anyAttribute1; _p->xsd__anyType::__item = __item2; } return _p; }

inline void soap_delete_wsnt__UnableToDestroySubscriptionFaultType(struct soap *soap, wsnt__UnableToDestroySubscriptionFaultType *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_wsnt__UnableToDestroySubscriptionFaultType(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_wsnt__UnacceptableTerminationTimeFaultType
#define SOAP_TYPE_wsnt__UnacceptableTerminationTimeFaultType (117)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_wsnt__UnacceptableTerminationTimeFaultType(struct soap*, const char*, int, const wsnt__UnacceptableTerminationTimeFaultType *, const char*);
SOAP_FMAC3 wsnt__UnacceptableTerminationTimeFaultType * SOAP_FMAC4 soap_in_wsnt__UnacceptableTerminationTimeFaultType(struct soap*, const char*, wsnt__UnacceptableTerminationTimeFaultType *, const char*);

#ifndef soap_write_wsnt__UnacceptableTerminationTimeFaultType
#define soap_write_wsnt__UnacceptableTerminationTimeFaultType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "wsnt:UnacceptableTerminationTimeFaultType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 wsnt__UnacceptableTerminationTimeFaultType * SOAP_FMAC4 soap_get_wsnt__UnacceptableTerminationTimeFaultType(struct soap*, wsnt__UnacceptableTerminationTimeFaultType *, const char*, const char*);

#ifndef soap_read_wsnt__UnacceptableTerminationTimeFaultType
#define soap_read_wsnt__UnacceptableTerminationTimeFaultType(soap, data) ( soap_begin_recv(soap) || !soap_get_wsnt__UnacceptableTerminationTimeFaultType(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 wsnt__UnacceptableTerminationTimeFaultType * SOAP_FMAC2 soap_instantiate_wsnt__UnacceptableTerminationTimeFaultType(struct soap*, int, const char*, const char*, size_t*);

inline wsnt__UnacceptableTerminationTimeFaultType * soap_new_wsnt__UnacceptableTerminationTimeFaultType(struct soap *soap, int n = -1) { return soap_instantiate_wsnt__UnacceptableTerminationTimeFaultType(soap, n, NULL, NULL, NULL); }

inline wsnt__UnacceptableTerminationTimeFaultType * soap_new_req_wsnt__UnacceptableTerminationTimeFaultType(struct soap *soap, time_t MinimumTime, time_t Timestamp1) { wsnt__UnacceptableTerminationTimeFaultType *_p = soap_instantiate_wsnt__UnacceptableTerminationTimeFaultType(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->wsnt__UnacceptableTerminationTimeFaultType::MinimumTime = MinimumTime; _p->wsrfbf__BaseFaultType::Timestamp = Timestamp1; } return _p; }

inline wsnt__UnacceptableTerminationTimeFaultType * soap_new_set_wsnt__UnacceptableTerminationTimeFaultType(struct soap *soap, time_t MinimumTime, time_t *MaximumTime, std::vector<char * >& __any1, time_t Timestamp1, struct wsa5__EndpointReferenceType *Originator1, _wsrfbf__BaseFaultType_ErrorCode *ErrorCode1, std::vector<_wsrfbf__BaseFaultType_Description >*Description1, _wsrfbf__BaseFaultType_FaultCause *FaultCause1, char *__anyAttribute1, char *__item2) { wsnt__UnacceptableTerminationTimeFaultType *_p = soap_instantiate_wsnt__UnacceptableTerminationTimeFaultType(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->wsnt__UnacceptableTerminationTimeFaultType::MinimumTime = MinimumTime; _p->wsnt__UnacceptableTerminationTimeFaultType::MaximumTime = MaximumTime; _p->wsrfbf__BaseFaultType::__any = __any1; _p->wsrfbf__BaseFaultType::Timestamp = Timestamp1; _p->wsrfbf__BaseFaultType::Originator = Originator1; _p->wsrfbf__BaseFaultType::ErrorCode = ErrorCode1; _p->wsrfbf__BaseFaultType::Description = Description1; _p->wsrfbf__BaseFaultType::FaultCause = FaultCause1; _p->wsrfbf__BaseFaultType::__anyAttribute = __anyAttribute1; _p->xsd__anyType::__item = __item2; } return _p; }

inline void soap_delete_wsnt__UnacceptableTerminationTimeFaultType(struct soap *soap, wsnt__UnacceptableTerminationTimeFaultType *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_wsnt__UnacceptableTerminationTimeFaultType(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_wsnt__UnableToCreatePullPointFaultType
#define SOAP_TYPE_wsnt__UnableToCreatePullPointFaultType (116)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_wsnt__UnableToCreatePullPointFaultType(struct soap*, const char*, int, const wsnt__UnableToCreatePullPointFaultType *, const char*);
SOAP_FMAC3 wsnt__UnableToCreatePullPointFaultType * SOAP_FMAC4 soap_in_wsnt__UnableToCreatePullPointFaultType(struct soap*, const char*, wsnt__UnableToCreatePullPointFaultType *, const char*);

#ifndef soap_write_wsnt__UnableToCreatePullPointFaultType
#define soap_write_wsnt__UnableToCreatePullPointFaultType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "wsnt:UnableToCreatePullPointFaultType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 wsnt__UnableToCreatePullPointFaultType * SOAP_FMAC4 soap_get_wsnt__UnableToCreatePullPointFaultType(struct soap*, wsnt__UnableToCreatePullPointFaultType *, const char*, const char*);

#ifndef soap_read_wsnt__UnableToCreatePullPointFaultType
#define soap_read_wsnt__UnableToCreatePullPointFaultType(soap, data) ( soap_begin_recv(soap) || !soap_get_wsnt__UnableToCreatePullPointFaultType(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 wsnt__UnableToCreatePullPointFaultType * SOAP_FMAC2 soap_instantiate_wsnt__UnableToCreatePullPointFaultType(struct soap*, int, const char*, const char*, size_t*);

inline wsnt__UnableToCreatePullPointFaultType * soap_new_wsnt__UnableToCreatePullPointFaultType(struct soap *soap, int n = -1) { return soap_instantiate_wsnt__UnableToCreatePullPointFaultType(soap, n, NULL, NULL, NULL); }

inline wsnt__UnableToCreatePullPointFaultType * soap_new_req_wsnt__UnableToCreatePullPointFaultType(struct soap *soap, time_t Timestamp1) { wsnt__UnableToCreatePullPointFaultType *_p = soap_instantiate_wsnt__UnableToCreatePullPointFaultType(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->wsrfbf__BaseFaultType::Timestamp = Timestamp1; } return _p; }

inline wsnt__UnableToCreatePullPointFaultType * soap_new_set_wsnt__UnableToCreatePullPointFaultType(struct soap *soap, std::vector<char * >& __any1, time_t Timestamp1, struct wsa5__EndpointReferenceType *Originator1, _wsrfbf__BaseFaultType_ErrorCode *ErrorCode1, std::vector<_wsrfbf__BaseFaultType_Description >*Description1, _wsrfbf__BaseFaultType_FaultCause *FaultCause1, char *__anyAttribute1, char *__item2) { wsnt__UnableToCreatePullPointFaultType *_p = soap_instantiate_wsnt__UnableToCreatePullPointFaultType(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->wsrfbf__BaseFaultType::__any = __any1; _p->wsrfbf__BaseFaultType::Timestamp = Timestamp1; _p->wsrfbf__BaseFaultType::Originator = Originator1; _p->wsrfbf__BaseFaultType::ErrorCode = ErrorCode1; _p->wsrfbf__BaseFaultType::Description = Description1; _p->wsrfbf__BaseFaultType::FaultCause = FaultCause1; _p->wsrfbf__BaseFaultType::__anyAttribute = __anyAttribute1; _p->xsd__anyType::__item = __item2; } return _p; }

inline void soap_delete_wsnt__UnableToCreatePullPointFaultType(struct soap *soap, wsnt__UnableToCreatePullPointFaultType *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_wsnt__UnableToCreatePullPointFaultType(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_wsnt__UnableToDestroyPullPointFaultType
#define SOAP_TYPE_wsnt__UnableToDestroyPullPointFaultType (115)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_wsnt__UnableToDestroyPullPointFaultType(struct soap*, const char*, int, const wsnt__UnableToDestroyPullPointFaultType *, const char*);
SOAP_FMAC3 wsnt__UnableToDestroyPullPointFaultType * SOAP_FMAC4 soap_in_wsnt__UnableToDestroyPullPointFaultType(struct soap*, const char*, wsnt__UnableToDestroyPullPointFaultType *, const char*);

#ifndef soap_write_wsnt__UnableToDestroyPullPointFaultType
#define soap_write_wsnt__UnableToDestroyPullPointFaultType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "wsnt:UnableToDestroyPullPointFaultType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 wsnt__UnableToDestroyPullPointFaultType * SOAP_FMAC4 soap_get_wsnt__UnableToDestroyPullPointFaultType(struct soap*, wsnt__UnableToDestroyPullPointFaultType *, const char*, const char*);

#ifndef soap_read_wsnt__UnableToDestroyPullPointFaultType
#define soap_read_wsnt__UnableToDestroyPullPointFaultType(soap, data) ( soap_begin_recv(soap) || !soap_get_wsnt__UnableToDestroyPullPointFaultType(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 wsnt__UnableToDestroyPullPointFaultType * SOAP_FMAC2 soap_instantiate_wsnt__UnableToDestroyPullPointFaultType(struct soap*, int, const char*, const char*, size_t*);

inline wsnt__UnableToDestroyPullPointFaultType * soap_new_wsnt__UnableToDestroyPullPointFaultType(struct soap *soap, int n = -1) { return soap_instantiate_wsnt__UnableToDestroyPullPointFaultType(soap, n, NULL, NULL, NULL); }

inline wsnt__UnableToDestroyPullPointFaultType * soap_new_req_wsnt__UnableToDestroyPullPointFaultType(struct soap *soap, time_t Timestamp1) { wsnt__UnableToDestroyPullPointFaultType *_p = soap_instantiate_wsnt__UnableToDestroyPullPointFaultType(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->wsrfbf__BaseFaultType::Timestamp = Timestamp1; } return _p; }

inline wsnt__UnableToDestroyPullPointFaultType * soap_new_set_wsnt__UnableToDestroyPullPointFaultType(struct soap *soap, std::vector<char * >& __any1, time_t Timestamp1, struct wsa5__EndpointReferenceType *Originator1, _wsrfbf__BaseFaultType_ErrorCode *ErrorCode1, std::vector<_wsrfbf__BaseFaultType_Description >*Description1, _wsrfbf__BaseFaultType_FaultCause *FaultCause1, char *__anyAttribute1, char *__item2) { wsnt__UnableToDestroyPullPointFaultType *_p = soap_instantiate_wsnt__UnableToDestroyPullPointFaultType(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->wsrfbf__BaseFaultType::__any = __any1; _p->wsrfbf__BaseFaultType::Timestamp = Timestamp1; _p->wsrfbf__BaseFaultType::Originator = Originator1; _p->wsrfbf__BaseFaultType::ErrorCode = ErrorCode1; _p->wsrfbf__BaseFaultType::Description = Description1; _p->wsrfbf__BaseFaultType::FaultCause = FaultCause1; _p->wsrfbf__BaseFaultType::__anyAttribute = __anyAttribute1; _p->xsd__anyType::__item = __item2; } return _p; }

inline void soap_delete_wsnt__UnableToDestroyPullPointFaultType(struct soap *soap, wsnt__UnableToDestroyPullPointFaultType *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_wsnt__UnableToDestroyPullPointFaultType(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_wsnt__UnableToGetMessagesFaultType
#define SOAP_TYPE_wsnt__UnableToGetMessagesFaultType (114)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_wsnt__UnableToGetMessagesFaultType(struct soap*, const char*, int, const wsnt__UnableToGetMessagesFaultType *, const char*);
SOAP_FMAC3 wsnt__UnableToGetMessagesFaultType * SOAP_FMAC4 soap_in_wsnt__UnableToGetMessagesFaultType(struct soap*, const char*, wsnt__UnableToGetMessagesFaultType *, const char*);

#ifndef soap_write_wsnt__UnableToGetMessagesFaultType
#define soap_write_wsnt__UnableToGetMessagesFaultType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "wsnt:UnableToGetMessagesFaultType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 wsnt__UnableToGetMessagesFaultType * SOAP_FMAC4 soap_get_wsnt__UnableToGetMessagesFaultType(struct soap*, wsnt__UnableToGetMessagesFaultType *, const char*, const char*);

#ifndef soap_read_wsnt__UnableToGetMessagesFaultType
#define soap_read_wsnt__UnableToGetMessagesFaultType(soap, data) ( soap_begin_recv(soap) || !soap_get_wsnt__UnableToGetMessagesFaultType(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 wsnt__UnableToGetMessagesFaultType * SOAP_FMAC2 soap_instantiate_wsnt__UnableToGetMessagesFaultType(struct soap*, int, const char*, const char*, size_t*);

inline wsnt__UnableToGetMessagesFaultType * soap_new_wsnt__UnableToGetMessagesFaultType(struct soap *soap, int n = -1) { return soap_instantiate_wsnt__UnableToGetMessagesFaultType(soap, n, NULL, NULL, NULL); }

inline wsnt__UnableToGetMessagesFaultType * soap_new_req_wsnt__UnableToGetMessagesFaultType(struct soap *soap, time_t Timestamp1) { wsnt__UnableToGetMessagesFaultType *_p = soap_instantiate_wsnt__UnableToGetMessagesFaultType(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->wsrfbf__BaseFaultType::Timestamp = Timestamp1; } return _p; }

inline wsnt__UnableToGetMessagesFaultType * soap_new_set_wsnt__UnableToGetMessagesFaultType(struct soap *soap, std::vector<char * >& __any1, time_t Timestamp1, struct wsa5__EndpointReferenceType *Originator1, _wsrfbf__BaseFaultType_ErrorCode *ErrorCode1, std::vector<_wsrfbf__BaseFaultType_Description >*Description1, _wsrfbf__BaseFaultType_FaultCause *FaultCause1, char *__anyAttribute1, char *__item2) { wsnt__UnableToGetMessagesFaultType *_p = soap_instantiate_wsnt__UnableToGetMessagesFaultType(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->wsrfbf__BaseFaultType::__any = __any1; _p->wsrfbf__BaseFaultType::Timestamp = Timestamp1; _p->wsrfbf__BaseFaultType::Originator = Originator1; _p->wsrfbf__BaseFaultType::ErrorCode = ErrorCode1; _p->wsrfbf__BaseFaultType::Description = Description1; _p->wsrfbf__BaseFaultType::FaultCause = FaultCause1; _p->wsrfbf__BaseFaultType::__anyAttribute = __anyAttribute1; _p->xsd__anyType::__item = __item2; } return _p; }

inline void soap_delete_wsnt__UnableToGetMessagesFaultType(struct soap *soap, wsnt__UnableToGetMessagesFaultType *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_wsnt__UnableToGetMessagesFaultType(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_wsnt__NoCurrentMessageOnTopicFaultType
#define SOAP_TYPE_wsnt__NoCurrentMessageOnTopicFaultType (113)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_wsnt__NoCurrentMessageOnTopicFaultType(struct soap*, const char*, int, const wsnt__NoCurrentMessageOnTopicFaultType *, const char*);
SOAP_FMAC3 wsnt__NoCurrentMessageOnTopicFaultType * SOAP_FMAC4 soap_in_wsnt__NoCurrentMessageOnTopicFaultType(struct soap*, const char*, wsnt__NoCurrentMessageOnTopicFaultType *, const char*);

#ifndef soap_write_wsnt__NoCurrentMessageOnTopicFaultType
#define soap_write_wsnt__NoCurrentMessageOnTopicFaultType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "wsnt:NoCurrentMessageOnTopicFaultType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 wsnt__NoCurrentMessageOnTopicFaultType * SOAP_FMAC4 soap_get_wsnt__NoCurrentMessageOnTopicFaultType(struct soap*, wsnt__NoCurrentMessageOnTopicFaultType *, const char*, const char*);

#ifndef soap_read_wsnt__NoCurrentMessageOnTopicFaultType
#define soap_read_wsnt__NoCurrentMessageOnTopicFaultType(soap, data) ( soap_begin_recv(soap) || !soap_get_wsnt__NoCurrentMessageOnTopicFaultType(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 wsnt__NoCurrentMessageOnTopicFaultType * SOAP_FMAC2 soap_instantiate_wsnt__NoCurrentMessageOnTopicFaultType(struct soap*, int, const char*, const char*, size_t*);

inline wsnt__NoCurrentMessageOnTopicFaultType * soap_new_wsnt__NoCurrentMessageOnTopicFaultType(struct soap *soap, int n = -1) { return soap_instantiate_wsnt__NoCurrentMessageOnTopicFaultType(soap, n, NULL, NULL, NULL); }

inline wsnt__NoCurrentMessageOnTopicFaultType * soap_new_req_wsnt__NoCurrentMessageOnTopicFaultType(struct soap *soap, time_t Timestamp1) { wsnt__NoCurrentMessageOnTopicFaultType *_p = soap_instantiate_wsnt__NoCurrentMessageOnTopicFaultType(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->wsrfbf__BaseFaultType::Timestamp = Timestamp1; } return _p; }

inline wsnt__NoCurrentMessageOnTopicFaultType * soap_new_set_wsnt__NoCurrentMessageOnTopicFaultType(struct soap *soap, std::vector<char * >& __any1, time_t Timestamp1, struct wsa5__EndpointReferenceType *Originator1, _wsrfbf__BaseFaultType_ErrorCode *ErrorCode1, std::vector<_wsrfbf__BaseFaultType_Description >*Description1, _wsrfbf__BaseFaultType_FaultCause *FaultCause1, char *__anyAttribute1, char *__item2) { wsnt__NoCurrentMessageOnTopicFaultType *_p = soap_instantiate_wsnt__NoCurrentMessageOnTopicFaultType(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->wsrfbf__BaseFaultType::__any = __any1; _p->wsrfbf__BaseFaultType::Timestamp = Timestamp1; _p->wsrfbf__BaseFaultType::Originator = Originator1; _p->wsrfbf__BaseFaultType::ErrorCode = ErrorCode1; _p->wsrfbf__BaseFaultType::Description = Description1; _p->wsrfbf__BaseFaultType::FaultCause = FaultCause1; _p->wsrfbf__BaseFaultType::__anyAttribute = __anyAttribute1; _p->xsd__anyType::__item = __item2; } return _p; }

inline void soap_delete_wsnt__NoCurrentMessageOnTopicFaultType(struct soap *soap, wsnt__NoCurrentMessageOnTopicFaultType *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_wsnt__NoCurrentMessageOnTopicFaultType(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_wsnt__UnacceptableInitialTerminationTimeFaultType
#define SOAP_TYPE_wsnt__UnacceptableInitialTerminationTimeFaultType (112)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_wsnt__UnacceptableInitialTerminationTimeFaultType(struct soap*, const char*, int, const wsnt__UnacceptableInitialTerminationTimeFaultType *, const char*);
SOAP_FMAC3 wsnt__UnacceptableInitialTerminationTimeFaultType * SOAP_FMAC4 soap_in_wsnt__UnacceptableInitialTerminationTimeFaultType(struct soap*, const char*, wsnt__UnacceptableInitialTerminationTimeFaultType *, const char*);

#ifndef soap_write_wsnt__UnacceptableInitialTerminationTimeFaultType
#define soap_write_wsnt__UnacceptableInitialTerminationTimeFaultType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "wsnt:UnacceptableInitialTerminationTimeFaultType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 wsnt__UnacceptableInitialTerminationTimeFaultType * SOAP_FMAC4 soap_get_wsnt__UnacceptableInitialTerminationTimeFaultType(struct soap*, wsnt__UnacceptableInitialTerminationTimeFaultType *, const char*, const char*);

#ifndef soap_read_wsnt__UnacceptableInitialTerminationTimeFaultType
#define soap_read_wsnt__UnacceptableInitialTerminationTimeFaultType(soap, data) ( soap_begin_recv(soap) || !soap_get_wsnt__UnacceptableInitialTerminationTimeFaultType(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 wsnt__UnacceptableInitialTerminationTimeFaultType * SOAP_FMAC2 soap_instantiate_wsnt__UnacceptableInitialTerminationTimeFaultType(struct soap*, int, const char*, const char*, size_t*);

inline wsnt__UnacceptableInitialTerminationTimeFaultType * soap_new_wsnt__UnacceptableInitialTerminationTimeFaultType(struct soap *soap, int n = -1) { return soap_instantiate_wsnt__UnacceptableInitialTerminationTimeFaultType(soap, n, NULL, NULL, NULL); }

inline wsnt__UnacceptableInitialTerminationTimeFaultType * soap_new_req_wsnt__UnacceptableInitialTerminationTimeFaultType(struct soap *soap, time_t MinimumTime, time_t Timestamp1) { wsnt__UnacceptableInitialTerminationTimeFaultType *_p = soap_instantiate_wsnt__UnacceptableInitialTerminationTimeFaultType(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->wsnt__UnacceptableInitialTerminationTimeFaultType::MinimumTime = MinimumTime; _p->wsrfbf__BaseFaultType::Timestamp = Timestamp1; } return _p; }

inline wsnt__UnacceptableInitialTerminationTimeFaultType * soap_new_set_wsnt__UnacceptableInitialTerminationTimeFaultType(struct soap *soap, time_t MinimumTime, time_t *MaximumTime, std::vector<char * >& __any1, time_t Timestamp1, struct wsa5__EndpointReferenceType *Originator1, _wsrfbf__BaseFaultType_ErrorCode *ErrorCode1, std::vector<_wsrfbf__BaseFaultType_Description >*Description1, _wsrfbf__BaseFaultType_FaultCause *FaultCause1, char *__anyAttribute1, char *__item2) { wsnt__UnacceptableInitialTerminationTimeFaultType *_p = soap_instantiate_wsnt__UnacceptableInitialTerminationTimeFaultType(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->wsnt__UnacceptableInitialTerminationTimeFaultType::MinimumTime = MinimumTime; _p->wsnt__UnacceptableInitialTerminationTimeFaultType::MaximumTime = MaximumTime; _p->wsrfbf__BaseFaultType::__any = __any1; _p->wsrfbf__BaseFaultType::Timestamp = Timestamp1; _p->wsrfbf__BaseFaultType::Originator = Originator1; _p->wsrfbf__BaseFaultType::ErrorCode = ErrorCode1; _p->wsrfbf__BaseFaultType::Description = Description1; _p->wsrfbf__BaseFaultType::FaultCause = FaultCause1; _p->wsrfbf__BaseFaultType::__anyAttribute = __anyAttribute1; _p->xsd__anyType::__item = __item2; } return _p; }

inline void soap_delete_wsnt__UnacceptableInitialTerminationTimeFaultType(struct soap *soap, wsnt__UnacceptableInitialTerminationTimeFaultType *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_wsnt__UnacceptableInitialTerminationTimeFaultType(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_wsnt__NotifyMessageNotSupportedFaultType
#define SOAP_TYPE_wsnt__NotifyMessageNotSupportedFaultType (111)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_wsnt__NotifyMessageNotSupportedFaultType(struct soap*, const char*, int, const wsnt__NotifyMessageNotSupportedFaultType *, const char*);
SOAP_FMAC3 wsnt__NotifyMessageNotSupportedFaultType * SOAP_FMAC4 soap_in_wsnt__NotifyMessageNotSupportedFaultType(struct soap*, const char*, wsnt__NotifyMessageNotSupportedFaultType *, const char*);

#ifndef soap_write_wsnt__NotifyMessageNotSupportedFaultType
#define soap_write_wsnt__NotifyMessageNotSupportedFaultType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "wsnt:NotifyMessageNotSupportedFaultType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 wsnt__NotifyMessageNotSupportedFaultType * SOAP_FMAC4 soap_get_wsnt__NotifyMessageNotSupportedFaultType(struct soap*, wsnt__NotifyMessageNotSupportedFaultType *, const char*, const char*);

#ifndef soap_read_wsnt__NotifyMessageNotSupportedFaultType
#define soap_read_wsnt__NotifyMessageNotSupportedFaultType(soap, data) ( soap_begin_recv(soap) || !soap_get_wsnt__NotifyMessageNotSupportedFaultType(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 wsnt__NotifyMessageNotSupportedFaultType * SOAP_FMAC2 soap_instantiate_wsnt__NotifyMessageNotSupportedFaultType(struct soap*, int, const char*, const char*, size_t*);

inline wsnt__NotifyMessageNotSupportedFaultType * soap_new_wsnt__NotifyMessageNotSupportedFaultType(struct soap *soap, int n = -1) { return soap_instantiate_wsnt__NotifyMessageNotSupportedFaultType(soap, n, NULL, NULL, NULL); }

inline wsnt__NotifyMessageNotSupportedFaultType * soap_new_req_wsnt__NotifyMessageNotSupportedFaultType(struct soap *soap, time_t Timestamp1) { wsnt__NotifyMessageNotSupportedFaultType *_p = soap_instantiate_wsnt__NotifyMessageNotSupportedFaultType(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->wsrfbf__BaseFaultType::Timestamp = Timestamp1; } return _p; }

inline wsnt__NotifyMessageNotSupportedFaultType * soap_new_set_wsnt__NotifyMessageNotSupportedFaultType(struct soap *soap, std::vector<char * >& __any1, time_t Timestamp1, struct wsa5__EndpointReferenceType *Originator1, _wsrfbf__BaseFaultType_ErrorCode *ErrorCode1, std::vector<_wsrfbf__BaseFaultType_Description >*Description1, _wsrfbf__BaseFaultType_FaultCause *FaultCause1, char *__anyAttribute1, char *__item2) { wsnt__NotifyMessageNotSupportedFaultType *_p = soap_instantiate_wsnt__NotifyMessageNotSupportedFaultType(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->wsrfbf__BaseFaultType::__any = __any1; _p->wsrfbf__BaseFaultType::Timestamp = Timestamp1; _p->wsrfbf__BaseFaultType::Originator = Originator1; _p->wsrfbf__BaseFaultType::ErrorCode = ErrorCode1; _p->wsrfbf__BaseFaultType::Description = Description1; _p->wsrfbf__BaseFaultType::FaultCause = FaultCause1; _p->wsrfbf__BaseFaultType::__anyAttribute = __anyAttribute1; _p->xsd__anyType::__item = __item2; } return _p; }

inline void soap_delete_wsnt__NotifyMessageNotSupportedFaultType(struct soap *soap, wsnt__NotifyMessageNotSupportedFaultType *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_wsnt__NotifyMessageNotSupportedFaultType(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_wsnt__UnsupportedPolicyRequestFaultType
#define SOAP_TYPE_wsnt__UnsupportedPolicyRequestFaultType (110)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_wsnt__UnsupportedPolicyRequestFaultType(struct soap*, const char*, int, const wsnt__UnsupportedPolicyRequestFaultType *, const char*);
SOAP_FMAC3 wsnt__UnsupportedPolicyRequestFaultType * SOAP_FMAC4 soap_in_wsnt__UnsupportedPolicyRequestFaultType(struct soap*, const char*, wsnt__UnsupportedPolicyRequestFaultType *, const char*);

#ifndef soap_write_wsnt__UnsupportedPolicyRequestFaultType
#define soap_write_wsnt__UnsupportedPolicyRequestFaultType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "wsnt:UnsupportedPolicyRequestFaultType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 wsnt__UnsupportedPolicyRequestFaultType * SOAP_FMAC4 soap_get_wsnt__UnsupportedPolicyRequestFaultType(struct soap*, wsnt__UnsupportedPolicyRequestFaultType *, const char*, const char*);

#ifndef soap_read_wsnt__UnsupportedPolicyRequestFaultType
#define soap_read_wsnt__UnsupportedPolicyRequestFaultType(soap, data) ( soap_begin_recv(soap) || !soap_get_wsnt__UnsupportedPolicyRequestFaultType(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 wsnt__UnsupportedPolicyRequestFaultType * SOAP_FMAC2 soap_instantiate_wsnt__UnsupportedPolicyRequestFaultType(struct soap*, int, const char*, const char*, size_t*);

inline wsnt__UnsupportedPolicyRequestFaultType * soap_new_wsnt__UnsupportedPolicyRequestFaultType(struct soap *soap, int n = -1) { return soap_instantiate_wsnt__UnsupportedPolicyRequestFaultType(soap, n, NULL, NULL, NULL); }

inline wsnt__UnsupportedPolicyRequestFaultType * soap_new_req_wsnt__UnsupportedPolicyRequestFaultType(struct soap *soap, time_t Timestamp1) { wsnt__UnsupportedPolicyRequestFaultType *_p = soap_instantiate_wsnt__UnsupportedPolicyRequestFaultType(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->wsrfbf__BaseFaultType::Timestamp = Timestamp1; } return _p; }

inline wsnt__UnsupportedPolicyRequestFaultType * soap_new_set_wsnt__UnsupportedPolicyRequestFaultType(struct soap *soap, std::vector<std::string >& UnsupportedPolicy, std::vector<char * >& __any1, time_t Timestamp1, struct wsa5__EndpointReferenceType *Originator1, _wsrfbf__BaseFaultType_ErrorCode *ErrorCode1, std::vector<_wsrfbf__BaseFaultType_Description >*Description1, _wsrfbf__BaseFaultType_FaultCause *FaultCause1, char *__anyAttribute1, char *__item2) { wsnt__UnsupportedPolicyRequestFaultType *_p = soap_instantiate_wsnt__UnsupportedPolicyRequestFaultType(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->wsnt__UnsupportedPolicyRequestFaultType::UnsupportedPolicy = UnsupportedPolicy; _p->wsrfbf__BaseFaultType::__any = __any1; _p->wsrfbf__BaseFaultType::Timestamp = Timestamp1; _p->wsrfbf__BaseFaultType::Originator = Originator1; _p->wsrfbf__BaseFaultType::ErrorCode = ErrorCode1; _p->wsrfbf__BaseFaultType::Description = Description1; _p->wsrfbf__BaseFaultType::FaultCause = FaultCause1; _p->wsrfbf__BaseFaultType::__anyAttribute = __anyAttribute1; _p->xsd__anyType::__item = __item2; } return _p; }

inline void soap_delete_wsnt__UnsupportedPolicyRequestFaultType(struct soap *soap, wsnt__UnsupportedPolicyRequestFaultType *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_wsnt__UnsupportedPolicyRequestFaultType(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_wsnt__UnrecognizedPolicyRequestFaultType
#define SOAP_TYPE_wsnt__UnrecognizedPolicyRequestFaultType (109)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_wsnt__UnrecognizedPolicyRequestFaultType(struct soap*, const char*, int, const wsnt__UnrecognizedPolicyRequestFaultType *, const char*);
SOAP_FMAC3 wsnt__UnrecognizedPolicyRequestFaultType * SOAP_FMAC4 soap_in_wsnt__UnrecognizedPolicyRequestFaultType(struct soap*, const char*, wsnt__UnrecognizedPolicyRequestFaultType *, const char*);

#ifndef soap_write_wsnt__UnrecognizedPolicyRequestFaultType
#define soap_write_wsnt__UnrecognizedPolicyRequestFaultType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "wsnt:UnrecognizedPolicyRequestFaultType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 wsnt__UnrecognizedPolicyRequestFaultType * SOAP_FMAC4 soap_get_wsnt__UnrecognizedPolicyRequestFaultType(struct soap*, wsnt__UnrecognizedPolicyRequestFaultType *, const char*, const char*);

#ifndef soap_read_wsnt__UnrecognizedPolicyRequestFaultType
#define soap_read_wsnt__UnrecognizedPolicyRequestFaultType(soap, data) ( soap_begin_recv(soap) || !soap_get_wsnt__UnrecognizedPolicyRequestFaultType(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 wsnt__UnrecognizedPolicyRequestFaultType * SOAP_FMAC2 soap_instantiate_wsnt__UnrecognizedPolicyRequestFaultType(struct soap*, int, const char*, const char*, size_t*);

inline wsnt__UnrecognizedPolicyRequestFaultType * soap_new_wsnt__UnrecognizedPolicyRequestFaultType(struct soap *soap, int n = -1) { return soap_instantiate_wsnt__UnrecognizedPolicyRequestFaultType(soap, n, NULL, NULL, NULL); }

inline wsnt__UnrecognizedPolicyRequestFaultType * soap_new_req_wsnt__UnrecognizedPolicyRequestFaultType(struct soap *soap, time_t Timestamp1) { wsnt__UnrecognizedPolicyRequestFaultType *_p = soap_instantiate_wsnt__UnrecognizedPolicyRequestFaultType(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->wsrfbf__BaseFaultType::Timestamp = Timestamp1; } return _p; }

inline wsnt__UnrecognizedPolicyRequestFaultType * soap_new_set_wsnt__UnrecognizedPolicyRequestFaultType(struct soap *soap, std::vector<std::string >& UnrecognizedPolicy, std::vector<char * >& __any1, time_t Timestamp1, struct wsa5__EndpointReferenceType *Originator1, _wsrfbf__BaseFaultType_ErrorCode *ErrorCode1, std::vector<_wsrfbf__BaseFaultType_Description >*Description1, _wsrfbf__BaseFaultType_FaultCause *FaultCause1, char *__anyAttribute1, char *__item2) { wsnt__UnrecognizedPolicyRequestFaultType *_p = soap_instantiate_wsnt__UnrecognizedPolicyRequestFaultType(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->wsnt__UnrecognizedPolicyRequestFaultType::UnrecognizedPolicy = UnrecognizedPolicy; _p->wsrfbf__BaseFaultType::__any = __any1; _p->wsrfbf__BaseFaultType::Timestamp = Timestamp1; _p->wsrfbf__BaseFaultType::Originator = Originator1; _p->wsrfbf__BaseFaultType::ErrorCode = ErrorCode1; _p->wsrfbf__BaseFaultType::Description = Description1; _p->wsrfbf__BaseFaultType::FaultCause = FaultCause1; _p->wsrfbf__BaseFaultType::__anyAttribute = __anyAttribute1; _p->xsd__anyType::__item = __item2; } return _p; }

inline void soap_delete_wsnt__UnrecognizedPolicyRequestFaultType(struct soap *soap, wsnt__UnrecognizedPolicyRequestFaultType *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_wsnt__UnrecognizedPolicyRequestFaultType(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_wsnt__InvalidMessageContentExpressionFaultType
#define SOAP_TYPE_wsnt__InvalidMessageContentExpressionFaultType (108)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_wsnt__InvalidMessageContentExpressionFaultType(struct soap*, const char*, int, const wsnt__InvalidMessageContentExpressionFaultType *, const char*);
SOAP_FMAC3 wsnt__InvalidMessageContentExpressionFaultType * SOAP_FMAC4 soap_in_wsnt__InvalidMessageContentExpressionFaultType(struct soap*, const char*, wsnt__InvalidMessageContentExpressionFaultType *, const char*);

#ifndef soap_write_wsnt__InvalidMessageContentExpressionFaultType
#define soap_write_wsnt__InvalidMessageContentExpressionFaultType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "wsnt:InvalidMessageContentExpressionFaultType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 wsnt__InvalidMessageContentExpressionFaultType * SOAP_FMAC4 soap_get_wsnt__InvalidMessageContentExpressionFaultType(struct soap*, wsnt__InvalidMessageContentExpressionFaultType *, const char*, const char*);

#ifndef soap_read_wsnt__InvalidMessageContentExpressionFaultType
#define soap_read_wsnt__InvalidMessageContentExpressionFaultType(soap, data) ( soap_begin_recv(soap) || !soap_get_wsnt__InvalidMessageContentExpressionFaultType(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 wsnt__InvalidMessageContentExpressionFaultType * SOAP_FMAC2 soap_instantiate_wsnt__InvalidMessageContentExpressionFaultType(struct soap*, int, const char*, const char*, size_t*);

inline wsnt__InvalidMessageContentExpressionFaultType * soap_new_wsnt__InvalidMessageContentExpressionFaultType(struct soap *soap, int n = -1) { return soap_instantiate_wsnt__InvalidMessageContentExpressionFaultType(soap, n, NULL, NULL, NULL); }

inline wsnt__InvalidMessageContentExpressionFaultType * soap_new_req_wsnt__InvalidMessageContentExpressionFaultType(struct soap *soap, time_t Timestamp1) { wsnt__InvalidMessageContentExpressionFaultType *_p = soap_instantiate_wsnt__InvalidMessageContentExpressionFaultType(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->wsrfbf__BaseFaultType::Timestamp = Timestamp1; } return _p; }

inline wsnt__InvalidMessageContentExpressionFaultType * soap_new_set_wsnt__InvalidMessageContentExpressionFaultType(struct soap *soap, std::vector<char * >& __any1, time_t Timestamp1, struct wsa5__EndpointReferenceType *Originator1, _wsrfbf__BaseFaultType_ErrorCode *ErrorCode1, std::vector<_wsrfbf__BaseFaultType_Description >*Description1, _wsrfbf__BaseFaultType_FaultCause *FaultCause1, char *__anyAttribute1, char *__item2) { wsnt__InvalidMessageContentExpressionFaultType *_p = soap_instantiate_wsnt__InvalidMessageContentExpressionFaultType(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->wsrfbf__BaseFaultType::__any = __any1; _p->wsrfbf__BaseFaultType::Timestamp = Timestamp1; _p->wsrfbf__BaseFaultType::Originator = Originator1; _p->wsrfbf__BaseFaultType::ErrorCode = ErrorCode1; _p->wsrfbf__BaseFaultType::Description = Description1; _p->wsrfbf__BaseFaultType::FaultCause = FaultCause1; _p->wsrfbf__BaseFaultType::__anyAttribute = __anyAttribute1; _p->xsd__anyType::__item = __item2; } return _p; }

inline void soap_delete_wsnt__InvalidMessageContentExpressionFaultType(struct soap *soap, wsnt__InvalidMessageContentExpressionFaultType *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_wsnt__InvalidMessageContentExpressionFaultType(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_wsnt__InvalidProducerPropertiesExpressionFaultType
#define SOAP_TYPE_wsnt__InvalidProducerPropertiesExpressionFaultType (107)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_wsnt__InvalidProducerPropertiesExpressionFaultType(struct soap*, const char*, int, const wsnt__InvalidProducerPropertiesExpressionFaultType *, const char*);
SOAP_FMAC3 wsnt__InvalidProducerPropertiesExpressionFaultType * SOAP_FMAC4 soap_in_wsnt__InvalidProducerPropertiesExpressionFaultType(struct soap*, const char*, wsnt__InvalidProducerPropertiesExpressionFaultType *, const char*);

#ifndef soap_write_wsnt__InvalidProducerPropertiesExpressionFaultType
#define soap_write_wsnt__InvalidProducerPropertiesExpressionFaultType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "wsnt:InvalidProducerPropertiesExpressionFaultType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 wsnt__InvalidProducerPropertiesExpressionFaultType * SOAP_FMAC4 soap_get_wsnt__InvalidProducerPropertiesExpressionFaultType(struct soap*, wsnt__InvalidProducerPropertiesExpressionFaultType *, const char*, const char*);

#ifndef soap_read_wsnt__InvalidProducerPropertiesExpressionFaultType
#define soap_read_wsnt__InvalidProducerPropertiesExpressionFaultType(soap, data) ( soap_begin_recv(soap) || !soap_get_wsnt__InvalidProducerPropertiesExpressionFaultType(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 wsnt__InvalidProducerPropertiesExpressionFaultType * SOAP_FMAC2 soap_instantiate_wsnt__InvalidProducerPropertiesExpressionFaultType(struct soap*, int, const char*, const char*, size_t*);

inline wsnt__InvalidProducerPropertiesExpressionFaultType * soap_new_wsnt__InvalidProducerPropertiesExpressionFaultType(struct soap *soap, int n = -1) { return soap_instantiate_wsnt__InvalidProducerPropertiesExpressionFaultType(soap, n, NULL, NULL, NULL); }

inline wsnt__InvalidProducerPropertiesExpressionFaultType * soap_new_req_wsnt__InvalidProducerPropertiesExpressionFaultType(struct soap *soap, time_t Timestamp1) { wsnt__InvalidProducerPropertiesExpressionFaultType *_p = soap_instantiate_wsnt__InvalidProducerPropertiesExpressionFaultType(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->wsrfbf__BaseFaultType::Timestamp = Timestamp1; } return _p; }

inline wsnt__InvalidProducerPropertiesExpressionFaultType * soap_new_set_wsnt__InvalidProducerPropertiesExpressionFaultType(struct soap *soap, std::vector<char * >& __any1, time_t Timestamp1, struct wsa5__EndpointReferenceType *Originator1, _wsrfbf__BaseFaultType_ErrorCode *ErrorCode1, std::vector<_wsrfbf__BaseFaultType_Description >*Description1, _wsrfbf__BaseFaultType_FaultCause *FaultCause1, char *__anyAttribute1, char *__item2) { wsnt__InvalidProducerPropertiesExpressionFaultType *_p = soap_instantiate_wsnt__InvalidProducerPropertiesExpressionFaultType(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->wsrfbf__BaseFaultType::__any = __any1; _p->wsrfbf__BaseFaultType::Timestamp = Timestamp1; _p->wsrfbf__BaseFaultType::Originator = Originator1; _p->wsrfbf__BaseFaultType::ErrorCode = ErrorCode1; _p->wsrfbf__BaseFaultType::Description = Description1; _p->wsrfbf__BaseFaultType::FaultCause = FaultCause1; _p->wsrfbf__BaseFaultType::__anyAttribute = __anyAttribute1; _p->xsd__anyType::__item = __item2; } return _p; }

inline void soap_delete_wsnt__InvalidProducerPropertiesExpressionFaultType(struct soap *soap, wsnt__InvalidProducerPropertiesExpressionFaultType *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_wsnt__InvalidProducerPropertiesExpressionFaultType(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_wsnt__MultipleTopicsSpecifiedFaultType
#define SOAP_TYPE_wsnt__MultipleTopicsSpecifiedFaultType (106)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_wsnt__MultipleTopicsSpecifiedFaultType(struct soap*, const char*, int, const wsnt__MultipleTopicsSpecifiedFaultType *, const char*);
SOAP_FMAC3 wsnt__MultipleTopicsSpecifiedFaultType * SOAP_FMAC4 soap_in_wsnt__MultipleTopicsSpecifiedFaultType(struct soap*, const char*, wsnt__MultipleTopicsSpecifiedFaultType *, const char*);

#ifndef soap_write_wsnt__MultipleTopicsSpecifiedFaultType
#define soap_write_wsnt__MultipleTopicsSpecifiedFaultType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "wsnt:MultipleTopicsSpecifiedFaultType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 wsnt__MultipleTopicsSpecifiedFaultType * SOAP_FMAC4 soap_get_wsnt__MultipleTopicsSpecifiedFaultType(struct soap*, wsnt__MultipleTopicsSpecifiedFaultType *, const char*, const char*);

#ifndef soap_read_wsnt__MultipleTopicsSpecifiedFaultType
#define soap_read_wsnt__MultipleTopicsSpecifiedFaultType(soap, data) ( soap_begin_recv(soap) || !soap_get_wsnt__MultipleTopicsSpecifiedFaultType(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 wsnt__MultipleTopicsSpecifiedFaultType * SOAP_FMAC2 soap_instantiate_wsnt__MultipleTopicsSpecifiedFaultType(struct soap*, int, const char*, const char*, size_t*);

inline wsnt__MultipleTopicsSpecifiedFaultType * soap_new_wsnt__MultipleTopicsSpecifiedFaultType(struct soap *soap, int n = -1) { return soap_instantiate_wsnt__MultipleTopicsSpecifiedFaultType(soap, n, NULL, NULL, NULL); }

inline wsnt__MultipleTopicsSpecifiedFaultType * soap_new_req_wsnt__MultipleTopicsSpecifiedFaultType(struct soap *soap, time_t Timestamp1) { wsnt__MultipleTopicsSpecifiedFaultType *_p = soap_instantiate_wsnt__MultipleTopicsSpecifiedFaultType(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->wsrfbf__BaseFaultType::Timestamp = Timestamp1; } return _p; }

inline wsnt__MultipleTopicsSpecifiedFaultType * soap_new_set_wsnt__MultipleTopicsSpecifiedFaultType(struct soap *soap, std::vector<char * >& __any1, time_t Timestamp1, struct wsa5__EndpointReferenceType *Originator1, _wsrfbf__BaseFaultType_ErrorCode *ErrorCode1, std::vector<_wsrfbf__BaseFaultType_Description >*Description1, _wsrfbf__BaseFaultType_FaultCause *FaultCause1, char *__anyAttribute1, char *__item2) { wsnt__MultipleTopicsSpecifiedFaultType *_p = soap_instantiate_wsnt__MultipleTopicsSpecifiedFaultType(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->wsrfbf__BaseFaultType::__any = __any1; _p->wsrfbf__BaseFaultType::Timestamp = Timestamp1; _p->wsrfbf__BaseFaultType::Originator = Originator1; _p->wsrfbf__BaseFaultType::ErrorCode = ErrorCode1; _p->wsrfbf__BaseFaultType::Description = Description1; _p->wsrfbf__BaseFaultType::FaultCause = FaultCause1; _p->wsrfbf__BaseFaultType::__anyAttribute = __anyAttribute1; _p->xsd__anyType::__item = __item2; } return _p; }

inline void soap_delete_wsnt__MultipleTopicsSpecifiedFaultType(struct soap *soap, wsnt__MultipleTopicsSpecifiedFaultType *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_wsnt__MultipleTopicsSpecifiedFaultType(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_wsnt__TopicNotSupportedFaultType
#define SOAP_TYPE_wsnt__TopicNotSupportedFaultType (105)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_wsnt__TopicNotSupportedFaultType(struct soap*, const char*, int, const wsnt__TopicNotSupportedFaultType *, const char*);
SOAP_FMAC3 wsnt__TopicNotSupportedFaultType * SOAP_FMAC4 soap_in_wsnt__TopicNotSupportedFaultType(struct soap*, const char*, wsnt__TopicNotSupportedFaultType *, const char*);

#ifndef soap_write_wsnt__TopicNotSupportedFaultType
#define soap_write_wsnt__TopicNotSupportedFaultType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "wsnt:TopicNotSupportedFaultType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 wsnt__TopicNotSupportedFaultType * SOAP_FMAC4 soap_get_wsnt__TopicNotSupportedFaultType(struct soap*, wsnt__TopicNotSupportedFaultType *, const char*, const char*);

#ifndef soap_read_wsnt__TopicNotSupportedFaultType
#define soap_read_wsnt__TopicNotSupportedFaultType(soap, data) ( soap_begin_recv(soap) || !soap_get_wsnt__TopicNotSupportedFaultType(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 wsnt__TopicNotSupportedFaultType * SOAP_FMAC2 soap_instantiate_wsnt__TopicNotSupportedFaultType(struct soap*, int, const char*, const char*, size_t*);

inline wsnt__TopicNotSupportedFaultType * soap_new_wsnt__TopicNotSupportedFaultType(struct soap *soap, int n = -1) { return soap_instantiate_wsnt__TopicNotSupportedFaultType(soap, n, NULL, NULL, NULL); }

inline wsnt__TopicNotSupportedFaultType * soap_new_req_wsnt__TopicNotSupportedFaultType(struct soap *soap, time_t Timestamp1) { wsnt__TopicNotSupportedFaultType *_p = soap_instantiate_wsnt__TopicNotSupportedFaultType(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->wsrfbf__BaseFaultType::Timestamp = Timestamp1; } return _p; }

inline wsnt__TopicNotSupportedFaultType * soap_new_set_wsnt__TopicNotSupportedFaultType(struct soap *soap, std::vector<char * >& __any1, time_t Timestamp1, struct wsa5__EndpointReferenceType *Originator1, _wsrfbf__BaseFaultType_ErrorCode *ErrorCode1, std::vector<_wsrfbf__BaseFaultType_Description >*Description1, _wsrfbf__BaseFaultType_FaultCause *FaultCause1, char *__anyAttribute1, char *__item2) { wsnt__TopicNotSupportedFaultType *_p = soap_instantiate_wsnt__TopicNotSupportedFaultType(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->wsrfbf__BaseFaultType::__any = __any1; _p->wsrfbf__BaseFaultType::Timestamp = Timestamp1; _p->wsrfbf__BaseFaultType::Originator = Originator1; _p->wsrfbf__BaseFaultType::ErrorCode = ErrorCode1; _p->wsrfbf__BaseFaultType::Description = Description1; _p->wsrfbf__BaseFaultType::FaultCause = FaultCause1; _p->wsrfbf__BaseFaultType::__anyAttribute = __anyAttribute1; _p->xsd__anyType::__item = __item2; } return _p; }

inline void soap_delete_wsnt__TopicNotSupportedFaultType(struct soap *soap, wsnt__TopicNotSupportedFaultType *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_wsnt__TopicNotSupportedFaultType(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_wsnt__InvalidTopicExpressionFaultType
#define SOAP_TYPE_wsnt__InvalidTopicExpressionFaultType (104)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_wsnt__InvalidTopicExpressionFaultType(struct soap*, const char*, int, const wsnt__InvalidTopicExpressionFaultType *, const char*);
SOAP_FMAC3 wsnt__InvalidTopicExpressionFaultType * SOAP_FMAC4 soap_in_wsnt__InvalidTopicExpressionFaultType(struct soap*, const char*, wsnt__InvalidTopicExpressionFaultType *, const char*);

#ifndef soap_write_wsnt__InvalidTopicExpressionFaultType
#define soap_write_wsnt__InvalidTopicExpressionFaultType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "wsnt:InvalidTopicExpressionFaultType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 wsnt__InvalidTopicExpressionFaultType * SOAP_FMAC4 soap_get_wsnt__InvalidTopicExpressionFaultType(struct soap*, wsnt__InvalidTopicExpressionFaultType *, const char*, const char*);

#ifndef soap_read_wsnt__InvalidTopicExpressionFaultType
#define soap_read_wsnt__InvalidTopicExpressionFaultType(soap, data) ( soap_begin_recv(soap) || !soap_get_wsnt__InvalidTopicExpressionFaultType(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 wsnt__InvalidTopicExpressionFaultType * SOAP_FMAC2 soap_instantiate_wsnt__InvalidTopicExpressionFaultType(struct soap*, int, const char*, const char*, size_t*);

inline wsnt__InvalidTopicExpressionFaultType * soap_new_wsnt__InvalidTopicExpressionFaultType(struct soap *soap, int n = -1) { return soap_instantiate_wsnt__InvalidTopicExpressionFaultType(soap, n, NULL, NULL, NULL); }

inline wsnt__InvalidTopicExpressionFaultType * soap_new_req_wsnt__InvalidTopicExpressionFaultType(struct soap *soap, time_t Timestamp1) { wsnt__InvalidTopicExpressionFaultType *_p = soap_instantiate_wsnt__InvalidTopicExpressionFaultType(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->wsrfbf__BaseFaultType::Timestamp = Timestamp1; } return _p; }

inline wsnt__InvalidTopicExpressionFaultType * soap_new_set_wsnt__InvalidTopicExpressionFaultType(struct soap *soap, std::vector<char * >& __any1, time_t Timestamp1, struct wsa5__EndpointReferenceType *Originator1, _wsrfbf__BaseFaultType_ErrorCode *ErrorCode1, std::vector<_wsrfbf__BaseFaultType_Description >*Description1, _wsrfbf__BaseFaultType_FaultCause *FaultCause1, char *__anyAttribute1, char *__item2) { wsnt__InvalidTopicExpressionFaultType *_p = soap_instantiate_wsnt__InvalidTopicExpressionFaultType(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->wsrfbf__BaseFaultType::__any = __any1; _p->wsrfbf__BaseFaultType::Timestamp = Timestamp1; _p->wsrfbf__BaseFaultType::Originator = Originator1; _p->wsrfbf__BaseFaultType::ErrorCode = ErrorCode1; _p->wsrfbf__BaseFaultType::Description = Description1; _p->wsrfbf__BaseFaultType::FaultCause = FaultCause1; _p->wsrfbf__BaseFaultType::__anyAttribute = __anyAttribute1; _p->xsd__anyType::__item = __item2; } return _p; }

inline void soap_delete_wsnt__InvalidTopicExpressionFaultType(struct soap *soap, wsnt__InvalidTopicExpressionFaultType *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_wsnt__InvalidTopicExpressionFaultType(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_wsnt__TopicExpressionDialectUnknownFaultType
#define SOAP_TYPE_wsnt__TopicExpressionDialectUnknownFaultType (103)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_wsnt__TopicExpressionDialectUnknownFaultType(struct soap*, const char*, int, const wsnt__TopicExpressionDialectUnknownFaultType *, const char*);
SOAP_FMAC3 wsnt__TopicExpressionDialectUnknownFaultType * SOAP_FMAC4 soap_in_wsnt__TopicExpressionDialectUnknownFaultType(struct soap*, const char*, wsnt__TopicExpressionDialectUnknownFaultType *, const char*);

#ifndef soap_write_wsnt__TopicExpressionDialectUnknownFaultType
#define soap_write_wsnt__TopicExpressionDialectUnknownFaultType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "wsnt:TopicExpressionDialectUnknownFaultType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 wsnt__TopicExpressionDialectUnknownFaultType * SOAP_FMAC4 soap_get_wsnt__TopicExpressionDialectUnknownFaultType(struct soap*, wsnt__TopicExpressionDialectUnknownFaultType *, const char*, const char*);

#ifndef soap_read_wsnt__TopicExpressionDialectUnknownFaultType
#define soap_read_wsnt__TopicExpressionDialectUnknownFaultType(soap, data) ( soap_begin_recv(soap) || !soap_get_wsnt__TopicExpressionDialectUnknownFaultType(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 wsnt__TopicExpressionDialectUnknownFaultType * SOAP_FMAC2 soap_instantiate_wsnt__TopicExpressionDialectUnknownFaultType(struct soap*, int, const char*, const char*, size_t*);

inline wsnt__TopicExpressionDialectUnknownFaultType * soap_new_wsnt__TopicExpressionDialectUnknownFaultType(struct soap *soap, int n = -1) { return soap_instantiate_wsnt__TopicExpressionDialectUnknownFaultType(soap, n, NULL, NULL, NULL); }

inline wsnt__TopicExpressionDialectUnknownFaultType * soap_new_req_wsnt__TopicExpressionDialectUnknownFaultType(struct soap *soap, time_t Timestamp1) { wsnt__TopicExpressionDialectUnknownFaultType *_p = soap_instantiate_wsnt__TopicExpressionDialectUnknownFaultType(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->wsrfbf__BaseFaultType::Timestamp = Timestamp1; } return _p; }

inline wsnt__TopicExpressionDialectUnknownFaultType * soap_new_set_wsnt__TopicExpressionDialectUnknownFaultType(struct soap *soap, std::vector<char * >& __any1, time_t Timestamp1, struct wsa5__EndpointReferenceType *Originator1, _wsrfbf__BaseFaultType_ErrorCode *ErrorCode1, std::vector<_wsrfbf__BaseFaultType_Description >*Description1, _wsrfbf__BaseFaultType_FaultCause *FaultCause1, char *__anyAttribute1, char *__item2) { wsnt__TopicExpressionDialectUnknownFaultType *_p = soap_instantiate_wsnt__TopicExpressionDialectUnknownFaultType(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->wsrfbf__BaseFaultType::__any = __any1; _p->wsrfbf__BaseFaultType::Timestamp = Timestamp1; _p->wsrfbf__BaseFaultType::Originator = Originator1; _p->wsrfbf__BaseFaultType::ErrorCode = ErrorCode1; _p->wsrfbf__BaseFaultType::Description = Description1; _p->wsrfbf__BaseFaultType::FaultCause = FaultCause1; _p->wsrfbf__BaseFaultType::__anyAttribute = __anyAttribute1; _p->xsd__anyType::__item = __item2; } return _p; }

inline void soap_delete_wsnt__TopicExpressionDialectUnknownFaultType(struct soap *soap, wsnt__TopicExpressionDialectUnknownFaultType *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_wsnt__TopicExpressionDialectUnknownFaultType(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_wsnt__InvalidFilterFaultType
#define SOAP_TYPE_wsnt__InvalidFilterFaultType (102)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_wsnt__InvalidFilterFaultType(struct soap*, const char*, int, const wsnt__InvalidFilterFaultType *, const char*);
SOAP_FMAC3 wsnt__InvalidFilterFaultType * SOAP_FMAC4 soap_in_wsnt__InvalidFilterFaultType(struct soap*, const char*, wsnt__InvalidFilterFaultType *, const char*);

#ifndef soap_write_wsnt__InvalidFilterFaultType
#define soap_write_wsnt__InvalidFilterFaultType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "wsnt:InvalidFilterFaultType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 wsnt__InvalidFilterFaultType * SOAP_FMAC4 soap_get_wsnt__InvalidFilterFaultType(struct soap*, wsnt__InvalidFilterFaultType *, const char*, const char*);

#ifndef soap_read_wsnt__InvalidFilterFaultType
#define soap_read_wsnt__InvalidFilterFaultType(soap, data) ( soap_begin_recv(soap) || !soap_get_wsnt__InvalidFilterFaultType(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 wsnt__InvalidFilterFaultType * SOAP_FMAC2 soap_instantiate_wsnt__InvalidFilterFaultType(struct soap*, int, const char*, const char*, size_t*);

inline wsnt__InvalidFilterFaultType * soap_new_wsnt__InvalidFilterFaultType(struct soap *soap, int n = -1) { return soap_instantiate_wsnt__InvalidFilterFaultType(soap, n, NULL, NULL, NULL); }

inline wsnt__InvalidFilterFaultType * soap_new_req_wsnt__InvalidFilterFaultType(struct soap *soap, std::vector<std::string >& UnknownFilter, time_t Timestamp1) { wsnt__InvalidFilterFaultType *_p = soap_instantiate_wsnt__InvalidFilterFaultType(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->wsnt__InvalidFilterFaultType::UnknownFilter = UnknownFilter; _p->wsrfbf__BaseFaultType::Timestamp = Timestamp1; } return _p; }

inline wsnt__InvalidFilterFaultType * soap_new_set_wsnt__InvalidFilterFaultType(struct soap *soap, std::vector<std::string >& UnknownFilter, std::vector<char * >& __any1, time_t Timestamp1, struct wsa5__EndpointReferenceType *Originator1, _wsrfbf__BaseFaultType_ErrorCode *ErrorCode1, std::vector<_wsrfbf__BaseFaultType_Description >*Description1, _wsrfbf__BaseFaultType_FaultCause *FaultCause1, char *__anyAttribute1, char *__item2) { wsnt__InvalidFilterFaultType *_p = soap_instantiate_wsnt__InvalidFilterFaultType(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->wsnt__InvalidFilterFaultType::UnknownFilter = UnknownFilter; _p->wsrfbf__BaseFaultType::__any = __any1; _p->wsrfbf__BaseFaultType::Timestamp = Timestamp1; _p->wsrfbf__BaseFaultType::Originator = Originator1; _p->wsrfbf__BaseFaultType::ErrorCode = ErrorCode1; _p->wsrfbf__BaseFaultType::Description = Description1; _p->wsrfbf__BaseFaultType::FaultCause = FaultCause1; _p->wsrfbf__BaseFaultType::__anyAttribute = __anyAttribute1; _p->xsd__anyType::__item = __item2; } return _p; }

inline void soap_delete_wsnt__InvalidFilterFaultType(struct soap *soap, wsnt__InvalidFilterFaultType *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_wsnt__InvalidFilterFaultType(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_wsnt__SubscribeCreationFailedFaultType
#define SOAP_TYPE_wsnt__SubscribeCreationFailedFaultType (101)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_wsnt__SubscribeCreationFailedFaultType(struct soap*, const char*, int, const wsnt__SubscribeCreationFailedFaultType *, const char*);
SOAP_FMAC3 wsnt__SubscribeCreationFailedFaultType * SOAP_FMAC4 soap_in_wsnt__SubscribeCreationFailedFaultType(struct soap*, const char*, wsnt__SubscribeCreationFailedFaultType *, const char*);

#ifndef soap_write_wsnt__SubscribeCreationFailedFaultType
#define soap_write_wsnt__SubscribeCreationFailedFaultType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "wsnt:SubscribeCreationFailedFaultType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 wsnt__SubscribeCreationFailedFaultType * SOAP_FMAC4 soap_get_wsnt__SubscribeCreationFailedFaultType(struct soap*, wsnt__SubscribeCreationFailedFaultType *, const char*, const char*);

#ifndef soap_read_wsnt__SubscribeCreationFailedFaultType
#define soap_read_wsnt__SubscribeCreationFailedFaultType(soap, data) ( soap_begin_recv(soap) || !soap_get_wsnt__SubscribeCreationFailedFaultType(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 wsnt__SubscribeCreationFailedFaultType * SOAP_FMAC2 soap_instantiate_wsnt__SubscribeCreationFailedFaultType(struct soap*, int, const char*, const char*, size_t*);

inline wsnt__SubscribeCreationFailedFaultType * soap_new_wsnt__SubscribeCreationFailedFaultType(struct soap *soap, int n = -1) { return soap_instantiate_wsnt__SubscribeCreationFailedFaultType(soap, n, NULL, NULL, NULL); }

inline wsnt__SubscribeCreationFailedFaultType * soap_new_req_wsnt__SubscribeCreationFailedFaultType(struct soap *soap, time_t Timestamp1) { wsnt__SubscribeCreationFailedFaultType *_p = soap_instantiate_wsnt__SubscribeCreationFailedFaultType(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->wsrfbf__BaseFaultType::Timestamp = Timestamp1; } return _p; }

inline wsnt__SubscribeCreationFailedFaultType * soap_new_set_wsnt__SubscribeCreationFailedFaultType(struct soap *soap, std::vector<char * >& __any1, time_t Timestamp1, struct wsa5__EndpointReferenceType *Originator1, _wsrfbf__BaseFaultType_ErrorCode *ErrorCode1, std::vector<_wsrfbf__BaseFaultType_Description >*Description1, _wsrfbf__BaseFaultType_FaultCause *FaultCause1, char *__anyAttribute1, char *__item2) { wsnt__SubscribeCreationFailedFaultType *_p = soap_instantiate_wsnt__SubscribeCreationFailedFaultType(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->wsrfbf__BaseFaultType::__any = __any1; _p->wsrfbf__BaseFaultType::Timestamp = Timestamp1; _p->wsrfbf__BaseFaultType::Originator = Originator1; _p->wsrfbf__BaseFaultType::ErrorCode = ErrorCode1; _p->wsrfbf__BaseFaultType::Description = Description1; _p->wsrfbf__BaseFaultType::FaultCause = FaultCause1; _p->wsrfbf__BaseFaultType::__anyAttribute = __anyAttribute1; _p->xsd__anyType::__item = __item2; } return _p; }

inline void soap_delete_wsnt__SubscribeCreationFailedFaultType(struct soap *soap, wsnt__SubscribeCreationFailedFaultType *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_wsnt__SubscribeCreationFailedFaultType(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_wsnt__NotificationMessageHolderType
#define SOAP_TYPE_wsnt__NotificationMessageHolderType (100)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_wsnt__NotificationMessageHolderType(struct soap*, const char*, int, const wsnt__NotificationMessageHolderType *, const char*);
SOAP_FMAC3 wsnt__NotificationMessageHolderType * SOAP_FMAC4 soap_in_wsnt__NotificationMessageHolderType(struct soap*, const char*, wsnt__NotificationMessageHolderType *, const char*);

#ifndef soap_write_wsnt__NotificationMessageHolderType
#define soap_write_wsnt__NotificationMessageHolderType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "wsnt:NotificationMessageHolderType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 wsnt__NotificationMessageHolderType * SOAP_FMAC4 soap_get_wsnt__NotificationMessageHolderType(struct soap*, wsnt__NotificationMessageHolderType *, const char*, const char*);

#ifndef soap_read_wsnt__NotificationMessageHolderType
#define soap_read_wsnt__NotificationMessageHolderType(soap, data) ( soap_begin_recv(soap) || !soap_get_wsnt__NotificationMessageHolderType(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 wsnt__NotificationMessageHolderType * SOAP_FMAC2 soap_instantiate_wsnt__NotificationMessageHolderType(struct soap*, int, const char*, const char*, size_t*);

inline wsnt__NotificationMessageHolderType * soap_new_wsnt__NotificationMessageHolderType(struct soap *soap, int n = -1) { return soap_instantiate_wsnt__NotificationMessageHolderType(soap, n, NULL, NULL, NULL); }

inline wsnt__NotificationMessageHolderType * soap_new_req_wsnt__NotificationMessageHolderType(struct soap *soap, _wsnt__NotificationMessageHolderType_Message& Message) { wsnt__NotificationMessageHolderType *_p = soap_instantiate_wsnt__NotificationMessageHolderType(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->wsnt__NotificationMessageHolderType::Message = Message; } return _p; }

inline wsnt__NotificationMessageHolderType * soap_new_set_wsnt__NotificationMessageHolderType(struct soap *soap, struct wsa5__EndpointReferenceType *SubscriptionReference, wsnt__TopicExpressionType *Topic, struct wsa5__EndpointReferenceType *ProducerReference, _wsnt__NotificationMessageHolderType_Message& Message, char *__item1) { wsnt__NotificationMessageHolderType *_p = soap_instantiate_wsnt__NotificationMessageHolderType(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->wsnt__NotificationMessageHolderType::SubscriptionReference = SubscriptionReference; _p->wsnt__NotificationMessageHolderType::Topic = Topic; _p->wsnt__NotificationMessageHolderType::ProducerReference = ProducerReference; _p->wsnt__NotificationMessageHolderType::Message = Message; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_wsnt__NotificationMessageHolderType(struct soap *soap, wsnt__NotificationMessageHolderType *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_wsnt__NotificationMessageHolderType(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_wsnt__SubscriptionPolicyType
#define SOAP_TYPE_wsnt__SubscriptionPolicyType (99)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_wsnt__SubscriptionPolicyType(struct soap*, const char*, int, const wsnt__SubscriptionPolicyType *, const char*);
SOAP_FMAC3 wsnt__SubscriptionPolicyType * SOAP_FMAC4 soap_in_wsnt__SubscriptionPolicyType(struct soap*, const char*, wsnt__SubscriptionPolicyType *, const char*);

#ifndef soap_write_wsnt__SubscriptionPolicyType
#define soap_write_wsnt__SubscriptionPolicyType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "wsnt:SubscriptionPolicyType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 wsnt__SubscriptionPolicyType * SOAP_FMAC4 soap_get_wsnt__SubscriptionPolicyType(struct soap*, wsnt__SubscriptionPolicyType *, const char*, const char*);

#ifndef soap_read_wsnt__SubscriptionPolicyType
#define soap_read_wsnt__SubscriptionPolicyType(soap, data) ( soap_begin_recv(soap) || !soap_get_wsnt__SubscriptionPolicyType(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 wsnt__SubscriptionPolicyType * SOAP_FMAC2 soap_instantiate_wsnt__SubscriptionPolicyType(struct soap*, int, const char*, const char*, size_t*);

inline wsnt__SubscriptionPolicyType * soap_new_wsnt__SubscriptionPolicyType(struct soap *soap, int n = -1) { return soap_instantiate_wsnt__SubscriptionPolicyType(soap, n, NULL, NULL, NULL); }

inline wsnt__SubscriptionPolicyType * soap_new_req_wsnt__SubscriptionPolicyType(struct soap *soap) { wsnt__SubscriptionPolicyType *_p = soap_instantiate_wsnt__SubscriptionPolicyType(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline wsnt__SubscriptionPolicyType * soap_new_set_wsnt__SubscriptionPolicyType(struct soap *soap, std::vector<char * >& __any, char *__item1) { wsnt__SubscriptionPolicyType *_p = soap_instantiate_wsnt__SubscriptionPolicyType(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->wsnt__SubscriptionPolicyType::__any = __any; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_wsnt__SubscriptionPolicyType(struct soap *soap, wsnt__SubscriptionPolicyType *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_wsnt__SubscriptionPolicyType(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_wsnt__FilterType
#define SOAP_TYPE_wsnt__FilterType (98)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_wsnt__FilterType(struct soap*, const char*, int, const wsnt__FilterType *, const char*);
SOAP_FMAC3 wsnt__FilterType * SOAP_FMAC4 soap_in_wsnt__FilterType(struct soap*, const char*, wsnt__FilterType *, const char*);

#ifndef soap_write_wsnt__FilterType
#define soap_write_wsnt__FilterType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "wsnt:FilterType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 wsnt__FilterType * SOAP_FMAC4 soap_get_wsnt__FilterType(struct soap*, wsnt__FilterType *, const char*, const char*);

#ifndef soap_read_wsnt__FilterType
#define soap_read_wsnt__FilterType(soap, data) ( soap_begin_recv(soap) || !soap_get_wsnt__FilterType(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 wsnt__FilterType * SOAP_FMAC2 soap_instantiate_wsnt__FilterType(struct soap*, int, const char*, const char*, size_t*);

inline wsnt__FilterType * soap_new_wsnt__FilterType(struct soap *soap, int n = -1) { return soap_instantiate_wsnt__FilterType(soap, n, NULL, NULL, NULL); }

inline wsnt__FilterType * soap_new_req_wsnt__FilterType(struct soap *soap) { wsnt__FilterType *_p = soap_instantiate_wsnt__FilterType(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline wsnt__FilterType * soap_new_set_wsnt__FilterType(struct soap *soap, std::vector<char * >& __any, char *__item1) { wsnt__FilterType *_p = soap_instantiate_wsnt__FilterType(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->wsnt__FilterType::__any = __any; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_wsnt__FilterType(struct soap *soap, wsnt__FilterType *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_wsnt__FilterType(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_wsnt__TopicExpressionType
#define SOAP_TYPE_wsnt__TopicExpressionType (97)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_wsnt__TopicExpressionType(struct soap*, const char*, int, const wsnt__TopicExpressionType *, const char*);
SOAP_FMAC3 wsnt__TopicExpressionType * SOAP_FMAC4 soap_in_wsnt__TopicExpressionType(struct soap*, const char*, wsnt__TopicExpressionType *, const char*);

#ifndef soap_write_wsnt__TopicExpressionType
#define soap_write_wsnt__TopicExpressionType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "wsnt:TopicExpressionType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 wsnt__TopicExpressionType * SOAP_FMAC4 soap_get_wsnt__TopicExpressionType(struct soap*, wsnt__TopicExpressionType *, const char*, const char*);

#ifndef soap_read_wsnt__TopicExpressionType
#define soap_read_wsnt__TopicExpressionType(soap, data) ( soap_begin_recv(soap) || !soap_get_wsnt__TopicExpressionType(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 wsnt__TopicExpressionType * SOAP_FMAC2 soap_instantiate_wsnt__TopicExpressionType(struct soap*, int, const char*, const char*, size_t*);

inline wsnt__TopicExpressionType * soap_new_wsnt__TopicExpressionType(struct soap *soap, int n = -1) { return soap_instantiate_wsnt__TopicExpressionType(soap, n, NULL, NULL, NULL); }

inline wsnt__TopicExpressionType * soap_new_req_wsnt__TopicExpressionType(struct soap *soap, std::string& Dialect) { wsnt__TopicExpressionType *_p = soap_instantiate_wsnt__TopicExpressionType(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->wsnt__TopicExpressionType::Dialect = Dialect; } return _p; }

inline wsnt__TopicExpressionType * soap_new_set_wsnt__TopicExpressionType(struct soap *soap, char *__any, std::string& Dialect, char *__anyAttribute, char *__mixed, char *__item1) { wsnt__TopicExpressionType *_p = soap_instantiate_wsnt__TopicExpressionType(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->wsnt__TopicExpressionType::__any = __any; _p->wsnt__TopicExpressionType::Dialect = Dialect; _p->wsnt__TopicExpressionType::__anyAttribute = __anyAttribute; _p->wsnt__TopicExpressionType::__mixed = __mixed; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_wsnt__TopicExpressionType(struct soap *soap, wsnt__TopicExpressionType *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_wsnt__TopicExpressionType(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_wsnt__QueryExpressionType
#define SOAP_TYPE_wsnt__QueryExpressionType (96)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_wsnt__QueryExpressionType(struct soap*, const char*, int, const wsnt__QueryExpressionType *, const char*);
SOAP_FMAC3 wsnt__QueryExpressionType * SOAP_FMAC4 soap_in_wsnt__QueryExpressionType(struct soap*, const char*, wsnt__QueryExpressionType *, const char*);

#ifndef soap_write_wsnt__QueryExpressionType
#define soap_write_wsnt__QueryExpressionType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "wsnt:QueryExpressionType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 wsnt__QueryExpressionType * SOAP_FMAC4 soap_get_wsnt__QueryExpressionType(struct soap*, wsnt__QueryExpressionType *, const char*, const char*);

#ifndef soap_read_wsnt__QueryExpressionType
#define soap_read_wsnt__QueryExpressionType(soap, data) ( soap_begin_recv(soap) || !soap_get_wsnt__QueryExpressionType(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 wsnt__QueryExpressionType * SOAP_FMAC2 soap_instantiate_wsnt__QueryExpressionType(struct soap*, int, const char*, const char*, size_t*);

inline wsnt__QueryExpressionType * soap_new_wsnt__QueryExpressionType(struct soap *soap, int n = -1) { return soap_instantiate_wsnt__QueryExpressionType(soap, n, NULL, NULL, NULL); }

inline wsnt__QueryExpressionType * soap_new_req_wsnt__QueryExpressionType(struct soap *soap, std::string& Dialect) { wsnt__QueryExpressionType *_p = soap_instantiate_wsnt__QueryExpressionType(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->wsnt__QueryExpressionType::Dialect = Dialect; } return _p; }

inline wsnt__QueryExpressionType * soap_new_set_wsnt__QueryExpressionType(struct soap *soap, char *__any, std::string& Dialect, char *__mixed, char *__item1) { wsnt__QueryExpressionType *_p = soap_instantiate_wsnt__QueryExpressionType(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->wsnt__QueryExpressionType::__any = __any; _p->wsnt__QueryExpressionType::Dialect = Dialect; _p->wsnt__QueryExpressionType::__mixed = __mixed; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_wsnt__QueryExpressionType(struct soap *soap, wsnt__QueryExpressionType *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_wsnt__QueryExpressionType(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_wsrfbf__BaseFaultType
#define SOAP_TYPE_wsrfbf__BaseFaultType (95)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_wsrfbf__BaseFaultType(struct soap*, const char*, int, const wsrfbf__BaseFaultType *, const char*);
SOAP_FMAC3 wsrfbf__BaseFaultType * SOAP_FMAC4 soap_in_wsrfbf__BaseFaultType(struct soap*, const char*, wsrfbf__BaseFaultType *, const char*);

#ifndef soap_write_wsrfbf__BaseFaultType
#define soap_write_wsrfbf__BaseFaultType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "wsrfbf:BaseFaultType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 wsrfbf__BaseFaultType * SOAP_FMAC4 soap_get_wsrfbf__BaseFaultType(struct soap*, wsrfbf__BaseFaultType *, const char*, const char*);

#ifndef soap_read_wsrfbf__BaseFaultType
#define soap_read_wsrfbf__BaseFaultType(soap, data) ( soap_begin_recv(soap) || !soap_get_wsrfbf__BaseFaultType(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 wsrfbf__BaseFaultType * SOAP_FMAC2 soap_instantiate_wsrfbf__BaseFaultType(struct soap*, int, const char*, const char*, size_t*);

inline wsrfbf__BaseFaultType * soap_new_wsrfbf__BaseFaultType(struct soap *soap, int n = -1) { return soap_instantiate_wsrfbf__BaseFaultType(soap, n, NULL, NULL, NULL); }

inline wsrfbf__BaseFaultType * soap_new_req_wsrfbf__BaseFaultType(struct soap *soap, time_t Timestamp) { wsrfbf__BaseFaultType *_p = soap_instantiate_wsrfbf__BaseFaultType(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->wsrfbf__BaseFaultType::Timestamp = Timestamp; } return _p; }

inline wsrfbf__BaseFaultType * soap_new_set_wsrfbf__BaseFaultType(struct soap *soap, std::vector<char * >& __any, time_t Timestamp, struct wsa5__EndpointReferenceType *Originator, _wsrfbf__BaseFaultType_ErrorCode *ErrorCode, std::vector<_wsrfbf__BaseFaultType_Description >*Description, _wsrfbf__BaseFaultType_FaultCause *FaultCause, char *__anyAttribute, char *__item1) { wsrfbf__BaseFaultType *_p = soap_instantiate_wsrfbf__BaseFaultType(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->wsrfbf__BaseFaultType::__any = __any; _p->wsrfbf__BaseFaultType::Timestamp = Timestamp; _p->wsrfbf__BaseFaultType::Originator = Originator; _p->wsrfbf__BaseFaultType::ErrorCode = ErrorCode; _p->wsrfbf__BaseFaultType::Description = Description; _p->wsrfbf__BaseFaultType::FaultCause = FaultCause; _p->wsrfbf__BaseFaultType::__anyAttribute = __anyAttribute; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_wsrfbf__BaseFaultType(struct soap *soap, wsrfbf__BaseFaultType *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_wsrfbf__BaseFaultType(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_wsrfr__ResourceUnavailableFaultType
#define SOAP_TYPE_wsrfr__ResourceUnavailableFaultType (94)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_wsrfr__ResourceUnavailableFaultType(struct soap*, const char*, int, const wsrfr__ResourceUnavailableFaultType *, const char*);
SOAP_FMAC3 wsrfr__ResourceUnavailableFaultType * SOAP_FMAC4 soap_in_wsrfr__ResourceUnavailableFaultType(struct soap*, const char*, wsrfr__ResourceUnavailableFaultType *, const char*);

#ifndef soap_write_wsrfr__ResourceUnavailableFaultType
#define soap_write_wsrfr__ResourceUnavailableFaultType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "wsrfr:ResourceUnavailableFaultType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 wsrfr__ResourceUnavailableFaultType * SOAP_FMAC4 soap_get_wsrfr__ResourceUnavailableFaultType(struct soap*, wsrfr__ResourceUnavailableFaultType *, const char*, const char*);

#ifndef soap_read_wsrfr__ResourceUnavailableFaultType
#define soap_read_wsrfr__ResourceUnavailableFaultType(soap, data) ( soap_begin_recv(soap) || !soap_get_wsrfr__ResourceUnavailableFaultType(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 wsrfr__ResourceUnavailableFaultType * SOAP_FMAC2 soap_instantiate_wsrfr__ResourceUnavailableFaultType(struct soap*, int, const char*, const char*, size_t*);

inline wsrfr__ResourceUnavailableFaultType * soap_new_wsrfr__ResourceUnavailableFaultType(struct soap *soap, int n = -1) { return soap_instantiate_wsrfr__ResourceUnavailableFaultType(soap, n, NULL, NULL, NULL); }

inline wsrfr__ResourceUnavailableFaultType * soap_new_req_wsrfr__ResourceUnavailableFaultType(struct soap *soap, time_t Timestamp1) { wsrfr__ResourceUnavailableFaultType *_p = soap_instantiate_wsrfr__ResourceUnavailableFaultType(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->wsrfbf__BaseFaultType::Timestamp = Timestamp1; } return _p; }

inline wsrfr__ResourceUnavailableFaultType * soap_new_set_wsrfr__ResourceUnavailableFaultType(struct soap *soap, std::vector<char * >& __any1, time_t Timestamp1, struct wsa5__EndpointReferenceType *Originator1, _wsrfbf__BaseFaultType_ErrorCode *ErrorCode1, std::vector<_wsrfbf__BaseFaultType_Description >*Description1, _wsrfbf__BaseFaultType_FaultCause *FaultCause1, char *__anyAttribute1, char *__item2) { wsrfr__ResourceUnavailableFaultType *_p = soap_instantiate_wsrfr__ResourceUnavailableFaultType(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->wsrfbf__BaseFaultType::__any = __any1; _p->wsrfbf__BaseFaultType::Timestamp = Timestamp1; _p->wsrfbf__BaseFaultType::Originator = Originator1; _p->wsrfbf__BaseFaultType::ErrorCode = ErrorCode1; _p->wsrfbf__BaseFaultType::Description = Description1; _p->wsrfbf__BaseFaultType::FaultCause = FaultCause1; _p->wsrfbf__BaseFaultType::__anyAttribute = __anyAttribute1; _p->xsd__anyType::__item = __item2; } return _p; }

inline void soap_delete_wsrfr__ResourceUnavailableFaultType(struct soap *soap, wsrfr__ResourceUnavailableFaultType *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_wsrfr__ResourceUnavailableFaultType(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_wsrfr__ResourceUnknownFaultType
#define SOAP_TYPE_wsrfr__ResourceUnknownFaultType (93)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_wsrfr__ResourceUnknownFaultType(struct soap*, const char*, int, const wsrfr__ResourceUnknownFaultType *, const char*);
SOAP_FMAC3 wsrfr__ResourceUnknownFaultType * SOAP_FMAC4 soap_in_wsrfr__ResourceUnknownFaultType(struct soap*, const char*, wsrfr__ResourceUnknownFaultType *, const char*);

#ifndef soap_write_wsrfr__ResourceUnknownFaultType
#define soap_write_wsrfr__ResourceUnknownFaultType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "wsrfr:ResourceUnknownFaultType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 wsrfr__ResourceUnknownFaultType * SOAP_FMAC4 soap_get_wsrfr__ResourceUnknownFaultType(struct soap*, wsrfr__ResourceUnknownFaultType *, const char*, const char*);

#ifndef soap_read_wsrfr__ResourceUnknownFaultType
#define soap_read_wsrfr__ResourceUnknownFaultType(soap, data) ( soap_begin_recv(soap) || !soap_get_wsrfr__ResourceUnknownFaultType(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 wsrfr__ResourceUnknownFaultType * SOAP_FMAC2 soap_instantiate_wsrfr__ResourceUnknownFaultType(struct soap*, int, const char*, const char*, size_t*);

inline wsrfr__ResourceUnknownFaultType * soap_new_wsrfr__ResourceUnknownFaultType(struct soap *soap, int n = -1) { return soap_instantiate_wsrfr__ResourceUnknownFaultType(soap, n, NULL, NULL, NULL); }

inline wsrfr__ResourceUnknownFaultType * soap_new_req_wsrfr__ResourceUnknownFaultType(struct soap *soap, time_t Timestamp1) { wsrfr__ResourceUnknownFaultType *_p = soap_instantiate_wsrfr__ResourceUnknownFaultType(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->wsrfbf__BaseFaultType::Timestamp = Timestamp1; } return _p; }

inline wsrfr__ResourceUnknownFaultType * soap_new_set_wsrfr__ResourceUnknownFaultType(struct soap *soap, std::vector<char * >& __any1, time_t Timestamp1, struct wsa5__EndpointReferenceType *Originator1, _wsrfbf__BaseFaultType_ErrorCode *ErrorCode1, std::vector<_wsrfbf__BaseFaultType_Description >*Description1, _wsrfbf__BaseFaultType_FaultCause *FaultCause1, char *__anyAttribute1, char *__item2) { wsrfr__ResourceUnknownFaultType *_p = soap_instantiate_wsrfr__ResourceUnknownFaultType(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->wsrfbf__BaseFaultType::__any = __any1; _p->wsrfbf__BaseFaultType::Timestamp = Timestamp1; _p->wsrfbf__BaseFaultType::Originator = Originator1; _p->wsrfbf__BaseFaultType::ErrorCode = ErrorCode1; _p->wsrfbf__BaseFaultType::Description = Description1; _p->wsrfbf__BaseFaultType::FaultCause = FaultCause1; _p->wsrfbf__BaseFaultType::__anyAttribute = __anyAttribute1; _p->xsd__anyType::__item = __item2; } return _p; }

inline void soap_delete_wsrfr__ResourceUnknownFaultType(struct soap *soap, wsrfr__ResourceUnknownFaultType *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_wsrfr__ResourceUnknownFaultType(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE__eventws__GetEventPropertiesResponse
#define SOAP_TYPE__eventws__GetEventPropertiesResponse (92)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__eventws__GetEventPropertiesResponse(struct soap*, const char*, int, const _eventws__GetEventPropertiesResponse *, const char*);
SOAP_FMAC3 _eventws__GetEventPropertiesResponse * SOAP_FMAC4 soap_in__eventws__GetEventPropertiesResponse(struct soap*, const char*, _eventws__GetEventPropertiesResponse *, const char*);

#ifndef soap_write__eventws__GetEventPropertiesResponse
#define soap_write__eventws__GetEventPropertiesResponse(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "eventws:GetEventPropertiesResponse", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _eventws__GetEventPropertiesResponse * SOAP_FMAC4 soap_get__eventws__GetEventPropertiesResponse(struct soap*, _eventws__GetEventPropertiesResponse *, const char*, const char*);

#ifndef soap_read__eventws__GetEventPropertiesResponse
#define soap_read__eventws__GetEventPropertiesResponse(soap, data) ( soap_begin_recv(soap) || !soap_get__eventws__GetEventPropertiesResponse(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 _eventws__GetEventPropertiesResponse * SOAP_FMAC2 soap_instantiate__eventws__GetEventPropertiesResponse(struct soap*, int, const char*, const char*, size_t*);

inline _eventws__GetEventPropertiesResponse * soap_new__eventws__GetEventPropertiesResponse(struct soap *soap, int n = -1) { return soap_instantiate__eventws__GetEventPropertiesResponse(soap, n, NULL, NULL, NULL); }

inline _eventws__GetEventPropertiesResponse * soap_new_req__eventws__GetEventPropertiesResponse(struct soap *soap, std::vector<std::string >& TopicNamespaceLocation, bool wsnt__FixedTopicSet, wstop__TopicSetType *wstop__TopicSet, std::vector<std::string >& wsnt__TopicExpressionDialect, std::vector<std::string >& MessageContentFilterDialect, std::vector<std::string >& MessageContentSchemaLocation) { _eventws__GetEventPropertiesResponse *_p = soap_instantiate__eventws__GetEventPropertiesResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_eventws__GetEventPropertiesResponse::TopicNamespaceLocation = TopicNamespaceLocation; _p->_eventws__GetEventPropertiesResponse::wsnt__FixedTopicSet = wsnt__FixedTopicSet; _p->_eventws__GetEventPropertiesResponse::wstop__TopicSet = wstop__TopicSet; _p->_eventws__GetEventPropertiesResponse::wsnt__TopicExpressionDialect = wsnt__TopicExpressionDialect; _p->_eventws__GetEventPropertiesResponse::MessageContentFilterDialect = MessageContentFilterDialect; _p->_eventws__GetEventPropertiesResponse::MessageContentSchemaLocation = MessageContentSchemaLocation; } return _p; }

inline _eventws__GetEventPropertiesResponse * soap_new_set__eventws__GetEventPropertiesResponse(struct soap *soap, std::vector<std::string >& TopicNamespaceLocation, bool wsnt__FixedTopicSet, wstop__TopicSetType *wstop__TopicSet, std::vector<std::string >& wsnt__TopicExpressionDialect, std::vector<std::string >& MessageContentFilterDialect, std::vector<std::string >& ProducerPropertiesFilterDialect, std::vector<std::string >& MessageContentSchemaLocation, std::vector<char * >& __any) { _eventws__GetEventPropertiesResponse *_p = soap_instantiate__eventws__GetEventPropertiesResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_eventws__GetEventPropertiesResponse::TopicNamespaceLocation = TopicNamespaceLocation; _p->_eventws__GetEventPropertiesResponse::wsnt__FixedTopicSet = wsnt__FixedTopicSet; _p->_eventws__GetEventPropertiesResponse::wstop__TopicSet = wstop__TopicSet; _p->_eventws__GetEventPropertiesResponse::wsnt__TopicExpressionDialect = wsnt__TopicExpressionDialect; _p->_eventws__GetEventPropertiesResponse::MessageContentFilterDialect = MessageContentFilterDialect; _p->_eventws__GetEventPropertiesResponse::ProducerPropertiesFilterDialect = ProducerPropertiesFilterDialect; _p->_eventws__GetEventPropertiesResponse::MessageContentSchemaLocation = MessageContentSchemaLocation; _p->_eventws__GetEventPropertiesResponse::__any = __any; } return _p; }

inline void soap_delete__eventws__GetEventPropertiesResponse(struct soap *soap, _eventws__GetEventPropertiesResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__eventws__GetEventPropertiesResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE__eventws__GetEventProperties
#define SOAP_TYPE__eventws__GetEventProperties (91)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__eventws__GetEventProperties(struct soap*, const char*, int, const _eventws__GetEventProperties *, const char*);
SOAP_FMAC3 _eventws__GetEventProperties * SOAP_FMAC4 soap_in__eventws__GetEventProperties(struct soap*, const char*, _eventws__GetEventProperties *, const char*);

#ifndef soap_write__eventws__GetEventProperties
#define soap_write__eventws__GetEventProperties(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "eventws:GetEventProperties", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _eventws__GetEventProperties * SOAP_FMAC4 soap_get__eventws__GetEventProperties(struct soap*, _eventws__GetEventProperties *, const char*, const char*);

#ifndef soap_read__eventws__GetEventProperties
#define soap_read__eventws__GetEventProperties(soap, data) ( soap_begin_recv(soap) || !soap_get__eventws__GetEventProperties(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 _eventws__GetEventProperties * SOAP_FMAC2 soap_instantiate__eventws__GetEventProperties(struct soap*, int, const char*, const char*, size_t*);

inline _eventws__GetEventProperties * soap_new__eventws__GetEventProperties(struct soap *soap, int n = -1) { return soap_instantiate__eventws__GetEventProperties(soap, n, NULL, NULL, NULL); }

inline _eventws__GetEventProperties * soap_new_req__eventws__GetEventProperties(struct soap *soap) { _eventws__GetEventProperties *_p = soap_instantiate__eventws__GetEventProperties(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline _eventws__GetEventProperties * soap_new_set__eventws__GetEventProperties(struct soap *soap) { _eventws__GetEventProperties *_p = soap_instantiate__eventws__GetEventProperties(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline void soap_delete__eventws__GetEventProperties(struct soap *soap, _eventws__GetEventProperties *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__eventws__GetEventProperties(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE__eventws__SetSynchronizationPointResponse
#define SOAP_TYPE__eventws__SetSynchronizationPointResponse (90)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__eventws__SetSynchronizationPointResponse(struct soap*, const char*, int, const _eventws__SetSynchronizationPointResponse *, const char*);
SOAP_FMAC3 _eventws__SetSynchronizationPointResponse * SOAP_FMAC4 soap_in__eventws__SetSynchronizationPointResponse(struct soap*, const char*, _eventws__SetSynchronizationPointResponse *, const char*);

#ifndef soap_write__eventws__SetSynchronizationPointResponse
#define soap_write__eventws__SetSynchronizationPointResponse(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "eventws:SetSynchronizationPointResponse", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _eventws__SetSynchronizationPointResponse * SOAP_FMAC4 soap_get__eventws__SetSynchronizationPointResponse(struct soap*, _eventws__SetSynchronizationPointResponse *, const char*, const char*);

#ifndef soap_read__eventws__SetSynchronizationPointResponse
#define soap_read__eventws__SetSynchronizationPointResponse(soap, data) ( soap_begin_recv(soap) || !soap_get__eventws__SetSynchronizationPointResponse(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 _eventws__SetSynchronizationPointResponse * SOAP_FMAC2 soap_instantiate__eventws__SetSynchronizationPointResponse(struct soap*, int, const char*, const char*, size_t*);

inline _eventws__SetSynchronizationPointResponse * soap_new__eventws__SetSynchronizationPointResponse(struct soap *soap, int n = -1) { return soap_instantiate__eventws__SetSynchronizationPointResponse(soap, n, NULL, NULL, NULL); }

inline _eventws__SetSynchronizationPointResponse * soap_new_req__eventws__SetSynchronizationPointResponse(struct soap *soap) { _eventws__SetSynchronizationPointResponse *_p = soap_instantiate__eventws__SetSynchronizationPointResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline _eventws__SetSynchronizationPointResponse * soap_new_set__eventws__SetSynchronizationPointResponse(struct soap *soap) { _eventws__SetSynchronizationPointResponse *_p = soap_instantiate__eventws__SetSynchronizationPointResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline void soap_delete__eventws__SetSynchronizationPointResponse(struct soap *soap, _eventws__SetSynchronizationPointResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__eventws__SetSynchronizationPointResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE__eventws__SetSynchronizationPoint
#define SOAP_TYPE__eventws__SetSynchronizationPoint (89)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__eventws__SetSynchronizationPoint(struct soap*, const char*, int, const _eventws__SetSynchronizationPoint *, const char*);
SOAP_FMAC3 _eventws__SetSynchronizationPoint * SOAP_FMAC4 soap_in__eventws__SetSynchronizationPoint(struct soap*, const char*, _eventws__SetSynchronizationPoint *, const char*);

#ifndef soap_write__eventws__SetSynchronizationPoint
#define soap_write__eventws__SetSynchronizationPoint(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "eventws:SetSynchronizationPoint", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _eventws__SetSynchronizationPoint * SOAP_FMAC4 soap_get__eventws__SetSynchronizationPoint(struct soap*, _eventws__SetSynchronizationPoint *, const char*, const char*);

#ifndef soap_read__eventws__SetSynchronizationPoint
#define soap_read__eventws__SetSynchronizationPoint(soap, data) ( soap_begin_recv(soap) || !soap_get__eventws__SetSynchronizationPoint(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 _eventws__SetSynchronizationPoint * SOAP_FMAC2 soap_instantiate__eventws__SetSynchronizationPoint(struct soap*, int, const char*, const char*, size_t*);

inline _eventws__SetSynchronizationPoint * soap_new__eventws__SetSynchronizationPoint(struct soap *soap, int n = -1) { return soap_instantiate__eventws__SetSynchronizationPoint(soap, n, NULL, NULL, NULL); }

inline _eventws__SetSynchronizationPoint * soap_new_req__eventws__SetSynchronizationPoint(struct soap *soap) { _eventws__SetSynchronizationPoint *_p = soap_instantiate__eventws__SetSynchronizationPoint(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline _eventws__SetSynchronizationPoint * soap_new_set__eventws__SetSynchronizationPoint(struct soap *soap) { _eventws__SetSynchronizationPoint *_p = soap_instantiate__eventws__SetSynchronizationPoint(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline void soap_delete__eventws__SetSynchronizationPoint(struct soap *soap, _eventws__SetSynchronizationPoint *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__eventws__SetSynchronizationPoint(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE__eventws__SeekResponse
#define SOAP_TYPE__eventws__SeekResponse (88)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__eventws__SeekResponse(struct soap*, const char*, int, const _eventws__SeekResponse *, const char*);
SOAP_FMAC3 _eventws__SeekResponse * SOAP_FMAC4 soap_in__eventws__SeekResponse(struct soap*, const char*, _eventws__SeekResponse *, const char*);

#ifndef soap_write__eventws__SeekResponse
#define soap_write__eventws__SeekResponse(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "eventws:SeekResponse", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _eventws__SeekResponse * SOAP_FMAC4 soap_get__eventws__SeekResponse(struct soap*, _eventws__SeekResponse *, const char*, const char*);

#ifndef soap_read__eventws__SeekResponse
#define soap_read__eventws__SeekResponse(soap, data) ( soap_begin_recv(soap) || !soap_get__eventws__SeekResponse(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 _eventws__SeekResponse * SOAP_FMAC2 soap_instantiate__eventws__SeekResponse(struct soap*, int, const char*, const char*, size_t*);

inline _eventws__SeekResponse * soap_new__eventws__SeekResponse(struct soap *soap, int n = -1) { return soap_instantiate__eventws__SeekResponse(soap, n, NULL, NULL, NULL); }

inline _eventws__SeekResponse * soap_new_req__eventws__SeekResponse(struct soap *soap) { _eventws__SeekResponse *_p = soap_instantiate__eventws__SeekResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline _eventws__SeekResponse * soap_new_set__eventws__SeekResponse(struct soap *soap) { _eventws__SeekResponse *_p = soap_instantiate__eventws__SeekResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline void soap_delete__eventws__SeekResponse(struct soap *soap, _eventws__SeekResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__eventws__SeekResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE__eventws__Seek
#define SOAP_TYPE__eventws__Seek (87)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__eventws__Seek(struct soap*, const char*, int, const _eventws__Seek *, const char*);
SOAP_FMAC3 _eventws__Seek * SOAP_FMAC4 soap_in__eventws__Seek(struct soap*, const char*, _eventws__Seek *, const char*);

#ifndef soap_write__eventws__Seek
#define soap_write__eventws__Seek(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "eventws:Seek", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _eventws__Seek * SOAP_FMAC4 soap_get__eventws__Seek(struct soap*, _eventws__Seek *, const char*, const char*);

#ifndef soap_read__eventws__Seek
#define soap_read__eventws__Seek(soap, data) ( soap_begin_recv(soap) || !soap_get__eventws__Seek(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 _eventws__Seek * SOAP_FMAC2 soap_instantiate__eventws__Seek(struct soap*, int, const char*, const char*, size_t*);

inline _eventws__Seek * soap_new__eventws__Seek(struct soap *soap, int n = -1) { return soap_instantiate__eventws__Seek(soap, n, NULL, NULL, NULL); }

inline _eventws__Seek * soap_new_req__eventws__Seek(struct soap *soap, time_t UtcTime) { _eventws__Seek *_p = soap_instantiate__eventws__Seek(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_eventws__Seek::UtcTime = UtcTime; } return _p; }

inline _eventws__Seek * soap_new_set__eventws__Seek(struct soap *soap, time_t UtcTime, bool *Reverse, std::vector<char * >& __any) { _eventws__Seek *_p = soap_instantiate__eventws__Seek(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_eventws__Seek::UtcTime = UtcTime; _p->_eventws__Seek::Reverse = Reverse; _p->_eventws__Seek::__any = __any; } return _p; }

inline void soap_delete__eventws__Seek(struct soap *soap, _eventws__Seek *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__eventws__Seek(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE__eventws__PullMessagesFaultResponse
#define SOAP_TYPE__eventws__PullMessagesFaultResponse (86)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__eventws__PullMessagesFaultResponse(struct soap*, const char*, int, const _eventws__PullMessagesFaultResponse *, const char*);
SOAP_FMAC3 _eventws__PullMessagesFaultResponse * SOAP_FMAC4 soap_in__eventws__PullMessagesFaultResponse(struct soap*, const char*, _eventws__PullMessagesFaultResponse *, const char*);

#ifndef soap_write__eventws__PullMessagesFaultResponse
#define soap_write__eventws__PullMessagesFaultResponse(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "eventws:PullMessagesFaultResponse", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _eventws__PullMessagesFaultResponse * SOAP_FMAC4 soap_get__eventws__PullMessagesFaultResponse(struct soap*, _eventws__PullMessagesFaultResponse *, const char*, const char*);

#ifndef soap_read__eventws__PullMessagesFaultResponse
#define soap_read__eventws__PullMessagesFaultResponse(soap, data) ( soap_begin_recv(soap) || !soap_get__eventws__PullMessagesFaultResponse(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 _eventws__PullMessagesFaultResponse * SOAP_FMAC2 soap_instantiate__eventws__PullMessagesFaultResponse(struct soap*, int, const char*, const char*, size_t*);

inline _eventws__PullMessagesFaultResponse * soap_new__eventws__PullMessagesFaultResponse(struct soap *soap, int n = -1) { return soap_instantiate__eventws__PullMessagesFaultResponse(soap, n, NULL, NULL, NULL); }

inline _eventws__PullMessagesFaultResponse * soap_new_req__eventws__PullMessagesFaultResponse(struct soap *soap, LONG64 MaxTimeout, int MaxMessageLimit) { _eventws__PullMessagesFaultResponse *_p = soap_instantiate__eventws__PullMessagesFaultResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_eventws__PullMessagesFaultResponse::MaxTimeout = MaxTimeout; _p->_eventws__PullMessagesFaultResponse::MaxMessageLimit = MaxMessageLimit; } return _p; }

inline _eventws__PullMessagesFaultResponse * soap_new_set__eventws__PullMessagesFaultResponse(struct soap *soap, LONG64 MaxTimeout, int MaxMessageLimit, std::vector<char * >& __any) { _eventws__PullMessagesFaultResponse *_p = soap_instantiate__eventws__PullMessagesFaultResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_eventws__PullMessagesFaultResponse::MaxTimeout = MaxTimeout; _p->_eventws__PullMessagesFaultResponse::MaxMessageLimit = MaxMessageLimit; _p->_eventws__PullMessagesFaultResponse::__any = __any; } return _p; }

inline void soap_delete__eventws__PullMessagesFaultResponse(struct soap *soap, _eventws__PullMessagesFaultResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__eventws__PullMessagesFaultResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE__eventws__PullMessagesResponse
#define SOAP_TYPE__eventws__PullMessagesResponse (85)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__eventws__PullMessagesResponse(struct soap*, const char*, int, const _eventws__PullMessagesResponse *, const char*);
SOAP_FMAC3 _eventws__PullMessagesResponse * SOAP_FMAC4 soap_in__eventws__PullMessagesResponse(struct soap*, const char*, _eventws__PullMessagesResponse *, const char*);

#ifndef soap_write__eventws__PullMessagesResponse
#define soap_write__eventws__PullMessagesResponse(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "eventws:PullMessagesResponse", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _eventws__PullMessagesResponse * SOAP_FMAC4 soap_get__eventws__PullMessagesResponse(struct soap*, _eventws__PullMessagesResponse *, const char*, const char*);

#ifndef soap_read__eventws__PullMessagesResponse
#define soap_read__eventws__PullMessagesResponse(soap, data) ( soap_begin_recv(soap) || !soap_get__eventws__PullMessagesResponse(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 _eventws__PullMessagesResponse * SOAP_FMAC2 soap_instantiate__eventws__PullMessagesResponse(struct soap*, int, const char*, const char*, size_t*);

inline _eventws__PullMessagesResponse * soap_new__eventws__PullMessagesResponse(struct soap *soap, int n = -1) { return soap_instantiate__eventws__PullMessagesResponse(soap, n, NULL, NULL, NULL); }

inline _eventws__PullMessagesResponse * soap_new_req__eventws__PullMessagesResponse(struct soap *soap, time_t CurrentTime, time_t TerminationTime) { _eventws__PullMessagesResponse *_p = soap_instantiate__eventws__PullMessagesResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_eventws__PullMessagesResponse::CurrentTime = CurrentTime; _p->_eventws__PullMessagesResponse::TerminationTime = TerminationTime; } return _p; }

inline _eventws__PullMessagesResponse * soap_new_set__eventws__PullMessagesResponse(struct soap *soap, time_t CurrentTime, time_t TerminationTime, std::vector<wsnt__NotificationMessageHolderType * >& wsnt__NotificationMessage) { _eventws__PullMessagesResponse *_p = soap_instantiate__eventws__PullMessagesResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_eventws__PullMessagesResponse::CurrentTime = CurrentTime; _p->_eventws__PullMessagesResponse::TerminationTime = TerminationTime; _p->_eventws__PullMessagesResponse::wsnt__NotificationMessage = wsnt__NotificationMessage; } return _p; }

inline void soap_delete__eventws__PullMessagesResponse(struct soap *soap, _eventws__PullMessagesResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__eventws__PullMessagesResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE__eventws__PullMessages
#define SOAP_TYPE__eventws__PullMessages (84)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__eventws__PullMessages(struct soap*, const char*, int, const _eventws__PullMessages *, const char*);
SOAP_FMAC3 _eventws__PullMessages * SOAP_FMAC4 soap_in__eventws__PullMessages(struct soap*, const char*, _eventws__PullMessages *, const char*);

#ifndef soap_write__eventws__PullMessages
#define soap_write__eventws__PullMessages(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "eventws:PullMessages", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _eventws__PullMessages * SOAP_FMAC4 soap_get__eventws__PullMessages(struct soap*, _eventws__PullMessages *, const char*, const char*);

#ifndef soap_read__eventws__PullMessages
#define soap_read__eventws__PullMessages(soap, data) ( soap_begin_recv(soap) || !soap_get__eventws__PullMessages(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 _eventws__PullMessages * SOAP_FMAC2 soap_instantiate__eventws__PullMessages(struct soap*, int, const char*, const char*, size_t*);

inline _eventws__PullMessages * soap_new__eventws__PullMessages(struct soap *soap, int n = -1) { return soap_instantiate__eventws__PullMessages(soap, n, NULL, NULL, NULL); }

inline _eventws__PullMessages * soap_new_req__eventws__PullMessages(struct soap *soap, LONG64 Timeout, int MessageLimit) { _eventws__PullMessages *_p = soap_instantiate__eventws__PullMessages(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_eventws__PullMessages::Timeout = Timeout; _p->_eventws__PullMessages::MessageLimit = MessageLimit; } return _p; }

inline _eventws__PullMessages * soap_new_set__eventws__PullMessages(struct soap *soap, LONG64 Timeout, int MessageLimit, std::vector<char * >& __any) { _eventws__PullMessages *_p = soap_instantiate__eventws__PullMessages(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_eventws__PullMessages::Timeout = Timeout; _p->_eventws__PullMessages::MessageLimit = MessageLimit; _p->_eventws__PullMessages::__any = __any; } return _p; }

inline void soap_delete__eventws__PullMessages(struct soap *soap, _eventws__PullMessages *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__eventws__PullMessages(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE__eventws__CreatePullPointSubscriptionResponse
#define SOAP_TYPE__eventws__CreatePullPointSubscriptionResponse (83)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__eventws__CreatePullPointSubscriptionResponse(struct soap*, const char*, int, const _eventws__CreatePullPointSubscriptionResponse *, const char*);
SOAP_FMAC3 _eventws__CreatePullPointSubscriptionResponse * SOAP_FMAC4 soap_in__eventws__CreatePullPointSubscriptionResponse(struct soap*, const char*, _eventws__CreatePullPointSubscriptionResponse *, const char*);

#ifndef soap_write__eventws__CreatePullPointSubscriptionResponse
#define soap_write__eventws__CreatePullPointSubscriptionResponse(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "eventws:CreatePullPointSubscriptionResponse", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _eventws__CreatePullPointSubscriptionResponse * SOAP_FMAC4 soap_get__eventws__CreatePullPointSubscriptionResponse(struct soap*, _eventws__CreatePullPointSubscriptionResponse *, const char*, const char*);

#ifndef soap_read__eventws__CreatePullPointSubscriptionResponse
#define soap_read__eventws__CreatePullPointSubscriptionResponse(soap, data) ( soap_begin_recv(soap) || !soap_get__eventws__CreatePullPointSubscriptionResponse(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 _eventws__CreatePullPointSubscriptionResponse * SOAP_FMAC2 soap_instantiate__eventws__CreatePullPointSubscriptionResponse(struct soap*, int, const char*, const char*, size_t*);

inline _eventws__CreatePullPointSubscriptionResponse * soap_new__eventws__CreatePullPointSubscriptionResponse(struct soap *soap, int n = -1) { return soap_instantiate__eventws__CreatePullPointSubscriptionResponse(soap, n, NULL, NULL, NULL); }

inline _eventws__CreatePullPointSubscriptionResponse * soap_new_req__eventws__CreatePullPointSubscriptionResponse(struct soap *soap, struct wsa5__EndpointReferenceType& SubscriptionReference, time_t wsnt__CurrentTime, time_t wsnt__TerminationTime) { _eventws__CreatePullPointSubscriptionResponse *_p = soap_instantiate__eventws__CreatePullPointSubscriptionResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_eventws__CreatePullPointSubscriptionResponse::SubscriptionReference = SubscriptionReference; _p->_eventws__CreatePullPointSubscriptionResponse::wsnt__CurrentTime = wsnt__CurrentTime; _p->_eventws__CreatePullPointSubscriptionResponse::wsnt__TerminationTime = wsnt__TerminationTime; } return _p; }

inline _eventws__CreatePullPointSubscriptionResponse * soap_new_set__eventws__CreatePullPointSubscriptionResponse(struct soap *soap, struct wsa5__EndpointReferenceType& SubscriptionReference, time_t wsnt__CurrentTime, time_t wsnt__TerminationTime, std::vector<char * >& __any) { _eventws__CreatePullPointSubscriptionResponse *_p = soap_instantiate__eventws__CreatePullPointSubscriptionResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_eventws__CreatePullPointSubscriptionResponse::SubscriptionReference = SubscriptionReference; _p->_eventws__CreatePullPointSubscriptionResponse::wsnt__CurrentTime = wsnt__CurrentTime; _p->_eventws__CreatePullPointSubscriptionResponse::wsnt__TerminationTime = wsnt__TerminationTime; _p->_eventws__CreatePullPointSubscriptionResponse::__any = __any; } return _p; }

inline void soap_delete__eventws__CreatePullPointSubscriptionResponse(struct soap *soap, _eventws__CreatePullPointSubscriptionResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__eventws__CreatePullPointSubscriptionResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE__eventws__CreatePullPointSubscription
#define SOAP_TYPE__eventws__CreatePullPointSubscription (82)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__eventws__CreatePullPointSubscription(struct soap*, const char*, int, const _eventws__CreatePullPointSubscription *, const char*);
SOAP_FMAC3 _eventws__CreatePullPointSubscription * SOAP_FMAC4 soap_in__eventws__CreatePullPointSubscription(struct soap*, const char*, _eventws__CreatePullPointSubscription *, const char*);

#ifndef soap_write__eventws__CreatePullPointSubscription
#define soap_write__eventws__CreatePullPointSubscription(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "eventws:CreatePullPointSubscription", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _eventws__CreatePullPointSubscription * SOAP_FMAC4 soap_get__eventws__CreatePullPointSubscription(struct soap*, _eventws__CreatePullPointSubscription *, const char*, const char*);

#ifndef soap_read__eventws__CreatePullPointSubscription
#define soap_read__eventws__CreatePullPointSubscription(soap, data) ( soap_begin_recv(soap) || !soap_get__eventws__CreatePullPointSubscription(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 _eventws__CreatePullPointSubscription * SOAP_FMAC2 soap_instantiate__eventws__CreatePullPointSubscription(struct soap*, int, const char*, const char*, size_t*);

inline _eventws__CreatePullPointSubscription * soap_new__eventws__CreatePullPointSubscription(struct soap *soap, int n = -1) { return soap_instantiate__eventws__CreatePullPointSubscription(soap, n, NULL, NULL, NULL); }

inline _eventws__CreatePullPointSubscription * soap_new_req__eventws__CreatePullPointSubscription(struct soap *soap) { _eventws__CreatePullPointSubscription *_p = soap_instantiate__eventws__CreatePullPointSubscription(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline _eventws__CreatePullPointSubscription * soap_new_set__eventws__CreatePullPointSubscription(struct soap *soap, wsnt__FilterType *Filter, std::string *InitialTerminationTime, _eventws__CreatePullPointSubscription_SubscriptionPolicy *SubscriptionPolicy, std::vector<char * >& __any) { _eventws__CreatePullPointSubscription *_p = soap_instantiate__eventws__CreatePullPointSubscription(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_eventws__CreatePullPointSubscription::Filter = Filter; _p->_eventws__CreatePullPointSubscription::InitialTerminationTime = InitialTerminationTime; _p->_eventws__CreatePullPointSubscription::SubscriptionPolicy = SubscriptionPolicy; _p->_eventws__CreatePullPointSubscription::__any = __any; } return _p; }

inline void soap_delete__eventws__CreatePullPointSubscription(struct soap *soap, _eventws__CreatePullPointSubscription *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__eventws__CreatePullPointSubscription(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE__eventws__GetServiceCapabilitiesResponse
#define SOAP_TYPE__eventws__GetServiceCapabilitiesResponse (81)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__eventws__GetServiceCapabilitiesResponse(struct soap*, const char*, int, const _eventws__GetServiceCapabilitiesResponse *, const char*);
SOAP_FMAC3 _eventws__GetServiceCapabilitiesResponse * SOAP_FMAC4 soap_in__eventws__GetServiceCapabilitiesResponse(struct soap*, const char*, _eventws__GetServiceCapabilitiesResponse *, const char*);

#ifndef soap_write__eventws__GetServiceCapabilitiesResponse
#define soap_write__eventws__GetServiceCapabilitiesResponse(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "eventws:GetServiceCapabilitiesResponse", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _eventws__GetServiceCapabilitiesResponse * SOAP_FMAC4 soap_get__eventws__GetServiceCapabilitiesResponse(struct soap*, _eventws__GetServiceCapabilitiesResponse *, const char*, const char*);

#ifndef soap_read__eventws__GetServiceCapabilitiesResponse
#define soap_read__eventws__GetServiceCapabilitiesResponse(soap, data) ( soap_begin_recv(soap) || !soap_get__eventws__GetServiceCapabilitiesResponse(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 _eventws__GetServiceCapabilitiesResponse * SOAP_FMAC2 soap_instantiate__eventws__GetServiceCapabilitiesResponse(struct soap*, int, const char*, const char*, size_t*);

inline _eventws__GetServiceCapabilitiesResponse * soap_new__eventws__GetServiceCapabilitiesResponse(struct soap *soap, int n = -1) { return soap_instantiate__eventws__GetServiceCapabilitiesResponse(soap, n, NULL, NULL, NULL); }

inline _eventws__GetServiceCapabilitiesResponse * soap_new_req__eventws__GetServiceCapabilitiesResponse(struct soap *soap, eventws__Capabilities *Capabilities) { _eventws__GetServiceCapabilitiesResponse *_p = soap_instantiate__eventws__GetServiceCapabilitiesResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_eventws__GetServiceCapabilitiesResponse::Capabilities = Capabilities; } return _p; }

inline _eventws__GetServiceCapabilitiesResponse * soap_new_set__eventws__GetServiceCapabilitiesResponse(struct soap *soap, eventws__Capabilities *Capabilities) { _eventws__GetServiceCapabilitiesResponse *_p = soap_instantiate__eventws__GetServiceCapabilitiesResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_eventws__GetServiceCapabilitiesResponse::Capabilities = Capabilities; } return _p; }

inline void soap_delete__eventws__GetServiceCapabilitiesResponse(struct soap *soap, _eventws__GetServiceCapabilitiesResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__eventws__GetServiceCapabilitiesResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE__eventws__GetServiceCapabilities
#define SOAP_TYPE__eventws__GetServiceCapabilities (80)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__eventws__GetServiceCapabilities(struct soap*, const char*, int, const _eventws__GetServiceCapabilities *, const char*);
SOAP_FMAC3 _eventws__GetServiceCapabilities * SOAP_FMAC4 soap_in__eventws__GetServiceCapabilities(struct soap*, const char*, _eventws__GetServiceCapabilities *, const char*);

#ifndef soap_write__eventws__GetServiceCapabilities
#define soap_write__eventws__GetServiceCapabilities(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "eventws:GetServiceCapabilities", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _eventws__GetServiceCapabilities * SOAP_FMAC4 soap_get__eventws__GetServiceCapabilities(struct soap*, _eventws__GetServiceCapabilities *, const char*, const char*);

#ifndef soap_read__eventws__GetServiceCapabilities
#define soap_read__eventws__GetServiceCapabilities(soap, data) ( soap_begin_recv(soap) || !soap_get__eventws__GetServiceCapabilities(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 _eventws__GetServiceCapabilities * SOAP_FMAC2 soap_instantiate__eventws__GetServiceCapabilities(struct soap*, int, const char*, const char*, size_t*);

inline _eventws__GetServiceCapabilities * soap_new__eventws__GetServiceCapabilities(struct soap *soap, int n = -1) { return soap_instantiate__eventws__GetServiceCapabilities(soap, n, NULL, NULL, NULL); }

inline _eventws__GetServiceCapabilities * soap_new_req__eventws__GetServiceCapabilities(struct soap *soap) { _eventws__GetServiceCapabilities *_p = soap_instantiate__eventws__GetServiceCapabilities(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline _eventws__GetServiceCapabilities * soap_new_set__eventws__GetServiceCapabilities(struct soap *soap) { _eventws__GetServiceCapabilities *_p = soap_instantiate__eventws__GetServiceCapabilities(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline void soap_delete__eventws__GetServiceCapabilities(struct soap *soap, _eventws__GetServiceCapabilities *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__eventws__GetServiceCapabilities(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_eventws__SubscriptionPolicy
#define SOAP_TYPE_eventws__SubscriptionPolicy (79)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_eventws__SubscriptionPolicy(struct soap*, const char*, int, const eventws__SubscriptionPolicy *, const char*);
SOAP_FMAC3 eventws__SubscriptionPolicy * SOAP_FMAC4 soap_in_eventws__SubscriptionPolicy(struct soap*, const char*, eventws__SubscriptionPolicy *, const char*);

#ifndef soap_write_eventws__SubscriptionPolicy
#define soap_write_eventws__SubscriptionPolicy(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "eventws:SubscriptionPolicy", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 eventws__SubscriptionPolicy * SOAP_FMAC4 soap_get_eventws__SubscriptionPolicy(struct soap*, eventws__SubscriptionPolicy *, const char*, const char*);

#ifndef soap_read_eventws__SubscriptionPolicy
#define soap_read_eventws__SubscriptionPolicy(soap, data) ( soap_begin_recv(soap) || !soap_get_eventws__SubscriptionPolicy(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 eventws__SubscriptionPolicy * SOAP_FMAC2 soap_instantiate_eventws__SubscriptionPolicy(struct soap*, int, const char*, const char*, size_t*);

inline eventws__SubscriptionPolicy * soap_new_eventws__SubscriptionPolicy(struct soap *soap, int n = -1) { return soap_instantiate_eventws__SubscriptionPolicy(soap, n, NULL, NULL, NULL); }

inline eventws__SubscriptionPolicy * soap_new_req_eventws__SubscriptionPolicy(struct soap *soap) { eventws__SubscriptionPolicy *_p = soap_instantiate_eventws__SubscriptionPolicy(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline eventws__SubscriptionPolicy * soap_new_set_eventws__SubscriptionPolicy(struct soap *soap, std::vector<char * >& __any, bool *ChangedOnly, char *__anyAttribute, char *__item1) { eventws__SubscriptionPolicy *_p = soap_instantiate_eventws__SubscriptionPolicy(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->eventws__SubscriptionPolicy::__any = __any; _p->eventws__SubscriptionPolicy::ChangedOnly = ChangedOnly; _p->eventws__SubscriptionPolicy::__anyAttribute = __anyAttribute; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_eventws__SubscriptionPolicy(struct soap *soap, eventws__SubscriptionPolicy *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_eventws__SubscriptionPolicy(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_eventws__Capabilities
#define SOAP_TYPE_eventws__Capabilities (78)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_eventws__Capabilities(struct soap*, const char*, int, const eventws__Capabilities *, const char*);
SOAP_FMAC3 eventws__Capabilities * SOAP_FMAC4 soap_in_eventws__Capabilities(struct soap*, const char*, eventws__Capabilities *, const char*);

#ifndef soap_write_eventws__Capabilities
#define soap_write_eventws__Capabilities(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "eventws:Capabilities", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 eventws__Capabilities * SOAP_FMAC4 soap_get_eventws__Capabilities(struct soap*, eventws__Capabilities *, const char*, const char*);

#ifndef soap_read_eventws__Capabilities
#define soap_read_eventws__Capabilities(soap, data) ( soap_begin_recv(soap) || !soap_get_eventws__Capabilities(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 eventws__Capabilities * SOAP_FMAC2 soap_instantiate_eventws__Capabilities(struct soap*, int, const char*, const char*, size_t*);

inline eventws__Capabilities * soap_new_eventws__Capabilities(struct soap *soap, int n = -1) { return soap_instantiate_eventws__Capabilities(soap, n, NULL, NULL, NULL); }

inline eventws__Capabilities * soap_new_req_eventws__Capabilities(struct soap *soap) { eventws__Capabilities *_p = soap_instantiate_eventws__Capabilities(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline eventws__Capabilities * soap_new_set_eventws__Capabilities(struct soap *soap, std::vector<char * >& __any, bool *WSSubscriptionPolicySupport, bool *WSPullPointSupport, bool *WSPausableSubscriptionManagerInterfaceSupport, int *MaxNotificationProducers, int *MaxPullPoints, bool *PersistentNotificationStorage, char *__anyAttribute, char *__item1) { eventws__Capabilities *_p = soap_instantiate_eventws__Capabilities(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->eventws__Capabilities::__any = __any; _p->eventws__Capabilities::WSSubscriptionPolicySupport = WSSubscriptionPolicySupport; _p->eventws__Capabilities::WSPullPointSupport = WSPullPointSupport; _p->eventws__Capabilities::WSPausableSubscriptionManagerInterfaceSupport = WSPausableSubscriptionManagerInterfaceSupport; _p->eventws__Capabilities::MaxNotificationProducers = MaxNotificationProducers; _p->eventws__Capabilities::MaxPullPoints = MaxPullPoints; _p->eventws__Capabilities::PersistentNotificationStorage = PersistentNotificationStorage; _p->eventws__Capabilities::__anyAttribute = __anyAttribute; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_eventws__Capabilities(struct soap *soap, eventws__Capabilities *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_eventws__Capabilities(struct soap*, int, int, void*, size_t, const void*, size_t);

/* _xml__lang is a typedef element/attribute synonym for std__string */

#ifndef SOAP_TYPE__xml__lang
#define SOAP_TYPE__xml__lang (77)
#endif

#define soap_default__xml__lang(soap, a) soap_default_std__string(soap, a)


#define soap_serialize__xml__lang soap_serialize_std__string


#define soap_out__xml__lang soap_out_std__string


#define soap_in__xml__lang soap_in_std__string


#define soap_put__xml__lang soap_put_std__string


#define soap_get__xml__lang soap_get_std__string


#define soap_instantiate__xml__lang soap_instantiate_std__string


#define soap_copy__xml__lang soap_copy_std__string

#ifndef SOAP_TYPE_xsd__token_
#define SOAP_TYPE_xsd__token_ (76)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__token_(struct soap*, const char*, int, const xsd__token_ *, const char*);
SOAP_FMAC3 xsd__token_ * SOAP_FMAC4 soap_in_xsd__token_(struct soap*, const char*, xsd__token_ *, const char*);

#ifndef soap_write_xsd__token_
#define soap_write_xsd__token_(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "xsd:token", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 xsd__token_ * SOAP_FMAC4 soap_get_xsd__token_(struct soap*, xsd__token_ *, const char*, const char*);

#ifndef soap_read_xsd__token_
#define soap_read_xsd__token_(soap, data) ( soap_begin_recv(soap) || !soap_get_xsd__token_(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 xsd__token_ * SOAP_FMAC2 soap_instantiate_xsd__token_(struct soap*, int, const char*, const char*, size_t*);

inline xsd__token_ * soap_new_xsd__token_(struct soap *soap, int n = -1) { return soap_instantiate_xsd__token_(soap, n, NULL, NULL, NULL); }

inline xsd__token_ * soap_new_req_xsd__token_(struct soap *soap, std::string& __item) { xsd__token_ *_p = soap_instantiate_xsd__token_(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->xsd__token_::__item = __item; } return _p; }

inline xsd__token_ * soap_new_set_xsd__token_(struct soap *soap, std::string& __item, char *__item1) { xsd__token_ *_p = soap_instantiate_xsd__token_(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->xsd__token_::__item = __item; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_xsd__token_(struct soap *soap, xsd__token_ *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_xsd__token_(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_xsd__token
#define SOAP_TYPE_xsd__token (75)
#endif

#define soap_default_xsd__token(soap, a) soap_default_std__string(soap, a)

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_xsd__token(struct soap*, const std::string *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__token(struct soap*, const char*, int, const std::string*, const char*);
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_xsd__token(struct soap*, const char*, std::string*, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_xsd__token(struct soap*, const std::string *, const char*, const char*);

#ifndef soap_write_xsd__token
#define soap_write_xsd__token(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_xsd__token(soap, data), 0) || soap_put_xsd__token(soap, data, "xsd:token", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_xsd__token(struct soap*, std::string *, const char*, const char*);

#ifndef soap_read_xsd__token
#define soap_read_xsd__token(soap, data) ( soap_begin_recv(soap) || !soap_get_xsd__token(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#define soap_instantiate_xsd__token soap_instantiate_std__string


#define soap_copy_xsd__token soap_copy_std__string

#ifndef SOAP_TYPE_xsd__string
#define SOAP_TYPE_xsd__string (74)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__string(struct soap*, const char*, int, const xsd__string *, const char*);
SOAP_FMAC3 xsd__string * SOAP_FMAC4 soap_in_xsd__string(struct soap*, const char*, xsd__string *, const char*);

#ifndef soap_write_xsd__string
#define soap_write_xsd__string(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "xsd:string", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 xsd__string * SOAP_FMAC4 soap_get_xsd__string(struct soap*, xsd__string *, const char*, const char*);

#ifndef soap_read_xsd__string
#define soap_read_xsd__string(soap, data) ( soap_begin_recv(soap) || !soap_get_xsd__string(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 xsd__string * SOAP_FMAC2 soap_instantiate_xsd__string(struct soap*, int, const char*, const char*, size_t*);

inline xsd__string * soap_new_xsd__string(struct soap *soap, int n = -1) { return soap_instantiate_xsd__string(soap, n, NULL, NULL, NULL); }

inline xsd__string * soap_new_req_xsd__string(struct soap *soap, std::string& __item) { xsd__string *_p = soap_instantiate_xsd__string(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->xsd__string::__item = __item; } return _p; }

inline xsd__string * soap_new_set_xsd__string(struct soap *soap, std::string& __item, char *__item1) { xsd__string *_p = soap_instantiate_xsd__string(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->xsd__string::__item = __item; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_xsd__string(struct soap *soap, xsd__string *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_xsd__string(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_xsd__nonNegativeInteger_
#define SOAP_TYPE_xsd__nonNegativeInteger_ (73)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__nonNegativeInteger_(struct soap*, const char*, int, const xsd__nonNegativeInteger_ *, const char*);
SOAP_FMAC3 xsd__nonNegativeInteger_ * SOAP_FMAC4 soap_in_xsd__nonNegativeInteger_(struct soap*, const char*, xsd__nonNegativeInteger_ *, const char*);

#ifndef soap_write_xsd__nonNegativeInteger_
#define soap_write_xsd__nonNegativeInteger_(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "xsd:nonNegativeInteger", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 xsd__nonNegativeInteger_ * SOAP_FMAC4 soap_get_xsd__nonNegativeInteger_(struct soap*, xsd__nonNegativeInteger_ *, const char*, const char*);

#ifndef soap_read_xsd__nonNegativeInteger_
#define soap_read_xsd__nonNegativeInteger_(soap, data) ( soap_begin_recv(soap) || !soap_get_xsd__nonNegativeInteger_(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 xsd__nonNegativeInteger_ * SOAP_FMAC2 soap_instantiate_xsd__nonNegativeInteger_(struct soap*, int, const char*, const char*, size_t*);

inline xsd__nonNegativeInteger_ * soap_new_xsd__nonNegativeInteger_(struct soap *soap, int n = -1) { return soap_instantiate_xsd__nonNegativeInteger_(soap, n, NULL, NULL, NULL); }

inline xsd__nonNegativeInteger_ * soap_new_req_xsd__nonNegativeInteger_(struct soap *soap, std::string& __item) { xsd__nonNegativeInteger_ *_p = soap_instantiate_xsd__nonNegativeInteger_(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->xsd__nonNegativeInteger_::__item = __item; } return _p; }

inline xsd__nonNegativeInteger_ * soap_new_set_xsd__nonNegativeInteger_(struct soap *soap, std::string& __item, char *__item1) { xsd__nonNegativeInteger_ *_p = soap_instantiate_xsd__nonNegativeInteger_(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->xsd__nonNegativeInteger_::__item = __item; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_xsd__nonNegativeInteger_(struct soap *soap, xsd__nonNegativeInteger_ *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_xsd__nonNegativeInteger_(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_xsd__nonNegativeInteger
#define SOAP_TYPE_xsd__nonNegativeInteger (72)
#endif

#define soap_default_xsd__nonNegativeInteger(soap, a) soap_default_std__string(soap, a)

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_xsd__nonNegativeInteger(struct soap*, const std::string *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__nonNegativeInteger(struct soap*, const char*, int, const std::string*, const char*);
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_xsd__nonNegativeInteger(struct soap*, const char*, std::string*, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_xsd__nonNegativeInteger(struct soap*, const std::string *, const char*, const char*);

#ifndef soap_write_xsd__nonNegativeInteger
#define soap_write_xsd__nonNegativeInteger(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_xsd__nonNegativeInteger(soap, data), 0) || soap_put_xsd__nonNegativeInteger(soap, data, "xsd:nonNegativeInteger", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_xsd__nonNegativeInteger(struct soap*, std::string *, const char*, const char*);

#ifndef soap_read_xsd__nonNegativeInteger
#define soap_read_xsd__nonNegativeInteger(soap, data) ( soap_begin_recv(soap) || !soap_get_xsd__nonNegativeInteger(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#define soap_instantiate_xsd__nonNegativeInteger soap_instantiate_std__string


#define soap_copy_xsd__nonNegativeInteger soap_copy_std__string

#ifndef SOAP_TYPE_xsd__int
#define SOAP_TYPE_xsd__int (71)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__int(struct soap*, const char*, int, const xsd__int *, const char*);
SOAP_FMAC3 xsd__int * SOAP_FMAC4 soap_in_xsd__int(struct soap*, const char*, xsd__int *, const char*);

#ifndef soap_write_xsd__int
#define soap_write_xsd__int(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "xsd:int", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 xsd__int * SOAP_FMAC4 soap_get_xsd__int(struct soap*, xsd__int *, const char*, const char*);

#ifndef soap_read_xsd__int
#define soap_read_xsd__int(soap, data) ( soap_begin_recv(soap) || !soap_get_xsd__int(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 xsd__int * SOAP_FMAC2 soap_instantiate_xsd__int(struct soap*, int, const char*, const char*, size_t*);

inline xsd__int * soap_new_xsd__int(struct soap *soap, int n = -1) { return soap_instantiate_xsd__int(soap, n, NULL, NULL, NULL); }

inline xsd__int * soap_new_req_xsd__int(struct soap *soap, int __item) { xsd__int *_p = soap_instantiate_xsd__int(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->xsd__int::__item = __item; } return _p; }

inline xsd__int * soap_new_set_xsd__int(struct soap *soap, int __item, char *__item1) { xsd__int *_p = soap_instantiate_xsd__int(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->xsd__int::__item = __item; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_xsd__int(struct soap *soap, xsd__int *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_xsd__int(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_xsd__duration_
#define SOAP_TYPE_xsd__duration_ (70)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__duration_(struct soap*, const char*, int, const xsd__duration_ *, const char*);
SOAP_FMAC3 xsd__duration_ * SOAP_FMAC4 soap_in_xsd__duration_(struct soap*, const char*, xsd__duration_ *, const char*);

#ifndef soap_write_xsd__duration_
#define soap_write_xsd__duration_(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "xsd:duration", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 xsd__duration_ * SOAP_FMAC4 soap_get_xsd__duration_(struct soap*, xsd__duration_ *, const char*, const char*);

#ifndef soap_read_xsd__duration_
#define soap_read_xsd__duration_(soap, data) ( soap_begin_recv(soap) || !soap_get_xsd__duration_(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 xsd__duration_ * SOAP_FMAC2 soap_instantiate_xsd__duration_(struct soap*, int, const char*, const char*, size_t*);

inline xsd__duration_ * soap_new_xsd__duration_(struct soap *soap, int n = -1) { return soap_instantiate_xsd__duration_(soap, n, NULL, NULL, NULL); }

inline xsd__duration_ * soap_new_req_xsd__duration_(struct soap *soap, LONG64 __item) { xsd__duration_ *_p = soap_instantiate_xsd__duration_(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->xsd__duration_::__item = __item; } return _p; }

inline xsd__duration_ * soap_new_set_xsd__duration_(struct soap *soap, LONG64 __item, char *__item1) { xsd__duration_ *_p = soap_instantiate_xsd__duration_(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->xsd__duration_::__item = __item; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_xsd__duration_(struct soap *soap, xsd__duration_ *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_xsd__duration_(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_xsd__dateTime
#define SOAP_TYPE_xsd__dateTime (68)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__dateTime(struct soap*, const char*, int, const xsd__dateTime *, const char*);
SOAP_FMAC3 xsd__dateTime * SOAP_FMAC4 soap_in_xsd__dateTime(struct soap*, const char*, xsd__dateTime *, const char*);

#ifndef soap_write_xsd__dateTime
#define soap_write_xsd__dateTime(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "xsd:dateTime", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 xsd__dateTime * SOAP_FMAC4 soap_get_xsd__dateTime(struct soap*, xsd__dateTime *, const char*, const char*);

#ifndef soap_read_xsd__dateTime
#define soap_read_xsd__dateTime(soap, data) ( soap_begin_recv(soap) || !soap_get_xsd__dateTime(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 xsd__dateTime * SOAP_FMAC2 soap_instantiate_xsd__dateTime(struct soap*, int, const char*, const char*, size_t*);

inline xsd__dateTime * soap_new_xsd__dateTime(struct soap *soap, int n = -1) { return soap_instantiate_xsd__dateTime(soap, n, NULL, NULL, NULL); }

inline xsd__dateTime * soap_new_req_xsd__dateTime(struct soap *soap, time_t __item) { xsd__dateTime *_p = soap_instantiate_xsd__dateTime(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->xsd__dateTime::__item = __item; } return _p; }

inline xsd__dateTime * soap_new_set_xsd__dateTime(struct soap *soap, time_t __item, char *__item1) { xsd__dateTime *_p = soap_instantiate_xsd__dateTime(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->xsd__dateTime::__item = __item; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_xsd__dateTime(struct soap *soap, xsd__dateTime *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_xsd__dateTime(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_xsd__boolean
#define SOAP_TYPE_xsd__boolean (66)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__boolean(struct soap*, const char*, int, const xsd__boolean *, const char*);
SOAP_FMAC3 xsd__boolean * SOAP_FMAC4 soap_in_xsd__boolean(struct soap*, const char*, xsd__boolean *, const char*);

#ifndef soap_write_xsd__boolean
#define soap_write_xsd__boolean(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "xsd:boolean", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 xsd__boolean * SOAP_FMAC4 soap_get_xsd__boolean(struct soap*, xsd__boolean *, const char*, const char*);

#ifndef soap_read_xsd__boolean
#define soap_read_xsd__boolean(soap, data) ( soap_begin_recv(soap) || !soap_get_xsd__boolean(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 xsd__boolean * SOAP_FMAC2 soap_instantiate_xsd__boolean(struct soap*, int, const char*, const char*, size_t*);

inline xsd__boolean * soap_new_xsd__boolean(struct soap *soap, int n = -1) { return soap_instantiate_xsd__boolean(soap, n, NULL, NULL, NULL); }

inline xsd__boolean * soap_new_req_xsd__boolean(struct soap *soap, bool __item) { xsd__boolean *_p = soap_instantiate_xsd__boolean(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->xsd__boolean::__item = __item; } return _p; }

inline xsd__boolean * soap_new_set_xsd__boolean(struct soap *soap, bool __item, char *__item1) { xsd__boolean *_p = soap_instantiate_xsd__boolean(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->xsd__boolean::__item = __item; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_xsd__boolean(struct soap *soap, xsd__boolean *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_xsd__boolean(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_xsd__anyURI_
#define SOAP_TYPE_xsd__anyURI_ (65)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__anyURI_(struct soap*, const char*, int, const xsd__anyURI_ *, const char*);
SOAP_FMAC3 xsd__anyURI_ * SOAP_FMAC4 soap_in_xsd__anyURI_(struct soap*, const char*, xsd__anyURI_ *, const char*);

#ifndef soap_write_xsd__anyURI_
#define soap_write_xsd__anyURI_(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "xsd:anyURI", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 xsd__anyURI_ * SOAP_FMAC4 soap_get_xsd__anyURI_(struct soap*, xsd__anyURI_ *, const char*, const char*);

#ifndef soap_read_xsd__anyURI_
#define soap_read_xsd__anyURI_(soap, data) ( soap_begin_recv(soap) || !soap_get_xsd__anyURI_(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 xsd__anyURI_ * SOAP_FMAC2 soap_instantiate_xsd__anyURI_(struct soap*, int, const char*, const char*, size_t*);

inline xsd__anyURI_ * soap_new_xsd__anyURI_(struct soap *soap, int n = -1) { return soap_instantiate_xsd__anyURI_(soap, n, NULL, NULL, NULL); }

inline xsd__anyURI_ * soap_new_req_xsd__anyURI_(struct soap *soap, std::string& __item) { xsd__anyURI_ *_p = soap_instantiate_xsd__anyURI_(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->xsd__anyURI_::__item = __item; } return _p; }

inline xsd__anyURI_ * soap_new_set_xsd__anyURI_(struct soap *soap, std::string& __item, char *__item1) { xsd__anyURI_ *_p = soap_instantiate_xsd__anyURI_(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->xsd__anyURI_::__item = __item; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_xsd__anyURI_(struct soap *soap, xsd__anyURI_ *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_xsd__anyURI_(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_xsd__anyURI
#define SOAP_TYPE_xsd__anyURI (64)
#endif

#define soap_default_xsd__anyURI(soap, a) soap_default_std__string(soap, a)

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_xsd__anyURI(struct soap*, const std::string *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__anyURI(struct soap*, const char*, int, const std::string*, const char*);
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_xsd__anyURI(struct soap*, const char*, std::string*, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_xsd__anyURI(struct soap*, const std::string *, const char*, const char*);

#ifndef soap_write_xsd__anyURI
#define soap_write_xsd__anyURI(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_xsd__anyURI(soap, data), 0) || soap_put_xsd__anyURI(soap, data, "xsd:anyURI", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_xsd__anyURI(struct soap*, std::string *, const char*, const char*);

#ifndef soap_read_xsd__anyURI
#define soap_read_xsd__anyURI(soap, data) ( soap_begin_recv(soap) || !soap_get_xsd__anyURI(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#define soap_instantiate_xsd__anyURI soap_instantiate_std__string


#define soap_copy_xsd__anyURI soap_copy_std__string

#ifndef SOAP_TYPE_xsd__QName_
#define SOAP_TYPE_xsd__QName_ (63)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__QName_(struct soap*, const char*, int, const xsd__QName_ *, const char*);
SOAP_FMAC3 xsd__QName_ * SOAP_FMAC4 soap_in_xsd__QName_(struct soap*, const char*, xsd__QName_ *, const char*);

#ifndef soap_write_xsd__QName_
#define soap_write_xsd__QName_(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "xsd:QName", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 xsd__QName_ * SOAP_FMAC4 soap_get_xsd__QName_(struct soap*, xsd__QName_ *, const char*, const char*);

#ifndef soap_read_xsd__QName_
#define soap_read_xsd__QName_(soap, data) ( soap_begin_recv(soap) || !soap_get_xsd__QName_(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 xsd__QName_ * SOAP_FMAC2 soap_instantiate_xsd__QName_(struct soap*, int, const char*, const char*, size_t*);

inline xsd__QName_ * soap_new_xsd__QName_(struct soap *soap, int n = -1) { return soap_instantiate_xsd__QName_(soap, n, NULL, NULL, NULL); }

inline xsd__QName_ * soap_new_req_xsd__QName_(struct soap *soap, std::string& __item) { xsd__QName_ *_p = soap_instantiate_xsd__QName_(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->xsd__QName_::__item = __item; } return _p; }

inline xsd__QName_ * soap_new_set_xsd__QName_(struct soap *soap, std::string& __item, char *__item1) { xsd__QName_ *_p = soap_instantiate_xsd__QName_(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->xsd__QName_::__item = __item; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_xsd__QName_(struct soap *soap, xsd__QName_ *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_xsd__QName_(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_xsd__NCName_
#define SOAP_TYPE_xsd__NCName_ (62)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__NCName_(struct soap*, const char*, int, const xsd__NCName_ *, const char*);
SOAP_FMAC3 xsd__NCName_ * SOAP_FMAC4 soap_in_xsd__NCName_(struct soap*, const char*, xsd__NCName_ *, const char*);

#ifndef soap_write_xsd__NCName_
#define soap_write_xsd__NCName_(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "xsd:NCName", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 xsd__NCName_ * SOAP_FMAC4 soap_get_xsd__NCName_(struct soap*, xsd__NCName_ *, const char*, const char*);

#ifndef soap_read_xsd__NCName_
#define soap_read_xsd__NCName_(soap, data) ( soap_begin_recv(soap) || !soap_get_xsd__NCName_(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 xsd__NCName_ * SOAP_FMAC2 soap_instantiate_xsd__NCName_(struct soap*, int, const char*, const char*, size_t*);

inline xsd__NCName_ * soap_new_xsd__NCName_(struct soap *soap, int n = -1) { return soap_instantiate_xsd__NCName_(soap, n, NULL, NULL, NULL); }

inline xsd__NCName_ * soap_new_req_xsd__NCName_(struct soap *soap, std::string& __item) { xsd__NCName_ *_p = soap_instantiate_xsd__NCName_(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->xsd__NCName_::__item = __item; } return _p; }

inline xsd__NCName_ * soap_new_set_xsd__NCName_(struct soap *soap, std::string& __item, char *__item1) { xsd__NCName_ *_p = soap_instantiate_xsd__NCName_(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->xsd__NCName_::__item = __item; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_xsd__NCName_(struct soap *soap, xsd__NCName_ *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_xsd__NCName_(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_xsd__NCName
#define SOAP_TYPE_xsd__NCName (61)
#endif

#define soap_default_xsd__NCName(soap, a) soap_default_std__string(soap, a)

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_xsd__NCName(struct soap*, const std::string *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__NCName(struct soap*, const char*, int, const std::string*, const char*);
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_xsd__NCName(struct soap*, const char*, std::string*, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_xsd__NCName(struct soap*, const std::string *, const char*, const char*);

#ifndef soap_write_xsd__NCName
#define soap_write_xsd__NCName(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_xsd__NCName(soap, data), 0) || soap_put_xsd__NCName(soap, data, "xsd:NCName", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_xsd__NCName(struct soap*, std::string *, const char*, const char*);

#ifndef soap_read_xsd__NCName
#define soap_read_xsd__NCName(soap, data) ( soap_begin_recv(soap) || !soap_get_xsd__NCName(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#define soap_instantiate_xsd__NCName soap_instantiate_std__string


#define soap_copy_xsd__NCName soap_copy_std__string

#ifndef SOAP_TYPE_xsd__QName
#define SOAP_TYPE_xsd__QName (56)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_xsd__QName(struct soap*, std::string *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_xsd__QName(struct soap*, const std::string *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__QName(struct soap*, const char*, int, const std::string*, const char*);
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_xsd__QName(struct soap*, const char*, std::string*, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_xsd__QName(struct soap*, const std::string *, const char*, const char*);

#ifndef soap_write_xsd__QName
#define soap_write_xsd__QName(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_xsd__QName(soap, data), 0) || soap_put_xsd__QName(soap, data, "xsd:QName", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_xsd__QName(struct soap*, std::string *, const char*, const char*);

#ifndef soap_read_xsd__QName
#define soap_read_xsd__QName(soap, data) ( soap_begin_recv(soap) || !soap_get_xsd__QName(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 std::string * SOAP_FMAC2 soap_instantiate_xsd__QName(struct soap*, int, const char*, const char*, size_t*);

inline std::string * soap_new_xsd__QName(struct soap *soap, int n = -1) { return soap_instantiate_xsd__QName(soap, n, NULL, NULL, NULL); }

inline std::string * soap_new_req_xsd__QName(struct soap *soap) { std::string *_p = soap_instantiate_xsd__QName(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_xsd__QName(soap, _p); } return _p; }

inline std::string * soap_new_set_xsd__QName(struct soap *soap) { std::string *_p = soap_instantiate_xsd__QName(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_xsd__QName(soap, _p); } return _p; }

inline void soap_delete_xsd__QName(struct soap *soap, std::string *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_xsd__QName(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_std__string
#define SOAP_TYPE_std__string (55)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__string(struct soap*, std::string *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__string(struct soap*, const std::string *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__string(struct soap*, const char*, int, const std::string*, const char*);
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_std__string(struct soap*, const char*, std::string*, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_std__string(struct soap*, const std::string *, const char*, const char*);

#ifndef soap_write_std__string
#define soap_write_std__string(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_std__string(soap, data), 0) || soap_put_std__string(soap, data, "string", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_std__string(struct soap*, std::string *, const char*, const char*);

#ifndef soap_read_std__string
#define soap_read_std__string(soap, data) ( soap_begin_recv(soap) || !soap_get_std__string(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 std::string * SOAP_FMAC2 soap_instantiate_std__string(struct soap*, int, const char*, const char*, size_t*);

inline std::string * soap_new_std__string(struct soap *soap, int n = -1) { return soap_instantiate_std__string(soap, n, NULL, NULL, NULL); }

inline std::string * soap_new_req_std__string(struct soap *soap) { std::string *_p = soap_instantiate_std__string(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_std__string(soap, _p); } return _p; }

inline std::string * soap_new_set_std__string(struct soap *soap) { std::string *_p = soap_instantiate_std__string(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_std__string(soap, _p); } return _p; }

inline void soap_delete_std__string(struct soap *soap, std::string *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__string(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_xsd__anyType
#define SOAP_TYPE_xsd__anyType (53)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__anyType(struct soap*, const char*, int, const xsd__anyType *, const char*);
SOAP_FMAC3 xsd__anyType * SOAP_FMAC4 soap_in_xsd__anyType(struct soap*, const char*, xsd__anyType *, const char*);

#ifndef soap_write_xsd__anyType
#define soap_write_xsd__anyType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "xsd:anyType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 xsd__anyType * SOAP_FMAC4 soap_get_xsd__anyType(struct soap*, xsd__anyType *, const char*, const char*);

#ifndef soap_read_xsd__anyType
#define soap_read_xsd__anyType(soap, data) ( soap_begin_recv(soap) || !soap_get_xsd__anyType(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 xsd__anyType * SOAP_FMAC2 soap_instantiate_xsd__anyType(struct soap*, int, const char*, const char*, size_t*);

inline xsd__anyType * soap_new_xsd__anyType(struct soap *soap, int n = -1) { return soap_instantiate_xsd__anyType(soap, n, NULL, NULL, NULL); }

inline xsd__anyType * soap_new_req_xsd__anyType(struct soap *soap) { xsd__anyType *_p = soap_instantiate_xsd__anyType(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline xsd__anyType * soap_new_set_xsd__anyType(struct soap *soap, char *__item) { xsd__anyType *_p = soap_instantiate_xsd__anyType(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->xsd__anyType::__item = __item; } return _p; }

inline void soap_delete_xsd__anyType(struct soap *soap, xsd__anyType *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_xsd__anyType(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE___eventws__ResumeSubscription
#define SOAP_TYPE___eventws__ResumeSubscription (286)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default___eventws__ResumeSubscription(struct soap*, struct __eventws__ResumeSubscription *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___eventws__ResumeSubscription(struct soap*, const struct __eventws__ResumeSubscription *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___eventws__ResumeSubscription(struct soap*, const char*, int, const struct __eventws__ResumeSubscription *, const char*);
SOAP_FMAC3 struct __eventws__ResumeSubscription * SOAP_FMAC4 soap_in___eventws__ResumeSubscription(struct soap*, const char*, struct __eventws__ResumeSubscription *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put___eventws__ResumeSubscription(struct soap*, const struct __eventws__ResumeSubscription *, const char*, const char*);

#ifndef soap_write___eventws__ResumeSubscription
#define soap_write___eventws__ResumeSubscription(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize___eventws__ResumeSubscription(soap, data), 0) || soap_put___eventws__ResumeSubscription(soap, data, "-eventws:ResumeSubscription", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct __eventws__ResumeSubscription * SOAP_FMAC4 soap_get___eventws__ResumeSubscription(struct soap*, struct __eventws__ResumeSubscription *, const char*, const char*);

#ifndef soap_read___eventws__ResumeSubscription
#define soap_read___eventws__ResumeSubscription(soap, data) ( soap_begin_recv(soap) || !soap_get___eventws__ResumeSubscription(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct __eventws__ResumeSubscription * SOAP_FMAC2 soap_instantiate___eventws__ResumeSubscription(struct soap*, int, const char*, const char*, size_t*);

inline struct __eventws__ResumeSubscription * soap_new___eventws__ResumeSubscription(struct soap *soap, int n = -1) { return soap_instantiate___eventws__ResumeSubscription(soap, n, NULL, NULL, NULL); }

inline struct __eventws__ResumeSubscription * soap_new_req___eventws__ResumeSubscription(struct soap *soap) { struct __eventws__ResumeSubscription *_p = soap_instantiate___eventws__ResumeSubscription(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___eventws__ResumeSubscription(soap, _p); } return _p; }

inline struct __eventws__ResumeSubscription * soap_new_set___eventws__ResumeSubscription(struct soap *soap, _wsnt__ResumeSubscription *wsnt__ResumeSubscription) { struct __eventws__ResumeSubscription *_p = soap_instantiate___eventws__ResumeSubscription(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___eventws__ResumeSubscription(soap, _p); _p->wsnt__ResumeSubscription = wsnt__ResumeSubscription; } return _p; }

inline void soap_delete___eventws__ResumeSubscription(struct soap *soap, struct __eventws__ResumeSubscription *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___eventws__ResumeSubscription(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE___eventws__PauseSubscription
#define SOAP_TYPE___eventws__PauseSubscription (282)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default___eventws__PauseSubscription(struct soap*, struct __eventws__PauseSubscription *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___eventws__PauseSubscription(struct soap*, const struct __eventws__PauseSubscription *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___eventws__PauseSubscription(struct soap*, const char*, int, const struct __eventws__PauseSubscription *, const char*);
SOAP_FMAC3 struct __eventws__PauseSubscription * SOAP_FMAC4 soap_in___eventws__PauseSubscription(struct soap*, const char*, struct __eventws__PauseSubscription *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put___eventws__PauseSubscription(struct soap*, const struct __eventws__PauseSubscription *, const char*, const char*);

#ifndef soap_write___eventws__PauseSubscription
#define soap_write___eventws__PauseSubscription(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize___eventws__PauseSubscription(soap, data), 0) || soap_put___eventws__PauseSubscription(soap, data, "-eventws:PauseSubscription", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct __eventws__PauseSubscription * SOAP_FMAC4 soap_get___eventws__PauseSubscription(struct soap*, struct __eventws__PauseSubscription *, const char*, const char*);

#ifndef soap_read___eventws__PauseSubscription
#define soap_read___eventws__PauseSubscription(soap, data) ( soap_begin_recv(soap) || !soap_get___eventws__PauseSubscription(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct __eventws__PauseSubscription * SOAP_FMAC2 soap_instantiate___eventws__PauseSubscription(struct soap*, int, const char*, const char*, size_t*);

inline struct __eventws__PauseSubscription * soap_new___eventws__PauseSubscription(struct soap *soap, int n = -1) { return soap_instantiate___eventws__PauseSubscription(soap, n, NULL, NULL, NULL); }

inline struct __eventws__PauseSubscription * soap_new_req___eventws__PauseSubscription(struct soap *soap) { struct __eventws__PauseSubscription *_p = soap_instantiate___eventws__PauseSubscription(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___eventws__PauseSubscription(soap, _p); } return _p; }

inline struct __eventws__PauseSubscription * soap_new_set___eventws__PauseSubscription(struct soap *soap, _wsnt__PauseSubscription *wsnt__PauseSubscription) { struct __eventws__PauseSubscription *_p = soap_instantiate___eventws__PauseSubscription(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___eventws__PauseSubscription(soap, _p); _p->wsnt__PauseSubscription = wsnt__PauseSubscription; } return _p; }

inline void soap_delete___eventws__PauseSubscription(struct soap *soap, struct __eventws__PauseSubscription *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___eventws__PauseSubscription(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE___eventws__Unsubscribe_
#define SOAP_TYPE___eventws__Unsubscribe_ (278)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default___eventws__Unsubscribe_(struct soap*, struct __eventws__Unsubscribe_ *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___eventws__Unsubscribe_(struct soap*, const struct __eventws__Unsubscribe_ *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___eventws__Unsubscribe_(struct soap*, const char*, int, const struct __eventws__Unsubscribe_ *, const char*);
SOAP_FMAC3 struct __eventws__Unsubscribe_ * SOAP_FMAC4 soap_in___eventws__Unsubscribe_(struct soap*, const char*, struct __eventws__Unsubscribe_ *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put___eventws__Unsubscribe_(struct soap*, const struct __eventws__Unsubscribe_ *, const char*, const char*);

#ifndef soap_write___eventws__Unsubscribe_
#define soap_write___eventws__Unsubscribe_(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize___eventws__Unsubscribe_(soap, data), 0) || soap_put___eventws__Unsubscribe_(soap, data, "-eventws:Unsubscribe", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct __eventws__Unsubscribe_ * SOAP_FMAC4 soap_get___eventws__Unsubscribe_(struct soap*, struct __eventws__Unsubscribe_ *, const char*, const char*);

#ifndef soap_read___eventws__Unsubscribe_
#define soap_read___eventws__Unsubscribe_(soap, data) ( soap_begin_recv(soap) || !soap_get___eventws__Unsubscribe_(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct __eventws__Unsubscribe_ * SOAP_FMAC2 soap_instantiate___eventws__Unsubscribe_(struct soap*, int, const char*, const char*, size_t*);

inline struct __eventws__Unsubscribe_ * soap_new___eventws__Unsubscribe_(struct soap *soap, int n = -1) { return soap_instantiate___eventws__Unsubscribe_(soap, n, NULL, NULL, NULL); }

inline struct __eventws__Unsubscribe_ * soap_new_req___eventws__Unsubscribe_(struct soap *soap) { struct __eventws__Unsubscribe_ *_p = soap_instantiate___eventws__Unsubscribe_(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___eventws__Unsubscribe_(soap, _p); } return _p; }

inline struct __eventws__Unsubscribe_ * soap_new_set___eventws__Unsubscribe_(struct soap *soap, _wsnt__Unsubscribe *wsnt__Unsubscribe) { struct __eventws__Unsubscribe_ *_p = soap_instantiate___eventws__Unsubscribe_(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___eventws__Unsubscribe_(soap, _p); _p->wsnt__Unsubscribe = wsnt__Unsubscribe; } return _p; }

inline void soap_delete___eventws__Unsubscribe_(struct soap *soap, struct __eventws__Unsubscribe_ *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___eventws__Unsubscribe_(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE___eventws__Renew_
#define SOAP_TYPE___eventws__Renew_ (276)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default___eventws__Renew_(struct soap*, struct __eventws__Renew_ *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___eventws__Renew_(struct soap*, const struct __eventws__Renew_ *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___eventws__Renew_(struct soap*, const char*, int, const struct __eventws__Renew_ *, const char*);
SOAP_FMAC3 struct __eventws__Renew_ * SOAP_FMAC4 soap_in___eventws__Renew_(struct soap*, const char*, struct __eventws__Renew_ *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put___eventws__Renew_(struct soap*, const struct __eventws__Renew_ *, const char*, const char*);

#ifndef soap_write___eventws__Renew_
#define soap_write___eventws__Renew_(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize___eventws__Renew_(soap, data), 0) || soap_put___eventws__Renew_(soap, data, "-eventws:Renew", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct __eventws__Renew_ * SOAP_FMAC4 soap_get___eventws__Renew_(struct soap*, struct __eventws__Renew_ *, const char*, const char*);

#ifndef soap_read___eventws__Renew_
#define soap_read___eventws__Renew_(soap, data) ( soap_begin_recv(soap) || !soap_get___eventws__Renew_(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct __eventws__Renew_ * SOAP_FMAC2 soap_instantiate___eventws__Renew_(struct soap*, int, const char*, const char*, size_t*);

inline struct __eventws__Renew_ * soap_new___eventws__Renew_(struct soap *soap, int n = -1) { return soap_instantiate___eventws__Renew_(soap, n, NULL, NULL, NULL); }

inline struct __eventws__Renew_ * soap_new_req___eventws__Renew_(struct soap *soap) { struct __eventws__Renew_ *_p = soap_instantiate___eventws__Renew_(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___eventws__Renew_(soap, _p); } return _p; }

inline struct __eventws__Renew_ * soap_new_set___eventws__Renew_(struct soap *soap, _wsnt__Renew *wsnt__Renew) { struct __eventws__Renew_ *_p = soap_instantiate___eventws__Renew_(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___eventws__Renew_(soap, _p); _p->wsnt__Renew = wsnt__Renew; } return _p; }

inline void soap_delete___eventws__Renew_(struct soap *soap, struct __eventws__Renew_ *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___eventws__Renew_(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE___eventws__CreatePullPoint
#define SOAP_TYPE___eventws__CreatePullPoint (274)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default___eventws__CreatePullPoint(struct soap*, struct __eventws__CreatePullPoint *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___eventws__CreatePullPoint(struct soap*, const struct __eventws__CreatePullPoint *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___eventws__CreatePullPoint(struct soap*, const char*, int, const struct __eventws__CreatePullPoint *, const char*);
SOAP_FMAC3 struct __eventws__CreatePullPoint * SOAP_FMAC4 soap_in___eventws__CreatePullPoint(struct soap*, const char*, struct __eventws__CreatePullPoint *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put___eventws__CreatePullPoint(struct soap*, const struct __eventws__CreatePullPoint *, const char*, const char*);

#ifndef soap_write___eventws__CreatePullPoint
#define soap_write___eventws__CreatePullPoint(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize___eventws__CreatePullPoint(soap, data), 0) || soap_put___eventws__CreatePullPoint(soap, data, "-eventws:CreatePullPoint", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct __eventws__CreatePullPoint * SOAP_FMAC4 soap_get___eventws__CreatePullPoint(struct soap*, struct __eventws__CreatePullPoint *, const char*, const char*);

#ifndef soap_read___eventws__CreatePullPoint
#define soap_read___eventws__CreatePullPoint(soap, data) ( soap_begin_recv(soap) || !soap_get___eventws__CreatePullPoint(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct __eventws__CreatePullPoint * SOAP_FMAC2 soap_instantiate___eventws__CreatePullPoint(struct soap*, int, const char*, const char*, size_t*);

inline struct __eventws__CreatePullPoint * soap_new___eventws__CreatePullPoint(struct soap *soap, int n = -1) { return soap_instantiate___eventws__CreatePullPoint(soap, n, NULL, NULL, NULL); }

inline struct __eventws__CreatePullPoint * soap_new_req___eventws__CreatePullPoint(struct soap *soap) { struct __eventws__CreatePullPoint *_p = soap_instantiate___eventws__CreatePullPoint(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___eventws__CreatePullPoint(soap, _p); } return _p; }

inline struct __eventws__CreatePullPoint * soap_new_set___eventws__CreatePullPoint(struct soap *soap, _wsnt__CreatePullPoint *wsnt__CreatePullPoint) { struct __eventws__CreatePullPoint *_p = soap_instantiate___eventws__CreatePullPoint(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___eventws__CreatePullPoint(soap, _p); _p->wsnt__CreatePullPoint = wsnt__CreatePullPoint; } return _p; }

inline void soap_delete___eventws__CreatePullPoint(struct soap *soap, struct __eventws__CreatePullPoint *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___eventws__CreatePullPoint(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE___eventws__Notify_
#define SOAP_TYPE___eventws__Notify_ (270)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default___eventws__Notify_(struct soap*, struct __eventws__Notify_ *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___eventws__Notify_(struct soap*, const struct __eventws__Notify_ *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___eventws__Notify_(struct soap*, const char*, int, const struct __eventws__Notify_ *, const char*);
SOAP_FMAC3 struct __eventws__Notify_ * SOAP_FMAC4 soap_in___eventws__Notify_(struct soap*, const char*, struct __eventws__Notify_ *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put___eventws__Notify_(struct soap*, const struct __eventws__Notify_ *, const char*, const char*);

#ifndef soap_write___eventws__Notify_
#define soap_write___eventws__Notify_(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize___eventws__Notify_(soap, data), 0) || soap_put___eventws__Notify_(soap, data, "-eventws:Notify", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct __eventws__Notify_ * SOAP_FMAC4 soap_get___eventws__Notify_(struct soap*, struct __eventws__Notify_ *, const char*, const char*);

#ifndef soap_read___eventws__Notify_
#define soap_read___eventws__Notify_(soap, data) ( soap_begin_recv(soap) || !soap_get___eventws__Notify_(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct __eventws__Notify_ * SOAP_FMAC2 soap_instantiate___eventws__Notify_(struct soap*, int, const char*, const char*, size_t*);

inline struct __eventws__Notify_ * soap_new___eventws__Notify_(struct soap *soap, int n = -1) { return soap_instantiate___eventws__Notify_(soap, n, NULL, NULL, NULL); }

inline struct __eventws__Notify_ * soap_new_req___eventws__Notify_(struct soap *soap) { struct __eventws__Notify_ *_p = soap_instantiate___eventws__Notify_(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___eventws__Notify_(soap, _p); } return _p; }

inline struct __eventws__Notify_ * soap_new_set___eventws__Notify_(struct soap *soap, _wsnt__Notify *wsnt__Notify) { struct __eventws__Notify_ *_p = soap_instantiate___eventws__Notify_(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___eventws__Notify_(soap, _p); _p->wsnt__Notify = wsnt__Notify; } return _p; }

inline void soap_delete___eventws__Notify_(struct soap *soap, struct __eventws__Notify_ *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___eventws__Notify_(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE___eventws__DestroyPullPoint
#define SOAP_TYPE___eventws__DestroyPullPoint (268)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default___eventws__DestroyPullPoint(struct soap*, struct __eventws__DestroyPullPoint *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___eventws__DestroyPullPoint(struct soap*, const struct __eventws__DestroyPullPoint *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___eventws__DestroyPullPoint(struct soap*, const char*, int, const struct __eventws__DestroyPullPoint *, const char*);
SOAP_FMAC3 struct __eventws__DestroyPullPoint * SOAP_FMAC4 soap_in___eventws__DestroyPullPoint(struct soap*, const char*, struct __eventws__DestroyPullPoint *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put___eventws__DestroyPullPoint(struct soap*, const struct __eventws__DestroyPullPoint *, const char*, const char*);

#ifndef soap_write___eventws__DestroyPullPoint
#define soap_write___eventws__DestroyPullPoint(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize___eventws__DestroyPullPoint(soap, data), 0) || soap_put___eventws__DestroyPullPoint(soap, data, "-eventws:DestroyPullPoint", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct __eventws__DestroyPullPoint * SOAP_FMAC4 soap_get___eventws__DestroyPullPoint(struct soap*, struct __eventws__DestroyPullPoint *, const char*, const char*);

#ifndef soap_read___eventws__DestroyPullPoint
#define soap_read___eventws__DestroyPullPoint(soap, data) ( soap_begin_recv(soap) || !soap_get___eventws__DestroyPullPoint(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct __eventws__DestroyPullPoint * SOAP_FMAC2 soap_instantiate___eventws__DestroyPullPoint(struct soap*, int, const char*, const char*, size_t*);

inline struct __eventws__DestroyPullPoint * soap_new___eventws__DestroyPullPoint(struct soap *soap, int n = -1) { return soap_instantiate___eventws__DestroyPullPoint(soap, n, NULL, NULL, NULL); }

inline struct __eventws__DestroyPullPoint * soap_new_req___eventws__DestroyPullPoint(struct soap *soap) { struct __eventws__DestroyPullPoint *_p = soap_instantiate___eventws__DestroyPullPoint(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___eventws__DestroyPullPoint(soap, _p); } return _p; }

inline struct __eventws__DestroyPullPoint * soap_new_set___eventws__DestroyPullPoint(struct soap *soap, _wsnt__DestroyPullPoint *wsnt__DestroyPullPoint) { struct __eventws__DestroyPullPoint *_p = soap_instantiate___eventws__DestroyPullPoint(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___eventws__DestroyPullPoint(soap, _p); _p->wsnt__DestroyPullPoint = wsnt__DestroyPullPoint; } return _p; }

inline void soap_delete___eventws__DestroyPullPoint(struct soap *soap, struct __eventws__DestroyPullPoint *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___eventws__DestroyPullPoint(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE___eventws__GetMessages
#define SOAP_TYPE___eventws__GetMessages (264)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default___eventws__GetMessages(struct soap*, struct __eventws__GetMessages *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___eventws__GetMessages(struct soap*, const struct __eventws__GetMessages *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___eventws__GetMessages(struct soap*, const char*, int, const struct __eventws__GetMessages *, const char*);
SOAP_FMAC3 struct __eventws__GetMessages * SOAP_FMAC4 soap_in___eventws__GetMessages(struct soap*, const char*, struct __eventws__GetMessages *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put___eventws__GetMessages(struct soap*, const struct __eventws__GetMessages *, const char*, const char*);

#ifndef soap_write___eventws__GetMessages
#define soap_write___eventws__GetMessages(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize___eventws__GetMessages(soap, data), 0) || soap_put___eventws__GetMessages(soap, data, "-eventws:GetMessages", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct __eventws__GetMessages * SOAP_FMAC4 soap_get___eventws__GetMessages(struct soap*, struct __eventws__GetMessages *, const char*, const char*);

#ifndef soap_read___eventws__GetMessages
#define soap_read___eventws__GetMessages(soap, data) ( soap_begin_recv(soap) || !soap_get___eventws__GetMessages(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct __eventws__GetMessages * SOAP_FMAC2 soap_instantiate___eventws__GetMessages(struct soap*, int, const char*, const char*, size_t*);

inline struct __eventws__GetMessages * soap_new___eventws__GetMessages(struct soap *soap, int n = -1) { return soap_instantiate___eventws__GetMessages(soap, n, NULL, NULL, NULL); }

inline struct __eventws__GetMessages * soap_new_req___eventws__GetMessages(struct soap *soap) { struct __eventws__GetMessages *_p = soap_instantiate___eventws__GetMessages(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___eventws__GetMessages(soap, _p); } return _p; }

inline struct __eventws__GetMessages * soap_new_set___eventws__GetMessages(struct soap *soap, _wsnt__GetMessages *wsnt__GetMessages) { struct __eventws__GetMessages *_p = soap_instantiate___eventws__GetMessages(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___eventws__GetMessages(soap, _p); _p->wsnt__GetMessages = wsnt__GetMessages; } return _p; }

inline void soap_delete___eventws__GetMessages(struct soap *soap, struct __eventws__GetMessages *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___eventws__GetMessages(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE___eventws__Notify
#define SOAP_TYPE___eventws__Notify (260)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default___eventws__Notify(struct soap*, struct __eventws__Notify *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___eventws__Notify(struct soap*, const struct __eventws__Notify *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___eventws__Notify(struct soap*, const char*, int, const struct __eventws__Notify *, const char*);
SOAP_FMAC3 struct __eventws__Notify * SOAP_FMAC4 soap_in___eventws__Notify(struct soap*, const char*, struct __eventws__Notify *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put___eventws__Notify(struct soap*, const struct __eventws__Notify *, const char*, const char*);

#ifndef soap_write___eventws__Notify
#define soap_write___eventws__Notify(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize___eventws__Notify(soap, data), 0) || soap_put___eventws__Notify(soap, data, "-eventws:Notify", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct __eventws__Notify * SOAP_FMAC4 soap_get___eventws__Notify(struct soap*, struct __eventws__Notify *, const char*, const char*);

#ifndef soap_read___eventws__Notify
#define soap_read___eventws__Notify(soap, data) ( soap_begin_recv(soap) || !soap_get___eventws__Notify(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct __eventws__Notify * SOAP_FMAC2 soap_instantiate___eventws__Notify(struct soap*, int, const char*, const char*, size_t*);

inline struct __eventws__Notify * soap_new___eventws__Notify(struct soap *soap, int n = -1) { return soap_instantiate___eventws__Notify(soap, n, NULL, NULL, NULL); }

inline struct __eventws__Notify * soap_new_req___eventws__Notify(struct soap *soap) { struct __eventws__Notify *_p = soap_instantiate___eventws__Notify(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___eventws__Notify(soap, _p); } return _p; }

inline struct __eventws__Notify * soap_new_set___eventws__Notify(struct soap *soap, _wsnt__Notify *wsnt__Notify) { struct __eventws__Notify *_p = soap_instantiate___eventws__Notify(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___eventws__Notify(soap, _p); _p->wsnt__Notify = wsnt__Notify; } return _p; }

inline void soap_delete___eventws__Notify(struct soap *soap, struct __eventws__Notify *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___eventws__Notify(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE___eventws__GetCurrentMessage
#define SOAP_TYPE___eventws__GetCurrentMessage (257)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default___eventws__GetCurrentMessage(struct soap*, struct __eventws__GetCurrentMessage *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___eventws__GetCurrentMessage(struct soap*, const struct __eventws__GetCurrentMessage *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___eventws__GetCurrentMessage(struct soap*, const char*, int, const struct __eventws__GetCurrentMessage *, const char*);
SOAP_FMAC3 struct __eventws__GetCurrentMessage * SOAP_FMAC4 soap_in___eventws__GetCurrentMessage(struct soap*, const char*, struct __eventws__GetCurrentMessage *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put___eventws__GetCurrentMessage(struct soap*, const struct __eventws__GetCurrentMessage *, const char*, const char*);

#ifndef soap_write___eventws__GetCurrentMessage
#define soap_write___eventws__GetCurrentMessage(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize___eventws__GetCurrentMessage(soap, data), 0) || soap_put___eventws__GetCurrentMessage(soap, data, "-eventws:GetCurrentMessage", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct __eventws__GetCurrentMessage * SOAP_FMAC4 soap_get___eventws__GetCurrentMessage(struct soap*, struct __eventws__GetCurrentMessage *, const char*, const char*);

#ifndef soap_read___eventws__GetCurrentMessage
#define soap_read___eventws__GetCurrentMessage(soap, data) ( soap_begin_recv(soap) || !soap_get___eventws__GetCurrentMessage(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct __eventws__GetCurrentMessage * SOAP_FMAC2 soap_instantiate___eventws__GetCurrentMessage(struct soap*, int, const char*, const char*, size_t*);

inline struct __eventws__GetCurrentMessage * soap_new___eventws__GetCurrentMessage(struct soap *soap, int n = -1) { return soap_instantiate___eventws__GetCurrentMessage(soap, n, NULL, NULL, NULL); }

inline struct __eventws__GetCurrentMessage * soap_new_req___eventws__GetCurrentMessage(struct soap *soap) { struct __eventws__GetCurrentMessage *_p = soap_instantiate___eventws__GetCurrentMessage(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___eventws__GetCurrentMessage(soap, _p); } return _p; }

inline struct __eventws__GetCurrentMessage * soap_new_set___eventws__GetCurrentMessage(struct soap *soap, _wsnt__GetCurrentMessage *wsnt__GetCurrentMessage) { struct __eventws__GetCurrentMessage *_p = soap_instantiate___eventws__GetCurrentMessage(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___eventws__GetCurrentMessage(soap, _p); _p->wsnt__GetCurrentMessage = wsnt__GetCurrentMessage; } return _p; }

inline void soap_delete___eventws__GetCurrentMessage(struct soap *soap, struct __eventws__GetCurrentMessage *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___eventws__GetCurrentMessage(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE___eventws__Subscribe
#define SOAP_TYPE___eventws__Subscribe (253)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default___eventws__Subscribe(struct soap*, struct __eventws__Subscribe *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___eventws__Subscribe(struct soap*, const struct __eventws__Subscribe *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___eventws__Subscribe(struct soap*, const char*, int, const struct __eventws__Subscribe *, const char*);
SOAP_FMAC3 struct __eventws__Subscribe * SOAP_FMAC4 soap_in___eventws__Subscribe(struct soap*, const char*, struct __eventws__Subscribe *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put___eventws__Subscribe(struct soap*, const struct __eventws__Subscribe *, const char*, const char*);

#ifndef soap_write___eventws__Subscribe
#define soap_write___eventws__Subscribe(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize___eventws__Subscribe(soap, data), 0) || soap_put___eventws__Subscribe(soap, data, "-eventws:Subscribe", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct __eventws__Subscribe * SOAP_FMAC4 soap_get___eventws__Subscribe(struct soap*, struct __eventws__Subscribe *, const char*, const char*);

#ifndef soap_read___eventws__Subscribe
#define soap_read___eventws__Subscribe(soap, data) ( soap_begin_recv(soap) || !soap_get___eventws__Subscribe(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct __eventws__Subscribe * SOAP_FMAC2 soap_instantiate___eventws__Subscribe(struct soap*, int, const char*, const char*, size_t*);

inline struct __eventws__Subscribe * soap_new___eventws__Subscribe(struct soap *soap, int n = -1) { return soap_instantiate___eventws__Subscribe(soap, n, NULL, NULL, NULL); }

inline struct __eventws__Subscribe * soap_new_req___eventws__Subscribe(struct soap *soap) { struct __eventws__Subscribe *_p = soap_instantiate___eventws__Subscribe(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___eventws__Subscribe(soap, _p); } return _p; }

inline struct __eventws__Subscribe * soap_new_set___eventws__Subscribe(struct soap *soap, _wsnt__Subscribe *wsnt__Subscribe) { struct __eventws__Subscribe *_p = soap_instantiate___eventws__Subscribe(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___eventws__Subscribe(soap, _p); _p->wsnt__Subscribe = wsnt__Subscribe; } return _p; }

inline void soap_delete___eventws__Subscribe(struct soap *soap, struct __eventws__Subscribe *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___eventws__Subscribe(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE___eventws__Unsubscribe
#define SOAP_TYPE___eventws__Unsubscribe (249)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default___eventws__Unsubscribe(struct soap*, struct __eventws__Unsubscribe *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___eventws__Unsubscribe(struct soap*, const struct __eventws__Unsubscribe *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___eventws__Unsubscribe(struct soap*, const char*, int, const struct __eventws__Unsubscribe *, const char*);
SOAP_FMAC3 struct __eventws__Unsubscribe * SOAP_FMAC4 soap_in___eventws__Unsubscribe(struct soap*, const char*, struct __eventws__Unsubscribe *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put___eventws__Unsubscribe(struct soap*, const struct __eventws__Unsubscribe *, const char*, const char*);

#ifndef soap_write___eventws__Unsubscribe
#define soap_write___eventws__Unsubscribe(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize___eventws__Unsubscribe(soap, data), 0) || soap_put___eventws__Unsubscribe(soap, data, "-eventws:Unsubscribe", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct __eventws__Unsubscribe * SOAP_FMAC4 soap_get___eventws__Unsubscribe(struct soap*, struct __eventws__Unsubscribe *, const char*, const char*);

#ifndef soap_read___eventws__Unsubscribe
#define soap_read___eventws__Unsubscribe(soap, data) ( soap_begin_recv(soap) || !soap_get___eventws__Unsubscribe(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct __eventws__Unsubscribe * SOAP_FMAC2 soap_instantiate___eventws__Unsubscribe(struct soap*, int, const char*, const char*, size_t*);

inline struct __eventws__Unsubscribe * soap_new___eventws__Unsubscribe(struct soap *soap, int n = -1) { return soap_instantiate___eventws__Unsubscribe(soap, n, NULL, NULL, NULL); }

inline struct __eventws__Unsubscribe * soap_new_req___eventws__Unsubscribe(struct soap *soap) { struct __eventws__Unsubscribe *_p = soap_instantiate___eventws__Unsubscribe(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___eventws__Unsubscribe(soap, _p); } return _p; }

inline struct __eventws__Unsubscribe * soap_new_set___eventws__Unsubscribe(struct soap *soap, _wsnt__Unsubscribe *wsnt__Unsubscribe) { struct __eventws__Unsubscribe *_p = soap_instantiate___eventws__Unsubscribe(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___eventws__Unsubscribe(soap, _p); _p->wsnt__Unsubscribe = wsnt__Unsubscribe; } return _p; }

inline void soap_delete___eventws__Unsubscribe(struct soap *soap, struct __eventws__Unsubscribe *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___eventws__Unsubscribe(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE___eventws__Renew
#define SOAP_TYPE___eventws__Renew (245)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default___eventws__Renew(struct soap*, struct __eventws__Renew *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___eventws__Renew(struct soap*, const struct __eventws__Renew *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___eventws__Renew(struct soap*, const char*, int, const struct __eventws__Renew *, const char*);
SOAP_FMAC3 struct __eventws__Renew * SOAP_FMAC4 soap_in___eventws__Renew(struct soap*, const char*, struct __eventws__Renew *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put___eventws__Renew(struct soap*, const struct __eventws__Renew *, const char*, const char*);

#ifndef soap_write___eventws__Renew
#define soap_write___eventws__Renew(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize___eventws__Renew(soap, data), 0) || soap_put___eventws__Renew(soap, data, "-eventws:Renew", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct __eventws__Renew * SOAP_FMAC4 soap_get___eventws__Renew(struct soap*, struct __eventws__Renew *, const char*, const char*);

#ifndef soap_read___eventws__Renew
#define soap_read___eventws__Renew(soap, data) ( soap_begin_recv(soap) || !soap_get___eventws__Renew(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct __eventws__Renew * SOAP_FMAC2 soap_instantiate___eventws__Renew(struct soap*, int, const char*, const char*, size_t*);

inline struct __eventws__Renew * soap_new___eventws__Renew(struct soap *soap, int n = -1) { return soap_instantiate___eventws__Renew(soap, n, NULL, NULL, NULL); }

inline struct __eventws__Renew * soap_new_req___eventws__Renew(struct soap *soap) { struct __eventws__Renew *_p = soap_instantiate___eventws__Renew(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___eventws__Renew(soap, _p); } return _p; }

inline struct __eventws__Renew * soap_new_set___eventws__Renew(struct soap *soap, _wsnt__Renew *wsnt__Renew) { struct __eventws__Renew *_p = soap_instantiate___eventws__Renew(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___eventws__Renew(soap, _p); _p->wsnt__Renew = wsnt__Renew; } return _p; }

inline void soap_delete___eventws__Renew(struct soap *soap, struct __eventws__Renew *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___eventws__Renew(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE___eventws__GetEventProperties
#define SOAP_TYPE___eventws__GetEventProperties (241)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default___eventws__GetEventProperties(struct soap*, struct __eventws__GetEventProperties *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___eventws__GetEventProperties(struct soap*, const struct __eventws__GetEventProperties *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___eventws__GetEventProperties(struct soap*, const char*, int, const struct __eventws__GetEventProperties *, const char*);
SOAP_FMAC3 struct __eventws__GetEventProperties * SOAP_FMAC4 soap_in___eventws__GetEventProperties(struct soap*, const char*, struct __eventws__GetEventProperties *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put___eventws__GetEventProperties(struct soap*, const struct __eventws__GetEventProperties *, const char*, const char*);

#ifndef soap_write___eventws__GetEventProperties
#define soap_write___eventws__GetEventProperties(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize___eventws__GetEventProperties(soap, data), 0) || soap_put___eventws__GetEventProperties(soap, data, "-eventws:GetEventProperties", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct __eventws__GetEventProperties * SOAP_FMAC4 soap_get___eventws__GetEventProperties(struct soap*, struct __eventws__GetEventProperties *, const char*, const char*);

#ifndef soap_read___eventws__GetEventProperties
#define soap_read___eventws__GetEventProperties(soap, data) ( soap_begin_recv(soap) || !soap_get___eventws__GetEventProperties(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct __eventws__GetEventProperties * SOAP_FMAC2 soap_instantiate___eventws__GetEventProperties(struct soap*, int, const char*, const char*, size_t*);

inline struct __eventws__GetEventProperties * soap_new___eventws__GetEventProperties(struct soap *soap, int n = -1) { return soap_instantiate___eventws__GetEventProperties(soap, n, NULL, NULL, NULL); }

inline struct __eventws__GetEventProperties * soap_new_req___eventws__GetEventProperties(struct soap *soap) { struct __eventws__GetEventProperties *_p = soap_instantiate___eventws__GetEventProperties(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___eventws__GetEventProperties(soap, _p); } return _p; }

inline struct __eventws__GetEventProperties * soap_new_set___eventws__GetEventProperties(struct soap *soap, _eventws__GetEventProperties *eventws__GetEventProperties) { struct __eventws__GetEventProperties *_p = soap_instantiate___eventws__GetEventProperties(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___eventws__GetEventProperties(soap, _p); _p->eventws__GetEventProperties = eventws__GetEventProperties; } return _p; }

inline void soap_delete___eventws__GetEventProperties(struct soap *soap, struct __eventws__GetEventProperties *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___eventws__GetEventProperties(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE___eventws__CreatePullPointSubscription
#define SOAP_TYPE___eventws__CreatePullPointSubscription (237)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default___eventws__CreatePullPointSubscription(struct soap*, struct __eventws__CreatePullPointSubscription *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___eventws__CreatePullPointSubscription(struct soap*, const struct __eventws__CreatePullPointSubscription *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___eventws__CreatePullPointSubscription(struct soap*, const char*, int, const struct __eventws__CreatePullPointSubscription *, const char*);
SOAP_FMAC3 struct __eventws__CreatePullPointSubscription * SOAP_FMAC4 soap_in___eventws__CreatePullPointSubscription(struct soap*, const char*, struct __eventws__CreatePullPointSubscription *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put___eventws__CreatePullPointSubscription(struct soap*, const struct __eventws__CreatePullPointSubscription *, const char*, const char*);

#ifndef soap_write___eventws__CreatePullPointSubscription
#define soap_write___eventws__CreatePullPointSubscription(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize___eventws__CreatePullPointSubscription(soap, data), 0) || soap_put___eventws__CreatePullPointSubscription(soap, data, "-eventws:CreatePullPointSubscription", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct __eventws__CreatePullPointSubscription * SOAP_FMAC4 soap_get___eventws__CreatePullPointSubscription(struct soap*, struct __eventws__CreatePullPointSubscription *, const char*, const char*);

#ifndef soap_read___eventws__CreatePullPointSubscription
#define soap_read___eventws__CreatePullPointSubscription(soap, data) ( soap_begin_recv(soap) || !soap_get___eventws__CreatePullPointSubscription(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct __eventws__CreatePullPointSubscription * SOAP_FMAC2 soap_instantiate___eventws__CreatePullPointSubscription(struct soap*, int, const char*, const char*, size_t*);

inline struct __eventws__CreatePullPointSubscription * soap_new___eventws__CreatePullPointSubscription(struct soap *soap, int n = -1) { return soap_instantiate___eventws__CreatePullPointSubscription(soap, n, NULL, NULL, NULL); }

inline struct __eventws__CreatePullPointSubscription * soap_new_req___eventws__CreatePullPointSubscription(struct soap *soap) { struct __eventws__CreatePullPointSubscription *_p = soap_instantiate___eventws__CreatePullPointSubscription(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___eventws__CreatePullPointSubscription(soap, _p); } return _p; }

inline struct __eventws__CreatePullPointSubscription * soap_new_set___eventws__CreatePullPointSubscription(struct soap *soap, _eventws__CreatePullPointSubscription *eventws__CreatePullPointSubscription) { struct __eventws__CreatePullPointSubscription *_p = soap_instantiate___eventws__CreatePullPointSubscription(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___eventws__CreatePullPointSubscription(soap, _p); _p->eventws__CreatePullPointSubscription = eventws__CreatePullPointSubscription; } return _p; }

inline void soap_delete___eventws__CreatePullPointSubscription(struct soap *soap, struct __eventws__CreatePullPointSubscription *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___eventws__CreatePullPointSubscription(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE___eventws__GetServiceCapabilities
#define SOAP_TYPE___eventws__GetServiceCapabilities (233)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default___eventws__GetServiceCapabilities(struct soap*, struct __eventws__GetServiceCapabilities *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___eventws__GetServiceCapabilities(struct soap*, const struct __eventws__GetServiceCapabilities *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___eventws__GetServiceCapabilities(struct soap*, const char*, int, const struct __eventws__GetServiceCapabilities *, const char*);
SOAP_FMAC3 struct __eventws__GetServiceCapabilities * SOAP_FMAC4 soap_in___eventws__GetServiceCapabilities(struct soap*, const char*, struct __eventws__GetServiceCapabilities *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put___eventws__GetServiceCapabilities(struct soap*, const struct __eventws__GetServiceCapabilities *, const char*, const char*);

#ifndef soap_write___eventws__GetServiceCapabilities
#define soap_write___eventws__GetServiceCapabilities(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize___eventws__GetServiceCapabilities(soap, data), 0) || soap_put___eventws__GetServiceCapabilities(soap, data, "-eventws:GetServiceCapabilities", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct __eventws__GetServiceCapabilities * SOAP_FMAC4 soap_get___eventws__GetServiceCapabilities(struct soap*, struct __eventws__GetServiceCapabilities *, const char*, const char*);

#ifndef soap_read___eventws__GetServiceCapabilities
#define soap_read___eventws__GetServiceCapabilities(soap, data) ( soap_begin_recv(soap) || !soap_get___eventws__GetServiceCapabilities(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct __eventws__GetServiceCapabilities * SOAP_FMAC2 soap_instantiate___eventws__GetServiceCapabilities(struct soap*, int, const char*, const char*, size_t*);

inline struct __eventws__GetServiceCapabilities * soap_new___eventws__GetServiceCapabilities(struct soap *soap, int n = -1) { return soap_instantiate___eventws__GetServiceCapabilities(soap, n, NULL, NULL, NULL); }

inline struct __eventws__GetServiceCapabilities * soap_new_req___eventws__GetServiceCapabilities(struct soap *soap) { struct __eventws__GetServiceCapabilities *_p = soap_instantiate___eventws__GetServiceCapabilities(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___eventws__GetServiceCapabilities(soap, _p); } return _p; }

inline struct __eventws__GetServiceCapabilities * soap_new_set___eventws__GetServiceCapabilities(struct soap *soap, _eventws__GetServiceCapabilities *eventws__GetServiceCapabilities) { struct __eventws__GetServiceCapabilities *_p = soap_instantiate___eventws__GetServiceCapabilities(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___eventws__GetServiceCapabilities(soap, _p); _p->eventws__GetServiceCapabilities = eventws__GetServiceCapabilities; } return _p; }

inline void soap_delete___eventws__GetServiceCapabilities(struct soap *soap, struct __eventws__GetServiceCapabilities *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___eventws__GetServiceCapabilities(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE___eventws__SetSynchronizationPoint
#define SOAP_TYPE___eventws__SetSynchronizationPoint (229)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default___eventws__SetSynchronizationPoint(struct soap*, struct __eventws__SetSynchronizationPoint *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___eventws__SetSynchronizationPoint(struct soap*, const struct __eventws__SetSynchronizationPoint *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___eventws__SetSynchronizationPoint(struct soap*, const char*, int, const struct __eventws__SetSynchronizationPoint *, const char*);
SOAP_FMAC3 struct __eventws__SetSynchronizationPoint * SOAP_FMAC4 soap_in___eventws__SetSynchronizationPoint(struct soap*, const char*, struct __eventws__SetSynchronizationPoint *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put___eventws__SetSynchronizationPoint(struct soap*, const struct __eventws__SetSynchronizationPoint *, const char*, const char*);

#ifndef soap_write___eventws__SetSynchronizationPoint
#define soap_write___eventws__SetSynchronizationPoint(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize___eventws__SetSynchronizationPoint(soap, data), 0) || soap_put___eventws__SetSynchronizationPoint(soap, data, "-eventws:SetSynchronizationPoint", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct __eventws__SetSynchronizationPoint * SOAP_FMAC4 soap_get___eventws__SetSynchronizationPoint(struct soap*, struct __eventws__SetSynchronizationPoint *, const char*, const char*);

#ifndef soap_read___eventws__SetSynchronizationPoint
#define soap_read___eventws__SetSynchronizationPoint(soap, data) ( soap_begin_recv(soap) || !soap_get___eventws__SetSynchronizationPoint(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct __eventws__SetSynchronizationPoint * SOAP_FMAC2 soap_instantiate___eventws__SetSynchronizationPoint(struct soap*, int, const char*, const char*, size_t*);

inline struct __eventws__SetSynchronizationPoint * soap_new___eventws__SetSynchronizationPoint(struct soap *soap, int n = -1) { return soap_instantiate___eventws__SetSynchronizationPoint(soap, n, NULL, NULL, NULL); }

inline struct __eventws__SetSynchronizationPoint * soap_new_req___eventws__SetSynchronizationPoint(struct soap *soap) { struct __eventws__SetSynchronizationPoint *_p = soap_instantiate___eventws__SetSynchronizationPoint(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___eventws__SetSynchronizationPoint(soap, _p); } return _p; }

inline struct __eventws__SetSynchronizationPoint * soap_new_set___eventws__SetSynchronizationPoint(struct soap *soap, _eventws__SetSynchronizationPoint *eventws__SetSynchronizationPoint) { struct __eventws__SetSynchronizationPoint *_p = soap_instantiate___eventws__SetSynchronizationPoint(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___eventws__SetSynchronizationPoint(soap, _p); _p->eventws__SetSynchronizationPoint = eventws__SetSynchronizationPoint; } return _p; }

inline void soap_delete___eventws__SetSynchronizationPoint(struct soap *soap, struct __eventws__SetSynchronizationPoint *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___eventws__SetSynchronizationPoint(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE___eventws__Seek
#define SOAP_TYPE___eventws__Seek (225)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default___eventws__Seek(struct soap*, struct __eventws__Seek *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___eventws__Seek(struct soap*, const struct __eventws__Seek *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___eventws__Seek(struct soap*, const char*, int, const struct __eventws__Seek *, const char*);
SOAP_FMAC3 struct __eventws__Seek * SOAP_FMAC4 soap_in___eventws__Seek(struct soap*, const char*, struct __eventws__Seek *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put___eventws__Seek(struct soap*, const struct __eventws__Seek *, const char*, const char*);

#ifndef soap_write___eventws__Seek
#define soap_write___eventws__Seek(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize___eventws__Seek(soap, data), 0) || soap_put___eventws__Seek(soap, data, "-eventws:Seek", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct __eventws__Seek * SOAP_FMAC4 soap_get___eventws__Seek(struct soap*, struct __eventws__Seek *, const char*, const char*);

#ifndef soap_read___eventws__Seek
#define soap_read___eventws__Seek(soap, data) ( soap_begin_recv(soap) || !soap_get___eventws__Seek(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct __eventws__Seek * SOAP_FMAC2 soap_instantiate___eventws__Seek(struct soap*, int, const char*, const char*, size_t*);

inline struct __eventws__Seek * soap_new___eventws__Seek(struct soap *soap, int n = -1) { return soap_instantiate___eventws__Seek(soap, n, NULL, NULL, NULL); }

inline struct __eventws__Seek * soap_new_req___eventws__Seek(struct soap *soap) { struct __eventws__Seek *_p = soap_instantiate___eventws__Seek(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___eventws__Seek(soap, _p); } return _p; }

inline struct __eventws__Seek * soap_new_set___eventws__Seek(struct soap *soap, _eventws__Seek *eventws__Seek) { struct __eventws__Seek *_p = soap_instantiate___eventws__Seek(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___eventws__Seek(soap, _p); _p->eventws__Seek = eventws__Seek; } return _p; }

inline void soap_delete___eventws__Seek(struct soap *soap, struct __eventws__Seek *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___eventws__Seek(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE___eventws__PullMessages
#define SOAP_TYPE___eventws__PullMessages (221)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default___eventws__PullMessages(struct soap*, struct __eventws__PullMessages *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___eventws__PullMessages(struct soap*, const struct __eventws__PullMessages *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___eventws__PullMessages(struct soap*, const char*, int, const struct __eventws__PullMessages *, const char*);
SOAP_FMAC3 struct __eventws__PullMessages * SOAP_FMAC4 soap_in___eventws__PullMessages(struct soap*, const char*, struct __eventws__PullMessages *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put___eventws__PullMessages(struct soap*, const struct __eventws__PullMessages *, const char*, const char*);

#ifndef soap_write___eventws__PullMessages
#define soap_write___eventws__PullMessages(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize___eventws__PullMessages(soap, data), 0) || soap_put___eventws__PullMessages(soap, data, "-eventws:PullMessages", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct __eventws__PullMessages * SOAP_FMAC4 soap_get___eventws__PullMessages(struct soap*, struct __eventws__PullMessages *, const char*, const char*);

#ifndef soap_read___eventws__PullMessages
#define soap_read___eventws__PullMessages(soap, data) ( soap_begin_recv(soap) || !soap_get___eventws__PullMessages(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct __eventws__PullMessages * SOAP_FMAC2 soap_instantiate___eventws__PullMessages(struct soap*, int, const char*, const char*, size_t*);

inline struct __eventws__PullMessages * soap_new___eventws__PullMessages(struct soap *soap, int n = -1) { return soap_instantiate___eventws__PullMessages(soap, n, NULL, NULL, NULL); }

inline struct __eventws__PullMessages * soap_new_req___eventws__PullMessages(struct soap *soap) { struct __eventws__PullMessages *_p = soap_instantiate___eventws__PullMessages(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___eventws__PullMessages(soap, _p); } return _p; }

inline struct __eventws__PullMessages * soap_new_set___eventws__PullMessages(struct soap *soap, _eventws__PullMessages *eventws__PullMessages) { struct __eventws__PullMessages *_p = soap_instantiate___eventws__PullMessages(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___eventws__PullMessages(soap, _p); _p->eventws__PullMessages = eventws__PullMessages; } return _p; }

inline void soap_delete___eventws__PullMessages(struct soap *soap, struct __eventws__PullMessages *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___eventws__PullMessages(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Fault
#define SOAP_TYPE_SOAP_ENV__Fault (52)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Fault(struct soap*, struct SOAP_ENV__Fault *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Fault(struct soap*, const struct SOAP_ENV__Fault *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Fault(struct soap*, const char*, int, const struct SOAP_ENV__Fault *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Fault * SOAP_FMAC4 soap_in_SOAP_ENV__Fault(struct soap*, const char*, struct SOAP_ENV__Fault *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Fault(struct soap*, const struct SOAP_ENV__Fault *, const char*, const char*);

#ifndef soap_write_SOAP_ENV__Fault
#define soap_write_SOAP_ENV__Fault(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_SOAP_ENV__Fault(soap, data), 0) || soap_put_SOAP_ENV__Fault(soap, data, "SOAP-ENV:Fault", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct SOAP_ENV__Fault * SOAP_FMAC4 soap_get_SOAP_ENV__Fault(struct soap*, struct SOAP_ENV__Fault *, const char*, const char*);

#ifndef soap_read_SOAP_ENV__Fault
#define soap_read_SOAP_ENV__Fault(soap, data) ( soap_begin_recv(soap) || !soap_get_SOAP_ENV__Fault(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct SOAP_ENV__Fault * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Fault(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Fault * soap_new_SOAP_ENV__Fault(struct soap *soap, int n = -1) { return soap_instantiate_SOAP_ENV__Fault(soap, n, NULL, NULL, NULL); }

inline struct SOAP_ENV__Fault * soap_new_req_SOAP_ENV__Fault(struct soap *soap) { struct SOAP_ENV__Fault *_p = soap_instantiate_SOAP_ENV__Fault(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_SOAP_ENV__Fault(soap, _p); } return _p; }

inline struct SOAP_ENV__Fault * soap_new_set_SOAP_ENV__Fault(struct soap *soap, char *faultcode, char *faultstring, char *faultactor, struct SOAP_ENV__Detail *detail, struct SOAP_ENV__Code *SOAP_ENV__Code, struct SOAP_ENV__Reason *SOAP_ENV__Reason, char *SOAP_ENV__Node, char *SOAP_ENV__Role, struct SOAP_ENV__Detail *SOAP_ENV__Detail) { struct SOAP_ENV__Fault *_p = soap_instantiate_SOAP_ENV__Fault(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_SOAP_ENV__Fault(soap, _p); _p->faultcode = faultcode; _p->faultstring = faultstring; _p->faultactor = faultactor; _p->detail = detail; _p->SOAP_ENV__Code = SOAP_ENV__Code; _p->SOAP_ENV__Reason = SOAP_ENV__Reason; _p->SOAP_ENV__Node = SOAP_ENV__Node; _p->SOAP_ENV__Role = SOAP_ENV__Role; _p->SOAP_ENV__Detail = SOAP_ENV__Detail; } return _p; }

inline void soap_delete_SOAP_ENV__Fault(struct soap *soap, struct SOAP_ENV__Fault *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Fault(struct soap*, int, int, void*, size_t, const void*, size_t);

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Reason
#define SOAP_TYPE_SOAP_ENV__Reason (48)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Reason(struct soap*, const struct SOAP_ENV__Reason *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Reason(struct soap*, const char*, int, const struct SOAP_ENV__Reason *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Reason * SOAP_FMAC4 soap_in_SOAP_ENV__Reason(struct soap*, const char*, struct SOAP_ENV__Reason *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Reason(struct soap*, const struct SOAP_ENV__Reason *, const char*, const char*);

#ifndef soap_write_SOAP_ENV__Reason
#define soap_write_SOAP_ENV__Reason(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_SOAP_ENV__Reason(soap, data), 0) || soap_put_SOAP_ENV__Reason(soap, data, "SOAP-ENV:Reason", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct SOAP_ENV__Reason * SOAP_FMAC4 soap_get_SOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason *, const char*, const char*);

#ifndef soap_read_SOAP_ENV__Reason
#define soap_read_SOAP_ENV__Reason(soap, data) ( soap_begin_recv(soap) || !soap_get_SOAP_ENV__Reason(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct SOAP_ENV__Reason * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Reason(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Reason * soap_new_SOAP_ENV__Reason(struct soap *soap, int n = -1) { return soap_instantiate_SOAP_ENV__Reason(soap, n, NULL, NULL, NULL); }

inline struct SOAP_ENV__Reason * soap_new_req_SOAP_ENV__Reason(struct soap *soap) { struct SOAP_ENV__Reason *_p = soap_instantiate_SOAP_ENV__Reason(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_SOAP_ENV__Reason(soap, _p); } return _p; }

inline struct SOAP_ENV__Reason * soap_new_set_SOAP_ENV__Reason(struct soap *soap, char *SOAP_ENV__Text) { struct SOAP_ENV__Reason *_p = soap_instantiate_SOAP_ENV__Reason(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_SOAP_ENV__Reason(soap, _p); _p->SOAP_ENV__Text = SOAP_ENV__Text; } return _p; }

inline void soap_delete_SOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Reason(struct soap*, int, int, void*, size_t, const void*, size_t);

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Code
#define SOAP_TYPE_SOAP_ENV__Code (46)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Code(struct soap*, const struct SOAP_ENV__Code *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Code(struct soap*, const char*, int, const struct SOAP_ENV__Code *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Code * SOAP_FMAC4 soap_in_SOAP_ENV__Code(struct soap*, const char*, struct SOAP_ENV__Code *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Code(struct soap*, const struct SOAP_ENV__Code *, const char*, const char*);

#ifndef soap_write_SOAP_ENV__Code
#define soap_write_SOAP_ENV__Code(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_SOAP_ENV__Code(soap, data), 0) || soap_put_SOAP_ENV__Code(soap, data, "SOAP-ENV:Code", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct SOAP_ENV__Code * SOAP_FMAC4 soap_get_SOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code *, const char*, const char*);

#ifndef soap_read_SOAP_ENV__Code
#define soap_read_SOAP_ENV__Code(soap, data) ( soap_begin_recv(soap) || !soap_get_SOAP_ENV__Code(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct SOAP_ENV__Code * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Code(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Code * soap_new_SOAP_ENV__Code(struct soap *soap, int n = -1) { return soap_instantiate_SOAP_ENV__Code(soap, n, NULL, NULL, NULL); }

inline struct SOAP_ENV__Code * soap_new_req_SOAP_ENV__Code(struct soap *soap) { struct SOAP_ENV__Code *_p = soap_instantiate_SOAP_ENV__Code(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_SOAP_ENV__Code(soap, _p); } return _p; }

inline struct SOAP_ENV__Code * soap_new_set_SOAP_ENV__Code(struct soap *soap, char *SOAP_ENV__Value, struct SOAP_ENV__Code *SOAP_ENV__Subcode) { struct SOAP_ENV__Code *_p = soap_instantiate_SOAP_ENV__Code(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_SOAP_ENV__Code(soap, _p); _p->SOAP_ENV__Value = SOAP_ENV__Value; _p->SOAP_ENV__Subcode = SOAP_ENV__Subcode; } return _p; }

inline void soap_delete_SOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Code(struct soap*, int, int, void*, size_t, const void*, size_t);

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Detail
#define SOAP_TYPE_SOAP_ENV__Detail (44)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Detail(struct soap*, const struct SOAP_ENV__Detail *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Detail(struct soap*, const char*, int, const struct SOAP_ENV__Detail *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Detail * SOAP_FMAC4 soap_in_SOAP_ENV__Detail(struct soap*, const char*, struct SOAP_ENV__Detail *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Detail(struct soap*, const struct SOAP_ENV__Detail *, const char*, const char*);

#ifndef soap_write_SOAP_ENV__Detail
#define soap_write_SOAP_ENV__Detail(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_SOAP_ENV__Detail(soap, data), 0) || soap_put_SOAP_ENV__Detail(soap, data, "SOAP-ENV:Detail", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct SOAP_ENV__Detail * SOAP_FMAC4 soap_get_SOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail *, const char*, const char*);

#ifndef soap_read_SOAP_ENV__Detail
#define soap_read_SOAP_ENV__Detail(soap, data) ( soap_begin_recv(soap) || !soap_get_SOAP_ENV__Detail(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct SOAP_ENV__Detail * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Detail(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Detail * soap_new_SOAP_ENV__Detail(struct soap *soap, int n = -1) { return soap_instantiate_SOAP_ENV__Detail(soap, n, NULL, NULL, NULL); }

inline struct SOAP_ENV__Detail * soap_new_req_SOAP_ENV__Detail(struct soap *soap, int __type, void *fault) { struct SOAP_ENV__Detail *_p = soap_instantiate_SOAP_ENV__Detail(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_SOAP_ENV__Detail(soap, _p); _p->__type = __type; _p->fault = fault; } return _p; }

inline struct SOAP_ENV__Detail * soap_new_set_SOAP_ENV__Detail(struct soap *soap, wsnt__InvalidFilterFaultType *wsnt__InvalidFilterFault, wsnt__InvalidMessageContentExpressionFaultType *wsnt__InvalidMessageContentExpressionFault, wsnt__InvalidProducerPropertiesExpressionFaultType *wsnt__InvalidProducerPropertiesExpressionFault, wsnt__InvalidTopicExpressionFaultType *wsnt__InvalidTopicExpressionFault, wsnt__MultipleTopicsSpecifiedFaultType *wsnt__MultipleTopicsSpecifiedFault, wsnt__NoCurrentMessageOnTopicFaultType *wsnt__NoCurrentMessageOnTopicFault, wsnt__NotifyMessageNotSupportedFaultType *wsnt__NotifyMessageNotSupportedFault, wsnt__PauseFailedFaultType *wsnt__PauseFailedFault, _eventws__PullMessagesFaultResponse *eventws__PullMessagesFaultResponse, wsrfr__ResourceUnknownFaultType *wsrfr__ResourceUnknownFault, wsnt__ResumeFailedFaultType *wsnt__ResumeFailedFault, wsnt__SubscribeCreationFailedFaultType *wsnt__SubscribeCreationFailedFault, wsnt__TopicExpressionDialectUnknownFaultType *wsnt__TopicExpressionDialectUnknownFault, wsnt__TopicNotSupportedFaultType *wsnt__TopicNotSupportedFault, wsnt__UnableToCreatePullPointFaultType *wsnt__UnableToCreatePullPointFault, wsnt__UnableToDestroyPullPointFaultType *wsnt__UnableToDestroyPullPointFault, wsnt__UnableToDestroySubscriptionFaultType *wsnt__UnableToDestroySubscriptionFault, wsnt__UnableToGetMessagesFaultType *wsnt__UnableToGetMessagesFault, wsnt__UnacceptableInitialTerminationTimeFaultType *wsnt__UnacceptableInitialTerminationTimeFault, wsnt__UnacceptableTerminationTimeFaultType *wsnt__UnacceptableTerminationTimeFault, wsnt__UnrecognizedPolicyRequestFaultType *wsnt__UnrecognizedPolicyRequestFault, wsnt__UnsupportedPolicyRequestFaultType *wsnt__UnsupportedPolicyRequestFault, int __type, void *fault, char *__any) { struct SOAP_ENV__Detail *_p = soap_instantiate_SOAP_ENV__Detail(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_SOAP_ENV__Detail(soap, _p); _p->wsnt__InvalidFilterFault = wsnt__InvalidFilterFault; _p->wsnt__InvalidMessageContentExpressionFault = wsnt__InvalidMessageContentExpressionFault; _p->wsnt__InvalidProducerPropertiesExpressionFault = wsnt__InvalidProducerPropertiesExpressionFault; _p->wsnt__InvalidTopicExpressionFault = wsnt__InvalidTopicExpressionFault; _p->wsnt__MultipleTopicsSpecifiedFault = wsnt__MultipleTopicsSpecifiedFault; _p->wsnt__NoCurrentMessageOnTopicFault = wsnt__NoCurrentMessageOnTopicFault; _p->wsnt__NotifyMessageNotSupportedFault = wsnt__NotifyMessageNotSupportedFault; _p->wsnt__PauseFailedFault = wsnt__PauseFailedFault; _p->eventws__PullMessagesFaultResponse = eventws__PullMessagesFaultResponse; _p->wsrfr__ResourceUnknownFault = wsrfr__ResourceUnknownFault; _p->wsnt__ResumeFailedFault = wsnt__ResumeFailedFault; _p->wsnt__SubscribeCreationFailedFault = wsnt__SubscribeCreationFailedFault; _p->wsnt__TopicExpressionDialectUnknownFault = wsnt__TopicExpressionDialectUnknownFault; _p->wsnt__TopicNotSupportedFault = wsnt__TopicNotSupportedFault; _p->wsnt__UnableToCreatePullPointFault = wsnt__UnableToCreatePullPointFault; _p->wsnt__UnableToDestroyPullPointFault = wsnt__UnableToDestroyPullPointFault; _p->wsnt__UnableToDestroySubscriptionFault = wsnt__UnableToDestroySubscriptionFault; _p->wsnt__UnableToGetMessagesFault = wsnt__UnableToGetMessagesFault; _p->wsnt__UnacceptableInitialTerminationTimeFault = wsnt__UnacceptableInitialTerminationTimeFault; _p->wsnt__UnacceptableTerminationTimeFault = wsnt__UnacceptableTerminationTimeFault; _p->wsnt__UnrecognizedPolicyRequestFault = wsnt__UnrecognizedPolicyRequestFault; _p->wsnt__UnsupportedPolicyRequestFault = wsnt__UnsupportedPolicyRequestFault; _p->__type = __type; _p->fault = fault; _p->__any = __any; } return _p; }

inline void soap_delete_SOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Detail(struct soap*, int, int, void*, size_t, const void*, size_t);

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Header
#define SOAP_TYPE_SOAP_ENV__Header (38)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Header(struct soap*, struct SOAP_ENV__Header *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Header(struct soap*, const struct SOAP_ENV__Header *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Header(struct soap*, const char*, int, const struct SOAP_ENV__Header *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Header * SOAP_FMAC4 soap_in_SOAP_ENV__Header(struct soap*, const char*, struct SOAP_ENV__Header *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Header(struct soap*, const struct SOAP_ENV__Header *, const char*, const char*);

#ifndef soap_write_SOAP_ENV__Header
#define soap_write_SOAP_ENV__Header(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_SOAP_ENV__Header(soap, data), 0) || soap_put_SOAP_ENV__Header(soap, data, "SOAP-ENV:Header", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct SOAP_ENV__Header * SOAP_FMAC4 soap_get_SOAP_ENV__Header(struct soap*, struct SOAP_ENV__Header *, const char*, const char*);

#ifndef soap_read_SOAP_ENV__Header
#define soap_read_SOAP_ENV__Header(soap, data) ( soap_begin_recv(soap) || !soap_get_SOAP_ENV__Header(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct SOAP_ENV__Header * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Header(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Header * soap_new_SOAP_ENV__Header(struct soap *soap, int n = -1) { return soap_instantiate_SOAP_ENV__Header(soap, n, NULL, NULL, NULL); }

inline struct SOAP_ENV__Header * soap_new_req_SOAP_ENV__Header(struct soap *soap) { struct SOAP_ENV__Header *_p = soap_instantiate_SOAP_ENV__Header(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_SOAP_ENV__Header(soap, _p); } return _p; }

inline struct SOAP_ENV__Header * soap_new_set_SOAP_ENV__Header(struct soap *soap, char *wsa5__MessageID, struct wsa5__RelatesToType *wsa5__RelatesTo, struct wsa5__EndpointReferenceType *wsa5__From, struct wsa5__EndpointReferenceType *wsa5__ReplyTo, struct wsa5__EndpointReferenceType *wsa5__FaultTo, char *wsa5__To, char *wsa5__Action, struct chan__ChannelInstanceType *chan__ChannelInstance) { struct SOAP_ENV__Header *_p = soap_instantiate_SOAP_ENV__Header(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_SOAP_ENV__Header(soap, _p); _p->wsa5__MessageID = wsa5__MessageID; _p->wsa5__RelatesTo = wsa5__RelatesTo; _p->wsa5__From = wsa5__From; _p->wsa5__ReplyTo = wsa5__ReplyTo; _p->wsa5__FaultTo = wsa5__FaultTo; _p->wsa5__To = wsa5__To; _p->wsa5__Action = wsa5__Action; _p->chan__ChannelInstance = chan__ChannelInstance; } return _p; }

inline void soap_delete_SOAP_ENV__Header(struct soap *soap, struct SOAP_ENV__Header *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Header(struct soap*, int, int, void*, size_t, const void*, size_t);

#endif

#ifndef SOAP_TYPE_chan__ChannelInstanceType
#define SOAP_TYPE_chan__ChannelInstanceType (37)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_chan__ChannelInstanceType(struct soap*, struct chan__ChannelInstanceType *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_chan__ChannelInstanceType(struct soap*, const struct chan__ChannelInstanceType *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_chan__ChannelInstanceType(struct soap*, const char*, int, const struct chan__ChannelInstanceType *, const char*);
SOAP_FMAC3 struct chan__ChannelInstanceType * SOAP_FMAC4 soap_in_chan__ChannelInstanceType(struct soap*, const char*, struct chan__ChannelInstanceType *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_chan__ChannelInstanceType(struct soap*, const struct chan__ChannelInstanceType *, const char*, const char*);

#ifndef soap_write_chan__ChannelInstanceType
#define soap_write_chan__ChannelInstanceType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_chan__ChannelInstanceType(soap, data), 0) || soap_put_chan__ChannelInstanceType(soap, data, "chan:ChannelInstanceType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct chan__ChannelInstanceType * SOAP_FMAC4 soap_get_chan__ChannelInstanceType(struct soap*, struct chan__ChannelInstanceType *, const char*, const char*);

#ifndef soap_read_chan__ChannelInstanceType
#define soap_read_chan__ChannelInstanceType(soap, data) ( soap_begin_recv(soap) || !soap_get_chan__ChannelInstanceType(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct chan__ChannelInstanceType * SOAP_FMAC2 soap_instantiate_chan__ChannelInstanceType(struct soap*, int, const char*, const char*, size_t*);

inline struct chan__ChannelInstanceType * soap_new_chan__ChannelInstanceType(struct soap *soap, int n = -1) { return soap_instantiate_chan__ChannelInstanceType(soap, n, NULL, NULL, NULL); }

inline struct chan__ChannelInstanceType * soap_new_req_chan__ChannelInstanceType(struct soap *soap, int __item) { struct chan__ChannelInstanceType *_p = soap_instantiate_chan__ChannelInstanceType(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_chan__ChannelInstanceType(soap, _p); _p->__item = __item; } return _p; }

inline struct chan__ChannelInstanceType * soap_new_set_chan__ChannelInstanceType(struct soap *soap, int __item, enum _wsa5__IsReferenceParameter wsa5__IsReferenceParameter) { struct chan__ChannelInstanceType *_p = soap_instantiate_chan__ChannelInstanceType(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_chan__ChannelInstanceType(soap, _p); _p->__item = __item; _p->wsa5__IsReferenceParameter = wsa5__IsReferenceParameter; } return _p; }

inline void soap_delete_chan__ChannelInstanceType(struct soap *soap, struct chan__ChannelInstanceType *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_chan__ChannelInstanceType(struct soap*, int, int, void*, size_t, const void*, size_t);

/* _wsa5__ProblemAction is a typedef element/attribute synonym for wsa5__ProblemActionType */

#ifndef SOAP_TYPE__wsa5__ProblemAction
#define SOAP_TYPE__wsa5__ProblemAction (35)
#endif

#define soap_default__wsa5__ProblemAction(soap, a) soap_default_wsa5__ProblemActionType(soap, a)


#define soap_serialize__wsa5__ProblemAction soap_serialize_wsa5__ProblemActionType


#define soap_out__wsa5__ProblemAction soap_out_wsa5__ProblemActionType


#define soap_in__wsa5__ProblemAction soap_in_wsa5__ProblemActionType


#define soap_put__wsa5__ProblemAction soap_put_wsa5__ProblemActionType


#define soap_get__wsa5__ProblemAction soap_get_wsa5__ProblemActionType


#define soap_instantiate__wsa5__ProblemAction soap_instantiate_wsa5__ProblemActionType


#define soap_copy__wsa5__ProblemAction soap_copy_wsa5__ProblemActionType

/* _wsa5__FaultTo is a typedef element/attribute synonym for wsa5__EndpointReferenceType */

#ifndef SOAP_TYPE__wsa5__FaultTo
#define SOAP_TYPE__wsa5__FaultTo (28)
#endif

#define soap_default__wsa5__FaultTo(soap, a) soap_default_wsa5__EndpointReferenceType(soap, a)


#define soap_serialize__wsa5__FaultTo soap_serialize_wsa5__EndpointReferenceType


#define soap_out__wsa5__FaultTo soap_out_wsa5__EndpointReferenceType


#define soap_in__wsa5__FaultTo soap_in_wsa5__EndpointReferenceType


#define soap_put__wsa5__FaultTo soap_put_wsa5__EndpointReferenceType


#define soap_get__wsa5__FaultTo soap_get_wsa5__EndpointReferenceType


#define soap_instantiate__wsa5__FaultTo soap_instantiate_wsa5__EndpointReferenceType


#define soap_copy__wsa5__FaultTo soap_copy_wsa5__EndpointReferenceType

/* _wsa5__From is a typedef element/attribute synonym for wsa5__EndpointReferenceType */

#ifndef SOAP_TYPE__wsa5__From
#define SOAP_TYPE__wsa5__From (27)
#endif

#define soap_default__wsa5__From(soap, a) soap_default_wsa5__EndpointReferenceType(soap, a)


#define soap_serialize__wsa5__From soap_serialize_wsa5__EndpointReferenceType


#define soap_out__wsa5__From soap_out_wsa5__EndpointReferenceType


#define soap_in__wsa5__From soap_in_wsa5__EndpointReferenceType


#define soap_put__wsa5__From soap_put_wsa5__EndpointReferenceType


#define soap_get__wsa5__From soap_get_wsa5__EndpointReferenceType


#define soap_instantiate__wsa5__From soap_instantiate_wsa5__EndpointReferenceType


#define soap_copy__wsa5__From soap_copy_wsa5__EndpointReferenceType

/* _wsa5__ReplyTo is a typedef element/attribute synonym for wsa5__EndpointReferenceType */

#ifndef SOAP_TYPE__wsa5__ReplyTo
#define SOAP_TYPE__wsa5__ReplyTo (26)
#endif

#define soap_default__wsa5__ReplyTo(soap, a) soap_default_wsa5__EndpointReferenceType(soap, a)


#define soap_serialize__wsa5__ReplyTo soap_serialize_wsa5__EndpointReferenceType


#define soap_out__wsa5__ReplyTo soap_out_wsa5__EndpointReferenceType


#define soap_in__wsa5__ReplyTo soap_in_wsa5__EndpointReferenceType


#define soap_put__wsa5__ReplyTo soap_put_wsa5__EndpointReferenceType


#define soap_get__wsa5__ReplyTo soap_get_wsa5__EndpointReferenceType


#define soap_instantiate__wsa5__ReplyTo soap_instantiate_wsa5__EndpointReferenceType


#define soap_copy__wsa5__ReplyTo soap_copy_wsa5__EndpointReferenceType

/* _wsa5__RelatesTo is a typedef element/attribute synonym for wsa5__RelatesToType */

#ifndef SOAP_TYPE__wsa5__RelatesTo
#define SOAP_TYPE__wsa5__RelatesTo (25)
#endif

#define soap_default__wsa5__RelatesTo(soap, a) soap_default_wsa5__RelatesToType(soap, a)


#define soap_serialize__wsa5__RelatesTo soap_serialize_wsa5__RelatesToType


#define soap_out__wsa5__RelatesTo soap_out_wsa5__RelatesToType


#define soap_in__wsa5__RelatesTo soap_in_wsa5__RelatesToType


#define soap_put__wsa5__RelatesTo soap_put_wsa5__RelatesToType


#define soap_get__wsa5__RelatesTo soap_get_wsa5__RelatesToType


#define soap_instantiate__wsa5__RelatesTo soap_instantiate_wsa5__RelatesToType


#define soap_copy__wsa5__RelatesTo soap_copy_wsa5__RelatesToType

/* _wsa5__Metadata is a typedef element/attribute synonym for wsa5__MetadataType */

#ifndef SOAP_TYPE__wsa5__Metadata
#define SOAP_TYPE__wsa5__Metadata (23)
#endif

#define soap_default__wsa5__Metadata(soap, a) soap_default_wsa5__MetadataType(soap, a)


#define soap_serialize__wsa5__Metadata soap_serialize_wsa5__MetadataType


#define soap_out__wsa5__Metadata soap_out_wsa5__MetadataType


#define soap_in__wsa5__Metadata soap_in_wsa5__MetadataType


#define soap_put__wsa5__Metadata soap_put_wsa5__MetadataType


#define soap_get__wsa5__Metadata soap_get_wsa5__MetadataType


#define soap_instantiate__wsa5__Metadata soap_instantiate_wsa5__MetadataType


#define soap_copy__wsa5__Metadata soap_copy_wsa5__MetadataType

/* _wsa5__ReferenceParameters is a typedef element/attribute synonym for wsa5__ReferenceParametersType */

#ifndef SOAP_TYPE__wsa5__ReferenceParameters
#define SOAP_TYPE__wsa5__ReferenceParameters (22)
#endif

#define soap_default__wsa5__ReferenceParameters(soap, a) soap_default_wsa5__ReferenceParametersType(soap, a)


#define soap_serialize__wsa5__ReferenceParameters soap_serialize_wsa5__ReferenceParametersType


#define soap_out__wsa5__ReferenceParameters soap_out_wsa5__ReferenceParametersType


#define soap_in__wsa5__ReferenceParameters soap_in_wsa5__ReferenceParametersType


#define soap_put__wsa5__ReferenceParameters soap_put_wsa5__ReferenceParametersType


#define soap_get__wsa5__ReferenceParameters soap_get_wsa5__ReferenceParametersType


#define soap_instantiate__wsa5__ReferenceParameters soap_instantiate_wsa5__ReferenceParametersType


#define soap_copy__wsa5__ReferenceParameters soap_copy_wsa5__ReferenceParametersType

/* _wsa5__EndpointReference is a typedef element/attribute synonym for wsa5__EndpointReferenceType */

#ifndef SOAP_TYPE__wsa5__EndpointReference
#define SOAP_TYPE__wsa5__EndpointReference (21)
#endif

#define soap_default__wsa5__EndpointReference(soap, a) soap_default_wsa5__EndpointReferenceType(soap, a)


#define soap_serialize__wsa5__EndpointReference soap_serialize_wsa5__EndpointReferenceType


#define soap_out__wsa5__EndpointReference soap_out_wsa5__EndpointReferenceType


#define soap_in__wsa5__EndpointReference soap_in_wsa5__EndpointReferenceType


#define soap_put__wsa5__EndpointReference soap_put_wsa5__EndpointReferenceType


#define soap_get__wsa5__EndpointReference soap_get_wsa5__EndpointReferenceType


#define soap_instantiate__wsa5__EndpointReference soap_instantiate_wsa5__EndpointReferenceType


#define soap_copy__wsa5__EndpointReference soap_copy_wsa5__EndpointReferenceType

#ifndef SOAP_TYPE_wsa5__ProblemActionType
#define SOAP_TYPE_wsa5__ProblemActionType (12)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_wsa5__ProblemActionType(struct soap*, struct wsa5__ProblemActionType *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_wsa5__ProblemActionType(struct soap*, const struct wsa5__ProblemActionType *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_wsa5__ProblemActionType(struct soap*, const char*, int, const struct wsa5__ProblemActionType *, const char*);
SOAP_FMAC3 struct wsa5__ProblemActionType * SOAP_FMAC4 soap_in_wsa5__ProblemActionType(struct soap*, const char*, struct wsa5__ProblemActionType *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_wsa5__ProblemActionType(struct soap*, const struct wsa5__ProblemActionType *, const char*, const char*);

#ifndef soap_write_wsa5__ProblemActionType
#define soap_write_wsa5__ProblemActionType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_wsa5__ProblemActionType(soap, data), 0) || soap_put_wsa5__ProblemActionType(soap, data, "wsa5:ProblemActionType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct wsa5__ProblemActionType * SOAP_FMAC4 soap_get_wsa5__ProblemActionType(struct soap*, struct wsa5__ProblemActionType *, const char*, const char*);

#ifndef soap_read_wsa5__ProblemActionType
#define soap_read_wsa5__ProblemActionType(soap, data) ( soap_begin_recv(soap) || !soap_get_wsa5__ProblemActionType(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct wsa5__ProblemActionType * SOAP_FMAC2 soap_instantiate_wsa5__ProblemActionType(struct soap*, int, const char*, const char*, size_t*);

inline struct wsa5__ProblemActionType * soap_new_wsa5__ProblemActionType(struct soap *soap, int n = -1) { return soap_instantiate_wsa5__ProblemActionType(soap, n, NULL, NULL, NULL); }

inline struct wsa5__ProblemActionType * soap_new_req_wsa5__ProblemActionType(struct soap *soap) { struct wsa5__ProblemActionType *_p = soap_instantiate_wsa5__ProblemActionType(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_wsa5__ProblemActionType(soap, _p); } return _p; }

inline struct wsa5__ProblemActionType * soap_new_set_wsa5__ProblemActionType(struct soap *soap, char *Action, char *SoapAction, char *__anyAttribute) { struct wsa5__ProblemActionType *_p = soap_instantiate_wsa5__ProblemActionType(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_wsa5__ProblemActionType(soap, _p); _p->Action = Action; _p->SoapAction = SoapAction; _p->__anyAttribute = __anyAttribute; } return _p; }

inline void soap_delete_wsa5__ProblemActionType(struct soap *soap, struct wsa5__ProblemActionType *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_wsa5__ProblemActionType(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_wsa5__RelatesToType
#define SOAP_TYPE_wsa5__RelatesToType (11)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_wsa5__RelatesToType(struct soap*, struct wsa5__RelatesToType *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_wsa5__RelatesToType(struct soap*, const struct wsa5__RelatesToType *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_wsa5__RelatesToType(struct soap*, const char*, int, const struct wsa5__RelatesToType *, const char*);
SOAP_FMAC3 struct wsa5__RelatesToType * SOAP_FMAC4 soap_in_wsa5__RelatesToType(struct soap*, const char*, struct wsa5__RelatesToType *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_wsa5__RelatesToType(struct soap*, const struct wsa5__RelatesToType *, const char*, const char*);

#ifndef soap_write_wsa5__RelatesToType
#define soap_write_wsa5__RelatesToType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_wsa5__RelatesToType(soap, data), 0) || soap_put_wsa5__RelatesToType(soap, data, "wsa5:RelatesToType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct wsa5__RelatesToType * SOAP_FMAC4 soap_get_wsa5__RelatesToType(struct soap*, struct wsa5__RelatesToType *, const char*, const char*);

#ifndef soap_read_wsa5__RelatesToType
#define soap_read_wsa5__RelatesToType(soap, data) ( soap_begin_recv(soap) || !soap_get_wsa5__RelatesToType(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct wsa5__RelatesToType * SOAP_FMAC2 soap_instantiate_wsa5__RelatesToType(struct soap*, int, const char*, const char*, size_t*);

inline struct wsa5__RelatesToType * soap_new_wsa5__RelatesToType(struct soap *soap, int n = -1) { return soap_instantiate_wsa5__RelatesToType(soap, n, NULL, NULL, NULL); }

inline struct wsa5__RelatesToType * soap_new_req_wsa5__RelatesToType(struct soap *soap) { struct wsa5__RelatesToType *_p = soap_instantiate_wsa5__RelatesToType(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_wsa5__RelatesToType(soap, _p); } return _p; }

inline struct wsa5__RelatesToType * soap_new_set_wsa5__RelatesToType(struct soap *soap, char *__item, char *RelationshipType, char *__anyAttribute) { struct wsa5__RelatesToType *_p = soap_instantiate_wsa5__RelatesToType(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_wsa5__RelatesToType(soap, _p); _p->__item = __item; _p->RelationshipType = RelationshipType; _p->__anyAttribute = __anyAttribute; } return _p; }

inline void soap_delete_wsa5__RelatesToType(struct soap *soap, struct wsa5__RelatesToType *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_wsa5__RelatesToType(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_wsa5__MetadataType
#define SOAP_TYPE_wsa5__MetadataType (10)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_wsa5__MetadataType(struct soap*, struct wsa5__MetadataType *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_wsa5__MetadataType(struct soap*, const struct wsa5__MetadataType *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_wsa5__MetadataType(struct soap*, const char*, int, const struct wsa5__MetadataType *, const char*);
SOAP_FMAC3 struct wsa5__MetadataType * SOAP_FMAC4 soap_in_wsa5__MetadataType(struct soap*, const char*, struct wsa5__MetadataType *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_wsa5__MetadataType(struct soap*, const struct wsa5__MetadataType *, const char*, const char*);

#ifndef soap_write_wsa5__MetadataType
#define soap_write_wsa5__MetadataType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_wsa5__MetadataType(soap, data), 0) || soap_put_wsa5__MetadataType(soap, data, "wsa5:MetadataType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct wsa5__MetadataType * SOAP_FMAC4 soap_get_wsa5__MetadataType(struct soap*, struct wsa5__MetadataType *, const char*, const char*);

#ifndef soap_read_wsa5__MetadataType
#define soap_read_wsa5__MetadataType(soap, data) ( soap_begin_recv(soap) || !soap_get_wsa5__MetadataType(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct wsa5__MetadataType * SOAP_FMAC2 soap_instantiate_wsa5__MetadataType(struct soap*, int, const char*, const char*, size_t*);

inline struct wsa5__MetadataType * soap_new_wsa5__MetadataType(struct soap *soap, int n = -1) { return soap_instantiate_wsa5__MetadataType(soap, n, NULL, NULL, NULL); }

inline struct wsa5__MetadataType * soap_new_req_wsa5__MetadataType(struct soap *soap, int __size, char **__any) { struct wsa5__MetadataType *_p = soap_instantiate_wsa5__MetadataType(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_wsa5__MetadataType(soap, _p); _p->__size = __size; _p->__any = __any; } return _p; }

inline struct wsa5__MetadataType * soap_new_set_wsa5__MetadataType(struct soap *soap, int __size, char **__any, char *__anyAttribute) { struct wsa5__MetadataType *_p = soap_instantiate_wsa5__MetadataType(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_wsa5__MetadataType(soap, _p); _p->__size = __size; _p->__any = __any; _p->__anyAttribute = __anyAttribute; } return _p; }

inline void soap_delete_wsa5__MetadataType(struct soap *soap, struct wsa5__MetadataType *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_wsa5__MetadataType(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_wsa5__ReferenceParametersType
#define SOAP_TYPE_wsa5__ReferenceParametersType (9)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_wsa5__ReferenceParametersType(struct soap*, struct wsa5__ReferenceParametersType *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_wsa5__ReferenceParametersType(struct soap*, const struct wsa5__ReferenceParametersType *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_wsa5__ReferenceParametersType(struct soap*, const char*, int, const struct wsa5__ReferenceParametersType *, const char*);
SOAP_FMAC3 struct wsa5__ReferenceParametersType * SOAP_FMAC4 soap_in_wsa5__ReferenceParametersType(struct soap*, const char*, struct wsa5__ReferenceParametersType *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_wsa5__ReferenceParametersType(struct soap*, const struct wsa5__ReferenceParametersType *, const char*, const char*);

#ifndef soap_write_wsa5__ReferenceParametersType
#define soap_write_wsa5__ReferenceParametersType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_wsa5__ReferenceParametersType(soap, data), 0) || soap_put_wsa5__ReferenceParametersType(soap, data, "wsa5:ReferenceParametersType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct wsa5__ReferenceParametersType * SOAP_FMAC4 soap_get_wsa5__ReferenceParametersType(struct soap*, struct wsa5__ReferenceParametersType *, const char*, const char*);

#ifndef soap_read_wsa5__ReferenceParametersType
#define soap_read_wsa5__ReferenceParametersType(soap, data) ( soap_begin_recv(soap) || !soap_get_wsa5__ReferenceParametersType(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct wsa5__ReferenceParametersType * SOAP_FMAC2 soap_instantiate_wsa5__ReferenceParametersType(struct soap*, int, const char*, const char*, size_t*);

inline struct wsa5__ReferenceParametersType * soap_new_wsa5__ReferenceParametersType(struct soap *soap, int n = -1) { return soap_instantiate_wsa5__ReferenceParametersType(soap, n, NULL, NULL, NULL); }

inline struct wsa5__ReferenceParametersType * soap_new_req_wsa5__ReferenceParametersType(struct soap *soap, int __size, char **__any) { struct wsa5__ReferenceParametersType *_p = soap_instantiate_wsa5__ReferenceParametersType(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_wsa5__ReferenceParametersType(soap, _p); _p->__size = __size; _p->__any = __any; } return _p; }

inline struct wsa5__ReferenceParametersType * soap_new_set_wsa5__ReferenceParametersType(struct soap *soap, int *chan__ChannelInstance, int __size, char **__any, char *__anyAttribute) { struct wsa5__ReferenceParametersType *_p = soap_instantiate_wsa5__ReferenceParametersType(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_wsa5__ReferenceParametersType(soap, _p); _p->chan__ChannelInstance = chan__ChannelInstance; _p->__size = __size; _p->__any = __any; _p->__anyAttribute = __anyAttribute; } return _p; }

inline void soap_delete_wsa5__ReferenceParametersType(struct soap *soap, struct wsa5__ReferenceParametersType *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_wsa5__ReferenceParametersType(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_wsa5__EndpointReferenceType
#define SOAP_TYPE_wsa5__EndpointReferenceType (8)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_wsa5__EndpointReferenceType(struct soap*, struct wsa5__EndpointReferenceType *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_wsa5__EndpointReferenceType(struct soap*, const struct wsa5__EndpointReferenceType *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_wsa5__EndpointReferenceType(struct soap*, const char*, int, const struct wsa5__EndpointReferenceType *, const char*);
SOAP_FMAC3 struct wsa5__EndpointReferenceType * SOAP_FMAC4 soap_in_wsa5__EndpointReferenceType(struct soap*, const char*, struct wsa5__EndpointReferenceType *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_wsa5__EndpointReferenceType(struct soap*, const struct wsa5__EndpointReferenceType *, const char*, const char*);

#ifndef soap_write_wsa5__EndpointReferenceType
#define soap_write_wsa5__EndpointReferenceType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_wsa5__EndpointReferenceType(soap, data), 0) || soap_put_wsa5__EndpointReferenceType(soap, data, "wsa5:EndpointReferenceType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct wsa5__EndpointReferenceType * SOAP_FMAC4 soap_get_wsa5__EndpointReferenceType(struct soap*, struct wsa5__EndpointReferenceType *, const char*, const char*);

#ifndef soap_read_wsa5__EndpointReferenceType
#define soap_read_wsa5__EndpointReferenceType(soap, data) ( soap_begin_recv(soap) || !soap_get_wsa5__EndpointReferenceType(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct wsa5__EndpointReferenceType * SOAP_FMAC2 soap_instantiate_wsa5__EndpointReferenceType(struct soap*, int, const char*, const char*, size_t*);

inline struct wsa5__EndpointReferenceType * soap_new_wsa5__EndpointReferenceType(struct soap *soap, int n = -1) { return soap_instantiate_wsa5__EndpointReferenceType(soap, n, NULL, NULL, NULL); }

inline struct wsa5__EndpointReferenceType * soap_new_req_wsa5__EndpointReferenceType(struct soap *soap, char *Address, int __size, char **__any) { struct wsa5__EndpointReferenceType *_p = soap_instantiate_wsa5__EndpointReferenceType(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_wsa5__EndpointReferenceType(soap, _p); _p->Address = Address; _p->__size = __size; _p->__any = __any; } return _p; }

inline struct wsa5__EndpointReferenceType * soap_new_set_wsa5__EndpointReferenceType(struct soap *soap, char *Address, struct wsa5__ReferenceParametersType *ReferenceParameters, struct wsa5__MetadataType *Metadata, int __size, char **__any, char *__anyAttribute) { struct wsa5__EndpointReferenceType *_p = soap_instantiate_wsa5__EndpointReferenceType(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_wsa5__EndpointReferenceType(soap, _p); _p->Address = Address; _p->ReferenceParameters = ReferenceParameters; _p->Metadata = Metadata; _p->__size = __size; _p->__any = __any; _p->__anyAttribute = __anyAttribute; } return _p; }

inline void soap_delete_wsa5__EndpointReferenceType(struct soap *soap, struct wsa5__EndpointReferenceType *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_wsa5__EndpointReferenceType(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_PointerTo_wsnt__ResumeSubscription
#define SOAP_TYPE_PointerTo_wsnt__ResumeSubscription (283)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_wsnt__ResumeSubscription(struct soap*, _wsnt__ResumeSubscription *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_wsnt__ResumeSubscription(struct soap*, const char *, int, _wsnt__ResumeSubscription *const*, const char *);
SOAP_FMAC3 _wsnt__ResumeSubscription ** SOAP_FMAC4 soap_in_PointerTo_wsnt__ResumeSubscription(struct soap*, const char*, _wsnt__ResumeSubscription **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_wsnt__ResumeSubscription(struct soap*, _wsnt__ResumeSubscription *const*, const char*, const char*);

#ifndef soap_write_PointerTo_wsnt__ResumeSubscription
#define soap_write_PointerTo_wsnt__ResumeSubscription(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTo_wsnt__ResumeSubscription(soap, data), 0) || soap_put_PointerTo_wsnt__ResumeSubscription(soap, data, "wsnt:ResumeSubscription", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _wsnt__ResumeSubscription ** SOAP_FMAC4 soap_get_PointerTo_wsnt__ResumeSubscription(struct soap*, _wsnt__ResumeSubscription **, const char*, const char*);

#ifndef soap_read_PointerTo_wsnt__ResumeSubscription
#define soap_read_PointerTo_wsnt__ResumeSubscription(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTo_wsnt__ResumeSubscription(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTo_wsnt__PauseSubscription
#define SOAP_TYPE_PointerTo_wsnt__PauseSubscription (279)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_wsnt__PauseSubscription(struct soap*, _wsnt__PauseSubscription *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_wsnt__PauseSubscription(struct soap*, const char *, int, _wsnt__PauseSubscription *const*, const char *);
SOAP_FMAC3 _wsnt__PauseSubscription ** SOAP_FMAC4 soap_in_PointerTo_wsnt__PauseSubscription(struct soap*, const char*, _wsnt__PauseSubscription **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_wsnt__PauseSubscription(struct soap*, _wsnt__PauseSubscription *const*, const char*, const char*);

#ifndef soap_write_PointerTo_wsnt__PauseSubscription
#define soap_write_PointerTo_wsnt__PauseSubscription(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTo_wsnt__PauseSubscription(soap, data), 0) || soap_put_PointerTo_wsnt__PauseSubscription(soap, data, "wsnt:PauseSubscription", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _wsnt__PauseSubscription ** SOAP_FMAC4 soap_get_PointerTo_wsnt__PauseSubscription(struct soap*, _wsnt__PauseSubscription **, const char*, const char*);

#ifndef soap_read_PointerTo_wsnt__PauseSubscription
#define soap_read_PointerTo_wsnt__PauseSubscription(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTo_wsnt__PauseSubscription(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTo_wsnt__CreatePullPoint
#define SOAP_TYPE_PointerTo_wsnt__CreatePullPoint (271)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_wsnt__CreatePullPoint(struct soap*, _wsnt__CreatePullPoint *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_wsnt__CreatePullPoint(struct soap*, const char *, int, _wsnt__CreatePullPoint *const*, const char *);
SOAP_FMAC3 _wsnt__CreatePullPoint ** SOAP_FMAC4 soap_in_PointerTo_wsnt__CreatePullPoint(struct soap*, const char*, _wsnt__CreatePullPoint **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_wsnt__CreatePullPoint(struct soap*, _wsnt__CreatePullPoint *const*, const char*, const char*);

#ifndef soap_write_PointerTo_wsnt__CreatePullPoint
#define soap_write_PointerTo_wsnt__CreatePullPoint(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTo_wsnt__CreatePullPoint(soap, data), 0) || soap_put_PointerTo_wsnt__CreatePullPoint(soap, data, "wsnt:CreatePullPoint", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _wsnt__CreatePullPoint ** SOAP_FMAC4 soap_get_PointerTo_wsnt__CreatePullPoint(struct soap*, _wsnt__CreatePullPoint **, const char*, const char*);

#ifndef soap_read_PointerTo_wsnt__CreatePullPoint
#define soap_read_PointerTo_wsnt__CreatePullPoint(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTo_wsnt__CreatePullPoint(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTo_wsnt__DestroyPullPoint
#define SOAP_TYPE_PointerTo_wsnt__DestroyPullPoint (265)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_wsnt__DestroyPullPoint(struct soap*, _wsnt__DestroyPullPoint *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_wsnt__DestroyPullPoint(struct soap*, const char *, int, _wsnt__DestroyPullPoint *const*, const char *);
SOAP_FMAC3 _wsnt__DestroyPullPoint ** SOAP_FMAC4 soap_in_PointerTo_wsnt__DestroyPullPoint(struct soap*, const char*, _wsnt__DestroyPullPoint **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_wsnt__DestroyPullPoint(struct soap*, _wsnt__DestroyPullPoint *const*, const char*, const char*);

#ifndef soap_write_PointerTo_wsnt__DestroyPullPoint
#define soap_write_PointerTo_wsnt__DestroyPullPoint(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTo_wsnt__DestroyPullPoint(soap, data), 0) || soap_put_PointerTo_wsnt__DestroyPullPoint(soap, data, "wsnt:DestroyPullPoint", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _wsnt__DestroyPullPoint ** SOAP_FMAC4 soap_get_PointerTo_wsnt__DestroyPullPoint(struct soap*, _wsnt__DestroyPullPoint **, const char*, const char*);

#ifndef soap_read_PointerTo_wsnt__DestroyPullPoint
#define soap_read_PointerTo_wsnt__DestroyPullPoint(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTo_wsnt__DestroyPullPoint(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTo_wsnt__GetMessages
#define SOAP_TYPE_PointerTo_wsnt__GetMessages (261)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_wsnt__GetMessages(struct soap*, _wsnt__GetMessages *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_wsnt__GetMessages(struct soap*, const char *, int, _wsnt__GetMessages *const*, const char *);
SOAP_FMAC3 _wsnt__GetMessages ** SOAP_FMAC4 soap_in_PointerTo_wsnt__GetMessages(struct soap*, const char*, _wsnt__GetMessages **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_wsnt__GetMessages(struct soap*, _wsnt__GetMessages *const*, const char*, const char*);

#ifndef soap_write_PointerTo_wsnt__GetMessages
#define soap_write_PointerTo_wsnt__GetMessages(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTo_wsnt__GetMessages(soap, data), 0) || soap_put_PointerTo_wsnt__GetMessages(soap, data, "wsnt:GetMessages", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _wsnt__GetMessages ** SOAP_FMAC4 soap_get_PointerTo_wsnt__GetMessages(struct soap*, _wsnt__GetMessages **, const char*, const char*);

#ifndef soap_read_PointerTo_wsnt__GetMessages
#define soap_read_PointerTo_wsnt__GetMessages(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTo_wsnt__GetMessages(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTo_wsnt__Notify
#define SOAP_TYPE_PointerTo_wsnt__Notify (258)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_wsnt__Notify(struct soap*, _wsnt__Notify *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_wsnt__Notify(struct soap*, const char *, int, _wsnt__Notify *const*, const char *);
SOAP_FMAC3 _wsnt__Notify ** SOAP_FMAC4 soap_in_PointerTo_wsnt__Notify(struct soap*, const char*, _wsnt__Notify **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_wsnt__Notify(struct soap*, _wsnt__Notify *const*, const char*, const char*);

#ifndef soap_write_PointerTo_wsnt__Notify
#define soap_write_PointerTo_wsnt__Notify(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTo_wsnt__Notify(soap, data), 0) || soap_put_PointerTo_wsnt__Notify(soap, data, "wsnt:Notify", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _wsnt__Notify ** SOAP_FMAC4 soap_get_PointerTo_wsnt__Notify(struct soap*, _wsnt__Notify **, const char*, const char*);

#ifndef soap_read_PointerTo_wsnt__Notify
#define soap_read_PointerTo_wsnt__Notify(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTo_wsnt__Notify(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTo_wsnt__GetCurrentMessage
#define SOAP_TYPE_PointerTo_wsnt__GetCurrentMessage (254)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_wsnt__GetCurrentMessage(struct soap*, _wsnt__GetCurrentMessage *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_wsnt__GetCurrentMessage(struct soap*, const char *, int, _wsnt__GetCurrentMessage *const*, const char *);
SOAP_FMAC3 _wsnt__GetCurrentMessage ** SOAP_FMAC4 soap_in_PointerTo_wsnt__GetCurrentMessage(struct soap*, const char*, _wsnt__GetCurrentMessage **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_wsnt__GetCurrentMessage(struct soap*, _wsnt__GetCurrentMessage *const*, const char*, const char*);

#ifndef soap_write_PointerTo_wsnt__GetCurrentMessage
#define soap_write_PointerTo_wsnt__GetCurrentMessage(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTo_wsnt__GetCurrentMessage(soap, data), 0) || soap_put_PointerTo_wsnt__GetCurrentMessage(soap, data, "wsnt:GetCurrentMessage", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _wsnt__GetCurrentMessage ** SOAP_FMAC4 soap_get_PointerTo_wsnt__GetCurrentMessage(struct soap*, _wsnt__GetCurrentMessage **, const char*, const char*);

#ifndef soap_read_PointerTo_wsnt__GetCurrentMessage
#define soap_read_PointerTo_wsnt__GetCurrentMessage(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTo_wsnt__GetCurrentMessage(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTo_wsnt__Subscribe
#define SOAP_TYPE_PointerTo_wsnt__Subscribe (250)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_wsnt__Subscribe(struct soap*, _wsnt__Subscribe *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_wsnt__Subscribe(struct soap*, const char *, int, _wsnt__Subscribe *const*, const char *);
SOAP_FMAC3 _wsnt__Subscribe ** SOAP_FMAC4 soap_in_PointerTo_wsnt__Subscribe(struct soap*, const char*, _wsnt__Subscribe **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_wsnt__Subscribe(struct soap*, _wsnt__Subscribe *const*, const char*, const char*);

#ifndef soap_write_PointerTo_wsnt__Subscribe
#define soap_write_PointerTo_wsnt__Subscribe(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTo_wsnt__Subscribe(soap, data), 0) || soap_put_PointerTo_wsnt__Subscribe(soap, data, "wsnt:Subscribe", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _wsnt__Subscribe ** SOAP_FMAC4 soap_get_PointerTo_wsnt__Subscribe(struct soap*, _wsnt__Subscribe **, const char*, const char*);

#ifndef soap_read_PointerTo_wsnt__Subscribe
#define soap_read_PointerTo_wsnt__Subscribe(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTo_wsnt__Subscribe(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTo_wsnt__Unsubscribe
#define SOAP_TYPE_PointerTo_wsnt__Unsubscribe (246)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_wsnt__Unsubscribe(struct soap*, _wsnt__Unsubscribe *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_wsnt__Unsubscribe(struct soap*, const char *, int, _wsnt__Unsubscribe *const*, const char *);
SOAP_FMAC3 _wsnt__Unsubscribe ** SOAP_FMAC4 soap_in_PointerTo_wsnt__Unsubscribe(struct soap*, const char*, _wsnt__Unsubscribe **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_wsnt__Unsubscribe(struct soap*, _wsnt__Unsubscribe *const*, const char*, const char*);

#ifndef soap_write_PointerTo_wsnt__Unsubscribe
#define soap_write_PointerTo_wsnt__Unsubscribe(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTo_wsnt__Unsubscribe(soap, data), 0) || soap_put_PointerTo_wsnt__Unsubscribe(soap, data, "wsnt:Unsubscribe", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _wsnt__Unsubscribe ** SOAP_FMAC4 soap_get_PointerTo_wsnt__Unsubscribe(struct soap*, _wsnt__Unsubscribe **, const char*, const char*);

#ifndef soap_read_PointerTo_wsnt__Unsubscribe
#define soap_read_PointerTo_wsnt__Unsubscribe(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTo_wsnt__Unsubscribe(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTo_wsnt__Renew
#define SOAP_TYPE_PointerTo_wsnt__Renew (242)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_wsnt__Renew(struct soap*, _wsnt__Renew *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_wsnt__Renew(struct soap*, const char *, int, _wsnt__Renew *const*, const char *);
SOAP_FMAC3 _wsnt__Renew ** SOAP_FMAC4 soap_in_PointerTo_wsnt__Renew(struct soap*, const char*, _wsnt__Renew **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_wsnt__Renew(struct soap*, _wsnt__Renew *const*, const char*, const char*);

#ifndef soap_write_PointerTo_wsnt__Renew
#define soap_write_PointerTo_wsnt__Renew(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTo_wsnt__Renew(soap, data), 0) || soap_put_PointerTo_wsnt__Renew(soap, data, "wsnt:Renew", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _wsnt__Renew ** SOAP_FMAC4 soap_get_PointerTo_wsnt__Renew(struct soap*, _wsnt__Renew **, const char*, const char*);

#ifndef soap_read_PointerTo_wsnt__Renew
#define soap_read_PointerTo_wsnt__Renew(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTo_wsnt__Renew(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTo_eventws__GetEventProperties
#define SOAP_TYPE_PointerTo_eventws__GetEventProperties (238)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_eventws__GetEventProperties(struct soap*, _eventws__GetEventProperties *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_eventws__GetEventProperties(struct soap*, const char *, int, _eventws__GetEventProperties *const*, const char *);
SOAP_FMAC3 _eventws__GetEventProperties ** SOAP_FMAC4 soap_in_PointerTo_eventws__GetEventProperties(struct soap*, const char*, _eventws__GetEventProperties **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_eventws__GetEventProperties(struct soap*, _eventws__GetEventProperties *const*, const char*, const char*);

#ifndef soap_write_PointerTo_eventws__GetEventProperties
#define soap_write_PointerTo_eventws__GetEventProperties(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTo_eventws__GetEventProperties(soap, data), 0) || soap_put_PointerTo_eventws__GetEventProperties(soap, data, "eventws:GetEventProperties", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _eventws__GetEventProperties ** SOAP_FMAC4 soap_get_PointerTo_eventws__GetEventProperties(struct soap*, _eventws__GetEventProperties **, const char*, const char*);

#ifndef soap_read_PointerTo_eventws__GetEventProperties
#define soap_read_PointerTo_eventws__GetEventProperties(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTo_eventws__GetEventProperties(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTo_eventws__CreatePullPointSubscription
#define SOAP_TYPE_PointerTo_eventws__CreatePullPointSubscription (234)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_eventws__CreatePullPointSubscription(struct soap*, _eventws__CreatePullPointSubscription *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_eventws__CreatePullPointSubscription(struct soap*, const char *, int, _eventws__CreatePullPointSubscription *const*, const char *);
SOAP_FMAC3 _eventws__CreatePullPointSubscription ** SOAP_FMAC4 soap_in_PointerTo_eventws__CreatePullPointSubscription(struct soap*, const char*, _eventws__CreatePullPointSubscription **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_eventws__CreatePullPointSubscription(struct soap*, _eventws__CreatePullPointSubscription *const*, const char*, const char*);

#ifndef soap_write_PointerTo_eventws__CreatePullPointSubscription
#define soap_write_PointerTo_eventws__CreatePullPointSubscription(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTo_eventws__CreatePullPointSubscription(soap, data), 0) || soap_put_PointerTo_eventws__CreatePullPointSubscription(soap, data, "eventws:CreatePullPointSubscription", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _eventws__CreatePullPointSubscription ** SOAP_FMAC4 soap_get_PointerTo_eventws__CreatePullPointSubscription(struct soap*, _eventws__CreatePullPointSubscription **, const char*, const char*);

#ifndef soap_read_PointerTo_eventws__CreatePullPointSubscription
#define soap_read_PointerTo_eventws__CreatePullPointSubscription(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTo_eventws__CreatePullPointSubscription(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTo_eventws__GetServiceCapabilities
#define SOAP_TYPE_PointerTo_eventws__GetServiceCapabilities (230)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_eventws__GetServiceCapabilities(struct soap*, _eventws__GetServiceCapabilities *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_eventws__GetServiceCapabilities(struct soap*, const char *, int, _eventws__GetServiceCapabilities *const*, const char *);
SOAP_FMAC3 _eventws__GetServiceCapabilities ** SOAP_FMAC4 soap_in_PointerTo_eventws__GetServiceCapabilities(struct soap*, const char*, _eventws__GetServiceCapabilities **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_eventws__GetServiceCapabilities(struct soap*, _eventws__GetServiceCapabilities *const*, const char*, const char*);

#ifndef soap_write_PointerTo_eventws__GetServiceCapabilities
#define soap_write_PointerTo_eventws__GetServiceCapabilities(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTo_eventws__GetServiceCapabilities(soap, data), 0) || soap_put_PointerTo_eventws__GetServiceCapabilities(soap, data, "eventws:GetServiceCapabilities", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _eventws__GetServiceCapabilities ** SOAP_FMAC4 soap_get_PointerTo_eventws__GetServiceCapabilities(struct soap*, _eventws__GetServiceCapabilities **, const char*, const char*);

#ifndef soap_read_PointerTo_eventws__GetServiceCapabilities
#define soap_read_PointerTo_eventws__GetServiceCapabilities(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTo_eventws__GetServiceCapabilities(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTo_eventws__SetSynchronizationPoint
#define SOAP_TYPE_PointerTo_eventws__SetSynchronizationPoint (226)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_eventws__SetSynchronizationPoint(struct soap*, _eventws__SetSynchronizationPoint *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_eventws__SetSynchronizationPoint(struct soap*, const char *, int, _eventws__SetSynchronizationPoint *const*, const char *);
SOAP_FMAC3 _eventws__SetSynchronizationPoint ** SOAP_FMAC4 soap_in_PointerTo_eventws__SetSynchronizationPoint(struct soap*, const char*, _eventws__SetSynchronizationPoint **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_eventws__SetSynchronizationPoint(struct soap*, _eventws__SetSynchronizationPoint *const*, const char*, const char*);

#ifndef soap_write_PointerTo_eventws__SetSynchronizationPoint
#define soap_write_PointerTo_eventws__SetSynchronizationPoint(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTo_eventws__SetSynchronizationPoint(soap, data), 0) || soap_put_PointerTo_eventws__SetSynchronizationPoint(soap, data, "eventws:SetSynchronizationPoint", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _eventws__SetSynchronizationPoint ** SOAP_FMAC4 soap_get_PointerTo_eventws__SetSynchronizationPoint(struct soap*, _eventws__SetSynchronizationPoint **, const char*, const char*);

#ifndef soap_read_PointerTo_eventws__SetSynchronizationPoint
#define soap_read_PointerTo_eventws__SetSynchronizationPoint(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTo_eventws__SetSynchronizationPoint(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTo_eventws__Seek
#define SOAP_TYPE_PointerTo_eventws__Seek (222)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_eventws__Seek(struct soap*, _eventws__Seek *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_eventws__Seek(struct soap*, const char *, int, _eventws__Seek *const*, const char *);
SOAP_FMAC3 _eventws__Seek ** SOAP_FMAC4 soap_in_PointerTo_eventws__Seek(struct soap*, const char*, _eventws__Seek **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_eventws__Seek(struct soap*, _eventws__Seek *const*, const char*, const char*);

#ifndef soap_write_PointerTo_eventws__Seek
#define soap_write_PointerTo_eventws__Seek(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTo_eventws__Seek(soap, data), 0) || soap_put_PointerTo_eventws__Seek(soap, data, "eventws:Seek", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _eventws__Seek ** SOAP_FMAC4 soap_get_PointerTo_eventws__Seek(struct soap*, _eventws__Seek **, const char*, const char*);

#ifndef soap_read_PointerTo_eventws__Seek
#define soap_read_PointerTo_eventws__Seek(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTo_eventws__Seek(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTo_eventws__PullMessages
#define SOAP_TYPE_PointerTo_eventws__PullMessages (218)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_eventws__PullMessages(struct soap*, _eventws__PullMessages *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_eventws__PullMessages(struct soap*, const char *, int, _eventws__PullMessages *const*, const char *);
SOAP_FMAC3 _eventws__PullMessages ** SOAP_FMAC4 soap_in_PointerTo_eventws__PullMessages(struct soap*, const char*, _eventws__PullMessages **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_eventws__PullMessages(struct soap*, _eventws__PullMessages *const*, const char*, const char*);

#ifndef soap_write_PointerTo_eventws__PullMessages
#define soap_write_PointerTo_eventws__PullMessages(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTo_eventws__PullMessages(soap, data), 0) || soap_put_PointerTo_eventws__PullMessages(soap, data, "eventws:PullMessages", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _eventws__PullMessages ** SOAP_FMAC4 soap_get_PointerTo_eventws__PullMessages(struct soap*, _eventws__PullMessages **, const char*, const char*);

#ifndef soap_read_PointerTo_eventws__PullMessages
#define soap_read_PointerTo_eventws__PullMessages(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTo_eventws__PullMessages(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTowsnt__UnsupportedPolicyRequestFaultType
#define SOAP_TYPE_PointerTowsnt__UnsupportedPolicyRequestFaultType (216)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTowsnt__UnsupportedPolicyRequestFaultType(struct soap*, wsnt__UnsupportedPolicyRequestFaultType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTowsnt__UnsupportedPolicyRequestFaultType(struct soap*, const char *, int, wsnt__UnsupportedPolicyRequestFaultType *const*, const char *);
SOAP_FMAC3 wsnt__UnsupportedPolicyRequestFaultType ** SOAP_FMAC4 soap_in_PointerTowsnt__UnsupportedPolicyRequestFaultType(struct soap*, const char*, wsnt__UnsupportedPolicyRequestFaultType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTowsnt__UnsupportedPolicyRequestFaultType(struct soap*, wsnt__UnsupportedPolicyRequestFaultType *const*, const char*, const char*);

#ifndef soap_write_PointerTowsnt__UnsupportedPolicyRequestFaultType
#define soap_write_PointerTowsnt__UnsupportedPolicyRequestFaultType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTowsnt__UnsupportedPolicyRequestFaultType(soap, data), 0) || soap_put_PointerTowsnt__UnsupportedPolicyRequestFaultType(soap, data, "wsnt:UnsupportedPolicyRequestFaultType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 wsnt__UnsupportedPolicyRequestFaultType ** SOAP_FMAC4 soap_get_PointerTowsnt__UnsupportedPolicyRequestFaultType(struct soap*, wsnt__UnsupportedPolicyRequestFaultType **, const char*, const char*);

#ifndef soap_read_PointerTowsnt__UnsupportedPolicyRequestFaultType
#define soap_read_PointerTowsnt__UnsupportedPolicyRequestFaultType(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTowsnt__UnsupportedPolicyRequestFaultType(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTowsnt__UnrecognizedPolicyRequestFaultType
#define SOAP_TYPE_PointerTowsnt__UnrecognizedPolicyRequestFaultType (215)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTowsnt__UnrecognizedPolicyRequestFaultType(struct soap*, wsnt__UnrecognizedPolicyRequestFaultType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTowsnt__UnrecognizedPolicyRequestFaultType(struct soap*, const char *, int, wsnt__UnrecognizedPolicyRequestFaultType *const*, const char *);
SOAP_FMAC3 wsnt__UnrecognizedPolicyRequestFaultType ** SOAP_FMAC4 soap_in_PointerTowsnt__UnrecognizedPolicyRequestFaultType(struct soap*, const char*, wsnt__UnrecognizedPolicyRequestFaultType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTowsnt__UnrecognizedPolicyRequestFaultType(struct soap*, wsnt__UnrecognizedPolicyRequestFaultType *const*, const char*, const char*);

#ifndef soap_write_PointerTowsnt__UnrecognizedPolicyRequestFaultType
#define soap_write_PointerTowsnt__UnrecognizedPolicyRequestFaultType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTowsnt__UnrecognizedPolicyRequestFaultType(soap, data), 0) || soap_put_PointerTowsnt__UnrecognizedPolicyRequestFaultType(soap, data, "wsnt:UnrecognizedPolicyRequestFaultType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 wsnt__UnrecognizedPolicyRequestFaultType ** SOAP_FMAC4 soap_get_PointerTowsnt__UnrecognizedPolicyRequestFaultType(struct soap*, wsnt__UnrecognizedPolicyRequestFaultType **, const char*, const char*);

#ifndef soap_read_PointerTowsnt__UnrecognizedPolicyRequestFaultType
#define soap_read_PointerTowsnt__UnrecognizedPolicyRequestFaultType(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTowsnt__UnrecognizedPolicyRequestFaultType(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTowsnt__UnacceptableTerminationTimeFaultType
#define SOAP_TYPE_PointerTowsnt__UnacceptableTerminationTimeFaultType (214)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTowsnt__UnacceptableTerminationTimeFaultType(struct soap*, wsnt__UnacceptableTerminationTimeFaultType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTowsnt__UnacceptableTerminationTimeFaultType(struct soap*, const char *, int, wsnt__UnacceptableTerminationTimeFaultType *const*, const char *);
SOAP_FMAC3 wsnt__UnacceptableTerminationTimeFaultType ** SOAP_FMAC4 soap_in_PointerTowsnt__UnacceptableTerminationTimeFaultType(struct soap*, const char*, wsnt__UnacceptableTerminationTimeFaultType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTowsnt__UnacceptableTerminationTimeFaultType(struct soap*, wsnt__UnacceptableTerminationTimeFaultType *const*, const char*, const char*);

#ifndef soap_write_PointerTowsnt__UnacceptableTerminationTimeFaultType
#define soap_write_PointerTowsnt__UnacceptableTerminationTimeFaultType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTowsnt__UnacceptableTerminationTimeFaultType(soap, data), 0) || soap_put_PointerTowsnt__UnacceptableTerminationTimeFaultType(soap, data, "wsnt:UnacceptableTerminationTimeFaultType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 wsnt__UnacceptableTerminationTimeFaultType ** SOAP_FMAC4 soap_get_PointerTowsnt__UnacceptableTerminationTimeFaultType(struct soap*, wsnt__UnacceptableTerminationTimeFaultType **, const char*, const char*);

#ifndef soap_read_PointerTowsnt__UnacceptableTerminationTimeFaultType
#define soap_read_PointerTowsnt__UnacceptableTerminationTimeFaultType(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTowsnt__UnacceptableTerminationTimeFaultType(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTowsnt__UnacceptableInitialTerminationTimeFaultType
#define SOAP_TYPE_PointerTowsnt__UnacceptableInitialTerminationTimeFaultType (213)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTowsnt__UnacceptableInitialTerminationTimeFaultType(struct soap*, wsnt__UnacceptableInitialTerminationTimeFaultType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTowsnt__UnacceptableInitialTerminationTimeFaultType(struct soap*, const char *, int, wsnt__UnacceptableInitialTerminationTimeFaultType *const*, const char *);
SOAP_FMAC3 wsnt__UnacceptableInitialTerminationTimeFaultType ** SOAP_FMAC4 soap_in_PointerTowsnt__UnacceptableInitialTerminationTimeFaultType(struct soap*, const char*, wsnt__UnacceptableInitialTerminationTimeFaultType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTowsnt__UnacceptableInitialTerminationTimeFaultType(struct soap*, wsnt__UnacceptableInitialTerminationTimeFaultType *const*, const char*, const char*);

#ifndef soap_write_PointerTowsnt__UnacceptableInitialTerminationTimeFaultType
#define soap_write_PointerTowsnt__UnacceptableInitialTerminationTimeFaultType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTowsnt__UnacceptableInitialTerminationTimeFaultType(soap, data), 0) || soap_put_PointerTowsnt__UnacceptableInitialTerminationTimeFaultType(soap, data, "wsnt:UnacceptableInitialTerminationTimeFaultType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 wsnt__UnacceptableInitialTerminationTimeFaultType ** SOAP_FMAC4 soap_get_PointerTowsnt__UnacceptableInitialTerminationTimeFaultType(struct soap*, wsnt__UnacceptableInitialTerminationTimeFaultType **, const char*, const char*);

#ifndef soap_read_PointerTowsnt__UnacceptableInitialTerminationTimeFaultType
#define soap_read_PointerTowsnt__UnacceptableInitialTerminationTimeFaultType(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTowsnt__UnacceptableInitialTerminationTimeFaultType(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTowsnt__UnableToGetMessagesFaultType
#define SOAP_TYPE_PointerTowsnt__UnableToGetMessagesFaultType (212)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTowsnt__UnableToGetMessagesFaultType(struct soap*, wsnt__UnableToGetMessagesFaultType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTowsnt__UnableToGetMessagesFaultType(struct soap*, const char *, int, wsnt__UnableToGetMessagesFaultType *const*, const char *);
SOAP_FMAC3 wsnt__UnableToGetMessagesFaultType ** SOAP_FMAC4 soap_in_PointerTowsnt__UnableToGetMessagesFaultType(struct soap*, const char*, wsnt__UnableToGetMessagesFaultType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTowsnt__UnableToGetMessagesFaultType(struct soap*, wsnt__UnableToGetMessagesFaultType *const*, const char*, const char*);

#ifndef soap_write_PointerTowsnt__UnableToGetMessagesFaultType
#define soap_write_PointerTowsnt__UnableToGetMessagesFaultType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTowsnt__UnableToGetMessagesFaultType(soap, data), 0) || soap_put_PointerTowsnt__UnableToGetMessagesFaultType(soap, data, "wsnt:UnableToGetMessagesFaultType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 wsnt__UnableToGetMessagesFaultType ** SOAP_FMAC4 soap_get_PointerTowsnt__UnableToGetMessagesFaultType(struct soap*, wsnt__UnableToGetMessagesFaultType **, const char*, const char*);

#ifndef soap_read_PointerTowsnt__UnableToGetMessagesFaultType
#define soap_read_PointerTowsnt__UnableToGetMessagesFaultType(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTowsnt__UnableToGetMessagesFaultType(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTowsnt__UnableToDestroySubscriptionFaultType
#define SOAP_TYPE_PointerTowsnt__UnableToDestroySubscriptionFaultType (211)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTowsnt__UnableToDestroySubscriptionFaultType(struct soap*, wsnt__UnableToDestroySubscriptionFaultType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTowsnt__UnableToDestroySubscriptionFaultType(struct soap*, const char *, int, wsnt__UnableToDestroySubscriptionFaultType *const*, const char *);
SOAP_FMAC3 wsnt__UnableToDestroySubscriptionFaultType ** SOAP_FMAC4 soap_in_PointerTowsnt__UnableToDestroySubscriptionFaultType(struct soap*, const char*, wsnt__UnableToDestroySubscriptionFaultType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTowsnt__UnableToDestroySubscriptionFaultType(struct soap*, wsnt__UnableToDestroySubscriptionFaultType *const*, const char*, const char*);

#ifndef soap_write_PointerTowsnt__UnableToDestroySubscriptionFaultType
#define soap_write_PointerTowsnt__UnableToDestroySubscriptionFaultType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTowsnt__UnableToDestroySubscriptionFaultType(soap, data), 0) || soap_put_PointerTowsnt__UnableToDestroySubscriptionFaultType(soap, data, "wsnt:UnableToDestroySubscriptionFaultType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 wsnt__UnableToDestroySubscriptionFaultType ** SOAP_FMAC4 soap_get_PointerTowsnt__UnableToDestroySubscriptionFaultType(struct soap*, wsnt__UnableToDestroySubscriptionFaultType **, const char*, const char*);

#ifndef soap_read_PointerTowsnt__UnableToDestroySubscriptionFaultType
#define soap_read_PointerTowsnt__UnableToDestroySubscriptionFaultType(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTowsnt__UnableToDestroySubscriptionFaultType(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTowsnt__UnableToDestroyPullPointFaultType
#define SOAP_TYPE_PointerTowsnt__UnableToDestroyPullPointFaultType (210)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTowsnt__UnableToDestroyPullPointFaultType(struct soap*, wsnt__UnableToDestroyPullPointFaultType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTowsnt__UnableToDestroyPullPointFaultType(struct soap*, const char *, int, wsnt__UnableToDestroyPullPointFaultType *const*, const char *);
SOAP_FMAC3 wsnt__UnableToDestroyPullPointFaultType ** SOAP_FMAC4 soap_in_PointerTowsnt__UnableToDestroyPullPointFaultType(struct soap*, const char*, wsnt__UnableToDestroyPullPointFaultType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTowsnt__UnableToDestroyPullPointFaultType(struct soap*, wsnt__UnableToDestroyPullPointFaultType *const*, const char*, const char*);

#ifndef soap_write_PointerTowsnt__UnableToDestroyPullPointFaultType
#define soap_write_PointerTowsnt__UnableToDestroyPullPointFaultType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTowsnt__UnableToDestroyPullPointFaultType(soap, data), 0) || soap_put_PointerTowsnt__UnableToDestroyPullPointFaultType(soap, data, "wsnt:UnableToDestroyPullPointFaultType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 wsnt__UnableToDestroyPullPointFaultType ** SOAP_FMAC4 soap_get_PointerTowsnt__UnableToDestroyPullPointFaultType(struct soap*, wsnt__UnableToDestroyPullPointFaultType **, const char*, const char*);

#ifndef soap_read_PointerTowsnt__UnableToDestroyPullPointFaultType
#define soap_read_PointerTowsnt__UnableToDestroyPullPointFaultType(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTowsnt__UnableToDestroyPullPointFaultType(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTowsnt__UnableToCreatePullPointFaultType
#define SOAP_TYPE_PointerTowsnt__UnableToCreatePullPointFaultType (209)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTowsnt__UnableToCreatePullPointFaultType(struct soap*, wsnt__UnableToCreatePullPointFaultType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTowsnt__UnableToCreatePullPointFaultType(struct soap*, const char *, int, wsnt__UnableToCreatePullPointFaultType *const*, const char *);
SOAP_FMAC3 wsnt__UnableToCreatePullPointFaultType ** SOAP_FMAC4 soap_in_PointerTowsnt__UnableToCreatePullPointFaultType(struct soap*, const char*, wsnt__UnableToCreatePullPointFaultType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTowsnt__UnableToCreatePullPointFaultType(struct soap*, wsnt__UnableToCreatePullPointFaultType *const*, const char*, const char*);

#ifndef soap_write_PointerTowsnt__UnableToCreatePullPointFaultType
#define soap_write_PointerTowsnt__UnableToCreatePullPointFaultType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTowsnt__UnableToCreatePullPointFaultType(soap, data), 0) || soap_put_PointerTowsnt__UnableToCreatePullPointFaultType(soap, data, "wsnt:UnableToCreatePullPointFaultType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 wsnt__UnableToCreatePullPointFaultType ** SOAP_FMAC4 soap_get_PointerTowsnt__UnableToCreatePullPointFaultType(struct soap*, wsnt__UnableToCreatePullPointFaultType **, const char*, const char*);

#ifndef soap_read_PointerTowsnt__UnableToCreatePullPointFaultType
#define soap_read_PointerTowsnt__UnableToCreatePullPointFaultType(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTowsnt__UnableToCreatePullPointFaultType(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTowsnt__TopicNotSupportedFaultType
#define SOAP_TYPE_PointerTowsnt__TopicNotSupportedFaultType (208)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTowsnt__TopicNotSupportedFaultType(struct soap*, wsnt__TopicNotSupportedFaultType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTowsnt__TopicNotSupportedFaultType(struct soap*, const char *, int, wsnt__TopicNotSupportedFaultType *const*, const char *);
SOAP_FMAC3 wsnt__TopicNotSupportedFaultType ** SOAP_FMAC4 soap_in_PointerTowsnt__TopicNotSupportedFaultType(struct soap*, const char*, wsnt__TopicNotSupportedFaultType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTowsnt__TopicNotSupportedFaultType(struct soap*, wsnt__TopicNotSupportedFaultType *const*, const char*, const char*);

#ifndef soap_write_PointerTowsnt__TopicNotSupportedFaultType
#define soap_write_PointerTowsnt__TopicNotSupportedFaultType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTowsnt__TopicNotSupportedFaultType(soap, data), 0) || soap_put_PointerTowsnt__TopicNotSupportedFaultType(soap, data, "wsnt:TopicNotSupportedFaultType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 wsnt__TopicNotSupportedFaultType ** SOAP_FMAC4 soap_get_PointerTowsnt__TopicNotSupportedFaultType(struct soap*, wsnt__TopicNotSupportedFaultType **, const char*, const char*);

#ifndef soap_read_PointerTowsnt__TopicNotSupportedFaultType
#define soap_read_PointerTowsnt__TopicNotSupportedFaultType(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTowsnt__TopicNotSupportedFaultType(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTowsnt__TopicExpressionDialectUnknownFaultType
#define SOAP_TYPE_PointerTowsnt__TopicExpressionDialectUnknownFaultType (207)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTowsnt__TopicExpressionDialectUnknownFaultType(struct soap*, wsnt__TopicExpressionDialectUnknownFaultType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTowsnt__TopicExpressionDialectUnknownFaultType(struct soap*, const char *, int, wsnt__TopicExpressionDialectUnknownFaultType *const*, const char *);
SOAP_FMAC3 wsnt__TopicExpressionDialectUnknownFaultType ** SOAP_FMAC4 soap_in_PointerTowsnt__TopicExpressionDialectUnknownFaultType(struct soap*, const char*, wsnt__TopicExpressionDialectUnknownFaultType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTowsnt__TopicExpressionDialectUnknownFaultType(struct soap*, wsnt__TopicExpressionDialectUnknownFaultType *const*, const char*, const char*);

#ifndef soap_write_PointerTowsnt__TopicExpressionDialectUnknownFaultType
#define soap_write_PointerTowsnt__TopicExpressionDialectUnknownFaultType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTowsnt__TopicExpressionDialectUnknownFaultType(soap, data), 0) || soap_put_PointerTowsnt__TopicExpressionDialectUnknownFaultType(soap, data, "wsnt:TopicExpressionDialectUnknownFaultType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 wsnt__TopicExpressionDialectUnknownFaultType ** SOAP_FMAC4 soap_get_PointerTowsnt__TopicExpressionDialectUnknownFaultType(struct soap*, wsnt__TopicExpressionDialectUnknownFaultType **, const char*, const char*);

#ifndef soap_read_PointerTowsnt__TopicExpressionDialectUnknownFaultType
#define soap_read_PointerTowsnt__TopicExpressionDialectUnknownFaultType(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTowsnt__TopicExpressionDialectUnknownFaultType(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTowsnt__SubscribeCreationFailedFaultType
#define SOAP_TYPE_PointerTowsnt__SubscribeCreationFailedFaultType (206)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTowsnt__SubscribeCreationFailedFaultType(struct soap*, wsnt__SubscribeCreationFailedFaultType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTowsnt__SubscribeCreationFailedFaultType(struct soap*, const char *, int, wsnt__SubscribeCreationFailedFaultType *const*, const char *);
SOAP_FMAC3 wsnt__SubscribeCreationFailedFaultType ** SOAP_FMAC4 soap_in_PointerTowsnt__SubscribeCreationFailedFaultType(struct soap*, const char*, wsnt__SubscribeCreationFailedFaultType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTowsnt__SubscribeCreationFailedFaultType(struct soap*, wsnt__SubscribeCreationFailedFaultType *const*, const char*, const char*);

#ifndef soap_write_PointerTowsnt__SubscribeCreationFailedFaultType
#define soap_write_PointerTowsnt__SubscribeCreationFailedFaultType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTowsnt__SubscribeCreationFailedFaultType(soap, data), 0) || soap_put_PointerTowsnt__SubscribeCreationFailedFaultType(soap, data, "wsnt:SubscribeCreationFailedFaultType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 wsnt__SubscribeCreationFailedFaultType ** SOAP_FMAC4 soap_get_PointerTowsnt__SubscribeCreationFailedFaultType(struct soap*, wsnt__SubscribeCreationFailedFaultType **, const char*, const char*);

#ifndef soap_read_PointerTowsnt__SubscribeCreationFailedFaultType
#define soap_read_PointerTowsnt__SubscribeCreationFailedFaultType(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTowsnt__SubscribeCreationFailedFaultType(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTowsnt__ResumeFailedFaultType
#define SOAP_TYPE_PointerTowsnt__ResumeFailedFaultType (205)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTowsnt__ResumeFailedFaultType(struct soap*, wsnt__ResumeFailedFaultType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTowsnt__ResumeFailedFaultType(struct soap*, const char *, int, wsnt__ResumeFailedFaultType *const*, const char *);
SOAP_FMAC3 wsnt__ResumeFailedFaultType ** SOAP_FMAC4 soap_in_PointerTowsnt__ResumeFailedFaultType(struct soap*, const char*, wsnt__ResumeFailedFaultType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTowsnt__ResumeFailedFaultType(struct soap*, wsnt__ResumeFailedFaultType *const*, const char*, const char*);

#ifndef soap_write_PointerTowsnt__ResumeFailedFaultType
#define soap_write_PointerTowsnt__ResumeFailedFaultType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTowsnt__ResumeFailedFaultType(soap, data), 0) || soap_put_PointerTowsnt__ResumeFailedFaultType(soap, data, "wsnt:ResumeFailedFaultType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 wsnt__ResumeFailedFaultType ** SOAP_FMAC4 soap_get_PointerTowsnt__ResumeFailedFaultType(struct soap*, wsnt__ResumeFailedFaultType **, const char*, const char*);

#ifndef soap_read_PointerTowsnt__ResumeFailedFaultType
#define soap_read_PointerTowsnt__ResumeFailedFaultType(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTowsnt__ResumeFailedFaultType(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTowsrfr__ResourceUnknownFaultType
#define SOAP_TYPE_PointerTowsrfr__ResourceUnknownFaultType (204)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTowsrfr__ResourceUnknownFaultType(struct soap*, wsrfr__ResourceUnknownFaultType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTowsrfr__ResourceUnknownFaultType(struct soap*, const char *, int, wsrfr__ResourceUnknownFaultType *const*, const char *);
SOAP_FMAC3 wsrfr__ResourceUnknownFaultType ** SOAP_FMAC4 soap_in_PointerTowsrfr__ResourceUnknownFaultType(struct soap*, const char*, wsrfr__ResourceUnknownFaultType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTowsrfr__ResourceUnknownFaultType(struct soap*, wsrfr__ResourceUnknownFaultType *const*, const char*, const char*);

#ifndef soap_write_PointerTowsrfr__ResourceUnknownFaultType
#define soap_write_PointerTowsrfr__ResourceUnknownFaultType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTowsrfr__ResourceUnknownFaultType(soap, data), 0) || soap_put_PointerTowsrfr__ResourceUnknownFaultType(soap, data, "wsrfr:ResourceUnknownFaultType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 wsrfr__ResourceUnknownFaultType ** SOAP_FMAC4 soap_get_PointerTowsrfr__ResourceUnknownFaultType(struct soap*, wsrfr__ResourceUnknownFaultType **, const char*, const char*);

#ifndef soap_read_PointerTowsrfr__ResourceUnknownFaultType
#define soap_read_PointerTowsrfr__ResourceUnknownFaultType(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTowsrfr__ResourceUnknownFaultType(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTo_eventws__PullMessagesFaultResponse
#define SOAP_TYPE_PointerTo_eventws__PullMessagesFaultResponse (203)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_eventws__PullMessagesFaultResponse(struct soap*, _eventws__PullMessagesFaultResponse *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_eventws__PullMessagesFaultResponse(struct soap*, const char *, int, _eventws__PullMessagesFaultResponse *const*, const char *);
SOAP_FMAC3 _eventws__PullMessagesFaultResponse ** SOAP_FMAC4 soap_in_PointerTo_eventws__PullMessagesFaultResponse(struct soap*, const char*, _eventws__PullMessagesFaultResponse **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_eventws__PullMessagesFaultResponse(struct soap*, _eventws__PullMessagesFaultResponse *const*, const char*, const char*);

#ifndef soap_write_PointerTo_eventws__PullMessagesFaultResponse
#define soap_write_PointerTo_eventws__PullMessagesFaultResponse(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTo_eventws__PullMessagesFaultResponse(soap, data), 0) || soap_put_PointerTo_eventws__PullMessagesFaultResponse(soap, data, "eventws:PullMessagesFaultResponse", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _eventws__PullMessagesFaultResponse ** SOAP_FMAC4 soap_get_PointerTo_eventws__PullMessagesFaultResponse(struct soap*, _eventws__PullMessagesFaultResponse **, const char*, const char*);

#ifndef soap_read_PointerTo_eventws__PullMessagesFaultResponse
#define soap_read_PointerTo_eventws__PullMessagesFaultResponse(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTo_eventws__PullMessagesFaultResponse(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTowsnt__PauseFailedFaultType
#define SOAP_TYPE_PointerTowsnt__PauseFailedFaultType (202)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTowsnt__PauseFailedFaultType(struct soap*, wsnt__PauseFailedFaultType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTowsnt__PauseFailedFaultType(struct soap*, const char *, int, wsnt__PauseFailedFaultType *const*, const char *);
SOAP_FMAC3 wsnt__PauseFailedFaultType ** SOAP_FMAC4 soap_in_PointerTowsnt__PauseFailedFaultType(struct soap*, const char*, wsnt__PauseFailedFaultType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTowsnt__PauseFailedFaultType(struct soap*, wsnt__PauseFailedFaultType *const*, const char*, const char*);

#ifndef soap_write_PointerTowsnt__PauseFailedFaultType
#define soap_write_PointerTowsnt__PauseFailedFaultType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTowsnt__PauseFailedFaultType(soap, data), 0) || soap_put_PointerTowsnt__PauseFailedFaultType(soap, data, "wsnt:PauseFailedFaultType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 wsnt__PauseFailedFaultType ** SOAP_FMAC4 soap_get_PointerTowsnt__PauseFailedFaultType(struct soap*, wsnt__PauseFailedFaultType **, const char*, const char*);

#ifndef soap_read_PointerTowsnt__PauseFailedFaultType
#define soap_read_PointerTowsnt__PauseFailedFaultType(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTowsnt__PauseFailedFaultType(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTowsnt__NotifyMessageNotSupportedFaultType
#define SOAP_TYPE_PointerTowsnt__NotifyMessageNotSupportedFaultType (201)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTowsnt__NotifyMessageNotSupportedFaultType(struct soap*, wsnt__NotifyMessageNotSupportedFaultType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTowsnt__NotifyMessageNotSupportedFaultType(struct soap*, const char *, int, wsnt__NotifyMessageNotSupportedFaultType *const*, const char *);
SOAP_FMAC3 wsnt__NotifyMessageNotSupportedFaultType ** SOAP_FMAC4 soap_in_PointerTowsnt__NotifyMessageNotSupportedFaultType(struct soap*, const char*, wsnt__NotifyMessageNotSupportedFaultType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTowsnt__NotifyMessageNotSupportedFaultType(struct soap*, wsnt__NotifyMessageNotSupportedFaultType *const*, const char*, const char*);

#ifndef soap_write_PointerTowsnt__NotifyMessageNotSupportedFaultType
#define soap_write_PointerTowsnt__NotifyMessageNotSupportedFaultType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTowsnt__NotifyMessageNotSupportedFaultType(soap, data), 0) || soap_put_PointerTowsnt__NotifyMessageNotSupportedFaultType(soap, data, "wsnt:NotifyMessageNotSupportedFaultType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 wsnt__NotifyMessageNotSupportedFaultType ** SOAP_FMAC4 soap_get_PointerTowsnt__NotifyMessageNotSupportedFaultType(struct soap*, wsnt__NotifyMessageNotSupportedFaultType **, const char*, const char*);

#ifndef soap_read_PointerTowsnt__NotifyMessageNotSupportedFaultType
#define soap_read_PointerTowsnt__NotifyMessageNotSupportedFaultType(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTowsnt__NotifyMessageNotSupportedFaultType(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTowsnt__NoCurrentMessageOnTopicFaultType
#define SOAP_TYPE_PointerTowsnt__NoCurrentMessageOnTopicFaultType (200)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTowsnt__NoCurrentMessageOnTopicFaultType(struct soap*, wsnt__NoCurrentMessageOnTopicFaultType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTowsnt__NoCurrentMessageOnTopicFaultType(struct soap*, const char *, int, wsnt__NoCurrentMessageOnTopicFaultType *const*, const char *);
SOAP_FMAC3 wsnt__NoCurrentMessageOnTopicFaultType ** SOAP_FMAC4 soap_in_PointerTowsnt__NoCurrentMessageOnTopicFaultType(struct soap*, const char*, wsnt__NoCurrentMessageOnTopicFaultType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTowsnt__NoCurrentMessageOnTopicFaultType(struct soap*, wsnt__NoCurrentMessageOnTopicFaultType *const*, const char*, const char*);

#ifndef soap_write_PointerTowsnt__NoCurrentMessageOnTopicFaultType
#define soap_write_PointerTowsnt__NoCurrentMessageOnTopicFaultType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTowsnt__NoCurrentMessageOnTopicFaultType(soap, data), 0) || soap_put_PointerTowsnt__NoCurrentMessageOnTopicFaultType(soap, data, "wsnt:NoCurrentMessageOnTopicFaultType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 wsnt__NoCurrentMessageOnTopicFaultType ** SOAP_FMAC4 soap_get_PointerTowsnt__NoCurrentMessageOnTopicFaultType(struct soap*, wsnt__NoCurrentMessageOnTopicFaultType **, const char*, const char*);

#ifndef soap_read_PointerTowsnt__NoCurrentMessageOnTopicFaultType
#define soap_read_PointerTowsnt__NoCurrentMessageOnTopicFaultType(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTowsnt__NoCurrentMessageOnTopicFaultType(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTowsnt__MultipleTopicsSpecifiedFaultType
#define SOAP_TYPE_PointerTowsnt__MultipleTopicsSpecifiedFaultType (199)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTowsnt__MultipleTopicsSpecifiedFaultType(struct soap*, wsnt__MultipleTopicsSpecifiedFaultType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTowsnt__MultipleTopicsSpecifiedFaultType(struct soap*, const char *, int, wsnt__MultipleTopicsSpecifiedFaultType *const*, const char *);
SOAP_FMAC3 wsnt__MultipleTopicsSpecifiedFaultType ** SOAP_FMAC4 soap_in_PointerTowsnt__MultipleTopicsSpecifiedFaultType(struct soap*, const char*, wsnt__MultipleTopicsSpecifiedFaultType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTowsnt__MultipleTopicsSpecifiedFaultType(struct soap*, wsnt__MultipleTopicsSpecifiedFaultType *const*, const char*, const char*);

#ifndef soap_write_PointerTowsnt__MultipleTopicsSpecifiedFaultType
#define soap_write_PointerTowsnt__MultipleTopicsSpecifiedFaultType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTowsnt__MultipleTopicsSpecifiedFaultType(soap, data), 0) || soap_put_PointerTowsnt__MultipleTopicsSpecifiedFaultType(soap, data, "wsnt:MultipleTopicsSpecifiedFaultType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 wsnt__MultipleTopicsSpecifiedFaultType ** SOAP_FMAC4 soap_get_PointerTowsnt__MultipleTopicsSpecifiedFaultType(struct soap*, wsnt__MultipleTopicsSpecifiedFaultType **, const char*, const char*);

#ifndef soap_read_PointerTowsnt__MultipleTopicsSpecifiedFaultType
#define soap_read_PointerTowsnt__MultipleTopicsSpecifiedFaultType(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTowsnt__MultipleTopicsSpecifiedFaultType(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTowsnt__InvalidTopicExpressionFaultType
#define SOAP_TYPE_PointerTowsnt__InvalidTopicExpressionFaultType (198)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTowsnt__InvalidTopicExpressionFaultType(struct soap*, wsnt__InvalidTopicExpressionFaultType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTowsnt__InvalidTopicExpressionFaultType(struct soap*, const char *, int, wsnt__InvalidTopicExpressionFaultType *const*, const char *);
SOAP_FMAC3 wsnt__InvalidTopicExpressionFaultType ** SOAP_FMAC4 soap_in_PointerTowsnt__InvalidTopicExpressionFaultType(struct soap*, const char*, wsnt__InvalidTopicExpressionFaultType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTowsnt__InvalidTopicExpressionFaultType(struct soap*, wsnt__InvalidTopicExpressionFaultType *const*, const char*, const char*);

#ifndef soap_write_PointerTowsnt__InvalidTopicExpressionFaultType
#define soap_write_PointerTowsnt__InvalidTopicExpressionFaultType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTowsnt__InvalidTopicExpressionFaultType(soap, data), 0) || soap_put_PointerTowsnt__InvalidTopicExpressionFaultType(soap, data, "wsnt:InvalidTopicExpressionFaultType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 wsnt__InvalidTopicExpressionFaultType ** SOAP_FMAC4 soap_get_PointerTowsnt__InvalidTopicExpressionFaultType(struct soap*, wsnt__InvalidTopicExpressionFaultType **, const char*, const char*);

#ifndef soap_read_PointerTowsnt__InvalidTopicExpressionFaultType
#define soap_read_PointerTowsnt__InvalidTopicExpressionFaultType(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTowsnt__InvalidTopicExpressionFaultType(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTowsnt__InvalidProducerPropertiesExpressionFaultType
#define SOAP_TYPE_PointerTowsnt__InvalidProducerPropertiesExpressionFaultType (197)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTowsnt__InvalidProducerPropertiesExpressionFaultType(struct soap*, wsnt__InvalidProducerPropertiesExpressionFaultType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTowsnt__InvalidProducerPropertiesExpressionFaultType(struct soap*, const char *, int, wsnt__InvalidProducerPropertiesExpressionFaultType *const*, const char *);
SOAP_FMAC3 wsnt__InvalidProducerPropertiesExpressionFaultType ** SOAP_FMAC4 soap_in_PointerTowsnt__InvalidProducerPropertiesExpressionFaultType(struct soap*, const char*, wsnt__InvalidProducerPropertiesExpressionFaultType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTowsnt__InvalidProducerPropertiesExpressionFaultType(struct soap*, wsnt__InvalidProducerPropertiesExpressionFaultType *const*, const char*, const char*);

#ifndef soap_write_PointerTowsnt__InvalidProducerPropertiesExpressionFaultType
#define soap_write_PointerTowsnt__InvalidProducerPropertiesExpressionFaultType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTowsnt__InvalidProducerPropertiesExpressionFaultType(soap, data), 0) || soap_put_PointerTowsnt__InvalidProducerPropertiesExpressionFaultType(soap, data, "wsnt:InvalidProducerPropertiesExpressionFaultType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 wsnt__InvalidProducerPropertiesExpressionFaultType ** SOAP_FMAC4 soap_get_PointerTowsnt__InvalidProducerPropertiesExpressionFaultType(struct soap*, wsnt__InvalidProducerPropertiesExpressionFaultType **, const char*, const char*);

#ifndef soap_read_PointerTowsnt__InvalidProducerPropertiesExpressionFaultType
#define soap_read_PointerTowsnt__InvalidProducerPropertiesExpressionFaultType(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTowsnt__InvalidProducerPropertiesExpressionFaultType(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTowsnt__InvalidMessageContentExpressionFaultType
#define SOAP_TYPE_PointerTowsnt__InvalidMessageContentExpressionFaultType (196)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTowsnt__InvalidMessageContentExpressionFaultType(struct soap*, wsnt__InvalidMessageContentExpressionFaultType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTowsnt__InvalidMessageContentExpressionFaultType(struct soap*, const char *, int, wsnt__InvalidMessageContentExpressionFaultType *const*, const char *);
SOAP_FMAC3 wsnt__InvalidMessageContentExpressionFaultType ** SOAP_FMAC4 soap_in_PointerTowsnt__InvalidMessageContentExpressionFaultType(struct soap*, const char*, wsnt__InvalidMessageContentExpressionFaultType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTowsnt__InvalidMessageContentExpressionFaultType(struct soap*, wsnt__InvalidMessageContentExpressionFaultType *const*, const char*, const char*);

#ifndef soap_write_PointerTowsnt__InvalidMessageContentExpressionFaultType
#define soap_write_PointerTowsnt__InvalidMessageContentExpressionFaultType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTowsnt__InvalidMessageContentExpressionFaultType(soap, data), 0) || soap_put_PointerTowsnt__InvalidMessageContentExpressionFaultType(soap, data, "wsnt:InvalidMessageContentExpressionFaultType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 wsnt__InvalidMessageContentExpressionFaultType ** SOAP_FMAC4 soap_get_PointerTowsnt__InvalidMessageContentExpressionFaultType(struct soap*, wsnt__InvalidMessageContentExpressionFaultType **, const char*, const char*);

#ifndef soap_read_PointerTowsnt__InvalidMessageContentExpressionFaultType
#define soap_read_PointerTowsnt__InvalidMessageContentExpressionFaultType(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTowsnt__InvalidMessageContentExpressionFaultType(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTowsnt__InvalidFilterFaultType
#define SOAP_TYPE_PointerTowsnt__InvalidFilterFaultType (195)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTowsnt__InvalidFilterFaultType(struct soap*, wsnt__InvalidFilterFaultType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTowsnt__InvalidFilterFaultType(struct soap*, const char *, int, wsnt__InvalidFilterFaultType *const*, const char *);
SOAP_FMAC3 wsnt__InvalidFilterFaultType ** SOAP_FMAC4 soap_in_PointerTowsnt__InvalidFilterFaultType(struct soap*, const char*, wsnt__InvalidFilterFaultType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTowsnt__InvalidFilterFaultType(struct soap*, wsnt__InvalidFilterFaultType *const*, const char*, const char*);

#ifndef soap_write_PointerTowsnt__InvalidFilterFaultType
#define soap_write_PointerTowsnt__InvalidFilterFaultType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTowsnt__InvalidFilterFaultType(soap, data), 0) || soap_put_PointerTowsnt__InvalidFilterFaultType(soap, data, "wsnt:InvalidFilterFaultType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 wsnt__InvalidFilterFaultType ** SOAP_FMAC4 soap_get_PointerTowsnt__InvalidFilterFaultType(struct soap*, wsnt__InvalidFilterFaultType **, const char*, const char*);

#ifndef soap_read_PointerTowsnt__InvalidFilterFaultType
#define soap_read_PointerTowsnt__InvalidFilterFaultType(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTowsnt__InvalidFilterFaultType(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerToxsd__NCName
#define SOAP_TYPE_PointerToxsd__NCName (194)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToxsd__NCName(struct soap*, std::string *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToxsd__NCName(struct soap*, const char *, int, std::string *const*, const char *);
SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_in_PointerToxsd__NCName(struct soap*, const char*, std::string **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToxsd__NCName(struct soap*, std::string *const*, const char*, const char*);

#ifndef soap_write_PointerToxsd__NCName
#define soap_write_PointerToxsd__NCName(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerToxsd__NCName(soap, data), 0) || soap_put_PointerToxsd__NCName(soap, data, "xsd:NCName", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_get_PointerToxsd__NCName(struct soap*, std::string **, const char*, const char*);

#ifndef soap_read_PointerToxsd__NCName
#define soap_read_PointerToxsd__NCName(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerToxsd__NCName(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTostd__vectorTemplateOf_wstop__TopicNamespaceType_Topic
#define SOAP_TYPE_PointerTostd__vectorTemplateOf_wstop__TopicNamespaceType_Topic (193)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTostd__vectorTemplateOf_wstop__TopicNamespaceType_Topic(struct soap*, std::vector<_wstop__TopicNamespaceType_Topic >*const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTostd__vectorTemplateOf_wstop__TopicNamespaceType_Topic(struct soap*, const char *, int, std::vector<_wstop__TopicNamespaceType_Topic >*const*, const char *);
SOAP_FMAC3 std::vector<_wstop__TopicNamespaceType_Topic >** SOAP_FMAC4 soap_in_PointerTostd__vectorTemplateOf_wstop__TopicNamespaceType_Topic(struct soap*, const char*, std::vector<_wstop__TopicNamespaceType_Topic >**, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTostd__vectorTemplateOf_wstop__TopicNamespaceType_Topic(struct soap*, std::vector<_wstop__TopicNamespaceType_Topic >*const*, const char*, const char*);

#ifndef soap_write_PointerTostd__vectorTemplateOf_wstop__TopicNamespaceType_Topic
#define soap_write_PointerTostd__vectorTemplateOf_wstop__TopicNamespaceType_Topic(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTostd__vectorTemplateOf_wstop__TopicNamespaceType_Topic(soap, data), 0) || soap_put_PointerTostd__vectorTemplateOf_wstop__TopicNamespaceType_Topic(soap, data, "", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 std::vector<_wstop__TopicNamespaceType_Topic >** SOAP_FMAC4 soap_get_PointerTostd__vectorTemplateOf_wstop__TopicNamespaceType_Topic(struct soap*, std::vector<_wstop__TopicNamespaceType_Topic >**, const char*, const char*);

#ifndef soap_read_PointerTostd__vectorTemplateOf_wstop__TopicNamespaceType_Topic
#define soap_read_PointerTostd__vectorTemplateOf_wstop__TopicNamespaceType_Topic(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTostd__vectorTemplateOf_wstop__TopicNamespaceType_Topic(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTowstop__ConcreteTopicExpression
#define SOAP_TYPE_PointerTowstop__ConcreteTopicExpression (191)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTowstop__ConcreteTopicExpression(struct soap*, std::string *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTowstop__ConcreteTopicExpression(struct soap*, const char *, int, std::string *const*, const char *);
SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_in_PointerTowstop__ConcreteTopicExpression(struct soap*, const char*, std::string **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTowstop__ConcreteTopicExpression(struct soap*, std::string *const*, const char*, const char*);

#ifndef soap_write_PointerTowstop__ConcreteTopicExpression
#define soap_write_PointerTowstop__ConcreteTopicExpression(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTowstop__ConcreteTopicExpression(soap, data), 0) || soap_put_PointerTowstop__ConcreteTopicExpression(soap, data, "wstop:ConcreteTopicExpression", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_get_PointerTowstop__ConcreteTopicExpression(struct soap*, std::string **, const char*, const char*);

#ifndef soap_read_PointerTowstop__ConcreteTopicExpression
#define soap_read_PointerTowstop__ConcreteTopicExpression(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTowstop__ConcreteTopicExpression(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerToxsd__QName
#define SOAP_TYPE_PointerToxsd__QName (190)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToxsd__QName(struct soap*, std::string *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToxsd__QName(struct soap*, const char *, int, std::string *const*, const char *);
SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_in_PointerToxsd__QName(struct soap*, const char*, std::string **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToxsd__QName(struct soap*, std::string *const*, const char*, const char*);

#ifndef soap_write_PointerToxsd__QName
#define soap_write_PointerToxsd__QName(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerToxsd__QName(soap, data), 0) || soap_put_PointerToxsd__QName(soap, data, "xsd:QName", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_get_PointerToxsd__QName(struct soap*, std::string **, const char*, const char*);

#ifndef soap_read_PointerToxsd__QName
#define soap_read_PointerToxsd__QName(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerToxsd__QName(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTowstop__TopicType
#define SOAP_TYPE_PointerTowstop__TopicType (188)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTowstop__TopicType(struct soap*, wstop__TopicType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTowstop__TopicType(struct soap*, const char *, int, wstop__TopicType *const*, const char *);
SOAP_FMAC3 wstop__TopicType ** SOAP_FMAC4 soap_in_PointerTowstop__TopicType(struct soap*, const char*, wstop__TopicType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTowstop__TopicType(struct soap*, wstop__TopicType *const*, const char*, const char*);

#ifndef soap_write_PointerTowstop__TopicType
#define soap_write_PointerTowstop__TopicType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTowstop__TopicType(soap, data), 0) || soap_put_PointerTowstop__TopicType(soap, data, "wstop:TopicType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 wstop__TopicType ** SOAP_FMAC4 soap_get_PointerTowstop__TopicType(struct soap*, wstop__TopicType **, const char*, const char*);

#ifndef soap_read_PointerTowstop__TopicType
#define soap_read_PointerTowstop__TopicType(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTowstop__TopicType(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTowstop__QueryExpressionType
#define SOAP_TYPE_PointerTowstop__QueryExpressionType (187)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTowstop__QueryExpressionType(struct soap*, wstop__QueryExpressionType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTowstop__QueryExpressionType(struct soap*, const char *, int, wstop__QueryExpressionType *const*, const char *);
SOAP_FMAC3 wstop__QueryExpressionType ** SOAP_FMAC4 soap_in_PointerTowstop__QueryExpressionType(struct soap*, const char*, wstop__QueryExpressionType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTowstop__QueryExpressionType(struct soap*, wstop__QueryExpressionType *const*, const char*, const char*);

#ifndef soap_write_PointerTowstop__QueryExpressionType
#define soap_write_PointerTowstop__QueryExpressionType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTowstop__QueryExpressionType(soap, data), 0) || soap_put_PointerTowstop__QueryExpressionType(soap, data, "wstop:QueryExpressionType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 wstop__QueryExpressionType ** SOAP_FMAC4 soap_get_PointerTowstop__QueryExpressionType(struct soap*, wstop__QueryExpressionType **, const char*, const char*);

#ifndef soap_read_PointerTowstop__QueryExpressionType
#define soap_read_PointerTowstop__QueryExpressionType(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTowstop__QueryExpressionType(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTowstop__Documentation
#define SOAP_TYPE_PointerTowstop__Documentation (184)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTowstop__Documentation(struct soap*, wstop__Documentation *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTowstop__Documentation(struct soap*, const char *, int, wstop__Documentation *const*, const char *);
SOAP_FMAC3 wstop__Documentation ** SOAP_FMAC4 soap_in_PointerTowstop__Documentation(struct soap*, const char*, wstop__Documentation **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTowstop__Documentation(struct soap*, wstop__Documentation *const*, const char*, const char*);

#ifndef soap_write_PointerTowstop__Documentation
#define soap_write_PointerTowstop__Documentation(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTowstop__Documentation(soap, data), 0) || soap_put_PointerTowstop__Documentation(soap, data, "wstop:Documentation", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 wstop__Documentation ** SOAP_FMAC4 soap_get_PointerTowstop__Documentation(struct soap*, wstop__Documentation **, const char*, const char*);

#ifndef soap_read_PointerTowstop__Documentation
#define soap_read_PointerTowstop__Documentation(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTowstop__Documentation(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerToxsd__nonNegativeInteger
#define SOAP_TYPE_PointerToxsd__nonNegativeInteger (183)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToxsd__nonNegativeInteger(struct soap*, std::string *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToxsd__nonNegativeInteger(struct soap*, const char *, int, std::string *const*, const char *);
SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_in_PointerToxsd__nonNegativeInteger(struct soap*, const char*, std::string **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToxsd__nonNegativeInteger(struct soap*, std::string *const*, const char*, const char*);

#ifndef soap_write_PointerToxsd__nonNegativeInteger
#define soap_write_PointerToxsd__nonNegativeInteger(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerToxsd__nonNegativeInteger(soap, data), 0) || soap_put_PointerToxsd__nonNegativeInteger(soap, data, "xsd:nonNegativeInteger", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_get_PointerToxsd__nonNegativeInteger(struct soap*, std::string **, const char*, const char*);

#ifndef soap_read_PointerToxsd__nonNegativeInteger
#define soap_read_PointerToxsd__nonNegativeInteger(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerToxsd__nonNegativeInteger(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTo_wsnt__Subscribe_SubscriptionPolicy
#define SOAP_TYPE_PointerTo_wsnt__Subscribe_SubscriptionPolicy (182)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_wsnt__Subscribe_SubscriptionPolicy(struct soap*, _wsnt__Subscribe_SubscriptionPolicy *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_wsnt__Subscribe_SubscriptionPolicy(struct soap*, const char *, int, _wsnt__Subscribe_SubscriptionPolicy *const*, const char *);
SOAP_FMAC3 _wsnt__Subscribe_SubscriptionPolicy ** SOAP_FMAC4 soap_in_PointerTo_wsnt__Subscribe_SubscriptionPolicy(struct soap*, const char*, _wsnt__Subscribe_SubscriptionPolicy **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_wsnt__Subscribe_SubscriptionPolicy(struct soap*, _wsnt__Subscribe_SubscriptionPolicy *const*, const char*, const char*);

#ifndef soap_write_PointerTo_wsnt__Subscribe_SubscriptionPolicy
#define soap_write_PointerTo_wsnt__Subscribe_SubscriptionPolicy(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTo_wsnt__Subscribe_SubscriptionPolicy(soap, data), 0) || soap_put_PointerTo_wsnt__Subscribe_SubscriptionPolicy(soap, data, "wsnt:Subscribe-SubscriptionPolicy", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _wsnt__Subscribe_SubscriptionPolicy ** SOAP_FMAC4 soap_get_PointerTo_wsnt__Subscribe_SubscriptionPolicy(struct soap*, _wsnt__Subscribe_SubscriptionPolicy **, const char*, const char*);

#ifndef soap_read_PointerTo_wsnt__Subscribe_SubscriptionPolicy
#define soap_read_PointerTo_wsnt__Subscribe_SubscriptionPolicy(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTo_wsnt__Subscribe_SubscriptionPolicy(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTotime
#define SOAP_TYPE_PointerTotime (180)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTotime(struct soap*, time_t *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTotime(struct soap*, const char *, int, time_t *const*, const char *);
SOAP_FMAC3 time_t ** SOAP_FMAC4 soap_in_PointerTotime(struct soap*, const char*, time_t **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTotime(struct soap*, time_t *const*, const char*, const char*);

#ifndef soap_write_PointerTotime
#define soap_write_PointerTotime(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTotime(soap, data), 0) || soap_put_PointerTotime(soap, data, "dateTime", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 time_t ** SOAP_FMAC4 soap_get_PointerTotime(struct soap*, time_t **, const char*, const char*);

#ifndef soap_read_PointerTotime
#define soap_read_PointerTotime(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTotime(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTowsnt__SubscriptionPolicyType
#define SOAP_TYPE_PointerTowsnt__SubscriptionPolicyType (179)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTowsnt__SubscriptionPolicyType(struct soap*, wsnt__SubscriptionPolicyType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTowsnt__SubscriptionPolicyType(struct soap*, const char *, int, wsnt__SubscriptionPolicyType *const*, const char *);
SOAP_FMAC3 wsnt__SubscriptionPolicyType ** SOAP_FMAC4 soap_in_PointerTowsnt__SubscriptionPolicyType(struct soap*, const char*, wsnt__SubscriptionPolicyType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTowsnt__SubscriptionPolicyType(struct soap*, wsnt__SubscriptionPolicyType *const*, const char*, const char*);

#ifndef soap_write_PointerTowsnt__SubscriptionPolicyType
#define soap_write_PointerTowsnt__SubscriptionPolicyType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTowsnt__SubscriptionPolicyType(soap, data), 0) || soap_put_PointerTowsnt__SubscriptionPolicyType(soap, data, "wsnt:SubscriptionPolicyType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 wsnt__SubscriptionPolicyType ** SOAP_FMAC4 soap_get_PointerTowsnt__SubscriptionPolicyType(struct soap*, wsnt__SubscriptionPolicyType **, const char*, const char*);

#ifndef soap_read_PointerTowsnt__SubscriptionPolicyType
#define soap_read_PointerTowsnt__SubscriptionPolicyType(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTowsnt__SubscriptionPolicyType(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTowsnt__TopicExpressionType
#define SOAP_TYPE_PointerTowsnt__TopicExpressionType (176)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTowsnt__TopicExpressionType(struct soap*, wsnt__TopicExpressionType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTowsnt__TopicExpressionType(struct soap*, const char *, int, wsnt__TopicExpressionType *const*, const char *);
SOAP_FMAC3 wsnt__TopicExpressionType ** SOAP_FMAC4 soap_in_PointerTowsnt__TopicExpressionType(struct soap*, const char*, wsnt__TopicExpressionType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTowsnt__TopicExpressionType(struct soap*, wsnt__TopicExpressionType *const*, const char*, const char*);

#ifndef soap_write_PointerTowsnt__TopicExpressionType
#define soap_write_PointerTowsnt__TopicExpressionType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTowsnt__TopicExpressionType(soap, data), 0) || soap_put_PointerTowsnt__TopicExpressionType(soap, data, "wsnt:TopicExpressionType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 wsnt__TopicExpressionType ** SOAP_FMAC4 soap_get_PointerTowsnt__TopicExpressionType(struct soap*, wsnt__TopicExpressionType **, const char*, const char*);

#ifndef soap_read_PointerTowsnt__TopicExpressionType
#define soap_read_PointerTowsnt__TopicExpressionType(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTowsnt__TopicExpressionType(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTo_wsrfbf__BaseFaultType_FaultCause
#define SOAP_TYPE_PointerTo_wsrfbf__BaseFaultType_FaultCause (175)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_wsrfbf__BaseFaultType_FaultCause(struct soap*, _wsrfbf__BaseFaultType_FaultCause *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_wsrfbf__BaseFaultType_FaultCause(struct soap*, const char *, int, _wsrfbf__BaseFaultType_FaultCause *const*, const char *);
SOAP_FMAC3 _wsrfbf__BaseFaultType_FaultCause ** SOAP_FMAC4 soap_in_PointerTo_wsrfbf__BaseFaultType_FaultCause(struct soap*, const char*, _wsrfbf__BaseFaultType_FaultCause **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_wsrfbf__BaseFaultType_FaultCause(struct soap*, _wsrfbf__BaseFaultType_FaultCause *const*, const char*, const char*);

#ifndef soap_write_PointerTo_wsrfbf__BaseFaultType_FaultCause
#define soap_write_PointerTo_wsrfbf__BaseFaultType_FaultCause(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTo_wsrfbf__BaseFaultType_FaultCause(soap, data), 0) || soap_put_PointerTo_wsrfbf__BaseFaultType_FaultCause(soap, data, "wsrfbf:BaseFaultType-FaultCause", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _wsrfbf__BaseFaultType_FaultCause ** SOAP_FMAC4 soap_get_PointerTo_wsrfbf__BaseFaultType_FaultCause(struct soap*, _wsrfbf__BaseFaultType_FaultCause **, const char*, const char*);

#ifndef soap_read_PointerTo_wsrfbf__BaseFaultType_FaultCause
#define soap_read_PointerTo_wsrfbf__BaseFaultType_FaultCause(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTo_wsrfbf__BaseFaultType_FaultCause(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTostd__vectorTemplateOf_wsrfbf__BaseFaultType_Description
#define SOAP_TYPE_PointerTostd__vectorTemplateOf_wsrfbf__BaseFaultType_Description (173)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTostd__vectorTemplateOf_wsrfbf__BaseFaultType_Description(struct soap*, std::vector<_wsrfbf__BaseFaultType_Description >*const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTostd__vectorTemplateOf_wsrfbf__BaseFaultType_Description(struct soap*, const char *, int, std::vector<_wsrfbf__BaseFaultType_Description >*const*, const char *);
SOAP_FMAC3 std::vector<_wsrfbf__BaseFaultType_Description >** SOAP_FMAC4 soap_in_PointerTostd__vectorTemplateOf_wsrfbf__BaseFaultType_Description(struct soap*, const char*, std::vector<_wsrfbf__BaseFaultType_Description >**, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTostd__vectorTemplateOf_wsrfbf__BaseFaultType_Description(struct soap*, std::vector<_wsrfbf__BaseFaultType_Description >*const*, const char*, const char*);

#ifndef soap_write_PointerTostd__vectorTemplateOf_wsrfbf__BaseFaultType_Description
#define soap_write_PointerTostd__vectorTemplateOf_wsrfbf__BaseFaultType_Description(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTostd__vectorTemplateOf_wsrfbf__BaseFaultType_Description(soap, data), 0) || soap_put_PointerTostd__vectorTemplateOf_wsrfbf__BaseFaultType_Description(soap, data, "", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 std::vector<_wsrfbf__BaseFaultType_Description >** SOAP_FMAC4 soap_get_PointerTostd__vectorTemplateOf_wsrfbf__BaseFaultType_Description(struct soap*, std::vector<_wsrfbf__BaseFaultType_Description >**, const char*, const char*);

#ifndef soap_read_PointerTostd__vectorTemplateOf_wsrfbf__BaseFaultType_Description
#define soap_read_PointerTostd__vectorTemplateOf_wsrfbf__BaseFaultType_Description(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTostd__vectorTemplateOf_wsrfbf__BaseFaultType_Description(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTo_xml__lang
#define SOAP_TYPE_PointerTo_xml__lang (171)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_xml__lang(struct soap*, std::string *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_xml__lang(struct soap*, const char *, int, std::string *const*, const char *);
SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_in_PointerTo_xml__lang(struct soap*, const char*, std::string **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_xml__lang(struct soap*, std::string *const*, const char*, const char*);

#ifndef soap_write_PointerTo_xml__lang
#define soap_write_PointerTo_xml__lang(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTo_xml__lang(soap, data), 0) || soap_put_PointerTo_xml__lang(soap, data, "xml:lang", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_get_PointerTo_xml__lang(struct soap*, std::string **, const char*, const char*);

#ifndef soap_read_PointerTo_xml__lang
#define soap_read_PointerTo_xml__lang(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTo_xml__lang(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTo_wsrfbf__BaseFaultType_ErrorCode
#define SOAP_TYPE_PointerTo_wsrfbf__BaseFaultType_ErrorCode (169)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_wsrfbf__BaseFaultType_ErrorCode(struct soap*, _wsrfbf__BaseFaultType_ErrorCode *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_wsrfbf__BaseFaultType_ErrorCode(struct soap*, const char *, int, _wsrfbf__BaseFaultType_ErrorCode *const*, const char *);
SOAP_FMAC3 _wsrfbf__BaseFaultType_ErrorCode ** SOAP_FMAC4 soap_in_PointerTo_wsrfbf__BaseFaultType_ErrorCode(struct soap*, const char*, _wsrfbf__BaseFaultType_ErrorCode **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_wsrfbf__BaseFaultType_ErrorCode(struct soap*, _wsrfbf__BaseFaultType_ErrorCode *const*, const char*, const char*);

#ifndef soap_write_PointerTo_wsrfbf__BaseFaultType_ErrorCode
#define soap_write_PointerTo_wsrfbf__BaseFaultType_ErrorCode(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTo_wsrfbf__BaseFaultType_ErrorCode(soap, data), 0) || soap_put_PointerTo_wsrfbf__BaseFaultType_ErrorCode(soap, data, "wsrfbf:BaseFaultType-ErrorCode", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _wsrfbf__BaseFaultType_ErrorCode ** SOAP_FMAC4 soap_get_PointerTo_wsrfbf__BaseFaultType_ErrorCode(struct soap*, _wsrfbf__BaseFaultType_ErrorCode **, const char*, const char*);

#ifndef soap_read_PointerTo_wsrfbf__BaseFaultType_ErrorCode
#define soap_read_PointerTo_wsrfbf__BaseFaultType_ErrorCode(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTo_wsrfbf__BaseFaultType_ErrorCode(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTowsa5__EndpointReferenceType
#define SOAP_TYPE_PointerTowsa5__EndpointReferenceType (167)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTowsa5__EndpointReferenceType(struct soap*, struct wsa5__EndpointReferenceType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTowsa5__EndpointReferenceType(struct soap*, const char *, int, struct wsa5__EndpointReferenceType *const*, const char *);
SOAP_FMAC3 struct wsa5__EndpointReferenceType ** SOAP_FMAC4 soap_in_PointerTowsa5__EndpointReferenceType(struct soap*, const char*, struct wsa5__EndpointReferenceType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTowsa5__EndpointReferenceType(struct soap*, struct wsa5__EndpointReferenceType *const*, const char*, const char*);

#ifndef soap_write_PointerTowsa5__EndpointReferenceType
#define soap_write_PointerTowsa5__EndpointReferenceType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTowsa5__EndpointReferenceType(soap, data), 0) || soap_put_PointerTowsa5__EndpointReferenceType(soap, data, "wsa5:EndpointReferenceType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct wsa5__EndpointReferenceType ** SOAP_FMAC4 soap_get_PointerTowsa5__EndpointReferenceType(struct soap*, struct wsa5__EndpointReferenceType **, const char*, const char*);

#ifndef soap_read_PointerTowsa5__EndpointReferenceType
#define soap_read_PointerTowsa5__EndpointReferenceType(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTowsa5__EndpointReferenceType(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTowstop__TopicSetType
#define SOAP_TYPE_PointerTowstop__TopicSetType (166)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTowstop__TopicSetType(struct soap*, wstop__TopicSetType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTowstop__TopicSetType(struct soap*, const char *, int, wstop__TopicSetType *const*, const char *);
SOAP_FMAC3 wstop__TopicSetType ** SOAP_FMAC4 soap_in_PointerTowstop__TopicSetType(struct soap*, const char*, wstop__TopicSetType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTowstop__TopicSetType(struct soap*, wstop__TopicSetType *const*, const char*, const char*);

#ifndef soap_write_PointerTowstop__TopicSetType
#define soap_write_PointerTowstop__TopicSetType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTowstop__TopicSetType(soap, data), 0) || soap_put_PointerTowstop__TopicSetType(soap, data, "wstop:TopicSetType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 wstop__TopicSetType ** SOAP_FMAC4 soap_get_PointerTowstop__TopicSetType(struct soap*, wstop__TopicSetType **, const char*, const char*);

#ifndef soap_read_PointerTowstop__TopicSetType
#define soap_read_PointerTowstop__TopicSetType(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTowstop__TopicSetType(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTowsnt__NotificationMessageHolderType
#define SOAP_TYPE_PointerTowsnt__NotificationMessageHolderType (163)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTowsnt__NotificationMessageHolderType(struct soap*, wsnt__NotificationMessageHolderType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTowsnt__NotificationMessageHolderType(struct soap*, const char *, int, wsnt__NotificationMessageHolderType *const*, const char *);
SOAP_FMAC3 wsnt__NotificationMessageHolderType ** SOAP_FMAC4 soap_in_PointerTowsnt__NotificationMessageHolderType(struct soap*, const char*, wsnt__NotificationMessageHolderType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTowsnt__NotificationMessageHolderType(struct soap*, wsnt__NotificationMessageHolderType *const*, const char*, const char*);

#ifndef soap_write_PointerTowsnt__NotificationMessageHolderType
#define soap_write_PointerTowsnt__NotificationMessageHolderType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTowsnt__NotificationMessageHolderType(soap, data), 0) || soap_put_PointerTowsnt__NotificationMessageHolderType(soap, data, "wsnt:NotificationMessageHolderType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 wsnt__NotificationMessageHolderType ** SOAP_FMAC4 soap_get_PointerTowsnt__NotificationMessageHolderType(struct soap*, wsnt__NotificationMessageHolderType **, const char*, const char*);

#ifndef soap_read_PointerTowsnt__NotificationMessageHolderType
#define soap_read_PointerTowsnt__NotificationMessageHolderType(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTowsnt__NotificationMessageHolderType(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTo_eventws__CreatePullPointSubscription_SubscriptionPolicy
#define SOAP_TYPE_PointerTo_eventws__CreatePullPointSubscription_SubscriptionPolicy (162)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_eventws__CreatePullPointSubscription_SubscriptionPolicy(struct soap*, _eventws__CreatePullPointSubscription_SubscriptionPolicy *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_eventws__CreatePullPointSubscription_SubscriptionPolicy(struct soap*, const char *, int, _eventws__CreatePullPointSubscription_SubscriptionPolicy *const*, const char *);
SOAP_FMAC3 _eventws__CreatePullPointSubscription_SubscriptionPolicy ** SOAP_FMAC4 soap_in_PointerTo_eventws__CreatePullPointSubscription_SubscriptionPolicy(struct soap*, const char*, _eventws__CreatePullPointSubscription_SubscriptionPolicy **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_eventws__CreatePullPointSubscription_SubscriptionPolicy(struct soap*, _eventws__CreatePullPointSubscription_SubscriptionPolicy *const*, const char*, const char*);

#ifndef soap_write_PointerTo_eventws__CreatePullPointSubscription_SubscriptionPolicy
#define soap_write_PointerTo_eventws__CreatePullPointSubscription_SubscriptionPolicy(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTo_eventws__CreatePullPointSubscription_SubscriptionPolicy(soap, data), 0) || soap_put_PointerTo_eventws__CreatePullPointSubscription_SubscriptionPolicy(soap, data, "eventws:CreatePullPointSubscription-SubscriptionPolicy", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _eventws__CreatePullPointSubscription_SubscriptionPolicy ** SOAP_FMAC4 soap_get_PointerTo_eventws__CreatePullPointSubscription_SubscriptionPolicy(struct soap*, _eventws__CreatePullPointSubscription_SubscriptionPolicy **, const char*, const char*);

#ifndef soap_read_PointerTo_eventws__CreatePullPointSubscription_SubscriptionPolicy
#define soap_read_PointerTo_eventws__CreatePullPointSubscription_SubscriptionPolicy(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTo_eventws__CreatePullPointSubscription_SubscriptionPolicy(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTowsnt__AbsoluteOrRelativeTimeType
#define SOAP_TYPE_PointerTowsnt__AbsoluteOrRelativeTimeType (160)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTowsnt__AbsoluteOrRelativeTimeType(struct soap*, std::string *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTowsnt__AbsoluteOrRelativeTimeType(struct soap*, const char *, int, std::string *const*, const char *);
SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_in_PointerTowsnt__AbsoluteOrRelativeTimeType(struct soap*, const char*, std::string **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTowsnt__AbsoluteOrRelativeTimeType(struct soap*, std::string *const*, const char*, const char*);

#ifndef soap_write_PointerTowsnt__AbsoluteOrRelativeTimeType
#define soap_write_PointerTowsnt__AbsoluteOrRelativeTimeType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTowsnt__AbsoluteOrRelativeTimeType(soap, data), 0) || soap_put_PointerTowsnt__AbsoluteOrRelativeTimeType(soap, data, "wsnt:AbsoluteOrRelativeTimeType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_get_PointerTowsnt__AbsoluteOrRelativeTimeType(struct soap*, std::string **, const char*, const char*);

#ifndef soap_read_PointerTowsnt__AbsoluteOrRelativeTimeType
#define soap_read_PointerTowsnt__AbsoluteOrRelativeTimeType(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTowsnt__AbsoluteOrRelativeTimeType(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTowsnt__FilterType
#define SOAP_TYPE_PointerTowsnt__FilterType (159)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTowsnt__FilterType(struct soap*, wsnt__FilterType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTowsnt__FilterType(struct soap*, const char *, int, wsnt__FilterType *const*, const char *);
SOAP_FMAC3 wsnt__FilterType ** SOAP_FMAC4 soap_in_PointerTowsnt__FilterType(struct soap*, const char*, wsnt__FilterType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTowsnt__FilterType(struct soap*, wsnt__FilterType *const*, const char*, const char*);

#ifndef soap_write_PointerTowsnt__FilterType
#define soap_write_PointerTowsnt__FilterType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTowsnt__FilterType(soap, data), 0) || soap_put_PointerTowsnt__FilterType(soap, data, "wsnt:FilterType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 wsnt__FilterType ** SOAP_FMAC4 soap_get_PointerTowsnt__FilterType(struct soap*, wsnt__FilterType **, const char*, const char*);

#ifndef soap_read_PointerTowsnt__FilterType
#define soap_read_PointerTowsnt__FilterType(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTowsnt__FilterType(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerToeventws__Capabilities
#define SOAP_TYPE_PointerToeventws__Capabilities (158)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToeventws__Capabilities(struct soap*, eventws__Capabilities *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToeventws__Capabilities(struct soap*, const char *, int, eventws__Capabilities *const*, const char *);
SOAP_FMAC3 eventws__Capabilities ** SOAP_FMAC4 soap_in_PointerToeventws__Capabilities(struct soap*, const char*, eventws__Capabilities **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToeventws__Capabilities(struct soap*, eventws__Capabilities *const*, const char*, const char*);

#ifndef soap_write_PointerToeventws__Capabilities
#define soap_write_PointerToeventws__Capabilities(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerToeventws__Capabilities(soap, data), 0) || soap_put_PointerToeventws__Capabilities(soap, data, "eventws:Capabilities", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 eventws__Capabilities ** SOAP_FMAC4 soap_get_PointerToeventws__Capabilities(struct soap*, eventws__Capabilities **, const char*, const char*);

#ifndef soap_read_PointerToeventws__Capabilities
#define soap_read_PointerToeventws__Capabilities(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerToeventws__Capabilities(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTobool
#define SOAP_TYPE_PointerTobool (157)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTobool(struct soap*, bool *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTobool(struct soap*, const char *, int, bool *const*, const char *);
SOAP_FMAC3 bool ** SOAP_FMAC4 soap_in_PointerTobool(struct soap*, const char*, bool **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTobool(struct soap*, bool *const*, const char*, const char*);

#ifndef soap_write_PointerTobool
#define soap_write_PointerTobool(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTobool(soap, data), 0) || soap_put_PointerTobool(soap, data, "boolean", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 bool ** SOAP_FMAC4 soap_get_PointerTobool(struct soap*, bool **, const char*, const char*);

#ifndef soap_read_PointerTobool
#define soap_read_PointerTobool(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTobool(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_PointerToSOAP_ENV__Reason
#define SOAP_TYPE_PointerToSOAP_ENV__Reason (49)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Reason(struct soap*, const char *, int, struct SOAP_ENV__Reason *const*, const char *);
SOAP_FMAC3 struct SOAP_ENV__Reason ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Reason(struct soap*, const char*, struct SOAP_ENV__Reason **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason *const*, const char*, const char*);

#ifndef soap_write_PointerToSOAP_ENV__Reason
#define soap_write_PointerToSOAP_ENV__Reason(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerToSOAP_ENV__Reason(soap, data), 0) || soap_put_PointerToSOAP_ENV__Reason(soap, data, "SOAP-ENV:Reason", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct SOAP_ENV__Reason ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason **, const char*, const char*);

#ifndef soap_read_PointerToSOAP_ENV__Reason
#define soap_read_PointerToSOAP_ENV__Reason(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerToSOAP_ENV__Reason(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_PointerToSOAP_ENV__Code
#define SOAP_TYPE_PointerToSOAP_ENV__Code (47)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Code(struct soap*, const char *, int, struct SOAP_ENV__Code *const*, const char *);
SOAP_FMAC3 struct SOAP_ENV__Code ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Code(struct soap*, const char*, struct SOAP_ENV__Code **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code *const*, const char*, const char*);

#ifndef soap_write_PointerToSOAP_ENV__Code
#define soap_write_PointerToSOAP_ENV__Code(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerToSOAP_ENV__Code(soap, data), 0) || soap_put_PointerToSOAP_ENV__Code(soap, data, "SOAP-ENV:Code", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct SOAP_ENV__Code ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code **, const char*, const char*);

#ifndef soap_read_PointerToSOAP_ENV__Code
#define soap_read_PointerToSOAP_ENV__Code(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerToSOAP_ENV__Code(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_PointerToSOAP_ENV__Detail
#define SOAP_TYPE_PointerToSOAP_ENV__Detail (45)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Detail(struct soap*, const char *, int, struct SOAP_ENV__Detail *const*, const char *);
SOAP_FMAC3 struct SOAP_ENV__Detail ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Detail(struct soap*, const char*, struct SOAP_ENV__Detail **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail *const*, const char*, const char*);

#ifndef soap_write_PointerToSOAP_ENV__Detail
#define soap_write_PointerToSOAP_ENV__Detail(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerToSOAP_ENV__Detail(soap, data), 0) || soap_put_PointerToSOAP_ENV__Detail(soap, data, "SOAP-ENV:Detail", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct SOAP_ENV__Detail ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail **, const char*, const char*);

#ifndef soap_read_PointerToSOAP_ENV__Detail
#define soap_read_PointerToSOAP_ENV__Detail(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerToSOAP_ENV__Detail(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#endif

#ifndef SOAP_TYPE_PointerTochan__ChannelInstanceType
#define SOAP_TYPE_PointerTochan__ChannelInstanceType (43)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTochan__ChannelInstanceType(struct soap*, struct chan__ChannelInstanceType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTochan__ChannelInstanceType(struct soap*, const char *, int, struct chan__ChannelInstanceType *const*, const char *);
SOAP_FMAC3 struct chan__ChannelInstanceType ** SOAP_FMAC4 soap_in_PointerTochan__ChannelInstanceType(struct soap*, const char*, struct chan__ChannelInstanceType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTochan__ChannelInstanceType(struct soap*, struct chan__ChannelInstanceType *const*, const char*, const char*);

#ifndef soap_write_PointerTochan__ChannelInstanceType
#define soap_write_PointerTochan__ChannelInstanceType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTochan__ChannelInstanceType(soap, data), 0) || soap_put_PointerTochan__ChannelInstanceType(soap, data, "chan:ChannelInstanceType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct chan__ChannelInstanceType ** SOAP_FMAC4 soap_get_PointerTochan__ChannelInstanceType(struct soap*, struct chan__ChannelInstanceType **, const char*, const char*);

#ifndef soap_read_PointerTochan__ChannelInstanceType
#define soap_read_PointerTochan__ChannelInstanceType(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTochan__ChannelInstanceType(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTo_wsa5__FaultTo
#define SOAP_TYPE_PointerTo_wsa5__FaultTo (42)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_wsa5__FaultTo(struct soap*, struct wsa5__EndpointReferenceType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_wsa5__FaultTo(struct soap*, const char *, int, struct wsa5__EndpointReferenceType *const*, const char *);
SOAP_FMAC3 struct wsa5__EndpointReferenceType ** SOAP_FMAC4 soap_in_PointerTo_wsa5__FaultTo(struct soap*, const char*, struct wsa5__EndpointReferenceType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_wsa5__FaultTo(struct soap*, struct wsa5__EndpointReferenceType *const*, const char*, const char*);

#ifndef soap_write_PointerTo_wsa5__FaultTo
#define soap_write_PointerTo_wsa5__FaultTo(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTo_wsa5__FaultTo(soap, data), 0) || soap_put_PointerTo_wsa5__FaultTo(soap, data, "wsa5:FaultTo", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct wsa5__EndpointReferenceType ** SOAP_FMAC4 soap_get_PointerTo_wsa5__FaultTo(struct soap*, struct wsa5__EndpointReferenceType **, const char*, const char*);

#ifndef soap_read_PointerTo_wsa5__FaultTo
#define soap_read_PointerTo_wsa5__FaultTo(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTo_wsa5__FaultTo(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTo_wsa5__ReplyTo
#define SOAP_TYPE_PointerTo_wsa5__ReplyTo (41)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_wsa5__ReplyTo(struct soap*, struct wsa5__EndpointReferenceType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_wsa5__ReplyTo(struct soap*, const char *, int, struct wsa5__EndpointReferenceType *const*, const char *);
SOAP_FMAC3 struct wsa5__EndpointReferenceType ** SOAP_FMAC4 soap_in_PointerTo_wsa5__ReplyTo(struct soap*, const char*, struct wsa5__EndpointReferenceType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_wsa5__ReplyTo(struct soap*, struct wsa5__EndpointReferenceType *const*, const char*, const char*);

#ifndef soap_write_PointerTo_wsa5__ReplyTo
#define soap_write_PointerTo_wsa5__ReplyTo(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTo_wsa5__ReplyTo(soap, data), 0) || soap_put_PointerTo_wsa5__ReplyTo(soap, data, "wsa5:ReplyTo", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct wsa5__EndpointReferenceType ** SOAP_FMAC4 soap_get_PointerTo_wsa5__ReplyTo(struct soap*, struct wsa5__EndpointReferenceType **, const char*, const char*);

#ifndef soap_read_PointerTo_wsa5__ReplyTo
#define soap_read_PointerTo_wsa5__ReplyTo(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTo_wsa5__ReplyTo(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTo_wsa5__From
#define SOAP_TYPE_PointerTo_wsa5__From (40)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_wsa5__From(struct soap*, struct wsa5__EndpointReferenceType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_wsa5__From(struct soap*, const char *, int, struct wsa5__EndpointReferenceType *const*, const char *);
SOAP_FMAC3 struct wsa5__EndpointReferenceType ** SOAP_FMAC4 soap_in_PointerTo_wsa5__From(struct soap*, const char*, struct wsa5__EndpointReferenceType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_wsa5__From(struct soap*, struct wsa5__EndpointReferenceType *const*, const char*, const char*);

#ifndef soap_write_PointerTo_wsa5__From
#define soap_write_PointerTo_wsa5__From(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTo_wsa5__From(soap, data), 0) || soap_put_PointerTo_wsa5__From(soap, data, "wsa5:From", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct wsa5__EndpointReferenceType ** SOAP_FMAC4 soap_get_PointerTo_wsa5__From(struct soap*, struct wsa5__EndpointReferenceType **, const char*, const char*);

#ifndef soap_read_PointerTo_wsa5__From
#define soap_read_PointerTo_wsa5__From(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTo_wsa5__From(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTo_wsa5__RelatesTo
#define SOAP_TYPE_PointerTo_wsa5__RelatesTo (39)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_wsa5__RelatesTo(struct soap*, struct wsa5__RelatesToType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_wsa5__RelatesTo(struct soap*, const char *, int, struct wsa5__RelatesToType *const*, const char *);
SOAP_FMAC3 struct wsa5__RelatesToType ** SOAP_FMAC4 soap_in_PointerTo_wsa5__RelatesTo(struct soap*, const char*, struct wsa5__RelatesToType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_wsa5__RelatesTo(struct soap*, struct wsa5__RelatesToType *const*, const char*, const char*);

#ifndef soap_write_PointerTo_wsa5__RelatesTo
#define soap_write_PointerTo_wsa5__RelatesTo(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTo_wsa5__RelatesTo(soap, data), 0) || soap_put_PointerTo_wsa5__RelatesTo(soap, data, "wsa5:RelatesTo", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct wsa5__RelatesToType ** SOAP_FMAC4 soap_get_PointerTo_wsa5__RelatesTo(struct soap*, struct wsa5__RelatesToType **, const char*, const char*);

#ifndef soap_read_PointerTo_wsa5__RelatesTo
#define soap_read_PointerTo_wsa5__RelatesTo(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTo_wsa5__RelatesTo(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


/* _wsa5__ProblemIRI is a typedef element/attribute synonym for string */

#ifndef SOAP_TYPE__wsa5__ProblemIRI
#define SOAP_TYPE__wsa5__ProblemIRI (34)
#endif

#define soap_default__wsa5__ProblemIRI(soap, a) soap_default_string(soap, a)


#define soap_serialize__wsa5__ProblemIRI soap_serialize_string


#define soap_out__wsa5__ProblemIRI soap_out_string


#define soap_in__wsa5__ProblemIRI soap_in_string


#define soap_put__wsa5__ProblemIRI soap_put_string


#define soap_get__wsa5__ProblemIRI soap_get_string


#ifndef SOAP_TYPE__wsa5__ProblemHeaderQName
#define SOAP_TYPE__wsa5__ProblemHeaderQName (33)
#endif

#define soap_default__wsa5__ProblemHeaderQName(soap, a) soap_default_string(soap, a)

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize__wsa5__ProblemHeaderQName(struct soap*, char *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out__wsa5__ProblemHeaderQName(struct soap*, const char*, int, char*const*, const char*);
SOAP_FMAC3 char * * SOAP_FMAC4 soap_in__wsa5__ProblemHeaderQName(struct soap*, const char*, char **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put__wsa5__ProblemHeaderQName(struct soap*, char *const*, const char*, const char*);

#ifndef soap_write__wsa5__ProblemHeaderQName
#define soap_write__wsa5__ProblemHeaderQName(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize__wsa5__ProblemHeaderQName(soap, data), 0) || soap_put__wsa5__ProblemHeaderQName(soap, data, "byte", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 char ** SOAP_FMAC4 soap_get__wsa5__ProblemHeaderQName(struct soap*, char **, const char*, const char*);

#ifndef soap_read__wsa5__ProblemHeaderQName
#define soap_read__wsa5__ProblemHeaderQName(soap, data) ( soap_begin_recv(soap) || !soap_get__wsa5__ProblemHeaderQName(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


/* _wsa5__Action is a typedef element/attribute synonym for string */

#ifndef SOAP_TYPE__wsa5__Action
#define SOAP_TYPE__wsa5__Action (30)
#endif

#define soap_default__wsa5__Action(soap, a) soap_default_string(soap, a)


#define soap_serialize__wsa5__Action soap_serialize_string


#define soap_out__wsa5__Action soap_out_string


#define soap_in__wsa5__Action soap_in_string


#define soap_put__wsa5__Action soap_put_string


#define soap_get__wsa5__Action soap_get_string


/* _wsa5__To is a typedef element/attribute synonym for string */

#ifndef SOAP_TYPE__wsa5__To
#define SOAP_TYPE__wsa5__To (29)
#endif

#define soap_default__wsa5__To(soap, a) soap_default_string(soap, a)


#define soap_serialize__wsa5__To soap_serialize_string


#define soap_out__wsa5__To soap_out_string


#define soap_in__wsa5__To soap_in_string


#define soap_put__wsa5__To soap_put_string


#define soap_get__wsa5__To soap_get_string


/* _wsa5__MessageID is a typedef element/attribute synonym for string */

#ifndef SOAP_TYPE__wsa5__MessageID
#define SOAP_TYPE__wsa5__MessageID (24)
#endif

#define soap_default__wsa5__MessageID(soap, a) soap_default_string(soap, a)


#define soap_serialize__wsa5__MessageID soap_serialize_string


#define soap_out__wsa5__MessageID soap_out_string


#define soap_in__wsa5__MessageID soap_in_string


#define soap_put__wsa5__MessageID soap_put_string


#define soap_get__wsa5__MessageID soap_get_string


#ifndef SOAP_TYPE_PointerToint
#define SOAP_TYPE_PointerToint (20)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToint(struct soap*, int *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToint(struct soap*, const char *, int, int *const*, const char *);
SOAP_FMAC3 int ** SOAP_FMAC4 soap_in_PointerToint(struct soap*, const char*, int **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToint(struct soap*, int *const*, const char*, const char*);

#ifndef soap_write_PointerToint
#define soap_write_PointerToint(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerToint(soap, data), 0) || soap_put_PointerToint(soap, data, "int", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 int ** SOAP_FMAC4 soap_get_PointerToint(struct soap*, int **, const char*, const char*);

#ifndef soap_read_PointerToint
#define soap_read_PointerToint(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerToint(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTowsa5__MetadataType
#define SOAP_TYPE_PointerTowsa5__MetadataType (18)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTowsa5__MetadataType(struct soap*, struct wsa5__MetadataType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTowsa5__MetadataType(struct soap*, const char *, int, struct wsa5__MetadataType *const*, const char *);
SOAP_FMAC3 struct wsa5__MetadataType ** SOAP_FMAC4 soap_in_PointerTowsa5__MetadataType(struct soap*, const char*, struct wsa5__MetadataType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTowsa5__MetadataType(struct soap*, struct wsa5__MetadataType *const*, const char*, const char*);

#ifndef soap_write_PointerTowsa5__MetadataType
#define soap_write_PointerTowsa5__MetadataType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTowsa5__MetadataType(soap, data), 0) || soap_put_PointerTowsa5__MetadataType(soap, data, "wsa5:MetadataType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct wsa5__MetadataType ** SOAP_FMAC4 soap_get_PointerTowsa5__MetadataType(struct soap*, struct wsa5__MetadataType **, const char*, const char*);

#ifndef soap_read_PointerTowsa5__MetadataType
#define soap_read_PointerTowsa5__MetadataType(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTowsa5__MetadataType(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTowsa5__ReferenceParametersType
#define SOAP_TYPE_PointerTowsa5__ReferenceParametersType (17)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTowsa5__ReferenceParametersType(struct soap*, struct wsa5__ReferenceParametersType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTowsa5__ReferenceParametersType(struct soap*, const char *, int, struct wsa5__ReferenceParametersType *const*, const char *);
SOAP_FMAC3 struct wsa5__ReferenceParametersType ** SOAP_FMAC4 soap_in_PointerTowsa5__ReferenceParametersType(struct soap*, const char*, struct wsa5__ReferenceParametersType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTowsa5__ReferenceParametersType(struct soap*, struct wsa5__ReferenceParametersType *const*, const char*, const char*);

#ifndef soap_write_PointerTowsa5__ReferenceParametersType
#define soap_write_PointerTowsa5__ReferenceParametersType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTowsa5__ReferenceParametersType(soap, data), 0) || soap_put_PointerTowsa5__ReferenceParametersType(soap, data, "wsa5:ReferenceParametersType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct wsa5__ReferenceParametersType ** SOAP_FMAC4 soap_get_PointerTowsa5__ReferenceParametersType(struct soap*, struct wsa5__ReferenceParametersType **, const char*, const char*);

#ifndef soap_read_PointerTowsa5__ReferenceParametersType
#define soap_read_PointerTowsa5__ReferenceParametersType(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTowsa5__ReferenceParametersType(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_wsa5__FaultCodesOpenEnumType
#define SOAP_TYPE_wsa5__FaultCodesOpenEnumType (14)
#endif

#define soap_default_wsa5__FaultCodesOpenEnumType(soap, a) soap_default_string(soap, a)

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_wsa5__FaultCodesOpenEnumType(struct soap*, char *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_wsa5__FaultCodesOpenEnumType(struct soap*, const char*, int, char*const*, const char*);
SOAP_FMAC3 char * * SOAP_FMAC4 soap_in_wsa5__FaultCodesOpenEnumType(struct soap*, const char*, char **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_wsa5__FaultCodesOpenEnumType(struct soap*, char *const*, const char*, const char*);

#ifndef soap_write_wsa5__FaultCodesOpenEnumType
#define soap_write_wsa5__FaultCodesOpenEnumType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_wsa5__FaultCodesOpenEnumType(soap, data), 0) || soap_put_wsa5__FaultCodesOpenEnumType(soap, data, "byte", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 char ** SOAP_FMAC4 soap_get_wsa5__FaultCodesOpenEnumType(struct soap*, char **, const char*, const char*);

#ifndef soap_read_wsa5__FaultCodesOpenEnumType
#define soap_read_wsa5__FaultCodesOpenEnumType(soap, data) ( soap_begin_recv(soap) || !soap_get_wsa5__FaultCodesOpenEnumType(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_wsa5__RelationshipTypeOpenEnum
#define SOAP_TYPE_wsa5__RelationshipTypeOpenEnum (13)
#endif

#define soap_default_wsa5__RelationshipTypeOpenEnum(soap, a) soap_default_string(soap, a)

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_wsa5__RelationshipTypeOpenEnum(struct soap*, char *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_wsa5__RelationshipTypeOpenEnum(struct soap*, const char*, int, char*const*, const char*);
SOAP_FMAC3 char * * SOAP_FMAC4 soap_in_wsa5__RelationshipTypeOpenEnum(struct soap*, const char*, char **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_wsa5__RelationshipTypeOpenEnum(struct soap*, char *const*, const char*, const char*);

#ifndef soap_write_wsa5__RelationshipTypeOpenEnum
#define soap_write_wsa5__RelationshipTypeOpenEnum(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_wsa5__RelationshipTypeOpenEnum(soap, data), 0) || soap_put_wsa5__RelationshipTypeOpenEnum(soap, data, "byte", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 char ** SOAP_FMAC4 soap_get_wsa5__RelationshipTypeOpenEnum(struct soap*, char **, const char*, const char*);

#ifndef soap_read_wsa5__RelationshipTypeOpenEnum
#define soap_read_wsa5__RelationshipTypeOpenEnum(soap, data) ( soap_begin_recv(soap) || !soap_get_wsa5__RelationshipTypeOpenEnum(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE__QName
#define SOAP_TYPE__QName (5)
#endif

#define soap_default__QName(soap, a) soap_default_string(soap, a)

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize__QName(struct soap*, char *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out__QName(struct soap*, const char*, int, char*const*, const char*);
SOAP_FMAC3 char * * SOAP_FMAC4 soap_in__QName(struct soap*, const char*, char **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put__QName(struct soap*, char *const*, const char*, const char*);

#ifndef soap_write__QName
#define soap_write__QName(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize__QName(soap, data), 0) || soap_put__QName(soap, data, "byte", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 char ** SOAP_FMAC4 soap_get__QName(struct soap*, char **, const char*, const char*);

#ifndef soap_read__QName
#define soap_read__QName(soap, data) ( soap_begin_recv(soap) || !soap_get__QName(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_string
#define SOAP_TYPE_string (4)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_string(struct soap*, char **);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_string(struct soap*, char *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_string(struct soap*, const char*, int, char*const*, const char*);
SOAP_FMAC3 char * * SOAP_FMAC4 soap_in_string(struct soap*, const char*, char **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_string(struct soap*, char *const*, const char*, const char*);

#ifndef soap_write_string
#define soap_write_string(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_string(soap, data), 0) || soap_put_string(soap, data, "byte", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 char ** SOAP_FMAC4 soap_get_string(struct soap*, char **, const char*, const char*);

#ifndef soap_read_string
#define soap_read_string(soap, data) ( soap_begin_recv(soap) || !soap_get_string(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_std__vectorTemplateOf_wstop__TopicNamespaceType_Topic
#define SOAP_TYPE_std__vectorTemplateOf_wstop__TopicNamespaceType_Topic (192)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOf_wstop__TopicNamespaceType_Topic(struct soap*, std::vector<_wstop__TopicNamespaceType_Topic >*);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOf_wstop__TopicNamespaceType_Topic(struct soap*, const std::vector<_wstop__TopicNamespaceType_Topic >*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOf_wstop__TopicNamespaceType_Topic(struct soap*, const char*, int, const std::vector<_wstop__TopicNamespaceType_Topic >*, const char*);
SOAP_FMAC3 std::vector<_wstop__TopicNamespaceType_Topic >* SOAP_FMAC4 soap_in_std__vectorTemplateOf_wstop__TopicNamespaceType_Topic(struct soap*, const char*, std::vector<_wstop__TopicNamespaceType_Topic >*, const char*);
SOAP_FMAC1 std::vector<_wstop__TopicNamespaceType_Topic > * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOf_wstop__TopicNamespaceType_Topic(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<_wstop__TopicNamespaceType_Topic > * soap_new_std__vectorTemplateOf_wstop__TopicNamespaceType_Topic(struct soap *soap, int n = -1) { return soap_instantiate_std__vectorTemplateOf_wstop__TopicNamespaceType_Topic(soap, n, NULL, NULL, NULL); }

inline void soap_delete_std__vectorTemplateOf_wstop__TopicNamespaceType_Topic(struct soap *soap, std::vector<_wstop__TopicNamespaceType_Topic >*p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__vectorTemplateOf_wstop__TopicNamespaceType_Topic(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTowstop__TopicType
#define SOAP_TYPE_std__vectorTemplateOfPointerTowstop__TopicType (189)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTowstop__TopicType(struct soap*, std::vector<wstop__TopicType * >*);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTowstop__TopicType(struct soap*, const std::vector<wstop__TopicType * >*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTowstop__TopicType(struct soap*, const char*, int, const std::vector<wstop__TopicType * >*, const char*);
SOAP_FMAC3 std::vector<wstop__TopicType * >* SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTowstop__TopicType(struct soap*, const char*, std::vector<wstop__TopicType * >*, const char*);
SOAP_FMAC1 std::vector<wstop__TopicType * > * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTowstop__TopicType(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<wstop__TopicType * > * soap_new_std__vectorTemplateOfPointerTowstop__TopicType(struct soap *soap, int n = -1) { return soap_instantiate_std__vectorTemplateOfPointerTowstop__TopicType(soap, n, NULL, NULL, NULL); }

inline void soap_delete_std__vectorTemplateOfPointerTowstop__TopicType(struct soap *soap, std::vector<wstop__TopicType * >*p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__vectorTemplateOfPointerTowstop__TopicType(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_std__vectorTemplateOfxsd__QName
#define SOAP_TYPE_std__vectorTemplateOfxsd__QName (185)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfxsd__QName(struct soap*, std::vector<std::string >*);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfxsd__QName(struct soap*, const std::vector<std::string >*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfxsd__QName(struct soap*, const char*, int, const std::vector<std::string >*, const char*);
SOAP_FMAC3 std::vector<std::string >* SOAP_FMAC4 soap_in_std__vectorTemplateOfxsd__QName(struct soap*, const char*, std::vector<std::string >*, const char*);
SOAP_FMAC1 std::vector<std::string > * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfxsd__QName(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<std::string > * soap_new_std__vectorTemplateOfxsd__QName(struct soap *soap, int n = -1) { return soap_instantiate_std__vectorTemplateOfxsd__QName(soap, n, NULL, NULL, NULL); }

inline void soap_delete_std__vectorTemplateOfxsd__QName(struct soap *soap, std::vector<std::string >*p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__vectorTemplateOfxsd__QName(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTowsnt__TopicExpressionType
#define SOAP_TYPE_std__vectorTemplateOfPointerTowsnt__TopicExpressionType (178)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTowsnt__TopicExpressionType(struct soap*, std::vector<wsnt__TopicExpressionType * >*);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTowsnt__TopicExpressionType(struct soap*, const std::vector<wsnt__TopicExpressionType * >*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTowsnt__TopicExpressionType(struct soap*, const char*, int, const std::vector<wsnt__TopicExpressionType * >*, const char*);
SOAP_FMAC3 std::vector<wsnt__TopicExpressionType * >* SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTowsnt__TopicExpressionType(struct soap*, const char*, std::vector<wsnt__TopicExpressionType * >*, const char*);
SOAP_FMAC1 std::vector<wsnt__TopicExpressionType * > * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTowsnt__TopicExpressionType(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<wsnt__TopicExpressionType * > * soap_new_std__vectorTemplateOfPointerTowsnt__TopicExpressionType(struct soap *soap, int n = -1) { return soap_instantiate_std__vectorTemplateOfPointerTowsnt__TopicExpressionType(soap, n, NULL, NULL, NULL); }

inline void soap_delete_std__vectorTemplateOfPointerTowsnt__TopicExpressionType(struct soap *soap, std::vector<wsnt__TopicExpressionType * >*p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__vectorTemplateOfPointerTowsnt__TopicExpressionType(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_std__vectorTemplateOf_wsrfbf__BaseFaultType_Description
#define SOAP_TYPE_std__vectorTemplateOf_wsrfbf__BaseFaultType_Description (172)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOf_wsrfbf__BaseFaultType_Description(struct soap*, std::vector<_wsrfbf__BaseFaultType_Description >*);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOf_wsrfbf__BaseFaultType_Description(struct soap*, const std::vector<_wsrfbf__BaseFaultType_Description >*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOf_wsrfbf__BaseFaultType_Description(struct soap*, const char*, int, const std::vector<_wsrfbf__BaseFaultType_Description >*, const char*);
SOAP_FMAC3 std::vector<_wsrfbf__BaseFaultType_Description >* SOAP_FMAC4 soap_in_std__vectorTemplateOf_wsrfbf__BaseFaultType_Description(struct soap*, const char*, std::vector<_wsrfbf__BaseFaultType_Description >*, const char*);
SOAP_FMAC1 std::vector<_wsrfbf__BaseFaultType_Description > * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOf_wsrfbf__BaseFaultType_Description(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<_wsrfbf__BaseFaultType_Description > * soap_new_std__vectorTemplateOf_wsrfbf__BaseFaultType_Description(struct soap *soap, int n = -1) { return soap_instantiate_std__vectorTemplateOf_wsrfbf__BaseFaultType_Description(soap, n, NULL, NULL, NULL); }

inline void soap_delete_std__vectorTemplateOf_wsrfbf__BaseFaultType_Description(struct soap *soap, std::vector<_wsrfbf__BaseFaultType_Description >*p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__vectorTemplateOf_wsrfbf__BaseFaultType_Description(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_std__vectorTemplateOfxsd__anyURI
#define SOAP_TYPE_std__vectorTemplateOfxsd__anyURI (165)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfxsd__anyURI(struct soap*, std::vector<std::string >*);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfxsd__anyURI(struct soap*, const std::vector<std::string >*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfxsd__anyURI(struct soap*, const char*, int, const std::vector<std::string >*, const char*);
SOAP_FMAC3 std::vector<std::string >* SOAP_FMAC4 soap_in_std__vectorTemplateOfxsd__anyURI(struct soap*, const char*, std::vector<std::string >*, const char*);
SOAP_FMAC1 std::vector<std::string > * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfxsd__anyURI(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<std::string > * soap_new_std__vectorTemplateOfxsd__anyURI(struct soap *soap, int n = -1) { return soap_instantiate_std__vectorTemplateOfxsd__anyURI(soap, n, NULL, NULL, NULL); }

inline void soap_delete_std__vectorTemplateOfxsd__anyURI(struct soap *soap, std::vector<std::string >*p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__vectorTemplateOfxsd__anyURI(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTowsnt__NotificationMessageHolderType
#define SOAP_TYPE_std__vectorTemplateOfPointerTowsnt__NotificationMessageHolderType (164)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTowsnt__NotificationMessageHolderType(struct soap*, std::vector<wsnt__NotificationMessageHolderType * >*);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTowsnt__NotificationMessageHolderType(struct soap*, const std::vector<wsnt__NotificationMessageHolderType * >*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTowsnt__NotificationMessageHolderType(struct soap*, const char*, int, const std::vector<wsnt__NotificationMessageHolderType * >*, const char*);
SOAP_FMAC3 std::vector<wsnt__NotificationMessageHolderType * >* SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTowsnt__NotificationMessageHolderType(struct soap*, const char*, std::vector<wsnt__NotificationMessageHolderType * >*, const char*);
SOAP_FMAC1 std::vector<wsnt__NotificationMessageHolderType * > * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTowsnt__NotificationMessageHolderType(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<wsnt__NotificationMessageHolderType * > * soap_new_std__vectorTemplateOfPointerTowsnt__NotificationMessageHolderType(struct soap *soap, int n = -1) { return soap_instantiate_std__vectorTemplateOfPointerTowsnt__NotificationMessageHolderType(soap, n, NULL, NULL, NULL); }

inline void soap_delete_std__vectorTemplateOfPointerTowsnt__NotificationMessageHolderType(struct soap *soap, std::vector<wsnt__NotificationMessageHolderType * >*p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__vectorTemplateOfPointerTowsnt__NotificationMessageHolderType(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_std__vectorTemplateOf_XML
#define SOAP_TYPE_std__vectorTemplateOf_XML (156)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOf_XML(struct soap*, std::vector<char * >*);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOf_XML(struct soap*, const std::vector<char * >*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOf_XML(struct soap*, const char*, int, const std::vector<char * >*, const char*);
SOAP_FMAC3 std::vector<char * >* SOAP_FMAC4 soap_in_std__vectorTemplateOf_XML(struct soap*, const char*, std::vector<char * >*, const char*);
SOAP_FMAC1 std::vector<char * > * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOf_XML(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<char * > * soap_new_std__vectorTemplateOf_XML(struct soap *soap, int n = -1) { return soap_instantiate_std__vectorTemplateOf_XML(soap, n, NULL, NULL, NULL); }

inline void soap_delete_std__vectorTemplateOf_XML(struct soap *soap, std::vector<char * >*p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__vectorTemplateOf_XML(struct soap*, int, int, void*, size_t, const void*, size_t);

#endif

/* End of onvifeventH.h */
