/* onvifeventPullPointSubscriptionBindingProxy.cpp
   Generated by gSOAP 2.8.22 from rcx.h

Copyright(C) 2000-2015, Robert van Engelen, Genivia Inc. All Rights Reserved.
The generated code is released under one of the following licenses:
GPL or Genivia's license for commercial use.
This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
*/

#include "onvifeventPullPointSubscriptionBindingProxy.h"

PullPointSubscriptionBindingProxy::PullPointSubscriptionBindingProxy()
{	this->soap = soap_new();
	this->soap_own = true;
	PullPointSubscriptionBindingProxy_init(SOAP_IO_DEFAULT, SOAP_IO_DEFAULT);
}

PullPointSubscriptionBindingProxy::PullPointSubscriptionBindingProxy(struct soap *_soap)
{	this->soap = _soap;
	this->soap_own = false;
	PullPointSubscriptionBindingProxy_init(_soap->imode, _soap->omode);
}

PullPointSubscriptionBindingProxy::PullPointSubscriptionBindingProxy(const char *url)
{	this->soap = soap_new();
	this->soap_own = true;
	PullPointSubscriptionBindingProxy_init(SOAP_IO_DEFAULT, SOAP_IO_DEFAULT);
	soap_endpoint = url;
}

PullPointSubscriptionBindingProxy::PullPointSubscriptionBindingProxy(soap_mode iomode)
{	this->soap = soap_new();
	this->soap_own = true;
	PullPointSubscriptionBindingProxy_init(iomode, iomode);
}

PullPointSubscriptionBindingProxy::PullPointSubscriptionBindingProxy(const char *url, soap_mode iomode)
{	this->soap = soap_new();
	this->soap_own = true;
	PullPointSubscriptionBindingProxy_init(iomode, iomode);
	soap_endpoint = url;
}

PullPointSubscriptionBindingProxy::PullPointSubscriptionBindingProxy(soap_mode imode, soap_mode omode)
{	this->soap = soap_new();
	this->soap_own = true;
	PullPointSubscriptionBindingProxy_init(imode, omode);
}

PullPointSubscriptionBindingProxy::~PullPointSubscriptionBindingProxy()
{	if (this->soap_own)
		soap_free(this->soap);
}

void PullPointSubscriptionBindingProxy::PullPointSubscriptionBindingProxy_init(soap_mode imode, soap_mode omode)
{	soap_imode(this->soap, imode);
	soap_omode(this->soap, omode);
	soap_endpoint = NULL;
	static const struct Namespace namespaces[] =
{
	{"SOAP-ENV", "http://www.w3.org/2003/05/soap-envelope", "http://schemas.xmlsoap.org/soap/envelope/", NULL},
	{"SOAP-ENC", "http://www.w3.org/2003/05/soap-encoding", "http://schemas.xmlsoap.org/soap/encoding/", NULL},
	{"xsi", "http://www.w3.org/2001/XMLSchema-instance", "http://www.w3.org/*/XMLSchema-instance", NULL},
	{"xsd", "http://www.w3.org/2001/XMLSchema", "http://www.w3.org/*/XMLSchema", NULL},
	{"chan", "http://schemas.microsoft.com/ws/2005/02/duplex", NULL, NULL},
	{"wsa5", "http://www.w3.org/2005/08/addressing", "http://schemas.xmlsoap.org/ws/2004/08/addressing", NULL},
	{"wsrfbf", "http://docs.oasis-open.org/wsrf/bf-2", NULL, NULL},
	{"wstop", "http://docs.oasis-open.org/wsn/t-1", NULL, NULL},
	{"wsrfr", "http://docs.oasis-open.org/wsrf/r-2", NULL, NULL},
	{"eventws", "http://www.onvif.org/ver10/events/wsdl", NULL, NULL},
	{"wsnt", "http://docs.oasis-open.org/wsn/b-2", NULL, NULL},
	{NULL, NULL, NULL, NULL}
};
	soap_set_namespaces(this->soap, namespaces);
}

void PullPointSubscriptionBindingProxy::destroy()
{	soap_destroy(this->soap);
	soap_end(this->soap);
}

void PullPointSubscriptionBindingProxy::reset()
{	destroy();
	soap_done(this->soap);
	soap_initialize(this->soap);
	PullPointSubscriptionBindingProxy_init(SOAP_IO_DEFAULT, SOAP_IO_DEFAULT);
}

void PullPointSubscriptionBindingProxy::soap_noheader()
{	this->soap->header = NULL;
}

void PullPointSubscriptionBindingProxy::soap_header(char *wsa5__MessageID, struct wsa5__RelatesToType *wsa5__RelatesTo, struct wsa5__EndpointReferenceType *wsa5__From, struct wsa5__EndpointReferenceType *wsa5__ReplyTo, struct wsa5__EndpointReferenceType *wsa5__FaultTo, char *wsa5__To, char *wsa5__Action, struct chan__ChannelInstanceType *chan__ChannelInstance)
{	::soap_header(this->soap);
	this->soap->header->wsa5__MessageID = wsa5__MessageID;
	this->soap->header->wsa5__RelatesTo = wsa5__RelatesTo;
	this->soap->header->wsa5__From = wsa5__From;
	this->soap->header->wsa5__ReplyTo = wsa5__ReplyTo;
	this->soap->header->wsa5__FaultTo = wsa5__FaultTo;
	this->soap->header->wsa5__To = wsa5__To;
	this->soap->header->wsa5__Action = wsa5__Action;
	this->soap->header->chan__ChannelInstance = chan__ChannelInstance;
}

const SOAP_ENV__Header *PullPointSubscriptionBindingProxy::soap_header()
{	return this->soap->header;
}

const SOAP_ENV__Fault *PullPointSubscriptionBindingProxy::soap_fault()
{	return this->soap->fault;
}

const char *PullPointSubscriptionBindingProxy::soap_fault_string()
{	return *soap_faultstring(this->soap);
}

const char *PullPointSubscriptionBindingProxy::soap_fault_detail()
{	return *soap_faultdetail(this->soap);
}

int PullPointSubscriptionBindingProxy::soap_close_socket()
{	return soap_closesock(this->soap);
}

int PullPointSubscriptionBindingProxy::soap_force_close_socket()
{	return soap_force_closesock(this->soap);
}

void PullPointSubscriptionBindingProxy::soap_print_fault(FILE *fd)
{	::soap_print_fault(this->soap, fd);
}

#ifndef WITH_LEAN
#ifndef WITH_COMPAT
void PullPointSubscriptionBindingProxy::soap_stream_fault(std::ostream& os)
{	::soap_stream_fault(this->soap, os);
}
#endif

char *PullPointSubscriptionBindingProxy::soap_sprint_fault(char *buf, size_t len)
{	return ::soap_sprint_fault(this->soap, buf, len);
}
#endif

int PullPointSubscriptionBindingProxy::PullMessages(const char *endpoint, const char *soap_action, _eventws__PullMessages *eventws__PullMessages, _eventws__PullMessagesResponse &eventws__PullMessagesResponse)
{	struct soap *soap = this->soap;
	struct __eventws__PullMessages soap_tmp___eventws__PullMessages;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_action == NULL)
		soap_action = "http://www.onvif.org/ver10/events/wsdl/PullPointSubscription/PullMessagesRequest";
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_tmp___eventws__PullMessages.eventws__PullMessages = eventws__PullMessages;
	soap_serializeheader(soap);
	soap_serialize___eventws__PullMessages(soap, &soap_tmp___eventws__PullMessages);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___eventws__PullMessages(soap, &soap_tmp___eventws__PullMessages, "-eventws:PullMessages", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_url(soap, soap_endpoint, NULL), soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___eventws__PullMessages(soap, &soap_tmp___eventws__PullMessages, "-eventws:PullMessages", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!&eventws__PullMessagesResponse)
		return soap_closesock(soap);
	eventws__PullMessagesResponse.soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	eventws__PullMessagesResponse.soap_get(soap, "eventws:PullMessagesResponse", NULL);
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int PullPointSubscriptionBindingProxy::Seek(const char *endpoint, const char *soap_action, _eventws__Seek *eventws__Seek, _eventws__SeekResponse &eventws__SeekResponse)
{	struct soap *soap = this->soap;
	struct __eventws__Seek soap_tmp___eventws__Seek;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_action == NULL)
		soap_action = "http://www.onvif.org/ver10/events/wsdl/PullPointSubscription/SeekRequest";
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_tmp___eventws__Seek.eventws__Seek = eventws__Seek;
	soap_serializeheader(soap);
	soap_serialize___eventws__Seek(soap, &soap_tmp___eventws__Seek);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___eventws__Seek(soap, &soap_tmp___eventws__Seek, "-eventws:Seek", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_url(soap, soap_endpoint, NULL), soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___eventws__Seek(soap, &soap_tmp___eventws__Seek, "-eventws:Seek", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!&eventws__SeekResponse)
		return soap_closesock(soap);
	eventws__SeekResponse.soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	eventws__SeekResponse.soap_get(soap, "eventws:SeekResponse", NULL);
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int PullPointSubscriptionBindingProxy::SetSynchronizationPoint(const char *endpoint, const char *soap_action, _eventws__SetSynchronizationPoint *eventws__SetSynchronizationPoint, _eventws__SetSynchronizationPointResponse &eventws__SetSynchronizationPointResponse)
{	struct soap *soap = this->soap;
	struct __eventws__SetSynchronizationPoint soap_tmp___eventws__SetSynchronizationPoint;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_action == NULL)
		soap_action = "http://www.onvif.org/ver10/events/wsdl/PullPointSubscription/SetSynchronizationPointRequest";
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_tmp___eventws__SetSynchronizationPoint.eventws__SetSynchronizationPoint = eventws__SetSynchronizationPoint;
	soap_serializeheader(soap);
	soap_serialize___eventws__SetSynchronizationPoint(soap, &soap_tmp___eventws__SetSynchronizationPoint);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___eventws__SetSynchronizationPoint(soap, &soap_tmp___eventws__SetSynchronizationPoint, "-eventws:SetSynchronizationPoint", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_url(soap, soap_endpoint, NULL), soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___eventws__SetSynchronizationPoint(soap, &soap_tmp___eventws__SetSynchronizationPoint, "-eventws:SetSynchronizationPoint", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!&eventws__SetSynchronizationPointResponse)
		return soap_closesock(soap);
	eventws__SetSynchronizationPointResponse.soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	eventws__SetSynchronizationPointResponse.soap_get(soap, "eventws:SetSynchronizationPointResponse", NULL);
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int PullPointSubscriptionBindingProxy::GetServiceCapabilities(const char *endpoint, const char *soap_action, _eventws__GetServiceCapabilities *eventws__GetServiceCapabilities, _eventws__GetServiceCapabilitiesResponse &eventws__GetServiceCapabilitiesResponse)
{	struct soap *soap = this->soap;
	struct __eventws__GetServiceCapabilities soap_tmp___eventws__GetServiceCapabilities;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_action == NULL)
		soap_action = "http://www.onvif.org/ver10/events/wsdl/EventPortType/GetServiceCapabilitiesRequest";
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_tmp___eventws__GetServiceCapabilities.eventws__GetServiceCapabilities = eventws__GetServiceCapabilities;
	soap_serializeheader(soap);
	soap_serialize___eventws__GetServiceCapabilities(soap, &soap_tmp___eventws__GetServiceCapabilities);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___eventws__GetServiceCapabilities(soap, &soap_tmp___eventws__GetServiceCapabilities, "-eventws:GetServiceCapabilities", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_url(soap, soap_endpoint, NULL), soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___eventws__GetServiceCapabilities(soap, &soap_tmp___eventws__GetServiceCapabilities, "-eventws:GetServiceCapabilities", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!&eventws__GetServiceCapabilitiesResponse)
		return soap_closesock(soap);
	eventws__GetServiceCapabilitiesResponse.soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	eventws__GetServiceCapabilitiesResponse.soap_get(soap, "eventws:GetServiceCapabilitiesResponse", NULL);
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int PullPointSubscriptionBindingProxy::CreatePullPointSubscription(const char *endpoint, const char *soap_action, _eventws__CreatePullPointSubscription *eventws__CreatePullPointSubscription, _eventws__CreatePullPointSubscriptionResponse &eventws__CreatePullPointSubscriptionResponse)
{	struct soap *soap = this->soap;
	struct __eventws__CreatePullPointSubscription soap_tmp___eventws__CreatePullPointSubscription;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_action == NULL)
		soap_action = "http://www.onvif.org/ver10/events/wsdl/EventPortType/CreatePullPointSubscriptionRequest";
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_tmp___eventws__CreatePullPointSubscription.eventws__CreatePullPointSubscription = eventws__CreatePullPointSubscription;
	soap_serializeheader(soap);
	soap_serialize___eventws__CreatePullPointSubscription(soap, &soap_tmp___eventws__CreatePullPointSubscription);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___eventws__CreatePullPointSubscription(soap, &soap_tmp___eventws__CreatePullPointSubscription, "-eventws:CreatePullPointSubscription", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_url(soap, soap_endpoint, NULL), soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___eventws__CreatePullPointSubscription(soap, &soap_tmp___eventws__CreatePullPointSubscription, "-eventws:CreatePullPointSubscription", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!&eventws__CreatePullPointSubscriptionResponse)
		return soap_closesock(soap);
	eventws__CreatePullPointSubscriptionResponse.soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	eventws__CreatePullPointSubscriptionResponse.soap_get(soap, "eventws:CreatePullPointSubscriptionResponse", NULL);
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int PullPointSubscriptionBindingProxy::GetEventProperties(const char *endpoint, const char *soap_action, _eventws__GetEventProperties *eventws__GetEventProperties, _eventws__GetEventPropertiesResponse &eventws__GetEventPropertiesResponse)
{	struct soap *soap = this->soap;
	struct __eventws__GetEventProperties soap_tmp___eventws__GetEventProperties;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_action == NULL)
		soap_action = "http://www.onvif.org/ver10/events/wsdl/EventPortType/GetEventPropertiesRequest";
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_tmp___eventws__GetEventProperties.eventws__GetEventProperties = eventws__GetEventProperties;
	soap_serializeheader(soap);
	soap_serialize___eventws__GetEventProperties(soap, &soap_tmp___eventws__GetEventProperties);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___eventws__GetEventProperties(soap, &soap_tmp___eventws__GetEventProperties, "-eventws:GetEventProperties", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_url(soap, soap_endpoint, NULL), soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___eventws__GetEventProperties(soap, &soap_tmp___eventws__GetEventProperties, "-eventws:GetEventProperties", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!&eventws__GetEventPropertiesResponse)
		return soap_closesock(soap);
	eventws__GetEventPropertiesResponse.soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	eventws__GetEventPropertiesResponse.soap_get(soap, "eventws:GetEventPropertiesResponse", NULL);
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int PullPointSubscriptionBindingProxy::Renew(const char *endpoint, const char *soap_action, _wsnt__Renew *wsnt__Renew, _wsnt__RenewResponse &wsnt__RenewResponse)
{	struct soap *soap = this->soap;
	struct __eventws__Renew soap_tmp___eventws__Renew;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_action == NULL)
		soap_action = "http://docs.oasis-open.org/wsn/bw-2/SubscriptionManager/RenewRequest";
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_tmp___eventws__Renew.wsnt__Renew = wsnt__Renew;
	soap_serializeheader(soap);
	soap_serialize___eventws__Renew(soap, &soap_tmp___eventws__Renew);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___eventws__Renew(soap, &soap_tmp___eventws__Renew, "-eventws:Renew", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_url(soap, soap_endpoint, NULL), soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___eventws__Renew(soap, &soap_tmp___eventws__Renew, "-eventws:Renew", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!&wsnt__RenewResponse)
		return soap_closesock(soap);
	wsnt__RenewResponse.soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	wsnt__RenewResponse.soap_get(soap, "wsnt:RenewResponse", NULL);
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int PullPointSubscriptionBindingProxy::Unsubscribe(const char *endpoint, const char *soap_action, _wsnt__Unsubscribe *wsnt__Unsubscribe, _wsnt__UnsubscribeResponse &wsnt__UnsubscribeResponse)
{	struct soap *soap = this->soap;
	struct __eventws__Unsubscribe soap_tmp___eventws__Unsubscribe;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_action == NULL)
		soap_action = "http://docs.oasis-open.org/wsn/bw-2/SubscriptionManager/UnsubscribeRequest";
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_tmp___eventws__Unsubscribe.wsnt__Unsubscribe = wsnt__Unsubscribe;
	soap_serializeheader(soap);
	soap_serialize___eventws__Unsubscribe(soap, &soap_tmp___eventws__Unsubscribe);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___eventws__Unsubscribe(soap, &soap_tmp___eventws__Unsubscribe, "-eventws:Unsubscribe", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_url(soap, soap_endpoint, NULL), soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___eventws__Unsubscribe(soap, &soap_tmp___eventws__Unsubscribe, "-eventws:Unsubscribe", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!&wsnt__UnsubscribeResponse)
		return soap_closesock(soap);
	wsnt__UnsubscribeResponse.soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	wsnt__UnsubscribeResponse.soap_get(soap, "wsnt:UnsubscribeResponse", NULL);
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int PullPointSubscriptionBindingProxy::Subscribe(const char *endpoint, const char *soap_action, _wsnt__Subscribe *wsnt__Subscribe, _wsnt__SubscribeResponse &wsnt__SubscribeResponse)
{	struct soap *soap = this->soap;
	struct __eventws__Subscribe soap_tmp___eventws__Subscribe;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_action == NULL)
		soap_action = "http://docs.oasis-open.org/wsn/bw-2/NotificationProducer/SubscribeRequest";
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_tmp___eventws__Subscribe.wsnt__Subscribe = wsnt__Subscribe;
	soap_serializeheader(soap);
	soap_serialize___eventws__Subscribe(soap, &soap_tmp___eventws__Subscribe);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___eventws__Subscribe(soap, &soap_tmp___eventws__Subscribe, "-eventws:Subscribe", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_url(soap, soap_endpoint, NULL), soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___eventws__Subscribe(soap, &soap_tmp___eventws__Subscribe, "-eventws:Subscribe", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!&wsnt__SubscribeResponse)
		return soap_closesock(soap);
	wsnt__SubscribeResponse.soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	wsnt__SubscribeResponse.soap_get(soap, "wsnt:SubscribeResponse", NULL);
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int PullPointSubscriptionBindingProxy::GetCurrentMessage(const char *endpoint, const char *soap_action, _wsnt__GetCurrentMessage *wsnt__GetCurrentMessage, _wsnt__GetCurrentMessageResponse &wsnt__GetCurrentMessageResponse)
{	struct soap *soap = this->soap;
	struct __eventws__GetCurrentMessage soap_tmp___eventws__GetCurrentMessage;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_action == NULL)
		soap_action = "http://docs.oasis-open.org/wsn/bw-2/NotificationProducer/GetCurrentMessageRequest";
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_tmp___eventws__GetCurrentMessage.wsnt__GetCurrentMessage = wsnt__GetCurrentMessage;
	soap_serializeheader(soap);
	soap_serialize___eventws__GetCurrentMessage(soap, &soap_tmp___eventws__GetCurrentMessage);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___eventws__GetCurrentMessage(soap, &soap_tmp___eventws__GetCurrentMessage, "-eventws:GetCurrentMessage", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_url(soap, soap_endpoint, NULL), soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___eventws__GetCurrentMessage(soap, &soap_tmp___eventws__GetCurrentMessage, "-eventws:GetCurrentMessage", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!&wsnt__GetCurrentMessageResponse)
		return soap_closesock(soap);
	wsnt__GetCurrentMessageResponse.soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	wsnt__GetCurrentMessageResponse.soap_get(soap, "wsnt:GetCurrentMessageResponse", NULL);
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int PullPointSubscriptionBindingProxy::send_Notify(const char *endpoint, const char *soap_action, _wsnt__Notify *wsnt__Notify)
{	struct soap *soap = this->soap;
	struct __eventws__Notify soap_tmp___eventws__Notify;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_action == NULL)
		soap_action = "http://docs.oasis-open.org/wsn/bw-2/NotificationConsumer/Notify";
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_tmp___eventws__Notify.wsnt__Notify = wsnt__Notify;
	soap_serializeheader(soap);
	soap_serialize___eventws__Notify(soap, &soap_tmp___eventws__Notify);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___eventws__Notify(soap, &soap_tmp___eventws__Notify, "-eventws:Notify", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_url(soap, soap_endpoint, NULL), soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___eventws__Notify(soap, &soap_tmp___eventws__Notify, "-eventws:Notify", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

int PullPointSubscriptionBindingProxy::recv_Notify(struct __eventws__Notify& tmp)
{	struct soap *soap = this->soap;

	struct __eventws__Notify *_param_2 = &tmp;
	soap_default___eventws__Notify(soap, _param_2);
	soap_begin(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get___eventws__Notify(soap, _param_2, "-eventws:Notify", NULL);
	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
		soap->error = SOAP_OK;
	if (soap->error
	 || soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int PullPointSubscriptionBindingProxy::GetMessages(const char *endpoint, const char *soap_action, _wsnt__GetMessages *wsnt__GetMessages, _wsnt__GetMessagesResponse &wsnt__GetMessagesResponse)
{	struct soap *soap = this->soap;
	struct __eventws__GetMessages soap_tmp___eventws__GetMessages;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_action == NULL)
		soap_action = "http://docs.oasis-open.org/wsn/bw-2/PullPoint/GetMessagesRequest";
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_tmp___eventws__GetMessages.wsnt__GetMessages = wsnt__GetMessages;
	soap_serializeheader(soap);
	soap_serialize___eventws__GetMessages(soap, &soap_tmp___eventws__GetMessages);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___eventws__GetMessages(soap, &soap_tmp___eventws__GetMessages, "-eventws:GetMessages", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_url(soap, soap_endpoint, NULL), soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___eventws__GetMessages(soap, &soap_tmp___eventws__GetMessages, "-eventws:GetMessages", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!&wsnt__GetMessagesResponse)
		return soap_closesock(soap);
	wsnt__GetMessagesResponse.soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	wsnt__GetMessagesResponse.soap_get(soap, "wsnt:GetMessagesResponse", NULL);
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int PullPointSubscriptionBindingProxy::DestroyPullPoint(const char *endpoint, const char *soap_action, _wsnt__DestroyPullPoint *wsnt__DestroyPullPoint, _wsnt__DestroyPullPointResponse &wsnt__DestroyPullPointResponse)
{	struct soap *soap = this->soap;
	struct __eventws__DestroyPullPoint soap_tmp___eventws__DestroyPullPoint;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_action == NULL)
		soap_action = "http://docs.oasis-open.org/wsn/bw-2/PullPoint/DestroyPullPointRequest";
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_tmp___eventws__DestroyPullPoint.wsnt__DestroyPullPoint = wsnt__DestroyPullPoint;
	soap_serializeheader(soap);
	soap_serialize___eventws__DestroyPullPoint(soap, &soap_tmp___eventws__DestroyPullPoint);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___eventws__DestroyPullPoint(soap, &soap_tmp___eventws__DestroyPullPoint, "-eventws:DestroyPullPoint", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_url(soap, soap_endpoint, NULL), soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___eventws__DestroyPullPoint(soap, &soap_tmp___eventws__DestroyPullPoint, "-eventws:DestroyPullPoint", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!&wsnt__DestroyPullPointResponse)
		return soap_closesock(soap);
	wsnt__DestroyPullPointResponse.soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	wsnt__DestroyPullPointResponse.soap_get(soap, "wsnt:DestroyPullPointResponse", NULL);
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int PullPointSubscriptionBindingProxy::send_Notify_(const char *endpoint, const char *soap_action, _wsnt__Notify *wsnt__Notify)
{	struct soap *soap = this->soap;
	struct __eventws__Notify_ soap_tmp___eventws__Notify_;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_action == NULL)
		soap_action = "http://docs.oasis-open.org/wsn/bw-2/PullPoint/Notify";
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_tmp___eventws__Notify_.wsnt__Notify = wsnt__Notify;
	soap_serializeheader(soap);
	soap_serialize___eventws__Notify_(soap, &soap_tmp___eventws__Notify_);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___eventws__Notify_(soap, &soap_tmp___eventws__Notify_, "-eventws:Notify", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_url(soap, soap_endpoint, NULL), soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___eventws__Notify_(soap, &soap_tmp___eventws__Notify_, "-eventws:Notify", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

int PullPointSubscriptionBindingProxy::recv_Notify_(struct __eventws__Notify_& tmp)
{	struct soap *soap = this->soap;

	struct __eventws__Notify_ *_param_3 = &tmp;
	soap_default___eventws__Notify_(soap, _param_3);
	soap_begin(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get___eventws__Notify_(soap, _param_3, "-eventws:Notify", NULL);
	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
		soap->error = SOAP_OK;
	if (soap->error
	 || soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int PullPointSubscriptionBindingProxy::CreatePullPoint(const char *endpoint, const char *soap_action, _wsnt__CreatePullPoint *wsnt__CreatePullPoint, _wsnt__CreatePullPointResponse &wsnt__CreatePullPointResponse)
{	struct soap *soap = this->soap;
	struct __eventws__CreatePullPoint soap_tmp___eventws__CreatePullPoint;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_action == NULL)
		soap_action = "http://docs.oasis-open.org/wsn/bw-2/CreatePullPoint/CreatePullPointRequest";
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_tmp___eventws__CreatePullPoint.wsnt__CreatePullPoint = wsnt__CreatePullPoint;
	soap_serializeheader(soap);
	soap_serialize___eventws__CreatePullPoint(soap, &soap_tmp___eventws__CreatePullPoint);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___eventws__CreatePullPoint(soap, &soap_tmp___eventws__CreatePullPoint, "-eventws:CreatePullPoint", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_url(soap, soap_endpoint, NULL), soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___eventws__CreatePullPoint(soap, &soap_tmp___eventws__CreatePullPoint, "-eventws:CreatePullPoint", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!&wsnt__CreatePullPointResponse)
		return soap_closesock(soap);
	wsnt__CreatePullPointResponse.soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	wsnt__CreatePullPointResponse.soap_get(soap, "wsnt:CreatePullPointResponse", NULL);
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int PullPointSubscriptionBindingProxy::Renew_(const char *endpoint, const char *soap_action, _wsnt__Renew *wsnt__Renew, _wsnt__RenewResponse &wsnt__RenewResponse)
{	struct soap *soap = this->soap;
	struct __eventws__Renew_ soap_tmp___eventws__Renew_;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_action == NULL)
		soap_action = "http://docs.oasis-open.org/wsn/bw-2/PausableSubscriptionManager/RenewRequest";
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_tmp___eventws__Renew_.wsnt__Renew = wsnt__Renew;
	soap_serializeheader(soap);
	soap_serialize___eventws__Renew_(soap, &soap_tmp___eventws__Renew_);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___eventws__Renew_(soap, &soap_tmp___eventws__Renew_, "-eventws:Renew", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_url(soap, soap_endpoint, NULL), soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___eventws__Renew_(soap, &soap_tmp___eventws__Renew_, "-eventws:Renew", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!&wsnt__RenewResponse)
		return soap_closesock(soap);
	wsnt__RenewResponse.soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	wsnt__RenewResponse.soap_get(soap, "wsnt:RenewResponse", NULL);
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int PullPointSubscriptionBindingProxy::Unsubscribe_(const char *endpoint, const char *soap_action, _wsnt__Unsubscribe *wsnt__Unsubscribe, _wsnt__UnsubscribeResponse &wsnt__UnsubscribeResponse)
{	struct soap *soap = this->soap;
	struct __eventws__Unsubscribe_ soap_tmp___eventws__Unsubscribe_;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_action == NULL)
		soap_action = "http://docs.oasis-open.org/wsn/bw-2/PausableSubscriptionManager/UnsubscribeRequest";
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_tmp___eventws__Unsubscribe_.wsnt__Unsubscribe = wsnt__Unsubscribe;
	soap_serializeheader(soap);
	soap_serialize___eventws__Unsubscribe_(soap, &soap_tmp___eventws__Unsubscribe_);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___eventws__Unsubscribe_(soap, &soap_tmp___eventws__Unsubscribe_, "-eventws:Unsubscribe", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_url(soap, soap_endpoint, NULL), soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___eventws__Unsubscribe_(soap, &soap_tmp___eventws__Unsubscribe_, "-eventws:Unsubscribe", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!&wsnt__UnsubscribeResponse)
		return soap_closesock(soap);
	wsnt__UnsubscribeResponse.soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	wsnt__UnsubscribeResponse.soap_get(soap, "wsnt:UnsubscribeResponse", NULL);
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int PullPointSubscriptionBindingProxy::PauseSubscription(const char *endpoint, const char *soap_action, _wsnt__PauseSubscription *wsnt__PauseSubscription, _wsnt__PauseSubscriptionResponse &wsnt__PauseSubscriptionResponse)
{	struct soap *soap = this->soap;
	struct __eventws__PauseSubscription soap_tmp___eventws__PauseSubscription;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_action == NULL)
		soap_action = "http://docs.oasis-open.org/wsn/bw-2/PausableSubscriptionManager/PauseSubscriptionRequest";
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_tmp___eventws__PauseSubscription.wsnt__PauseSubscription = wsnt__PauseSubscription;
	soap_serializeheader(soap);
	soap_serialize___eventws__PauseSubscription(soap, &soap_tmp___eventws__PauseSubscription);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___eventws__PauseSubscription(soap, &soap_tmp___eventws__PauseSubscription, "-eventws:PauseSubscription", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_url(soap, soap_endpoint, NULL), soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___eventws__PauseSubscription(soap, &soap_tmp___eventws__PauseSubscription, "-eventws:PauseSubscription", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!&wsnt__PauseSubscriptionResponse)
		return soap_closesock(soap);
	wsnt__PauseSubscriptionResponse.soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	wsnt__PauseSubscriptionResponse.soap_get(soap, "wsnt:PauseSubscriptionResponse", NULL);
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int PullPointSubscriptionBindingProxy::ResumeSubscription(const char *endpoint, const char *soap_action, _wsnt__ResumeSubscription *wsnt__ResumeSubscription, _wsnt__ResumeSubscriptionResponse &wsnt__ResumeSubscriptionResponse)
{	struct soap *soap = this->soap;
	struct __eventws__ResumeSubscription soap_tmp___eventws__ResumeSubscription;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_action == NULL)
		soap_action = "http://docs.oasis-open.org/wsn/bw-2/PausableSubscriptionManager/ResumeSubscriptionRequest";
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_tmp___eventws__ResumeSubscription.wsnt__ResumeSubscription = wsnt__ResumeSubscription;
	soap_serializeheader(soap);
	soap_serialize___eventws__ResumeSubscription(soap, &soap_tmp___eventws__ResumeSubscription);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___eventws__ResumeSubscription(soap, &soap_tmp___eventws__ResumeSubscription, "-eventws:ResumeSubscription", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_url(soap, soap_endpoint, NULL), soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___eventws__ResumeSubscription(soap, &soap_tmp___eventws__ResumeSubscription, "-eventws:ResumeSubscription", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!&wsnt__ResumeSubscriptionResponse)
		return soap_closesock(soap);
	wsnt__ResumeSubscriptionResponse.soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	wsnt__ResumeSubscriptionResponse.soap_get(soap, "wsnt:ResumeSubscriptionResponse", NULL);
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
/* End of client proxy code */
