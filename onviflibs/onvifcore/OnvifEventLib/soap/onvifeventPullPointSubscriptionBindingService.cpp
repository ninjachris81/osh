/* onvifeventPullPointSubscriptionBindingService.cpp
   Generated by gSOAP 2.8.22 from rcx.h

Copyright(C) 2000-2015, Robert van Engelen, Genivia Inc. All Rights Reserved.
The generated code is released under one of the following licenses:
GPL or Genivia's license for commercial use.
This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
*/

#include "onvifeventPullPointSubscriptionBindingService.h"

PullPointSubscriptionBindingService::PullPointSubscriptionBindingService()
{	this->soap = soap_new();
	this->soap_own = true;
	PullPointSubscriptionBindingService_init(SOAP_IO_DEFAULT, SOAP_IO_DEFAULT);
}

PullPointSubscriptionBindingService::PullPointSubscriptionBindingService(struct soap *_soap)
{	this->soap = _soap;
	this->soap_own = false;
	PullPointSubscriptionBindingService_init(_soap->imode, _soap->omode);
}

PullPointSubscriptionBindingService::PullPointSubscriptionBindingService(soap_mode iomode)
{	this->soap = soap_new();
	this->soap_own = true;
	PullPointSubscriptionBindingService_init(iomode, iomode);
}

PullPointSubscriptionBindingService::PullPointSubscriptionBindingService(soap_mode imode, soap_mode omode)
{	this->soap = soap_new();
	this->soap_own = true;
	PullPointSubscriptionBindingService_init(imode, omode);
}

PullPointSubscriptionBindingService::~PullPointSubscriptionBindingService()
{	if (this->soap_own)
		soap_free(this->soap);
}

void PullPointSubscriptionBindingService::PullPointSubscriptionBindingService_init(soap_mode imode, soap_mode omode)
{	soap_imode(this->soap, imode);
	soap_omode(this->soap, omode);
	static const struct Namespace namespaces[] =
{
	{"SOAP-ENV", "http://www.w3.org/2003/05/soap-envelope", "http://schemas.xmlsoap.org/soap/envelope/", NULL},
	{"SOAP-ENC", "http://www.w3.org/2003/05/soap-encoding", "http://schemas.xmlsoap.org/soap/encoding/", NULL},
	{"xsi", "http://www.w3.org/2001/XMLSchema-instance", "http://www.w3.org/*/XMLSchema-instance", NULL},
	{"xsd", "http://www.w3.org/2001/XMLSchema", "http://www.w3.org/*/XMLSchema", NULL},
	{"chan", "http://schemas.microsoft.com/ws/2005/02/duplex", NULL, NULL},
	{"wsa5", "http://www.w3.org/2005/08/addressing", "http://schemas.xmlsoap.org/ws/2004/08/addressing", NULL},
	{"wsrfbf", "http://docs.oasis-open.org/wsrf/bf-2", NULL, NULL},
	{"wstop", "http://docs.oasis-open.org/wsn/t-1", NULL, NULL},
	{"wsrfr", "http://docs.oasis-open.org/wsrf/r-2", NULL, NULL},
	{"eventws", "http://www.onvif.org/ver10/events/wsdl", NULL, NULL},
	{"wsnt", "http://docs.oasis-open.org/wsn/b-2", NULL, NULL},
	{NULL, NULL, NULL, NULL}
};
	soap_set_namespaces(this->soap, namespaces);
}

void PullPointSubscriptionBindingService::destroy()
{	soap_destroy(this->soap);
	soap_end(this->soap);
}

void PullPointSubscriptionBindingService::reset()
{	destroy();
	soap_done(this->soap);
	soap_initialize(this->soap);
	PullPointSubscriptionBindingService_init(SOAP_IO_DEFAULT, SOAP_IO_DEFAULT);
}

#ifndef WITH_PURE_VIRTUAL
PullPointSubscriptionBindingService *PullPointSubscriptionBindingService::copy()
{	PullPointSubscriptionBindingService *dup = SOAP_NEW_COPY(PullPointSubscriptionBindingService);
	if (dup)
		soap_copy_context(dup->soap, this->soap);
	return dup;
}
#endif

int PullPointSubscriptionBindingService::soap_close_socket()
{	return soap_closesock(this->soap);
}

int PullPointSubscriptionBindingService::soap_force_close_socket()
{	return soap_force_closesock(this->soap);
}

int PullPointSubscriptionBindingService::soap_senderfault(const char *string, const char *detailXML)
{	return ::soap_sender_fault(this->soap, string, detailXML);
}

int PullPointSubscriptionBindingService::soap_senderfault(const char *subcodeQName, const char *string, const char *detailXML)
{	return ::soap_sender_fault_subcode(this->soap, subcodeQName, string, detailXML);
}

int PullPointSubscriptionBindingService::soap_receiverfault(const char *string, const char *detailXML)
{	return ::soap_receiver_fault(this->soap, string, detailXML);
}

int PullPointSubscriptionBindingService::soap_receiverfault(const char *subcodeQName, const char *string, const char *detailXML)
{	return ::soap_receiver_fault_subcode(this->soap, subcodeQName, string, detailXML);
}

void PullPointSubscriptionBindingService::soap_print_fault(FILE *fd)
{	::soap_print_fault(this->soap, fd);
}

#ifndef WITH_LEAN
#ifndef WITH_COMPAT
void PullPointSubscriptionBindingService::soap_stream_fault(std::ostream& os)
{	::soap_stream_fault(this->soap, os);
}
#endif

char *PullPointSubscriptionBindingService::soap_sprint_fault(char *buf, size_t len)
{	return ::soap_sprint_fault(this->soap, buf, len);
}
#endif

void PullPointSubscriptionBindingService::soap_noheader()
{	this->soap->header = NULL;
}

void PullPointSubscriptionBindingService::soap_header(char *wsa5__MessageID, struct wsa5__RelatesToType *wsa5__RelatesTo, struct wsa5__EndpointReferenceType *wsa5__From, struct wsa5__EndpointReferenceType *wsa5__ReplyTo, struct wsa5__EndpointReferenceType *wsa5__FaultTo, char *wsa5__To, char *wsa5__Action, struct chan__ChannelInstanceType *chan__ChannelInstance)
{	::soap_header(this->soap);
	this->soap->header->wsa5__MessageID = wsa5__MessageID;
	this->soap->header->wsa5__RelatesTo = wsa5__RelatesTo;
	this->soap->header->wsa5__From = wsa5__From;
	this->soap->header->wsa5__ReplyTo = wsa5__ReplyTo;
	this->soap->header->wsa5__FaultTo = wsa5__FaultTo;
	this->soap->header->wsa5__To = wsa5__To;
	this->soap->header->wsa5__Action = wsa5__Action;
	this->soap->header->chan__ChannelInstance = chan__ChannelInstance;
}

const SOAP_ENV__Header *PullPointSubscriptionBindingService::soap_header()
{	return this->soap->header;
}

int PullPointSubscriptionBindingService::run(int port)
{	if (soap_valid_socket(this->soap->master) || soap_valid_socket(bind(NULL, port, 100)))
	{	for (;;)
		{	if (!soap_valid_socket(accept()) || serve())
				break;
			soap_destroy(this->soap);
			soap_end(this->soap);
		}
	}
	return this->soap->error;
}

SOAP_SOCKET PullPointSubscriptionBindingService::bind(const char *host, int port, int backlog)
{	return soap_bind(this->soap, host, port, backlog);
}

SOAP_SOCKET PullPointSubscriptionBindingService::accept()
{	return soap_accept(this->soap);
}

#if defined(WITH_OPENSSL) || defined(WITH_GNUTLS)
int PullPointSubscriptionBindingService::ssl_accept()
{	return soap_ssl_accept(this->soap);
}
#endif

int PullPointSubscriptionBindingService::serve()
{
#ifndef WITH_FASTCGI
	unsigned int k = this->soap->max_keep_alive;
#endif
	do
	{

#ifndef WITH_FASTCGI
		if (this->soap->max_keep_alive > 0 && !--k)
			this->soap->keep_alive = 0;
#endif

		if (soap_begin_serve(this->soap))
		{	if (this->soap->error >= SOAP_STOP)
				continue;
			return this->soap->error;
		}
		if (dispatch() || (this->soap->fserveloop && this->soap->fserveloop(this->soap)))
		{
#ifdef WITH_FASTCGI
			soap_send_fault(this->soap);
#else
			return soap_send_fault(this->soap);
#endif
		}

#ifdef WITH_FASTCGI
		soap_destroy(this->soap);
		soap_end(this->soap);
	} while (1);
#else
	} while (this->soap->keep_alive);
#endif
	return SOAP_OK;
}

static int serve___eventws__PullMessages(struct soap*, PullPointSubscriptionBindingService*);
static int serve___eventws__Seek(struct soap*, PullPointSubscriptionBindingService*);
static int serve___eventws__SetSynchronizationPoint(struct soap*, PullPointSubscriptionBindingService*);
static int serve___eventws__GetServiceCapabilities(struct soap*, PullPointSubscriptionBindingService*);
static int serve___eventws__CreatePullPointSubscription(struct soap*, PullPointSubscriptionBindingService*);
static int serve___eventws__GetEventProperties(struct soap*, PullPointSubscriptionBindingService*);
static int serve___eventws__Renew(struct soap*, PullPointSubscriptionBindingService*);
static int serve___eventws__Unsubscribe(struct soap*, PullPointSubscriptionBindingService*);
static int serve___eventws__Subscribe(struct soap*, PullPointSubscriptionBindingService*);
static int serve___eventws__GetCurrentMessage(struct soap*, PullPointSubscriptionBindingService*);
static int serve___eventws__Notify(struct soap*, PullPointSubscriptionBindingService*);
static int serve___eventws__GetMessages(struct soap*, PullPointSubscriptionBindingService*);
static int serve___eventws__DestroyPullPoint(struct soap*, PullPointSubscriptionBindingService*);
static int serve___eventws__Notify_(struct soap*, PullPointSubscriptionBindingService*);
static int serve___eventws__CreatePullPoint(struct soap*, PullPointSubscriptionBindingService*);
static int serve___eventws__Renew_(struct soap*, PullPointSubscriptionBindingService*);
static int serve___eventws__Unsubscribe_(struct soap*, PullPointSubscriptionBindingService*);
static int serve___eventws__PauseSubscription(struct soap*, PullPointSubscriptionBindingService*);
static int serve___eventws__ResumeSubscription(struct soap*, PullPointSubscriptionBindingService*);

int PullPointSubscriptionBindingService::dispatch()
{	return dispatch(this->soap);
}

int PullPointSubscriptionBindingService::dispatch(struct soap* soap)
{	PullPointSubscriptionBindingService_init(soap->imode, soap->omode);
	soap_peek_element(soap);
	if (!soap_match_tag(soap, soap->tag, "eventws:PullMessages"))
		return serve___eventws__PullMessages(soap, this);
	if (!soap_match_tag(soap, soap->tag, "eventws:Seek"))
		return serve___eventws__Seek(soap, this);
	if (!soap_match_tag(soap, soap->tag, "eventws:SetSynchronizationPoint"))
		return serve___eventws__SetSynchronizationPoint(soap, this);
	if (!soap_match_tag(soap, soap->tag, "eventws:GetServiceCapabilities"))
		return serve___eventws__GetServiceCapabilities(soap, this);
	if (!soap_match_tag(soap, soap->tag, "eventws:CreatePullPointSubscription"))
		return serve___eventws__CreatePullPointSubscription(soap, this);
	if (!soap_match_tag(soap, soap->tag, "eventws:GetEventProperties"))
		return serve___eventws__GetEventProperties(soap, this);
	if (!soap_match_tag(soap, soap->tag, "wsnt:Renew"))
		return serve___eventws__Renew(soap, this);
	if (!soap_match_tag(soap, soap->tag, "wsnt:Unsubscribe"))
		return serve___eventws__Unsubscribe(soap, this);
	if (!soap_match_tag(soap, soap->tag, "wsnt:Subscribe"))
		return serve___eventws__Subscribe(soap, this);
	if (!soap_match_tag(soap, soap->tag, "wsnt:GetCurrentMessage"))
		return serve___eventws__GetCurrentMessage(soap, this);
	if (!soap_match_tag(soap, soap->tag, "wsnt:Notify"))
		return serve___eventws__Notify(soap, this);
	if (!soap_match_tag(soap, soap->tag, "wsnt:GetMessages"))
		return serve___eventws__GetMessages(soap, this);
	if (!soap_match_tag(soap, soap->tag, "wsnt:DestroyPullPoint"))
		return serve___eventws__DestroyPullPoint(soap, this);
	if (!soap_match_tag(soap, soap->tag, "wsnt:Notify"))
		return serve___eventws__Notify_(soap, this);
	if (!soap_match_tag(soap, soap->tag, "wsnt:CreatePullPoint"))
		return serve___eventws__CreatePullPoint(soap, this);
	if (!soap_match_tag(soap, soap->tag, "wsnt:Renew"))
		return serve___eventws__Renew_(soap, this);
	if (!soap_match_tag(soap, soap->tag, "wsnt:Unsubscribe"))
		return serve___eventws__Unsubscribe_(soap, this);
	if (!soap_match_tag(soap, soap->tag, "wsnt:PauseSubscription"))
		return serve___eventws__PauseSubscription(soap, this);
	if (!soap_match_tag(soap, soap->tag, "wsnt:ResumeSubscription"))
		return serve___eventws__ResumeSubscription(soap, this);
	return soap->error = SOAP_NO_METHOD;
}

static int serve___eventws__PullMessages(struct soap *soap, PullPointSubscriptionBindingService *service)
{	struct __eventws__PullMessages soap_tmp___eventws__PullMessages;
	_eventws__PullMessagesResponse eventws__PullMessagesResponse;
	eventws__PullMessagesResponse.soap_default(soap);
	soap_default___eventws__PullMessages(soap, &soap_tmp___eventws__PullMessages);
	if (!soap_get___eventws__PullMessages(soap, &soap_tmp___eventws__PullMessages, "-eventws:PullMessages", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = service->PullMessages(soap_tmp___eventws__PullMessages.eventws__PullMessages, eventws__PullMessagesResponse);
	if (soap->error)
		return soap->error;
	soap->encodingStyle = NULL;
	soap_serializeheader(soap);
	eventws__PullMessagesResponse.soap_serialize(soap);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || eventws__PullMessagesResponse.soap_put(soap, "eventws:PullMessagesResponse", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || eventws__PullMessagesResponse.soap_put(soap, "eventws:PullMessagesResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}

static int serve___eventws__Seek(struct soap *soap, PullPointSubscriptionBindingService *service)
{	struct __eventws__Seek soap_tmp___eventws__Seek;
	_eventws__SeekResponse eventws__SeekResponse;
	eventws__SeekResponse.soap_default(soap);
	soap_default___eventws__Seek(soap, &soap_tmp___eventws__Seek);
	if (!soap_get___eventws__Seek(soap, &soap_tmp___eventws__Seek, "-eventws:Seek", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = service->Seek(soap_tmp___eventws__Seek.eventws__Seek, eventws__SeekResponse);
	if (soap->error)
		return soap->error;
	soap->encodingStyle = NULL;
	soap_serializeheader(soap);
	eventws__SeekResponse.soap_serialize(soap);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || eventws__SeekResponse.soap_put(soap, "eventws:SeekResponse", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || eventws__SeekResponse.soap_put(soap, "eventws:SeekResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}

static int serve___eventws__SetSynchronizationPoint(struct soap *soap, PullPointSubscriptionBindingService *service)
{	struct __eventws__SetSynchronizationPoint soap_tmp___eventws__SetSynchronizationPoint;
	_eventws__SetSynchronizationPointResponse eventws__SetSynchronizationPointResponse;
	eventws__SetSynchronizationPointResponse.soap_default(soap);
	soap_default___eventws__SetSynchronizationPoint(soap, &soap_tmp___eventws__SetSynchronizationPoint);
	if (!soap_get___eventws__SetSynchronizationPoint(soap, &soap_tmp___eventws__SetSynchronizationPoint, "-eventws:SetSynchronizationPoint", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = service->SetSynchronizationPoint(soap_tmp___eventws__SetSynchronizationPoint.eventws__SetSynchronizationPoint, eventws__SetSynchronizationPointResponse);
	if (soap->error)
		return soap->error;
	soap->encodingStyle = NULL;
	soap_serializeheader(soap);
	eventws__SetSynchronizationPointResponse.soap_serialize(soap);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || eventws__SetSynchronizationPointResponse.soap_put(soap, "eventws:SetSynchronizationPointResponse", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || eventws__SetSynchronizationPointResponse.soap_put(soap, "eventws:SetSynchronizationPointResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}

static int serve___eventws__GetServiceCapabilities(struct soap *soap, PullPointSubscriptionBindingService *service)
{	struct __eventws__GetServiceCapabilities soap_tmp___eventws__GetServiceCapabilities;
	_eventws__GetServiceCapabilitiesResponse eventws__GetServiceCapabilitiesResponse;
	eventws__GetServiceCapabilitiesResponse.soap_default(soap);
	soap_default___eventws__GetServiceCapabilities(soap, &soap_tmp___eventws__GetServiceCapabilities);
	if (!soap_get___eventws__GetServiceCapabilities(soap, &soap_tmp___eventws__GetServiceCapabilities, "-eventws:GetServiceCapabilities", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = service->GetServiceCapabilities(soap_tmp___eventws__GetServiceCapabilities.eventws__GetServiceCapabilities, eventws__GetServiceCapabilitiesResponse);
	if (soap->error)
		return soap->error;
	soap->encodingStyle = NULL;
	soap_serializeheader(soap);
	eventws__GetServiceCapabilitiesResponse.soap_serialize(soap);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || eventws__GetServiceCapabilitiesResponse.soap_put(soap, "eventws:GetServiceCapabilitiesResponse", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || eventws__GetServiceCapabilitiesResponse.soap_put(soap, "eventws:GetServiceCapabilitiesResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}

static int serve___eventws__CreatePullPointSubscription(struct soap *soap, PullPointSubscriptionBindingService *service)
{	struct __eventws__CreatePullPointSubscription soap_tmp___eventws__CreatePullPointSubscription;
	_eventws__CreatePullPointSubscriptionResponse eventws__CreatePullPointSubscriptionResponse;
	eventws__CreatePullPointSubscriptionResponse.soap_default(soap);
	soap_default___eventws__CreatePullPointSubscription(soap, &soap_tmp___eventws__CreatePullPointSubscription);
	if (!soap_get___eventws__CreatePullPointSubscription(soap, &soap_tmp___eventws__CreatePullPointSubscription, "-eventws:CreatePullPointSubscription", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = service->CreatePullPointSubscription(soap_tmp___eventws__CreatePullPointSubscription.eventws__CreatePullPointSubscription, eventws__CreatePullPointSubscriptionResponse);
	if (soap->error)
		return soap->error;
	soap->encodingStyle = NULL;
	soap_serializeheader(soap);
	eventws__CreatePullPointSubscriptionResponse.soap_serialize(soap);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || eventws__CreatePullPointSubscriptionResponse.soap_put(soap, "eventws:CreatePullPointSubscriptionResponse", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || eventws__CreatePullPointSubscriptionResponse.soap_put(soap, "eventws:CreatePullPointSubscriptionResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}

static int serve___eventws__GetEventProperties(struct soap *soap, PullPointSubscriptionBindingService *service)
{	struct __eventws__GetEventProperties soap_tmp___eventws__GetEventProperties;
	_eventws__GetEventPropertiesResponse eventws__GetEventPropertiesResponse;
	eventws__GetEventPropertiesResponse.soap_default(soap);
	soap_default___eventws__GetEventProperties(soap, &soap_tmp___eventws__GetEventProperties);
	if (!soap_get___eventws__GetEventProperties(soap, &soap_tmp___eventws__GetEventProperties, "-eventws:GetEventProperties", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = service->GetEventProperties(soap_tmp___eventws__GetEventProperties.eventws__GetEventProperties, eventws__GetEventPropertiesResponse);
	if (soap->error)
		return soap->error;
	soap->encodingStyle = NULL;
	soap_serializeheader(soap);
	eventws__GetEventPropertiesResponse.soap_serialize(soap);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || eventws__GetEventPropertiesResponse.soap_put(soap, "eventws:GetEventPropertiesResponse", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || eventws__GetEventPropertiesResponse.soap_put(soap, "eventws:GetEventPropertiesResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}

static int serve___eventws__Renew(struct soap *soap, PullPointSubscriptionBindingService *service)
{	struct __eventws__Renew soap_tmp___eventws__Renew;
	_wsnt__RenewResponse wsnt__RenewResponse;
	wsnt__RenewResponse.soap_default(soap);
	soap_default___eventws__Renew(soap, &soap_tmp___eventws__Renew);
	if (!soap_get___eventws__Renew(soap, &soap_tmp___eventws__Renew, "-eventws:Renew", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = service->Renew(soap_tmp___eventws__Renew.wsnt__Renew, wsnt__RenewResponse);
	if (soap->error)
		return soap->error;
	soap->encodingStyle = NULL;
	soap_serializeheader(soap);
	wsnt__RenewResponse.soap_serialize(soap);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || wsnt__RenewResponse.soap_put(soap, "wsnt:RenewResponse", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || wsnt__RenewResponse.soap_put(soap, "wsnt:RenewResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}

static int serve___eventws__Unsubscribe(struct soap *soap, PullPointSubscriptionBindingService *service)
{	struct __eventws__Unsubscribe soap_tmp___eventws__Unsubscribe;
	_wsnt__UnsubscribeResponse wsnt__UnsubscribeResponse;
	wsnt__UnsubscribeResponse.soap_default(soap);
	soap_default___eventws__Unsubscribe(soap, &soap_tmp___eventws__Unsubscribe);
	if (!soap_get___eventws__Unsubscribe(soap, &soap_tmp___eventws__Unsubscribe, "-eventws:Unsubscribe", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = service->Unsubscribe(soap_tmp___eventws__Unsubscribe.wsnt__Unsubscribe, wsnt__UnsubscribeResponse);
	if (soap->error)
		return soap->error;
	soap->encodingStyle = NULL;
	soap_serializeheader(soap);
	wsnt__UnsubscribeResponse.soap_serialize(soap);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || wsnt__UnsubscribeResponse.soap_put(soap, "wsnt:UnsubscribeResponse", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || wsnt__UnsubscribeResponse.soap_put(soap, "wsnt:UnsubscribeResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}

static int serve___eventws__Subscribe(struct soap *soap, PullPointSubscriptionBindingService *service)
{	struct __eventws__Subscribe soap_tmp___eventws__Subscribe;
	_wsnt__SubscribeResponse wsnt__SubscribeResponse;
	wsnt__SubscribeResponse.soap_default(soap);
	soap_default___eventws__Subscribe(soap, &soap_tmp___eventws__Subscribe);
	if (!soap_get___eventws__Subscribe(soap, &soap_tmp___eventws__Subscribe, "-eventws:Subscribe", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = service->Subscribe(soap_tmp___eventws__Subscribe.wsnt__Subscribe, wsnt__SubscribeResponse);
	if (soap->error)
		return soap->error;
	soap->encodingStyle = NULL;
	soap_serializeheader(soap);
	wsnt__SubscribeResponse.soap_serialize(soap);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || wsnt__SubscribeResponse.soap_put(soap, "wsnt:SubscribeResponse", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || wsnt__SubscribeResponse.soap_put(soap, "wsnt:SubscribeResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}

static int serve___eventws__GetCurrentMessage(struct soap *soap, PullPointSubscriptionBindingService *service)
{	struct __eventws__GetCurrentMessage soap_tmp___eventws__GetCurrentMessage;
	_wsnt__GetCurrentMessageResponse wsnt__GetCurrentMessageResponse;
	wsnt__GetCurrentMessageResponse.soap_default(soap);
	soap_default___eventws__GetCurrentMessage(soap, &soap_tmp___eventws__GetCurrentMessage);
	if (!soap_get___eventws__GetCurrentMessage(soap, &soap_tmp___eventws__GetCurrentMessage, "-eventws:GetCurrentMessage", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = service->GetCurrentMessage(soap_tmp___eventws__GetCurrentMessage.wsnt__GetCurrentMessage, wsnt__GetCurrentMessageResponse);
	if (soap->error)
		return soap->error;
	soap->encodingStyle = NULL;
	soap_serializeheader(soap);
	wsnt__GetCurrentMessageResponse.soap_serialize(soap);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || wsnt__GetCurrentMessageResponse.soap_put(soap, "wsnt:GetCurrentMessageResponse", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || wsnt__GetCurrentMessageResponse.soap_put(soap, "wsnt:GetCurrentMessageResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}

static int serve___eventws__Notify(struct soap *soap, PullPointSubscriptionBindingService *service)
{	struct __eventws__Notify soap_tmp___eventws__Notify;
	soap_default___eventws__Notify(soap, &soap_tmp___eventws__Notify);
	if (!soap_get___eventws__Notify(soap, &soap_tmp___eventws__Notify, "-eventws:Notify", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = service->Notify(soap_tmp___eventws__Notify.wsnt__Notify);
	if (soap->error)
		return soap->error;
	return soap_closesock(soap);
}

static int serve___eventws__GetMessages(struct soap *soap, PullPointSubscriptionBindingService *service)
{	struct __eventws__GetMessages soap_tmp___eventws__GetMessages;
	_wsnt__GetMessagesResponse wsnt__GetMessagesResponse;
	wsnt__GetMessagesResponse.soap_default(soap);
	soap_default___eventws__GetMessages(soap, &soap_tmp___eventws__GetMessages);
	if (!soap_get___eventws__GetMessages(soap, &soap_tmp___eventws__GetMessages, "-eventws:GetMessages", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = service->GetMessages(soap_tmp___eventws__GetMessages.wsnt__GetMessages, wsnt__GetMessagesResponse);
	if (soap->error)
		return soap->error;
	soap->encodingStyle = NULL;
	soap_serializeheader(soap);
	wsnt__GetMessagesResponse.soap_serialize(soap);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || wsnt__GetMessagesResponse.soap_put(soap, "wsnt:GetMessagesResponse", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || wsnt__GetMessagesResponse.soap_put(soap, "wsnt:GetMessagesResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}

static int serve___eventws__DestroyPullPoint(struct soap *soap, PullPointSubscriptionBindingService *service)
{	struct __eventws__DestroyPullPoint soap_tmp___eventws__DestroyPullPoint;
	_wsnt__DestroyPullPointResponse wsnt__DestroyPullPointResponse;
	wsnt__DestroyPullPointResponse.soap_default(soap);
	soap_default___eventws__DestroyPullPoint(soap, &soap_tmp___eventws__DestroyPullPoint);
	if (!soap_get___eventws__DestroyPullPoint(soap, &soap_tmp___eventws__DestroyPullPoint, "-eventws:DestroyPullPoint", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = service->DestroyPullPoint(soap_tmp___eventws__DestroyPullPoint.wsnt__DestroyPullPoint, wsnt__DestroyPullPointResponse);
	if (soap->error)
		return soap->error;
	soap->encodingStyle = NULL;
	soap_serializeheader(soap);
	wsnt__DestroyPullPointResponse.soap_serialize(soap);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || wsnt__DestroyPullPointResponse.soap_put(soap, "wsnt:DestroyPullPointResponse", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || wsnt__DestroyPullPointResponse.soap_put(soap, "wsnt:DestroyPullPointResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}

static int serve___eventws__Notify_(struct soap *soap, PullPointSubscriptionBindingService *service)
{	struct __eventws__Notify_ soap_tmp___eventws__Notify_;
	soap_default___eventws__Notify_(soap, &soap_tmp___eventws__Notify_);
	if (!soap_get___eventws__Notify_(soap, &soap_tmp___eventws__Notify_, "-eventws:Notify", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = service->Notify_(soap_tmp___eventws__Notify_.wsnt__Notify);
	if (soap->error)
		return soap->error;
	return soap_closesock(soap);
}

static int serve___eventws__CreatePullPoint(struct soap *soap, PullPointSubscriptionBindingService *service)
{	struct __eventws__CreatePullPoint soap_tmp___eventws__CreatePullPoint;
	_wsnt__CreatePullPointResponse wsnt__CreatePullPointResponse;
	wsnt__CreatePullPointResponse.soap_default(soap);
	soap_default___eventws__CreatePullPoint(soap, &soap_tmp___eventws__CreatePullPoint);
	if (!soap_get___eventws__CreatePullPoint(soap, &soap_tmp___eventws__CreatePullPoint, "-eventws:CreatePullPoint", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = service->CreatePullPoint(soap_tmp___eventws__CreatePullPoint.wsnt__CreatePullPoint, wsnt__CreatePullPointResponse);
	if (soap->error)
		return soap->error;
	soap->encodingStyle = NULL;
	soap_serializeheader(soap);
	wsnt__CreatePullPointResponse.soap_serialize(soap);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || wsnt__CreatePullPointResponse.soap_put(soap, "wsnt:CreatePullPointResponse", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || wsnt__CreatePullPointResponse.soap_put(soap, "wsnt:CreatePullPointResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}

static int serve___eventws__Renew_(struct soap *soap, PullPointSubscriptionBindingService *service)
{	struct __eventws__Renew_ soap_tmp___eventws__Renew_;
	_wsnt__RenewResponse wsnt__RenewResponse;
	wsnt__RenewResponse.soap_default(soap);
	soap_default___eventws__Renew_(soap, &soap_tmp___eventws__Renew_);
	if (!soap_get___eventws__Renew_(soap, &soap_tmp___eventws__Renew_, "-eventws:Renew", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = service->Renew_(soap_tmp___eventws__Renew_.wsnt__Renew, wsnt__RenewResponse);
	if (soap->error)
		return soap->error;
	soap->encodingStyle = NULL;
	soap_serializeheader(soap);
	wsnt__RenewResponse.soap_serialize(soap);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || wsnt__RenewResponse.soap_put(soap, "wsnt:RenewResponse", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || wsnt__RenewResponse.soap_put(soap, "wsnt:RenewResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}

static int serve___eventws__Unsubscribe_(struct soap *soap, PullPointSubscriptionBindingService *service)
{	struct __eventws__Unsubscribe_ soap_tmp___eventws__Unsubscribe_;
	_wsnt__UnsubscribeResponse wsnt__UnsubscribeResponse;
	wsnt__UnsubscribeResponse.soap_default(soap);
	soap_default___eventws__Unsubscribe_(soap, &soap_tmp___eventws__Unsubscribe_);
	if (!soap_get___eventws__Unsubscribe_(soap, &soap_tmp___eventws__Unsubscribe_, "-eventws:Unsubscribe", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = service->Unsubscribe_(soap_tmp___eventws__Unsubscribe_.wsnt__Unsubscribe, wsnt__UnsubscribeResponse);
	if (soap->error)
		return soap->error;
	soap->encodingStyle = NULL;
	soap_serializeheader(soap);
	wsnt__UnsubscribeResponse.soap_serialize(soap);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || wsnt__UnsubscribeResponse.soap_put(soap, "wsnt:UnsubscribeResponse", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || wsnt__UnsubscribeResponse.soap_put(soap, "wsnt:UnsubscribeResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}

static int serve___eventws__PauseSubscription(struct soap *soap, PullPointSubscriptionBindingService *service)
{	struct __eventws__PauseSubscription soap_tmp___eventws__PauseSubscription;
	_wsnt__PauseSubscriptionResponse wsnt__PauseSubscriptionResponse;
	wsnt__PauseSubscriptionResponse.soap_default(soap);
	soap_default___eventws__PauseSubscription(soap, &soap_tmp___eventws__PauseSubscription);
	if (!soap_get___eventws__PauseSubscription(soap, &soap_tmp___eventws__PauseSubscription, "-eventws:PauseSubscription", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = service->PauseSubscription(soap_tmp___eventws__PauseSubscription.wsnt__PauseSubscription, wsnt__PauseSubscriptionResponse);
	if (soap->error)
		return soap->error;
	soap->encodingStyle = NULL;
	soap_serializeheader(soap);
	wsnt__PauseSubscriptionResponse.soap_serialize(soap);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || wsnt__PauseSubscriptionResponse.soap_put(soap, "wsnt:PauseSubscriptionResponse", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || wsnt__PauseSubscriptionResponse.soap_put(soap, "wsnt:PauseSubscriptionResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}

static int serve___eventws__ResumeSubscription(struct soap *soap, PullPointSubscriptionBindingService *service)
{	struct __eventws__ResumeSubscription soap_tmp___eventws__ResumeSubscription;
	_wsnt__ResumeSubscriptionResponse wsnt__ResumeSubscriptionResponse;
	wsnt__ResumeSubscriptionResponse.soap_default(soap);
	soap_default___eventws__ResumeSubscription(soap, &soap_tmp___eventws__ResumeSubscription);
	if (!soap_get___eventws__ResumeSubscription(soap, &soap_tmp___eventws__ResumeSubscription, "-eventws:ResumeSubscription", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = service->ResumeSubscription(soap_tmp___eventws__ResumeSubscription.wsnt__ResumeSubscription, wsnt__ResumeSubscriptionResponse);
	if (soap->error)
		return soap->error;
	soap->encodingStyle = NULL;
	soap_serializeheader(soap);
	wsnt__ResumeSubscriptionResponse.soap_serialize(soap);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || wsnt__ResumeSubscriptionResponse.soap_put(soap, "wsnt:ResumeSubscriptionResponse", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || wsnt__ResumeSubscriptionResponse.soap_put(soap, "wsnt:ResumeSubscriptionResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}
/* End of server object code */
