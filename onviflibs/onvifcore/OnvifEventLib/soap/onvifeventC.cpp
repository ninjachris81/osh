/* onvifeventC.cpp
   Generated by gSOAP 2.8.22 from rcx.h

Copyright(C) 2000-2015, Robert van Engelen, Genivia Inc. All Rights Reserved.
The generated code is released under one of the following licenses:
GPL or Genivia's license for commercial use.
This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
*/

#if defined(__BORLANDC__)
#pragma option push -w-8060
#pragma option push -w-8004
#endif

#include "onvifeventH.h"

SOAP_SOURCE_STAMP("@(#) onvifeventC.cpp ver 2.8.22 2015-11-25 08:32:59 GMT")


#ifndef WITH_NOGLOBAL

SOAP_FMAC3 int SOAP_FMAC4 soap_getheader(struct soap *soap)
{
	soap->part = SOAP_IN_HEADER;
	soap->header = soap_in_SOAP_ENV__Header(soap, "SOAP-ENV:Header", soap->header, NULL);
	soap->part = SOAP_END_HEADER;
	return soap->header == NULL;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_putheader(struct soap *soap)
{
	if (soap->version && soap->header)
	{	soap->part = SOAP_IN_HEADER;
		if (soap_out_SOAP_ENV__Header(soap, "SOAP-ENV:Header", 0, soap->header, NULL))
			return soap->error;
		soap->part = SOAP_END_HEADER;
	}
	return SOAP_OK;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serializeheader(struct soap *soap)
{
	if (soap->version && soap->header)
		soap_serialize_SOAP_ENV__Header(soap, soap->header);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_header(struct soap *soap)
{
	if (soap->header == NULL)
	{	if ((soap->header = soap_new_SOAP_ENV__Header(soap, -1)))
			soap_default_SOAP_ENV__Header(soap, soap->header);
	}
}

SOAP_FMAC3 void SOAP_FMAC4 soap_fault(struct soap *soap)
{
	if (soap->fault == NULL)
	{	soap->fault = soap_new_SOAP_ENV__Fault(soap, -1);
		if (soap->fault == NULL)
			return;
		soap_default_SOAP_ENV__Fault(soap, soap->fault);
	}
	if (soap->version == 2 && !soap->fault->SOAP_ENV__Code)
	{	soap->fault->SOAP_ENV__Code = soap_new_SOAP_ENV__Code(soap, -1);
		soap_default_SOAP_ENV__Code(soap, soap->fault->SOAP_ENV__Code);
	}
	if (soap->version == 2 && !soap->fault->SOAP_ENV__Reason)
	{	soap->fault->SOAP_ENV__Reason = soap_new_SOAP_ENV__Reason(soap, -1);
		soap_default_SOAP_ENV__Reason(soap, soap->fault->SOAP_ENV__Reason);
	}
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serializefault(struct soap *soap)
{
	soap_fault(soap);
	if (soap->fault)
		soap_serialize_SOAP_ENV__Fault(soap, soap->fault);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_putfault(struct soap *soap)
{
	if (soap->fault)
		return soap_put_SOAP_ENV__Fault(soap, soap->fault, "SOAP-ENV:Fault", NULL);
	return SOAP_OK;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_getfault(struct soap *soap)
{
	return (soap->fault = soap_get_SOAP_ENV__Fault(soap, NULL, "SOAP-ENV:Fault", NULL)) == NULL;
}

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultcode(struct soap *soap)
{
	soap_fault(soap);
	if (soap->version == 2 && soap->fault->SOAP_ENV__Code)
		return (const char**)(void*)&soap->fault->SOAP_ENV__Code->SOAP_ENV__Value;
	return (const char**)(void*)&soap->fault->faultcode;
}

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultsubcode(struct soap *soap)
{
	soap_fault(soap);
	if (soap->version == 2)
	{	if (soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode == NULL)
		{	soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode = soap_new_SOAP_ENV__Code(soap, -1);
			soap_default_SOAP_ENV__Code(soap, soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode);
		}
		return (const char**)(void*)&soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode->SOAP_ENV__Value;
	}
	return (const char**)(void*)&soap->fault->faultcode;
}

SOAP_FMAC3 const char * SOAP_FMAC4 soap_check_faultsubcode(struct soap *soap)
{
	soap_fault(soap);
	if (soap->version == 2)
	{	if (soap->fault->SOAP_ENV__Code && soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode)
			return soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode->SOAP_ENV__Value;
		return NULL;
	}
	return soap->fault->faultcode;
}

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultstring(struct soap *soap)
{
	soap_fault(soap);
	if (soap->version == 2)
		return (const char**)(void*)&soap->fault->SOAP_ENV__Reason->SOAP_ENV__Text;
	return (const char**)(void*)&soap->fault->faultstring;
}

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultdetail(struct soap *soap)
{
	soap_fault(soap);
	if (soap->version == 2)
	{	if (soap->fault->SOAP_ENV__Detail == NULL)
		{	soap->fault->SOAP_ENV__Detail = soap_new_SOAP_ENV__Detail(soap, -1);
			soap_default_SOAP_ENV__Detail(soap, soap->fault->SOAP_ENV__Detail);
		}
		return (const char**)(void*)&soap->fault->SOAP_ENV__Detail->__any;
	}
	if (soap->fault->detail == NULL)
	{	soap->fault->detail = soap_new_SOAP_ENV__Detail(soap, -1);
		soap_default_SOAP_ENV__Detail(soap, soap->fault->detail);
	}
	return (const char**)(void*)&soap->fault->detail->__any;
}

SOAP_FMAC3 const char * SOAP_FMAC4 soap_check_faultdetail(struct soap *soap)
{
	soap_fault(soap);
	if (soap->version == 2 && soap->fault->SOAP_ENV__Detail)
		return soap->fault->SOAP_ENV__Detail->__any;
	if (soap->fault->detail)
		return soap->fault->detail->__any;
	return NULL;
}

#endif

#ifndef WITH_NOIDREF
SOAP_FMAC3 int SOAP_FMAC4 soap_getindependent(struct soap *soap)
{
	int t;
	if (soap->version == 1)
	{	for (;;)
		{	if (!soap_getelement(soap, &t))
				if (soap->error || soap_ignore_element(soap))
					break;
		}
	}
	if (soap->error == SOAP_NO_TAG || soap->error == SOAP_EOF)
		soap->error = SOAP_OK;
	return soap->error;
}
#endif

#ifdef __cplusplus
extern "C" {
#endif
SOAP_FMAC3 void * SOAP_FMAC4 soap_getelement(struct soap *soap, int *type)
{	(void)type;
	if (soap_peek_element(soap))
		return NULL;
#ifndef WITH_NOIDREF
	if (!*soap->id || !(*type = soap_lookup_type(soap, soap->id)))
		*type = soap_lookup_type(soap, soap->href);
	switch (*type)
	{
	case SOAP_TYPE_byte:
		return soap_in_byte(soap, NULL, NULL, "xsd:byte");
	case SOAP_TYPE_int:
		return soap_in_int(soap, NULL, NULL, "xsd:int");
	case SOAP_TYPE_xsd__duration:
		return soap_in_xsd__duration(soap, NULL, NULL, "xsd:duration");
	case SOAP_TYPE_unsignedLONG64:
		return soap_in_unsignedLONG64(soap, NULL, NULL, "xsd:unsignedLong");
	case SOAP_TYPE_time:
		return soap_in_time(soap, NULL, NULL, "xsd:dateTime");
	case SOAP_TYPE_bool:
		return soap_in_bool(soap, NULL, NULL, "xsd:boolean");
	case SOAP_TYPE__wsa5__IsReferenceParameter:
		return soap_in__wsa5__IsReferenceParameter(soap, NULL, NULL, "wsa5:IsReferenceParameter");
	case SOAP_TYPE_wsa5__FaultCodesType:
		return soap_in_wsa5__FaultCodesType(soap, NULL, NULL, "wsa5:FaultCodesType");
	case SOAP_TYPE_wsa5__RelationshipType:
		return soap_in_wsa5__RelationshipType(soap, NULL, NULL, "wsa5:RelationshipType");
	case SOAP_TYPE_wstop__SimpleTopicExpression__:
		return soap_in_wstop__SimpleTopicExpression__(soap, NULL, NULL, "wstop:SimpleTopicExpression");
	case SOAP_TYPE_wstop__SimpleTopicExpression:
		return soap_in_wstop__SimpleTopicExpression(soap, NULL, NULL, "wstop:SimpleTopicExpression");
	case SOAP_TYPE_wstop__ConcreteTopicExpression__:
		return soap_in_wstop__ConcreteTopicExpression__(soap, NULL, NULL, "wstop:ConcreteTopicExpression");
	case SOAP_TYPE_wstop__ConcreteTopicExpression:
		return soap_in_wstop__ConcreteTopicExpression(soap, NULL, NULL, "wstop:ConcreteTopicExpression");
	case SOAP_TYPE_wstop__FullTopicExpression__:
		return soap_in_wstop__FullTopicExpression__(soap, NULL, NULL, "wstop:FullTopicExpression");
	case SOAP_TYPE_wstop__FullTopicExpression:
		return soap_in_wstop__FullTopicExpression(soap, NULL, NULL, "wstop:FullTopicExpression");
	case SOAP_TYPE_wsnt__AbsoluteOrRelativeTimeType:
		return soap_in_wsnt__AbsoluteOrRelativeTimeType(soap, NULL, NULL, "wsnt:AbsoluteOrRelativeTimeType");
	case SOAP_TYPE_wstop__TopicSetType:
		return soap_in_wstop__TopicSetType(soap, NULL, NULL, "wstop:TopicSetType");
	case SOAP_TYPE_wstop__TopicType:
		return soap_in_wstop__TopicType(soap, NULL, NULL, "wstop:TopicType");
	case SOAP_TYPE_wstop__TopicNamespaceType:
		return soap_in_wstop__TopicNamespaceType(soap, NULL, NULL, "wstop:TopicNamespaceType");
	case SOAP_TYPE_wstop__QueryExpressionType:
		return soap_in_wstop__QueryExpressionType(soap, NULL, NULL, "wstop:QueryExpressionType");
	case SOAP_TYPE_wstop__ExtensibleDocumented:
		return soap_in_wstop__ExtensibleDocumented(soap, NULL, NULL, "wstop:ExtensibleDocumented");
	case SOAP_TYPE_wstop__Documentation:
		return soap_in_wstop__Documentation(soap, NULL, NULL, "wstop:Documentation");
	case SOAP_TYPE_wsnt__ResumeFailedFaultType:
		return soap_in_wsnt__ResumeFailedFaultType(soap, NULL, NULL, "wsnt:ResumeFailedFaultType");
	case SOAP_TYPE_wsnt__PauseFailedFaultType:
		return soap_in_wsnt__PauseFailedFaultType(soap, NULL, NULL, "wsnt:PauseFailedFaultType");
	case SOAP_TYPE_wsnt__UnableToDestroySubscriptionFaultType:
		return soap_in_wsnt__UnableToDestroySubscriptionFaultType(soap, NULL, NULL, "wsnt:UnableToDestroySubscriptionFaultType");
	case SOAP_TYPE_wsnt__UnacceptableTerminationTimeFaultType:
		return soap_in_wsnt__UnacceptableTerminationTimeFaultType(soap, NULL, NULL, "wsnt:UnacceptableTerminationTimeFaultType");
	case SOAP_TYPE_wsnt__UnableToCreatePullPointFaultType:
		return soap_in_wsnt__UnableToCreatePullPointFaultType(soap, NULL, NULL, "wsnt:UnableToCreatePullPointFaultType");
	case SOAP_TYPE_wsnt__UnableToDestroyPullPointFaultType:
		return soap_in_wsnt__UnableToDestroyPullPointFaultType(soap, NULL, NULL, "wsnt:UnableToDestroyPullPointFaultType");
	case SOAP_TYPE_wsnt__UnableToGetMessagesFaultType:
		return soap_in_wsnt__UnableToGetMessagesFaultType(soap, NULL, NULL, "wsnt:UnableToGetMessagesFaultType");
	case SOAP_TYPE_wsnt__NoCurrentMessageOnTopicFaultType:
		return soap_in_wsnt__NoCurrentMessageOnTopicFaultType(soap, NULL, NULL, "wsnt:NoCurrentMessageOnTopicFaultType");
	case SOAP_TYPE_wsnt__UnacceptableInitialTerminationTimeFaultType:
		return soap_in_wsnt__UnacceptableInitialTerminationTimeFaultType(soap, NULL, NULL, "wsnt:UnacceptableInitialTerminationTimeFaultType");
	case SOAP_TYPE_wsnt__NotifyMessageNotSupportedFaultType:
		return soap_in_wsnt__NotifyMessageNotSupportedFaultType(soap, NULL, NULL, "wsnt:NotifyMessageNotSupportedFaultType");
	case SOAP_TYPE_wsnt__UnsupportedPolicyRequestFaultType:
		return soap_in_wsnt__UnsupportedPolicyRequestFaultType(soap, NULL, NULL, "wsnt:UnsupportedPolicyRequestFaultType");
	case SOAP_TYPE_wsnt__UnrecognizedPolicyRequestFaultType:
		return soap_in_wsnt__UnrecognizedPolicyRequestFaultType(soap, NULL, NULL, "wsnt:UnrecognizedPolicyRequestFaultType");
	case SOAP_TYPE_wsnt__InvalidMessageContentExpressionFaultType:
		return soap_in_wsnt__InvalidMessageContentExpressionFaultType(soap, NULL, NULL, "wsnt:InvalidMessageContentExpressionFaultType");
	case SOAP_TYPE_wsnt__InvalidProducerPropertiesExpressionFaultType:
		return soap_in_wsnt__InvalidProducerPropertiesExpressionFaultType(soap, NULL, NULL, "wsnt:InvalidProducerPropertiesExpressionFaultType");
	case SOAP_TYPE_wsnt__MultipleTopicsSpecifiedFaultType:
		return soap_in_wsnt__MultipleTopicsSpecifiedFaultType(soap, NULL, NULL, "wsnt:MultipleTopicsSpecifiedFaultType");
	case SOAP_TYPE_wsnt__TopicNotSupportedFaultType:
		return soap_in_wsnt__TopicNotSupportedFaultType(soap, NULL, NULL, "wsnt:TopicNotSupportedFaultType");
	case SOAP_TYPE_wsnt__InvalidTopicExpressionFaultType:
		return soap_in_wsnt__InvalidTopicExpressionFaultType(soap, NULL, NULL, "wsnt:InvalidTopicExpressionFaultType");
	case SOAP_TYPE_wsnt__TopicExpressionDialectUnknownFaultType:
		return soap_in_wsnt__TopicExpressionDialectUnknownFaultType(soap, NULL, NULL, "wsnt:TopicExpressionDialectUnknownFaultType");
	case SOAP_TYPE_wsnt__InvalidFilterFaultType:
		return soap_in_wsnt__InvalidFilterFaultType(soap, NULL, NULL, "wsnt:InvalidFilterFaultType");
	case SOAP_TYPE_wsnt__SubscribeCreationFailedFaultType:
		return soap_in_wsnt__SubscribeCreationFailedFaultType(soap, NULL, NULL, "wsnt:SubscribeCreationFailedFaultType");
	case SOAP_TYPE_wsnt__NotificationMessageHolderType:
		return soap_in_wsnt__NotificationMessageHolderType(soap, NULL, NULL, "wsnt:NotificationMessageHolderType");
	case SOAP_TYPE_wsnt__SubscriptionPolicyType:
		return soap_in_wsnt__SubscriptionPolicyType(soap, NULL, NULL, "wsnt:SubscriptionPolicyType");
	case SOAP_TYPE_wsnt__FilterType:
		return soap_in_wsnt__FilterType(soap, NULL, NULL, "wsnt:FilterType");
	case SOAP_TYPE_wsnt__TopicExpressionType:
		return soap_in_wsnt__TopicExpressionType(soap, NULL, NULL, "wsnt:TopicExpressionType");
	case SOAP_TYPE_wsnt__QueryExpressionType:
		return soap_in_wsnt__QueryExpressionType(soap, NULL, NULL, "wsnt:QueryExpressionType");
	case SOAP_TYPE_wsrfbf__BaseFaultType:
		return soap_in_wsrfbf__BaseFaultType(soap, NULL, NULL, "wsrfbf:BaseFaultType");
	case SOAP_TYPE_wsrfr__ResourceUnavailableFaultType:
		return soap_in_wsrfr__ResourceUnavailableFaultType(soap, NULL, NULL, "wsrfr:ResourceUnavailableFaultType");
	case SOAP_TYPE_wsrfr__ResourceUnknownFaultType:
		return soap_in_wsrfr__ResourceUnknownFaultType(soap, NULL, NULL, "wsrfr:ResourceUnknownFaultType");
	case SOAP_TYPE_eventws__SubscriptionPolicy:
		return soap_in_eventws__SubscriptionPolicy(soap, NULL, NULL, "eventws:SubscriptionPolicy");
	case SOAP_TYPE_eventws__Capabilities:
		return soap_in_eventws__Capabilities(soap, NULL, NULL, "eventws:Capabilities");
	case SOAP_TYPE_xsd__token_:
		return soap_in_xsd__token_(soap, NULL, NULL, "xsd:token");
	case SOAP_TYPE_xsd__token:
		return soap_in_xsd__token(soap, NULL, NULL, "xsd:token");
	case SOAP_TYPE_xsd__string:
		return soap_in_xsd__string(soap, NULL, NULL, "xsd:string");
	case SOAP_TYPE_xsd__nonNegativeInteger_:
		return soap_in_xsd__nonNegativeInteger_(soap, NULL, NULL, "xsd:nonNegativeInteger");
	case SOAP_TYPE_xsd__nonNegativeInteger:
		return soap_in_xsd__nonNegativeInteger(soap, NULL, NULL, "xsd:nonNegativeInteger");
	case SOAP_TYPE_xsd__int:
		return soap_in_xsd__int(soap, NULL, NULL, "xsd:int");
	case SOAP_TYPE_xsd__duration_:
		return soap_in_xsd__duration_(soap, NULL, NULL, "xsd:duration");
	case SOAP_TYPE_xsd__dateTime:
		return soap_in_xsd__dateTime(soap, NULL, NULL, "xsd:dateTime");
	case SOAP_TYPE_xsd__boolean:
		return soap_in_xsd__boolean(soap, NULL, NULL, "xsd:boolean");
	case SOAP_TYPE_xsd__anyURI_:
		return soap_in_xsd__anyURI_(soap, NULL, NULL, "xsd:anyURI");
	case SOAP_TYPE_xsd__anyURI:
		return soap_in_xsd__anyURI(soap, NULL, NULL, "xsd:anyURI");
	case SOAP_TYPE_xsd__QName_:
		return soap_in_xsd__QName_(soap, NULL, NULL, "xsd:QName");
	case SOAP_TYPE_xsd__NCName_:
		return soap_in_xsd__NCName_(soap, NULL, NULL, "xsd:NCName");
	case SOAP_TYPE_xsd__NCName:
		return soap_in_xsd__NCName(soap, NULL, NULL, "xsd:NCName");
	case SOAP_TYPE_xsd__QName:
		return soap_in_xsd__QName(soap, NULL, NULL, "xsd:QName");
	case SOAP_TYPE_std__string:
		return soap_in_std__string(soap, NULL, NULL, "xsd:string");
	case SOAP_TYPE_xsd__anyType:
		return soap_in_xsd__anyType(soap, NULL, NULL, "xsd:anyType");
	case SOAP_TYPE_chan__ChannelInstanceType:
		return soap_in_chan__ChannelInstanceType(soap, NULL, NULL, "chan:ChannelInstanceType");
	case SOAP_TYPE_wsa5__ProblemActionType:
		return soap_in_wsa5__ProblemActionType(soap, NULL, NULL, "wsa5:ProblemActionType");
	case SOAP_TYPE_wsa5__RelatesToType:
		return soap_in_wsa5__RelatesToType(soap, NULL, NULL, "wsa5:RelatesToType");
	case SOAP_TYPE_wsa5__MetadataType:
		return soap_in_wsa5__MetadataType(soap, NULL, NULL, "wsa5:MetadataType");
	case SOAP_TYPE_wsa5__ReferenceParametersType:
		return soap_in_wsa5__ReferenceParametersType(soap, NULL, NULL, "wsa5:ReferenceParametersType");
	case SOAP_TYPE_wsa5__EndpointReferenceType:
		return soap_in_wsa5__EndpointReferenceType(soap, NULL, NULL, "wsa5:EndpointReferenceType");
	case SOAP_TYPE_PointerTo_wsnt__ResumeSubscription:
		return soap_in_PointerTo_wsnt__ResumeSubscription(soap, NULL, NULL, "wsnt:ResumeSubscription");
	case SOAP_TYPE_PointerTo_wsnt__PauseSubscription:
		return soap_in_PointerTo_wsnt__PauseSubscription(soap, NULL, NULL, "wsnt:PauseSubscription");
	case SOAP_TYPE_PointerTo_wsnt__CreatePullPoint:
		return soap_in_PointerTo_wsnt__CreatePullPoint(soap, NULL, NULL, "wsnt:CreatePullPoint");
	case SOAP_TYPE_PointerTo_wsnt__DestroyPullPoint:
		return soap_in_PointerTo_wsnt__DestroyPullPoint(soap, NULL, NULL, "wsnt:DestroyPullPoint");
	case SOAP_TYPE_PointerTo_wsnt__GetMessages:
		return soap_in_PointerTo_wsnt__GetMessages(soap, NULL, NULL, "wsnt:GetMessages");
	case SOAP_TYPE_PointerTo_wsnt__Notify:
		return soap_in_PointerTo_wsnt__Notify(soap, NULL, NULL, "wsnt:Notify");
	case SOAP_TYPE_PointerTo_wsnt__GetCurrentMessage:
		return soap_in_PointerTo_wsnt__GetCurrentMessage(soap, NULL, NULL, "wsnt:GetCurrentMessage");
	case SOAP_TYPE_PointerTo_wsnt__Subscribe:
		return soap_in_PointerTo_wsnt__Subscribe(soap, NULL, NULL, "wsnt:Subscribe");
	case SOAP_TYPE_PointerTo_wsnt__Unsubscribe:
		return soap_in_PointerTo_wsnt__Unsubscribe(soap, NULL, NULL, "wsnt:Unsubscribe");
	case SOAP_TYPE_PointerTo_wsnt__Renew:
		return soap_in_PointerTo_wsnt__Renew(soap, NULL, NULL, "wsnt:Renew");
	case SOAP_TYPE_PointerTo_eventws__GetEventProperties:
		return soap_in_PointerTo_eventws__GetEventProperties(soap, NULL, NULL, "eventws:GetEventProperties");
	case SOAP_TYPE_PointerTo_eventws__CreatePullPointSubscription:
		return soap_in_PointerTo_eventws__CreatePullPointSubscription(soap, NULL, NULL, "eventws:CreatePullPointSubscription");
	case SOAP_TYPE_PointerTo_eventws__GetServiceCapabilities:
		return soap_in_PointerTo_eventws__GetServiceCapabilities(soap, NULL, NULL, "eventws:GetServiceCapabilities");
	case SOAP_TYPE_PointerTo_eventws__SetSynchronizationPoint:
		return soap_in_PointerTo_eventws__SetSynchronizationPoint(soap, NULL, NULL, "eventws:SetSynchronizationPoint");
	case SOAP_TYPE_PointerTo_eventws__Seek:
		return soap_in_PointerTo_eventws__Seek(soap, NULL, NULL, "eventws:Seek");
	case SOAP_TYPE_PointerTo_eventws__PullMessages:
		return soap_in_PointerTo_eventws__PullMessages(soap, NULL, NULL, "eventws:PullMessages");
	case SOAP_TYPE_PointerTowsnt__UnsupportedPolicyRequestFaultType:
		return soap_in_PointerTowsnt__UnsupportedPolicyRequestFaultType(soap, NULL, NULL, "wsnt:UnsupportedPolicyRequestFaultType");
	case SOAP_TYPE_PointerTowsnt__UnrecognizedPolicyRequestFaultType:
		return soap_in_PointerTowsnt__UnrecognizedPolicyRequestFaultType(soap, NULL, NULL, "wsnt:UnrecognizedPolicyRequestFaultType");
	case SOAP_TYPE_PointerTowsnt__UnacceptableTerminationTimeFaultType:
		return soap_in_PointerTowsnt__UnacceptableTerminationTimeFaultType(soap, NULL, NULL, "wsnt:UnacceptableTerminationTimeFaultType");
	case SOAP_TYPE_PointerTowsnt__UnacceptableInitialTerminationTimeFaultType:
		return soap_in_PointerTowsnt__UnacceptableInitialTerminationTimeFaultType(soap, NULL, NULL, "wsnt:UnacceptableInitialTerminationTimeFaultType");
	case SOAP_TYPE_PointerTowsnt__UnableToGetMessagesFaultType:
		return soap_in_PointerTowsnt__UnableToGetMessagesFaultType(soap, NULL, NULL, "wsnt:UnableToGetMessagesFaultType");
	case SOAP_TYPE_PointerTowsnt__UnableToDestroySubscriptionFaultType:
		return soap_in_PointerTowsnt__UnableToDestroySubscriptionFaultType(soap, NULL, NULL, "wsnt:UnableToDestroySubscriptionFaultType");
	case SOAP_TYPE_PointerTowsnt__UnableToDestroyPullPointFaultType:
		return soap_in_PointerTowsnt__UnableToDestroyPullPointFaultType(soap, NULL, NULL, "wsnt:UnableToDestroyPullPointFaultType");
	case SOAP_TYPE_PointerTowsnt__UnableToCreatePullPointFaultType:
		return soap_in_PointerTowsnt__UnableToCreatePullPointFaultType(soap, NULL, NULL, "wsnt:UnableToCreatePullPointFaultType");
	case SOAP_TYPE_PointerTowsnt__TopicNotSupportedFaultType:
		return soap_in_PointerTowsnt__TopicNotSupportedFaultType(soap, NULL, NULL, "wsnt:TopicNotSupportedFaultType");
	case SOAP_TYPE_PointerTowsnt__TopicExpressionDialectUnknownFaultType:
		return soap_in_PointerTowsnt__TopicExpressionDialectUnknownFaultType(soap, NULL, NULL, "wsnt:TopicExpressionDialectUnknownFaultType");
	case SOAP_TYPE_PointerTowsnt__SubscribeCreationFailedFaultType:
		return soap_in_PointerTowsnt__SubscribeCreationFailedFaultType(soap, NULL, NULL, "wsnt:SubscribeCreationFailedFaultType");
	case SOAP_TYPE_PointerTowsnt__ResumeFailedFaultType:
		return soap_in_PointerTowsnt__ResumeFailedFaultType(soap, NULL, NULL, "wsnt:ResumeFailedFaultType");
	case SOAP_TYPE_PointerTowsrfr__ResourceUnknownFaultType:
		return soap_in_PointerTowsrfr__ResourceUnknownFaultType(soap, NULL, NULL, "wsrfr:ResourceUnknownFaultType");
	case SOAP_TYPE_PointerTo_eventws__PullMessagesFaultResponse:
		return soap_in_PointerTo_eventws__PullMessagesFaultResponse(soap, NULL, NULL, "eventws:PullMessagesFaultResponse");
	case SOAP_TYPE_PointerTowsnt__PauseFailedFaultType:
		return soap_in_PointerTowsnt__PauseFailedFaultType(soap, NULL, NULL, "wsnt:PauseFailedFaultType");
	case SOAP_TYPE_PointerTowsnt__NotifyMessageNotSupportedFaultType:
		return soap_in_PointerTowsnt__NotifyMessageNotSupportedFaultType(soap, NULL, NULL, "wsnt:NotifyMessageNotSupportedFaultType");
	case SOAP_TYPE_PointerTowsnt__NoCurrentMessageOnTopicFaultType:
		return soap_in_PointerTowsnt__NoCurrentMessageOnTopicFaultType(soap, NULL, NULL, "wsnt:NoCurrentMessageOnTopicFaultType");
	case SOAP_TYPE_PointerTowsnt__MultipleTopicsSpecifiedFaultType:
		return soap_in_PointerTowsnt__MultipleTopicsSpecifiedFaultType(soap, NULL, NULL, "wsnt:MultipleTopicsSpecifiedFaultType");
	case SOAP_TYPE_PointerTowsnt__InvalidTopicExpressionFaultType:
		return soap_in_PointerTowsnt__InvalidTopicExpressionFaultType(soap, NULL, NULL, "wsnt:InvalidTopicExpressionFaultType");
	case SOAP_TYPE_PointerTowsnt__InvalidProducerPropertiesExpressionFaultType:
		return soap_in_PointerTowsnt__InvalidProducerPropertiesExpressionFaultType(soap, NULL, NULL, "wsnt:InvalidProducerPropertiesExpressionFaultType");
	case SOAP_TYPE_PointerTowsnt__InvalidMessageContentExpressionFaultType:
		return soap_in_PointerTowsnt__InvalidMessageContentExpressionFaultType(soap, NULL, NULL, "wsnt:InvalidMessageContentExpressionFaultType");
	case SOAP_TYPE_PointerTowsnt__InvalidFilterFaultType:
		return soap_in_PointerTowsnt__InvalidFilterFaultType(soap, NULL, NULL, "wsnt:InvalidFilterFaultType");
	case SOAP_TYPE_PointerToxsd__NCName:
		return soap_in_PointerToxsd__NCName(soap, NULL, NULL, "xsd:NCName");
	case SOAP_TYPE_PointerTowstop__ConcreteTopicExpression:
		return soap_in_PointerTowstop__ConcreteTopicExpression(soap, NULL, NULL, "wstop:ConcreteTopicExpression");
	case SOAP_TYPE_PointerToxsd__QName:
		return soap_in_PointerToxsd__QName(soap, NULL, NULL, "xsd:QName");
	case SOAP_TYPE_PointerTowstop__TopicType:
		return soap_in_PointerTowstop__TopicType(soap, NULL, NULL, "wstop:TopicType");
	case SOAP_TYPE_PointerTowstop__QueryExpressionType:
		return soap_in_PointerTowstop__QueryExpressionType(soap, NULL, NULL, "wstop:QueryExpressionType");
	case SOAP_TYPE_PointerTowstop__Documentation:
		return soap_in_PointerTowstop__Documentation(soap, NULL, NULL, "wstop:Documentation");
	case SOAP_TYPE_PointerToxsd__nonNegativeInteger:
		return soap_in_PointerToxsd__nonNegativeInteger(soap, NULL, NULL, "xsd:nonNegativeInteger");
	case SOAP_TYPE_PointerTo_wsnt__Subscribe_SubscriptionPolicy:
		return soap_in_PointerTo_wsnt__Subscribe_SubscriptionPolicy(soap, NULL, NULL, "wsnt:Subscribe-SubscriptionPolicy");
	case SOAP_TYPE_PointerTotime:
		return soap_in_PointerTotime(soap, NULL, NULL, "xsd:dateTime");
	case SOAP_TYPE_PointerTowsnt__SubscriptionPolicyType:
		return soap_in_PointerTowsnt__SubscriptionPolicyType(soap, NULL, NULL, "wsnt:SubscriptionPolicyType");
	case SOAP_TYPE_PointerTowsnt__TopicExpressionType:
		return soap_in_PointerTowsnt__TopicExpressionType(soap, NULL, NULL, "wsnt:TopicExpressionType");
	case SOAP_TYPE_PointerTo_wsrfbf__BaseFaultType_FaultCause:
		return soap_in_PointerTo_wsrfbf__BaseFaultType_FaultCause(soap, NULL, NULL, "wsrfbf:BaseFaultType-FaultCause");
	case SOAP_TYPE_PointerTo_xml__lang:
		return soap_in_PointerTo_xml__lang(soap, NULL, NULL, "xml:lang");
	case SOAP_TYPE_PointerTo_wsrfbf__BaseFaultType_ErrorCode:
		return soap_in_PointerTo_wsrfbf__BaseFaultType_ErrorCode(soap, NULL, NULL, "wsrfbf:BaseFaultType-ErrorCode");
	case SOAP_TYPE_PointerTowsa5__EndpointReferenceType:
		return soap_in_PointerTowsa5__EndpointReferenceType(soap, NULL, NULL, "wsa5:EndpointReferenceType");
	case SOAP_TYPE_PointerTowstop__TopicSetType:
		return soap_in_PointerTowstop__TopicSetType(soap, NULL, NULL, "wstop:TopicSetType");
	case SOAP_TYPE_PointerTowsnt__NotificationMessageHolderType:
		return soap_in_PointerTowsnt__NotificationMessageHolderType(soap, NULL, NULL, "wsnt:NotificationMessageHolderType");
	case SOAP_TYPE_PointerTo_eventws__CreatePullPointSubscription_SubscriptionPolicy:
		return soap_in_PointerTo_eventws__CreatePullPointSubscription_SubscriptionPolicy(soap, NULL, NULL, "eventws:CreatePullPointSubscription-SubscriptionPolicy");
	case SOAP_TYPE_PointerTowsnt__AbsoluteOrRelativeTimeType:
		return soap_in_PointerTowsnt__AbsoluteOrRelativeTimeType(soap, NULL, NULL, "wsnt:AbsoluteOrRelativeTimeType");
	case SOAP_TYPE_PointerTowsnt__FilterType:
		return soap_in_PointerTowsnt__FilterType(soap, NULL, NULL, "wsnt:FilterType");
	case SOAP_TYPE_PointerToeventws__Capabilities:
		return soap_in_PointerToeventws__Capabilities(soap, NULL, NULL, "eventws:Capabilities");
	case SOAP_TYPE_PointerTobool:
		return soap_in_PointerTobool(soap, NULL, NULL, "xsd:boolean");
	case SOAP_TYPE_PointerTochan__ChannelInstanceType:
		return soap_in_PointerTochan__ChannelInstanceType(soap, NULL, NULL, "chan:ChannelInstanceType");
	case SOAP_TYPE_PointerTo_wsa5__FaultTo:
		return soap_in_PointerTo_wsa5__FaultTo(soap, NULL, NULL, "wsa5:FaultTo");
	case SOAP_TYPE_PointerTo_wsa5__ReplyTo:
		return soap_in_PointerTo_wsa5__ReplyTo(soap, NULL, NULL, "wsa5:ReplyTo");
	case SOAP_TYPE_PointerTo_wsa5__From:
		return soap_in_PointerTo_wsa5__From(soap, NULL, NULL, "wsa5:From");
	case SOAP_TYPE_PointerTo_wsa5__RelatesTo:
		return soap_in_PointerTo_wsa5__RelatesTo(soap, NULL, NULL, "wsa5:RelatesTo");
	case SOAP_TYPE__wsa5__ProblemHeaderQName:
	{	char **s;
		s = soap_in__wsa5__ProblemHeaderQName(soap, NULL, NULL, "xsd:QName");
		return s ? *s : NULL;
	}
	case SOAP_TYPE_PointerToint:
		return soap_in_PointerToint(soap, NULL, NULL, "xsd:int");
	case SOAP_TYPE_PointerTowsa5__MetadataType:
		return soap_in_PointerTowsa5__MetadataType(soap, NULL, NULL, "wsa5:MetadataType");
	case SOAP_TYPE_PointerTowsa5__ReferenceParametersType:
		return soap_in_PointerTowsa5__ReferenceParametersType(soap, NULL, NULL, "wsa5:ReferenceParametersType");
	case SOAP_TYPE_wsa5__FaultCodesOpenEnumType:
	{	char **s;
		s = soap_in_wsa5__FaultCodesOpenEnumType(soap, NULL, NULL, "wsa5:FaultCodesOpenEnumType");
		return s ? *s : NULL;
	}
	case SOAP_TYPE_wsa5__RelationshipTypeOpenEnum:
	{	char **s;
		s = soap_in_wsa5__RelationshipTypeOpenEnum(soap, NULL, NULL, "wsa5:RelationshipTypeOpenEnum");
		return s ? *s : NULL;
	}
	case SOAP_TYPE__QName:
	{	char **s;
		s = soap_in__QName(soap, NULL, NULL, "xsd:QName");
		return s ? *s : NULL;
	}
	case SOAP_TYPE_string:
	{	char **s;
		s = soap_in_string(soap, NULL, NULL, "xsd:string");
		return s ? *s : NULL;
	}
	default:
#else
	*type = 0;
#endif
	{	const char *t = soap->type;
		if (!*t)
			t = soap->tag;
		if (!soap_match_tag(soap, t, "wstop:SimpleTopicExpression"))
		{	*type = SOAP_TYPE_wstop__SimpleTopicExpression__;
			return soap_in_wstop__SimpleTopicExpression__(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "wstop:SimpleTopicExpression"))
		{	*type = SOAP_TYPE_wstop__SimpleTopicExpression;
			return soap_in_wstop__SimpleTopicExpression(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "wstop:ConcreteTopicExpression"))
		{	*type = SOAP_TYPE_wstop__ConcreteTopicExpression__;
			return soap_in_wstop__ConcreteTopicExpression__(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "wstop:ConcreteTopicExpression"))
		{	*type = SOAP_TYPE_wstop__ConcreteTopicExpression;
			return soap_in_wstop__ConcreteTopicExpression(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "wstop:FullTopicExpression"))
		{	*type = SOAP_TYPE_wstop__FullTopicExpression__;
			return soap_in_wstop__FullTopicExpression__(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "wstop:FullTopicExpression"))
		{	*type = SOAP_TYPE_wstop__FullTopicExpression;
			return soap_in_wstop__FullTopicExpression(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "wsnt:AbsoluteOrRelativeTimeType"))
		{	*type = SOAP_TYPE_wsnt__AbsoluteOrRelativeTimeType;
			return soap_in_wsnt__AbsoluteOrRelativeTimeType(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "wstop:TopicSetType"))
		{	*type = SOAP_TYPE_wstop__TopicSetType;
			return soap_in_wstop__TopicSetType(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "wstop:TopicType"))
		{	*type = SOAP_TYPE_wstop__TopicType;
			return soap_in_wstop__TopicType(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "wstop:TopicNamespaceType"))
		{	*type = SOAP_TYPE_wstop__TopicNamespaceType;
			return soap_in_wstop__TopicNamespaceType(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "wstop:QueryExpressionType"))
		{	*type = SOAP_TYPE_wstop__QueryExpressionType;
			return soap_in_wstop__QueryExpressionType(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "wstop:ExtensibleDocumented"))
		{	*type = SOAP_TYPE_wstop__ExtensibleDocumented;
			return soap_in_wstop__ExtensibleDocumented(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "wstop:Documentation"))
		{	*type = SOAP_TYPE_wstop__Documentation;
			return soap_in_wstop__Documentation(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "wsnt:ResumeFailedFaultType"))
		{	*type = SOAP_TYPE_wsnt__ResumeFailedFaultType;
			return soap_in_wsnt__ResumeFailedFaultType(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "wsnt:PauseFailedFaultType"))
		{	*type = SOAP_TYPE_wsnt__PauseFailedFaultType;
			return soap_in_wsnt__PauseFailedFaultType(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "wsnt:UnableToDestroySubscriptionFaultType"))
		{	*type = SOAP_TYPE_wsnt__UnableToDestroySubscriptionFaultType;
			return soap_in_wsnt__UnableToDestroySubscriptionFaultType(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "wsnt:UnacceptableTerminationTimeFaultType"))
		{	*type = SOAP_TYPE_wsnt__UnacceptableTerminationTimeFaultType;
			return soap_in_wsnt__UnacceptableTerminationTimeFaultType(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "wsnt:UnableToCreatePullPointFaultType"))
		{	*type = SOAP_TYPE_wsnt__UnableToCreatePullPointFaultType;
			return soap_in_wsnt__UnableToCreatePullPointFaultType(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "wsnt:UnableToDestroyPullPointFaultType"))
		{	*type = SOAP_TYPE_wsnt__UnableToDestroyPullPointFaultType;
			return soap_in_wsnt__UnableToDestroyPullPointFaultType(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "wsnt:UnableToGetMessagesFaultType"))
		{	*type = SOAP_TYPE_wsnt__UnableToGetMessagesFaultType;
			return soap_in_wsnt__UnableToGetMessagesFaultType(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "wsnt:NoCurrentMessageOnTopicFaultType"))
		{	*type = SOAP_TYPE_wsnt__NoCurrentMessageOnTopicFaultType;
			return soap_in_wsnt__NoCurrentMessageOnTopicFaultType(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "wsnt:UnacceptableInitialTerminationTimeFaultType"))
		{	*type = SOAP_TYPE_wsnt__UnacceptableInitialTerminationTimeFaultType;
			return soap_in_wsnt__UnacceptableInitialTerminationTimeFaultType(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "wsnt:NotifyMessageNotSupportedFaultType"))
		{	*type = SOAP_TYPE_wsnt__NotifyMessageNotSupportedFaultType;
			return soap_in_wsnt__NotifyMessageNotSupportedFaultType(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "wsnt:UnsupportedPolicyRequestFaultType"))
		{	*type = SOAP_TYPE_wsnt__UnsupportedPolicyRequestFaultType;
			return soap_in_wsnt__UnsupportedPolicyRequestFaultType(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "wsnt:UnrecognizedPolicyRequestFaultType"))
		{	*type = SOAP_TYPE_wsnt__UnrecognizedPolicyRequestFaultType;
			return soap_in_wsnt__UnrecognizedPolicyRequestFaultType(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "wsnt:InvalidMessageContentExpressionFaultType"))
		{	*type = SOAP_TYPE_wsnt__InvalidMessageContentExpressionFaultType;
			return soap_in_wsnt__InvalidMessageContentExpressionFaultType(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "wsnt:InvalidProducerPropertiesExpressionFaultType"))
		{	*type = SOAP_TYPE_wsnt__InvalidProducerPropertiesExpressionFaultType;
			return soap_in_wsnt__InvalidProducerPropertiesExpressionFaultType(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "wsnt:MultipleTopicsSpecifiedFaultType"))
		{	*type = SOAP_TYPE_wsnt__MultipleTopicsSpecifiedFaultType;
			return soap_in_wsnt__MultipleTopicsSpecifiedFaultType(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "wsnt:TopicNotSupportedFaultType"))
		{	*type = SOAP_TYPE_wsnt__TopicNotSupportedFaultType;
			return soap_in_wsnt__TopicNotSupportedFaultType(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "wsnt:InvalidTopicExpressionFaultType"))
		{	*type = SOAP_TYPE_wsnt__InvalidTopicExpressionFaultType;
			return soap_in_wsnt__InvalidTopicExpressionFaultType(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "wsnt:TopicExpressionDialectUnknownFaultType"))
		{	*type = SOAP_TYPE_wsnt__TopicExpressionDialectUnknownFaultType;
			return soap_in_wsnt__TopicExpressionDialectUnknownFaultType(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "wsnt:InvalidFilterFaultType"))
		{	*type = SOAP_TYPE_wsnt__InvalidFilterFaultType;
			return soap_in_wsnt__InvalidFilterFaultType(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "wsnt:SubscribeCreationFailedFaultType"))
		{	*type = SOAP_TYPE_wsnt__SubscribeCreationFailedFaultType;
			return soap_in_wsnt__SubscribeCreationFailedFaultType(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "wsnt:NotificationMessageHolderType"))
		{	*type = SOAP_TYPE_wsnt__NotificationMessageHolderType;
			return soap_in_wsnt__NotificationMessageHolderType(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "wsnt:SubscriptionPolicyType"))
		{	*type = SOAP_TYPE_wsnt__SubscriptionPolicyType;
			return soap_in_wsnt__SubscriptionPolicyType(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "wsnt:FilterType"))
		{	*type = SOAP_TYPE_wsnt__FilterType;
			return soap_in_wsnt__FilterType(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "wsnt:TopicExpressionType"))
		{	*type = SOAP_TYPE_wsnt__TopicExpressionType;
			return soap_in_wsnt__TopicExpressionType(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "wsnt:QueryExpressionType"))
		{	*type = SOAP_TYPE_wsnt__QueryExpressionType;
			return soap_in_wsnt__QueryExpressionType(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "wsrfbf:BaseFaultType"))
		{	*type = SOAP_TYPE_wsrfbf__BaseFaultType;
			return soap_in_wsrfbf__BaseFaultType(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "wsrfr:ResourceUnavailableFaultType"))
		{	*type = SOAP_TYPE_wsrfr__ResourceUnavailableFaultType;
			return soap_in_wsrfr__ResourceUnavailableFaultType(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "wsrfr:ResourceUnknownFaultType"))
		{	*type = SOAP_TYPE_wsrfr__ResourceUnknownFaultType;
			return soap_in_wsrfr__ResourceUnknownFaultType(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "eventws:SubscriptionPolicy"))
		{	*type = SOAP_TYPE_eventws__SubscriptionPolicy;
			return soap_in_eventws__SubscriptionPolicy(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "eventws:Capabilities"))
		{	*type = SOAP_TYPE_eventws__Capabilities;
			return soap_in_eventws__Capabilities(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:token"))
		{	*type = SOAP_TYPE_xsd__token_;
			return soap_in_xsd__token_(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:token"))
		{	*type = SOAP_TYPE_xsd__token;
			return soap_in_xsd__token(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:string"))
		{	*type = SOAP_TYPE_xsd__string;
			return soap_in_xsd__string(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:nonNegativeInteger"))
		{	*type = SOAP_TYPE_xsd__nonNegativeInteger_;
			return soap_in_xsd__nonNegativeInteger_(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:nonNegativeInteger"))
		{	*type = SOAP_TYPE_xsd__nonNegativeInteger;
			return soap_in_xsd__nonNegativeInteger(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:int"))
		{	*type = SOAP_TYPE_xsd__int;
			return soap_in_xsd__int(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:duration"))
		{	*type = SOAP_TYPE_xsd__duration_;
			return soap_in_xsd__duration_(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:dateTime"))
		{	*type = SOAP_TYPE_xsd__dateTime;
			return soap_in_xsd__dateTime(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:boolean"))
		{	*type = SOAP_TYPE_xsd__boolean;
			return soap_in_xsd__boolean(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:anyURI"))
		{	*type = SOAP_TYPE_xsd__anyURI_;
			return soap_in_xsd__anyURI_(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:anyURI"))
		{	*type = SOAP_TYPE_xsd__anyURI;
			return soap_in_xsd__anyURI(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:QName"))
		{	*type = SOAP_TYPE_xsd__QName_;
			return soap_in_xsd__QName_(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:NCName"))
		{	*type = SOAP_TYPE_xsd__NCName_;
			return soap_in_xsd__NCName_(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:NCName"))
		{	*type = SOAP_TYPE_xsd__NCName;
			return soap_in_xsd__NCName(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:QName"))
		{	*type = SOAP_TYPE_xsd__QName;
			return soap_in_xsd__QName(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:string"))
		{	*type = SOAP_TYPE_std__string;
			return soap_in_std__string(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:anyType"))
		{	*type = SOAP_TYPE_xsd__anyType;
			return soap_in_xsd__anyType(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:byte"))
		{	*type = SOAP_TYPE_byte;
			return soap_in_byte(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:int"))
		{	*type = SOAP_TYPE_int;
			return soap_in_int(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:duration"))
		{	*type = SOAP_TYPE_xsd__duration;
			return soap_in_xsd__duration(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:unsignedLong"))
		{	*type = SOAP_TYPE_unsignedLONG64;
			return soap_in_unsignedLONG64(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:dateTime"))
		{	*type = SOAP_TYPE_time;
			return soap_in_time(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:boolean"))
		{	*type = SOAP_TYPE_bool;
			return soap_in_bool(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "wsa5:IsReferenceParameter"))
		{	*type = SOAP_TYPE__wsa5__IsReferenceParameter;
			return soap_in__wsa5__IsReferenceParameter(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "wsa5:FaultCodesType"))
		{	*type = SOAP_TYPE_wsa5__FaultCodesType;
			return soap_in_wsa5__FaultCodesType(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "wsa5:RelationshipType"))
		{	*type = SOAP_TYPE_wsa5__RelationshipType;
			return soap_in_wsa5__RelationshipType(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "chan:ChannelInstanceType"))
		{	*type = SOAP_TYPE_chan__ChannelInstanceType;
			return soap_in_chan__ChannelInstanceType(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "wsa5:ProblemActionType"))
		{	*type = SOAP_TYPE_wsa5__ProblemActionType;
			return soap_in_wsa5__ProblemActionType(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "wsa5:RelatesToType"))
		{	*type = SOAP_TYPE_wsa5__RelatesToType;
			return soap_in_wsa5__RelatesToType(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "wsa5:MetadataType"))
		{	*type = SOAP_TYPE_wsa5__MetadataType;
			return soap_in_wsa5__MetadataType(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "wsa5:ReferenceParametersType"))
		{	*type = SOAP_TYPE_wsa5__ReferenceParametersType;
			return soap_in_wsa5__ReferenceParametersType(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "wsa5:EndpointReferenceType"))
		{	*type = SOAP_TYPE_wsa5__EndpointReferenceType;
			return soap_in_wsa5__EndpointReferenceType(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:QName"))
		{	char **s;
			*type = SOAP_TYPE__wsa5__ProblemHeaderQName;
			s = soap_in__wsa5__ProblemHeaderQName(soap, NULL, NULL, NULL);
			return s ? *s : NULL;
		}
		if (!soap_match_tag(soap, t, "wsa5:FaultCodesOpenEnumType"))
		{	char **s;
			*type = SOAP_TYPE_wsa5__FaultCodesOpenEnumType;
			s = soap_in_wsa5__FaultCodesOpenEnumType(soap, NULL, NULL, NULL);
			return s ? *s : NULL;
		}
		if (!soap_match_tag(soap, t, "wsa5:RelationshipTypeOpenEnum"))
		{	char **s;
			*type = SOAP_TYPE_wsa5__RelationshipTypeOpenEnum;
			s = soap_in_wsa5__RelationshipTypeOpenEnum(soap, NULL, NULL, NULL);
			return s ? *s : NULL;
		}
		if (!soap_match_tag(soap, t, "xsd:QName"))
		{	char **s;
			*type = SOAP_TYPE__QName;
			s = soap_in__QName(soap, NULL, NULL, NULL);
			return s ? *s : NULL;
		}
		if (!soap_match_tag(soap, t, "xsd:string"))
		{	char **s;
			*type = SOAP_TYPE_string;
			s = soap_in_string(soap, NULL, NULL, NULL);
			return s ? *s : NULL;
		}
		t = soap->tag;
		if (!soap_match_tag(soap, t, "wsa5:RetryAfter"))
		{	*type = SOAP_TYPE__wsa5__RetryAfter;
			return soap_in__wsa5__RetryAfter(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "wstop:TopicNamespaceType-Topic"))
		{	*type = SOAP_TYPE__wstop__TopicNamespaceType_Topic;
			return soap_in__wstop__TopicNamespaceType_Topic(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "wsnt:Subscribe-SubscriptionPolicy"))
		{	*type = SOAP_TYPE__wsnt__Subscribe_SubscriptionPolicy;
			return soap_in__wsnt__Subscribe_SubscriptionPolicy(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "wsnt:NotificationMessageHolderType-Message"))
		{	*type = SOAP_TYPE__wsnt__NotificationMessageHolderType_Message;
			return soap_in__wsnt__NotificationMessageHolderType_Message(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "wsrfbf:BaseFaultType-FaultCause"))
		{	*type = SOAP_TYPE__wsrfbf__BaseFaultType_FaultCause;
			return soap_in__wsrfbf__BaseFaultType_FaultCause(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "wsrfbf:BaseFaultType-Description"))
		{	*type = SOAP_TYPE__wsrfbf__BaseFaultType_Description;
			return soap_in__wsrfbf__BaseFaultType_Description(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "wsrfbf:BaseFaultType-ErrorCode"))
		{	*type = SOAP_TYPE__wsrfbf__BaseFaultType_ErrorCode;
			return soap_in__wsrfbf__BaseFaultType_ErrorCode(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "eventws:CreatePullPointSubscription-SubscriptionPolicy"))
		{	*type = SOAP_TYPE__eventws__CreatePullPointSubscription_SubscriptionPolicy;
			return soap_in__eventws__CreatePullPointSubscription_SubscriptionPolicy(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "wsnt:ResumeSubscriptionResponse"))
		{	*type = SOAP_TYPE__wsnt__ResumeSubscriptionResponse;
			return soap_in__wsnt__ResumeSubscriptionResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "wsnt:ResumeSubscription"))
		{	*type = SOAP_TYPE__wsnt__ResumeSubscription;
			return soap_in__wsnt__ResumeSubscription(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "wsnt:PauseSubscriptionResponse"))
		{	*type = SOAP_TYPE__wsnt__PauseSubscriptionResponse;
			return soap_in__wsnt__PauseSubscriptionResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "wsnt:PauseSubscription"))
		{	*type = SOAP_TYPE__wsnt__PauseSubscription;
			return soap_in__wsnt__PauseSubscription(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "wsnt:UnsubscribeResponse"))
		{	*type = SOAP_TYPE__wsnt__UnsubscribeResponse;
			return soap_in__wsnt__UnsubscribeResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "wsnt:Unsubscribe"))
		{	*type = SOAP_TYPE__wsnt__Unsubscribe;
			return soap_in__wsnt__Unsubscribe(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "wsnt:RenewResponse"))
		{	*type = SOAP_TYPE__wsnt__RenewResponse;
			return soap_in__wsnt__RenewResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "wsnt:Renew"))
		{	*type = SOAP_TYPE__wsnt__Renew;
			return soap_in__wsnt__Renew(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "wsnt:CreatePullPointResponse"))
		{	*type = SOAP_TYPE__wsnt__CreatePullPointResponse;
			return soap_in__wsnt__CreatePullPointResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "wsnt:CreatePullPoint"))
		{	*type = SOAP_TYPE__wsnt__CreatePullPoint;
			return soap_in__wsnt__CreatePullPoint(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "wsnt:DestroyPullPointResponse"))
		{	*type = SOAP_TYPE__wsnt__DestroyPullPointResponse;
			return soap_in__wsnt__DestroyPullPointResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "wsnt:DestroyPullPoint"))
		{	*type = SOAP_TYPE__wsnt__DestroyPullPoint;
			return soap_in__wsnt__DestroyPullPoint(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "wsnt:GetMessagesResponse"))
		{	*type = SOAP_TYPE__wsnt__GetMessagesResponse;
			return soap_in__wsnt__GetMessagesResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "wsnt:GetMessages"))
		{	*type = SOAP_TYPE__wsnt__GetMessages;
			return soap_in__wsnt__GetMessages(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "wsnt:GetCurrentMessageResponse"))
		{	*type = SOAP_TYPE__wsnt__GetCurrentMessageResponse;
			return soap_in__wsnt__GetCurrentMessageResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "wsnt:GetCurrentMessage"))
		{	*type = SOAP_TYPE__wsnt__GetCurrentMessage;
			return soap_in__wsnt__GetCurrentMessage(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "wsnt:SubscribeResponse"))
		{	*type = SOAP_TYPE__wsnt__SubscribeResponse;
			return soap_in__wsnt__SubscribeResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "wsnt:Subscribe"))
		{	*type = SOAP_TYPE__wsnt__Subscribe;
			return soap_in__wsnt__Subscribe(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "wsnt:UseRaw"))
		{	*type = SOAP_TYPE__wsnt__UseRaw;
			return soap_in__wsnt__UseRaw(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "wsnt:Notify"))
		{	*type = SOAP_TYPE__wsnt__Notify;
			return soap_in__wsnt__Notify(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "wsnt:SubscriptionManagerRP"))
		{	*type = SOAP_TYPE__wsnt__SubscriptionManagerRP;
			return soap_in__wsnt__SubscriptionManagerRP(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "wsnt:NotificationProducerRP"))
		{	*type = SOAP_TYPE__wsnt__NotificationProducerRP;
			return soap_in__wsnt__NotificationProducerRP(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "eventws:GetEventPropertiesResponse"))
		{	*type = SOAP_TYPE__eventws__GetEventPropertiesResponse;
			return soap_in__eventws__GetEventPropertiesResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "eventws:GetEventProperties"))
		{	*type = SOAP_TYPE__eventws__GetEventProperties;
			return soap_in__eventws__GetEventProperties(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "eventws:SetSynchronizationPointResponse"))
		{	*type = SOAP_TYPE__eventws__SetSynchronizationPointResponse;
			return soap_in__eventws__SetSynchronizationPointResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "eventws:SetSynchronizationPoint"))
		{	*type = SOAP_TYPE__eventws__SetSynchronizationPoint;
			return soap_in__eventws__SetSynchronizationPoint(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "eventws:SeekResponse"))
		{	*type = SOAP_TYPE__eventws__SeekResponse;
			return soap_in__eventws__SeekResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "eventws:Seek"))
		{	*type = SOAP_TYPE__eventws__Seek;
			return soap_in__eventws__Seek(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "eventws:PullMessagesFaultResponse"))
		{	*type = SOAP_TYPE__eventws__PullMessagesFaultResponse;
			return soap_in__eventws__PullMessagesFaultResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "eventws:PullMessagesResponse"))
		{	*type = SOAP_TYPE__eventws__PullMessagesResponse;
			return soap_in__eventws__PullMessagesResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "eventws:PullMessages"))
		{	*type = SOAP_TYPE__eventws__PullMessages;
			return soap_in__eventws__PullMessages(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "eventws:CreatePullPointSubscriptionResponse"))
		{	*type = SOAP_TYPE__eventws__CreatePullPointSubscriptionResponse;
			return soap_in__eventws__CreatePullPointSubscriptionResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "eventws:CreatePullPointSubscription"))
		{	*type = SOAP_TYPE__eventws__CreatePullPointSubscription;
			return soap_in__eventws__CreatePullPointSubscription(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "eventws:GetServiceCapabilitiesResponse"))
		{	*type = SOAP_TYPE__eventws__GetServiceCapabilitiesResponse;
			return soap_in__eventws__GetServiceCapabilitiesResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "eventws:GetServiceCapabilities"))
		{	*type = SOAP_TYPE__eventws__GetServiceCapabilities;
			return soap_in__eventws__GetServiceCapabilities(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xml:lang"))
		{	*type = SOAP_TYPE__xml__lang;
			return soap_in__xml__lang(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "wsa5:ProblemAction"))
		{	*type = SOAP_TYPE__wsa5__ProblemAction;
			return soap_in__wsa5__ProblemAction(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "wsa5:FaultTo"))
		{	*type = SOAP_TYPE__wsa5__FaultTo;
			return soap_in__wsa5__FaultTo(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "wsa5:From"))
		{	*type = SOAP_TYPE__wsa5__From;
			return soap_in__wsa5__From(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "wsa5:ReplyTo"))
		{	*type = SOAP_TYPE__wsa5__ReplyTo;
			return soap_in__wsa5__ReplyTo(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "wsa5:RelatesTo"))
		{	*type = SOAP_TYPE__wsa5__RelatesTo;
			return soap_in__wsa5__RelatesTo(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "wsa5:Metadata"))
		{	*type = SOAP_TYPE__wsa5__Metadata;
			return soap_in__wsa5__Metadata(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "wsa5:ReferenceParameters"))
		{	*type = SOAP_TYPE__wsa5__ReferenceParameters;
			return soap_in__wsa5__ReferenceParameters(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "wsa5:EndpointReference"))
		{	*type = SOAP_TYPE__wsa5__EndpointReference;
			return soap_in__wsa5__EndpointReference(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "wsa5:ProblemIRI"))
		{	char **s;
			*type = SOAP_TYPE__wsa5__ProblemIRI;
			s = soap_in__wsa5__ProblemIRI(soap, NULL, NULL, NULL);
			return s ? *s : NULL;
		}
		if (!soap_match_tag(soap, t, "wsa5:Action"))
		{	char **s;
			*type = SOAP_TYPE__wsa5__Action;
			s = soap_in__wsa5__Action(soap, NULL, NULL, NULL);
			return s ? *s : NULL;
		}
		if (!soap_match_tag(soap, t, "wsa5:To"))
		{	char **s;
			*type = SOAP_TYPE__wsa5__To;
			s = soap_in__wsa5__To(soap, NULL, NULL, NULL);
			return s ? *s : NULL;
		}
		if (!soap_match_tag(soap, t, "wsa5:MessageID"))
		{	char **s;
			*type = SOAP_TYPE__wsa5__MessageID;
			s = soap_in__wsa5__MessageID(soap, NULL, NULL, NULL);
			return s ? *s : NULL;
		}
#ifndef WITH_NOIDREF
	}
#endif
	}
	soap->error = SOAP_TAG_MISMATCH;
	return NULL;
}

#ifdef __cplusplus
}
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_ignore_element(struct soap *soap)
{
	if (!soap_peek_element(soap))
	{	int t;
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Unexpected element '%s' in input (level = %u, %d)\n", soap->tag, soap->level, soap->body));
		if (soap->mustUnderstand && !soap->other)
			return soap->error = SOAP_MUSTUNDERSTAND;
		if (((soap->mode & SOAP_XML_STRICT) && soap->part != SOAP_IN_HEADER) || !soap_match_tag(soap, soap->tag, "SOAP-ENV:"))
		{	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "REJECTING element '%s'\n", soap->tag));
			return soap->error = SOAP_TAG_MISMATCH;
		}
		if (!*soap->id || !soap_getelement(soap, &t))
		{	soap->peeked = 0;
			if (soap->fignore)
				soap->error = soap->fignore(soap, soap->tag);
			else
				soap->error = SOAP_OK;
			DBGLOG(TEST, if (!soap->error) SOAP_MESSAGE(fdebug, "IGNORING element '%s'\n", soap->tag));
			if (!soap->error && soap->body)
			{	soap->level++;
				while (!soap_ignore_element(soap))
					;
				if (soap->error == SOAP_NO_TAG)
					soap->error = soap_element_end_in(soap, NULL);
			}
		}
	}
	return soap->error;
}

#ifndef WITH_NOIDREF
SOAP_FMAC3 int SOAP_FMAC4 soap_putindependent(struct soap *soap)
{
	int i;
	struct soap_plist *pp;
	if (soap->version == 1 && soap->encodingStyle && !(soap->mode & (SOAP_XML_TREE | SOAP_XML_GRAPH)))
		for (i = 0; i < SOAP_PTRHASH; i++)
			for (pp = soap->pht[i]; pp; pp = pp->next)
				if (pp->mark1 == 2 || pp->mark2 == 2)
					if (soap_putelement(soap, pp->ptr, SOAP_MULTIREFTAG, pp->id, pp->type))
						return soap->error;
	return SOAP_OK;
}
#endif

#ifdef __cplusplus
extern "C" {
#endif
SOAP_FMAC3 int SOAP_FMAC4 soap_putelement(struct soap *soap, const void *ptr, const char *tag, int id, int type)
{	(void)tag;
	switch (type)
	{
	case SOAP_TYPE_byte:
		return soap_out_byte(soap, tag, id, (const char *)ptr, "xsd:byte");
	case SOAP_TYPE_int:
		return soap_out_int(soap, tag, id, (const int *)ptr, "xsd:int");
	case SOAP_TYPE_xsd__duration:
		return soap_out_xsd__duration(soap, tag, id, (const LONG64 *)ptr, "xsd:duration");
	case SOAP_TYPE__wsa5__RetryAfter:
		return soap_out__wsa5__RetryAfter(soap, "wsa5:RetryAfter", id, (const ULONG64 *)ptr, NULL);
	case SOAP_TYPE_unsignedLONG64:
		return soap_out_unsignedLONG64(soap, tag, id, (const ULONG64 *)ptr, "xsd:unsignedLong");
	case SOAP_TYPE_time:
		return soap_out_time(soap, tag, id, (const time_t *)ptr, "xsd:dateTime");
	case SOAP_TYPE_bool:
		return soap_out_bool(soap, tag, id, (const bool *)ptr, "xsd:boolean");
	case SOAP_TYPE__wsa5__IsReferenceParameter:
		return soap_out__wsa5__IsReferenceParameter(soap, tag, id, (const enum _wsa5__IsReferenceParameter *)ptr, "wsa5:IsReferenceParameter");
	case SOAP_TYPE_wsa5__FaultCodesType:
		return soap_out_wsa5__FaultCodesType(soap, tag, id, (const enum wsa5__FaultCodesType *)ptr, "wsa5:FaultCodesType");
	case SOAP_TYPE_wsa5__RelationshipType:
		return soap_out_wsa5__RelationshipType(soap, tag, id, (const enum wsa5__RelationshipType *)ptr, "wsa5:RelationshipType");
	case SOAP_TYPE__wstop__TopicNamespaceType_Topic:
		return ((_wstop__TopicNamespaceType_Topic *)ptr)->soap_out(soap, "wstop:TopicNamespaceType-Topic", id, NULL);
	case SOAP_TYPE__wsnt__Subscribe_SubscriptionPolicy:
		return ((_wsnt__Subscribe_SubscriptionPolicy *)ptr)->soap_out(soap, "wsnt:Subscribe-SubscriptionPolicy", id, NULL);
	case SOAP_TYPE__wsnt__NotificationMessageHolderType_Message:
		return ((_wsnt__NotificationMessageHolderType_Message *)ptr)->soap_out(soap, "wsnt:NotificationMessageHolderType-Message", id, NULL);
	case SOAP_TYPE__wsrfbf__BaseFaultType_FaultCause:
		return ((_wsrfbf__BaseFaultType_FaultCause *)ptr)->soap_out(soap, "wsrfbf:BaseFaultType-FaultCause", id, NULL);
	case SOAP_TYPE__wsrfbf__BaseFaultType_Description:
		return ((_wsrfbf__BaseFaultType_Description *)ptr)->soap_out(soap, "wsrfbf:BaseFaultType-Description", id, NULL);
	case SOAP_TYPE__wsrfbf__BaseFaultType_ErrorCode:
		return ((_wsrfbf__BaseFaultType_ErrorCode *)ptr)->soap_out(soap, "wsrfbf:BaseFaultType-ErrorCode", id, NULL);
	case SOAP_TYPE__eventws__CreatePullPointSubscription_SubscriptionPolicy:
		return ((_eventws__CreatePullPointSubscription_SubscriptionPolicy *)ptr)->soap_out(soap, "eventws:CreatePullPointSubscription-SubscriptionPolicy", id, NULL);
	case SOAP_TYPE_wstop__SimpleTopicExpression__:
		return ((wstop__SimpleTopicExpression__ *)ptr)->soap_out(soap, tag, id, "wstop:SimpleTopicExpression");
	case SOAP_TYPE_wstop__SimpleTopicExpression:
		return soap_out_wstop__SimpleTopicExpression(soap, tag, id, (const std::string *)ptr, "wstop:SimpleTopicExpression");
	case SOAP_TYPE_wstop__ConcreteTopicExpression__:
		return ((wstop__ConcreteTopicExpression__ *)ptr)->soap_out(soap, tag, id, "wstop:ConcreteTopicExpression");
	case SOAP_TYPE_wstop__ConcreteTopicExpression:
		return soap_out_wstop__ConcreteTopicExpression(soap, tag, id, (const std::string *)ptr, "wstop:ConcreteTopicExpression");
	case SOAP_TYPE_wstop__FullTopicExpression__:
		return ((wstop__FullTopicExpression__ *)ptr)->soap_out(soap, tag, id, "wstop:FullTopicExpression");
	case SOAP_TYPE_wstop__FullTopicExpression:
		return soap_out_wstop__FullTopicExpression(soap, tag, id, (const std::string *)ptr, "wstop:FullTopicExpression");
	case SOAP_TYPE_wsnt__AbsoluteOrRelativeTimeType:
		return soap_out_wsnt__AbsoluteOrRelativeTimeType(soap, tag, id, (const std::string *)ptr, "wsnt:AbsoluteOrRelativeTimeType");
	case SOAP_TYPE_wstop__TopicSetType:
		return ((wstop__TopicSetType *)ptr)->soap_out(soap, tag, id, "wstop:TopicSetType");
	case SOAP_TYPE_wstop__TopicType:
		return ((wstop__TopicType *)ptr)->soap_out(soap, tag, id, "wstop:TopicType");
	case SOAP_TYPE_wstop__TopicNamespaceType:
		return ((wstop__TopicNamespaceType *)ptr)->soap_out(soap, tag, id, "wstop:TopicNamespaceType");
	case SOAP_TYPE_wstop__QueryExpressionType:
		return ((wstop__QueryExpressionType *)ptr)->soap_out(soap, tag, id, "wstop:QueryExpressionType");
	case SOAP_TYPE_wstop__ExtensibleDocumented:
		return ((wstop__ExtensibleDocumented *)ptr)->soap_out(soap, tag, id, "wstop:ExtensibleDocumented");
	case SOAP_TYPE_wstop__Documentation:
		return ((wstop__Documentation *)ptr)->soap_out(soap, tag, id, "wstop:Documentation");
	case SOAP_TYPE__wsnt__ResumeSubscriptionResponse:
		return ((_wsnt__ResumeSubscriptionResponse *)ptr)->soap_out(soap, "wsnt:ResumeSubscriptionResponse", id, NULL);
	case SOAP_TYPE__wsnt__ResumeSubscription:
		return ((_wsnt__ResumeSubscription *)ptr)->soap_out(soap, "wsnt:ResumeSubscription", id, NULL);
	case SOAP_TYPE__wsnt__PauseSubscriptionResponse:
		return ((_wsnt__PauseSubscriptionResponse *)ptr)->soap_out(soap, "wsnt:PauseSubscriptionResponse", id, NULL);
	case SOAP_TYPE__wsnt__PauseSubscription:
		return ((_wsnt__PauseSubscription *)ptr)->soap_out(soap, "wsnt:PauseSubscription", id, NULL);
	case SOAP_TYPE__wsnt__UnsubscribeResponse:
		return ((_wsnt__UnsubscribeResponse *)ptr)->soap_out(soap, "wsnt:UnsubscribeResponse", id, NULL);
	case SOAP_TYPE__wsnt__Unsubscribe:
		return ((_wsnt__Unsubscribe *)ptr)->soap_out(soap, "wsnt:Unsubscribe", id, NULL);
	case SOAP_TYPE__wsnt__RenewResponse:
		return ((_wsnt__RenewResponse *)ptr)->soap_out(soap, "wsnt:RenewResponse", id, NULL);
	case SOAP_TYPE__wsnt__Renew:
		return ((_wsnt__Renew *)ptr)->soap_out(soap, "wsnt:Renew", id, NULL);
	case SOAP_TYPE__wsnt__CreatePullPointResponse:
		return ((_wsnt__CreatePullPointResponse *)ptr)->soap_out(soap, "wsnt:CreatePullPointResponse", id, NULL);
	case SOAP_TYPE__wsnt__CreatePullPoint:
		return ((_wsnt__CreatePullPoint *)ptr)->soap_out(soap, "wsnt:CreatePullPoint", id, NULL);
	case SOAP_TYPE__wsnt__DestroyPullPointResponse:
		return ((_wsnt__DestroyPullPointResponse *)ptr)->soap_out(soap, "wsnt:DestroyPullPointResponse", id, NULL);
	case SOAP_TYPE__wsnt__DestroyPullPoint:
		return ((_wsnt__DestroyPullPoint *)ptr)->soap_out(soap, "wsnt:DestroyPullPoint", id, NULL);
	case SOAP_TYPE__wsnt__GetMessagesResponse:
		return ((_wsnt__GetMessagesResponse *)ptr)->soap_out(soap, "wsnt:GetMessagesResponse", id, NULL);
	case SOAP_TYPE__wsnt__GetMessages:
		return ((_wsnt__GetMessages *)ptr)->soap_out(soap, "wsnt:GetMessages", id, NULL);
	case SOAP_TYPE__wsnt__GetCurrentMessageResponse:
		return ((_wsnt__GetCurrentMessageResponse *)ptr)->soap_out(soap, "wsnt:GetCurrentMessageResponse", id, NULL);
	case SOAP_TYPE__wsnt__GetCurrentMessage:
		return ((_wsnt__GetCurrentMessage *)ptr)->soap_out(soap, "wsnt:GetCurrentMessage", id, NULL);
	case SOAP_TYPE__wsnt__SubscribeResponse:
		return ((_wsnt__SubscribeResponse *)ptr)->soap_out(soap, "wsnt:SubscribeResponse", id, NULL);
	case SOAP_TYPE__wsnt__Subscribe:
		return ((_wsnt__Subscribe *)ptr)->soap_out(soap, "wsnt:Subscribe", id, NULL);
	case SOAP_TYPE__wsnt__UseRaw:
		return ((_wsnt__UseRaw *)ptr)->soap_out(soap, "wsnt:UseRaw", id, NULL);
	case SOAP_TYPE__wsnt__Notify:
		return ((_wsnt__Notify *)ptr)->soap_out(soap, "wsnt:Notify", id, NULL);
	case SOAP_TYPE__wsnt__SubscriptionManagerRP:
		return ((_wsnt__SubscriptionManagerRP *)ptr)->soap_out(soap, "wsnt:SubscriptionManagerRP", id, NULL);
	case SOAP_TYPE__wsnt__NotificationProducerRP:
		return ((_wsnt__NotificationProducerRP *)ptr)->soap_out(soap, "wsnt:NotificationProducerRP", id, NULL);
	case SOAP_TYPE_wsnt__ResumeFailedFaultType:
		return ((wsnt__ResumeFailedFaultType *)ptr)->soap_out(soap, tag, id, "wsnt:ResumeFailedFaultType");
	case SOAP_TYPE_wsnt__PauseFailedFaultType:
		return ((wsnt__PauseFailedFaultType *)ptr)->soap_out(soap, tag, id, "wsnt:PauseFailedFaultType");
	case SOAP_TYPE_wsnt__UnableToDestroySubscriptionFaultType:
		return ((wsnt__UnableToDestroySubscriptionFaultType *)ptr)->soap_out(soap, tag, id, "wsnt:UnableToDestroySubscriptionFaultType");
	case SOAP_TYPE_wsnt__UnacceptableTerminationTimeFaultType:
		return ((wsnt__UnacceptableTerminationTimeFaultType *)ptr)->soap_out(soap, tag, id, "wsnt:UnacceptableTerminationTimeFaultType");
	case SOAP_TYPE_wsnt__UnableToCreatePullPointFaultType:
		return ((wsnt__UnableToCreatePullPointFaultType *)ptr)->soap_out(soap, tag, id, "wsnt:UnableToCreatePullPointFaultType");
	case SOAP_TYPE_wsnt__UnableToDestroyPullPointFaultType:
		return ((wsnt__UnableToDestroyPullPointFaultType *)ptr)->soap_out(soap, tag, id, "wsnt:UnableToDestroyPullPointFaultType");
	case SOAP_TYPE_wsnt__UnableToGetMessagesFaultType:
		return ((wsnt__UnableToGetMessagesFaultType *)ptr)->soap_out(soap, tag, id, "wsnt:UnableToGetMessagesFaultType");
	case SOAP_TYPE_wsnt__NoCurrentMessageOnTopicFaultType:
		return ((wsnt__NoCurrentMessageOnTopicFaultType *)ptr)->soap_out(soap, tag, id, "wsnt:NoCurrentMessageOnTopicFaultType");
	case SOAP_TYPE_wsnt__UnacceptableInitialTerminationTimeFaultType:
		return ((wsnt__UnacceptableInitialTerminationTimeFaultType *)ptr)->soap_out(soap, tag, id, "wsnt:UnacceptableInitialTerminationTimeFaultType");
	case SOAP_TYPE_wsnt__NotifyMessageNotSupportedFaultType:
		return ((wsnt__NotifyMessageNotSupportedFaultType *)ptr)->soap_out(soap, tag, id, "wsnt:NotifyMessageNotSupportedFaultType");
	case SOAP_TYPE_wsnt__UnsupportedPolicyRequestFaultType:
		return ((wsnt__UnsupportedPolicyRequestFaultType *)ptr)->soap_out(soap, tag, id, "wsnt:UnsupportedPolicyRequestFaultType");
	case SOAP_TYPE_wsnt__UnrecognizedPolicyRequestFaultType:
		return ((wsnt__UnrecognizedPolicyRequestFaultType *)ptr)->soap_out(soap, tag, id, "wsnt:UnrecognizedPolicyRequestFaultType");
	case SOAP_TYPE_wsnt__InvalidMessageContentExpressionFaultType:
		return ((wsnt__InvalidMessageContentExpressionFaultType *)ptr)->soap_out(soap, tag, id, "wsnt:InvalidMessageContentExpressionFaultType");
	case SOAP_TYPE_wsnt__InvalidProducerPropertiesExpressionFaultType:
		return ((wsnt__InvalidProducerPropertiesExpressionFaultType *)ptr)->soap_out(soap, tag, id, "wsnt:InvalidProducerPropertiesExpressionFaultType");
	case SOAP_TYPE_wsnt__MultipleTopicsSpecifiedFaultType:
		return ((wsnt__MultipleTopicsSpecifiedFaultType *)ptr)->soap_out(soap, tag, id, "wsnt:MultipleTopicsSpecifiedFaultType");
	case SOAP_TYPE_wsnt__TopicNotSupportedFaultType:
		return ((wsnt__TopicNotSupportedFaultType *)ptr)->soap_out(soap, tag, id, "wsnt:TopicNotSupportedFaultType");
	case SOAP_TYPE_wsnt__InvalidTopicExpressionFaultType:
		return ((wsnt__InvalidTopicExpressionFaultType *)ptr)->soap_out(soap, tag, id, "wsnt:InvalidTopicExpressionFaultType");
	case SOAP_TYPE_wsnt__TopicExpressionDialectUnknownFaultType:
		return ((wsnt__TopicExpressionDialectUnknownFaultType *)ptr)->soap_out(soap, tag, id, "wsnt:TopicExpressionDialectUnknownFaultType");
	case SOAP_TYPE_wsnt__InvalidFilterFaultType:
		return ((wsnt__InvalidFilterFaultType *)ptr)->soap_out(soap, tag, id, "wsnt:InvalidFilterFaultType");
	case SOAP_TYPE_wsnt__SubscribeCreationFailedFaultType:
		return ((wsnt__SubscribeCreationFailedFaultType *)ptr)->soap_out(soap, tag, id, "wsnt:SubscribeCreationFailedFaultType");
	case SOAP_TYPE_wsnt__NotificationMessageHolderType:
		return ((wsnt__NotificationMessageHolderType *)ptr)->soap_out(soap, tag, id, "wsnt:NotificationMessageHolderType");
	case SOAP_TYPE_wsnt__SubscriptionPolicyType:
		return ((wsnt__SubscriptionPolicyType *)ptr)->soap_out(soap, tag, id, "wsnt:SubscriptionPolicyType");
	case SOAP_TYPE_wsnt__FilterType:
		return ((wsnt__FilterType *)ptr)->soap_out(soap, tag, id, "wsnt:FilterType");
	case SOAP_TYPE_wsnt__TopicExpressionType:
		return ((wsnt__TopicExpressionType *)ptr)->soap_out(soap, tag, id, "wsnt:TopicExpressionType");
	case SOAP_TYPE_wsnt__QueryExpressionType:
		return ((wsnt__QueryExpressionType *)ptr)->soap_out(soap, tag, id, "wsnt:QueryExpressionType");
	case SOAP_TYPE_wsrfbf__BaseFaultType:
		return ((wsrfbf__BaseFaultType *)ptr)->soap_out(soap, tag, id, "wsrfbf:BaseFaultType");
	case SOAP_TYPE_wsrfr__ResourceUnavailableFaultType:
		return ((wsrfr__ResourceUnavailableFaultType *)ptr)->soap_out(soap, tag, id, "wsrfr:ResourceUnavailableFaultType");
	case SOAP_TYPE_wsrfr__ResourceUnknownFaultType:
		return ((wsrfr__ResourceUnknownFaultType *)ptr)->soap_out(soap, tag, id, "wsrfr:ResourceUnknownFaultType");
	case SOAP_TYPE__eventws__GetEventPropertiesResponse:
		return ((_eventws__GetEventPropertiesResponse *)ptr)->soap_out(soap, "eventws:GetEventPropertiesResponse", id, NULL);
	case SOAP_TYPE__eventws__GetEventProperties:
		return ((_eventws__GetEventProperties *)ptr)->soap_out(soap, "eventws:GetEventProperties", id, NULL);
	case SOAP_TYPE__eventws__SetSynchronizationPointResponse:
		return ((_eventws__SetSynchronizationPointResponse *)ptr)->soap_out(soap, "eventws:SetSynchronizationPointResponse", id, NULL);
	case SOAP_TYPE__eventws__SetSynchronizationPoint:
		return ((_eventws__SetSynchronizationPoint *)ptr)->soap_out(soap, "eventws:SetSynchronizationPoint", id, NULL);
	case SOAP_TYPE__eventws__SeekResponse:
		return ((_eventws__SeekResponse *)ptr)->soap_out(soap, "eventws:SeekResponse", id, NULL);
	case SOAP_TYPE__eventws__Seek:
		return ((_eventws__Seek *)ptr)->soap_out(soap, "eventws:Seek", id, NULL);
	case SOAP_TYPE__eventws__PullMessagesFaultResponse:
		return ((_eventws__PullMessagesFaultResponse *)ptr)->soap_out(soap, "eventws:PullMessagesFaultResponse", id, NULL);
	case SOAP_TYPE__eventws__PullMessagesResponse:
		return ((_eventws__PullMessagesResponse *)ptr)->soap_out(soap, "eventws:PullMessagesResponse", id, NULL);
	case SOAP_TYPE__eventws__PullMessages:
		return ((_eventws__PullMessages *)ptr)->soap_out(soap, "eventws:PullMessages", id, NULL);
	case SOAP_TYPE__eventws__CreatePullPointSubscriptionResponse:
		return ((_eventws__CreatePullPointSubscriptionResponse *)ptr)->soap_out(soap, "eventws:CreatePullPointSubscriptionResponse", id, NULL);
	case SOAP_TYPE__eventws__CreatePullPointSubscription:
		return ((_eventws__CreatePullPointSubscription *)ptr)->soap_out(soap, "eventws:CreatePullPointSubscription", id, NULL);
	case SOAP_TYPE__eventws__GetServiceCapabilitiesResponse:
		return ((_eventws__GetServiceCapabilitiesResponse *)ptr)->soap_out(soap, "eventws:GetServiceCapabilitiesResponse", id, NULL);
	case SOAP_TYPE__eventws__GetServiceCapabilities:
		return ((_eventws__GetServiceCapabilities *)ptr)->soap_out(soap, "eventws:GetServiceCapabilities", id, NULL);
	case SOAP_TYPE_eventws__SubscriptionPolicy:
		return ((eventws__SubscriptionPolicy *)ptr)->soap_out(soap, tag, id, "eventws:SubscriptionPolicy");
	case SOAP_TYPE_eventws__Capabilities:
		return ((eventws__Capabilities *)ptr)->soap_out(soap, tag, id, "eventws:Capabilities");
	case SOAP_TYPE__xml__lang:
		return soap_out__xml__lang(soap, "xml:lang", id, (const std::string *)ptr, NULL);
	case SOAP_TYPE_xsd__token_:
		return ((xsd__token_ *)ptr)->soap_out(soap, tag, id, "xsd:token");
	case SOAP_TYPE_xsd__token:
		return soap_out_xsd__token(soap, tag, id, (const std::string *)ptr, "xsd:token");
	case SOAP_TYPE_xsd__string:
		return ((xsd__string *)ptr)->soap_out(soap, tag, id, "xsd:string");
	case SOAP_TYPE_xsd__nonNegativeInteger_:
		return ((xsd__nonNegativeInteger_ *)ptr)->soap_out(soap, tag, id, "xsd:nonNegativeInteger");
	case SOAP_TYPE_xsd__nonNegativeInteger:
		return soap_out_xsd__nonNegativeInteger(soap, tag, id, (const std::string *)ptr, "xsd:nonNegativeInteger");
	case SOAP_TYPE_xsd__int:
		return ((xsd__int *)ptr)->soap_out(soap, tag, id, "xsd:int");
	case SOAP_TYPE_xsd__duration_:
		return ((xsd__duration_ *)ptr)->soap_out(soap, tag, id, "xsd:duration");
	case SOAP_TYPE_xsd__dateTime:
		return ((xsd__dateTime *)ptr)->soap_out(soap, tag, id, "xsd:dateTime");
	case SOAP_TYPE_xsd__boolean:
		return ((xsd__boolean *)ptr)->soap_out(soap, tag, id, "xsd:boolean");
	case SOAP_TYPE_xsd__anyURI_:
		return ((xsd__anyURI_ *)ptr)->soap_out(soap, tag, id, "xsd:anyURI");
	case SOAP_TYPE_xsd__anyURI:
		return soap_out_xsd__anyURI(soap, tag, id, (const std::string *)ptr, "xsd:anyURI");
	case SOAP_TYPE_xsd__QName_:
		return ((xsd__QName_ *)ptr)->soap_out(soap, tag, id, "xsd:QName");
	case SOAP_TYPE_xsd__NCName_:
		return ((xsd__NCName_ *)ptr)->soap_out(soap, tag, id, "xsd:NCName");
	case SOAP_TYPE_xsd__NCName:
		return soap_out_xsd__NCName(soap, tag, id, (const std::string *)ptr, "xsd:NCName");
	case SOAP_TYPE_xsd__QName:
		return soap_out_xsd__QName(soap, tag, id, (const std::string *)ptr, "xsd:QName");
	case SOAP_TYPE_std__string:
		return soap_out_std__string(soap, tag, id, (const std::string *)ptr, "xsd:string");
	case SOAP_TYPE_xsd__anyType:
		return ((xsd__anyType *)ptr)->soap_out(soap, tag, id, "xsd:anyType");
	case SOAP_TYPE_chan__ChannelInstanceType:
		return soap_out_chan__ChannelInstanceType(soap, tag, id, (const struct chan__ChannelInstanceType *)ptr, "chan:ChannelInstanceType");
	case SOAP_TYPE__wsa5__ProblemAction:
		return soap_out__wsa5__ProblemAction(soap, "wsa5:ProblemAction", id, (const struct wsa5__ProblemActionType *)ptr, NULL);
	case SOAP_TYPE__wsa5__FaultTo:
		return soap_out__wsa5__FaultTo(soap, "wsa5:FaultTo", id, (const struct wsa5__EndpointReferenceType *)ptr, NULL);
	case SOAP_TYPE__wsa5__From:
		return soap_out__wsa5__From(soap, "wsa5:From", id, (const struct wsa5__EndpointReferenceType *)ptr, NULL);
	case SOAP_TYPE__wsa5__ReplyTo:
		return soap_out__wsa5__ReplyTo(soap, "wsa5:ReplyTo", id, (const struct wsa5__EndpointReferenceType *)ptr, NULL);
	case SOAP_TYPE__wsa5__RelatesTo:
		return soap_out__wsa5__RelatesTo(soap, "wsa5:RelatesTo", id, (const struct wsa5__RelatesToType *)ptr, NULL);
	case SOAP_TYPE__wsa5__Metadata:
		return soap_out__wsa5__Metadata(soap, "wsa5:Metadata", id, (const struct wsa5__MetadataType *)ptr, NULL);
	case SOAP_TYPE__wsa5__ReferenceParameters:
		return soap_out__wsa5__ReferenceParameters(soap, "wsa5:ReferenceParameters", id, (const struct wsa5__ReferenceParametersType *)ptr, NULL);
	case SOAP_TYPE__wsa5__EndpointReference:
		return soap_out__wsa5__EndpointReference(soap, "wsa5:EndpointReference", id, (const struct wsa5__EndpointReferenceType *)ptr, NULL);
	case SOAP_TYPE_wsa5__ProblemActionType:
		return soap_out_wsa5__ProblemActionType(soap, tag, id, (const struct wsa5__ProblemActionType *)ptr, "wsa5:ProblemActionType");
	case SOAP_TYPE_wsa5__RelatesToType:
		return soap_out_wsa5__RelatesToType(soap, tag, id, (const struct wsa5__RelatesToType *)ptr, "wsa5:RelatesToType");
	case SOAP_TYPE_wsa5__MetadataType:
		return soap_out_wsa5__MetadataType(soap, tag, id, (const struct wsa5__MetadataType *)ptr, "wsa5:MetadataType");
	case SOAP_TYPE_wsa5__ReferenceParametersType:
		return soap_out_wsa5__ReferenceParametersType(soap, tag, id, (const struct wsa5__ReferenceParametersType *)ptr, "wsa5:ReferenceParametersType");
	case SOAP_TYPE_wsa5__EndpointReferenceType:
		return soap_out_wsa5__EndpointReferenceType(soap, tag, id, (const struct wsa5__EndpointReferenceType *)ptr, "wsa5:EndpointReferenceType");
	case SOAP_TYPE_PointerTo_wsnt__ResumeSubscription:
		return soap_out_PointerTo_wsnt__ResumeSubscription(soap, tag, id, (_wsnt__ResumeSubscription *const*)ptr, "wsnt:ResumeSubscription");
	case SOAP_TYPE_PointerTo_wsnt__PauseSubscription:
		return soap_out_PointerTo_wsnt__PauseSubscription(soap, tag, id, (_wsnt__PauseSubscription *const*)ptr, "wsnt:PauseSubscription");
	case SOAP_TYPE_PointerTo_wsnt__CreatePullPoint:
		return soap_out_PointerTo_wsnt__CreatePullPoint(soap, tag, id, (_wsnt__CreatePullPoint *const*)ptr, "wsnt:CreatePullPoint");
	case SOAP_TYPE_PointerTo_wsnt__DestroyPullPoint:
		return soap_out_PointerTo_wsnt__DestroyPullPoint(soap, tag, id, (_wsnt__DestroyPullPoint *const*)ptr, "wsnt:DestroyPullPoint");
	case SOAP_TYPE_PointerTo_wsnt__GetMessages:
		return soap_out_PointerTo_wsnt__GetMessages(soap, tag, id, (_wsnt__GetMessages *const*)ptr, "wsnt:GetMessages");
	case SOAP_TYPE_PointerTo_wsnt__Notify:
		return soap_out_PointerTo_wsnt__Notify(soap, tag, id, (_wsnt__Notify *const*)ptr, "wsnt:Notify");
	case SOAP_TYPE_PointerTo_wsnt__GetCurrentMessage:
		return soap_out_PointerTo_wsnt__GetCurrentMessage(soap, tag, id, (_wsnt__GetCurrentMessage *const*)ptr, "wsnt:GetCurrentMessage");
	case SOAP_TYPE_PointerTo_wsnt__Subscribe:
		return soap_out_PointerTo_wsnt__Subscribe(soap, tag, id, (_wsnt__Subscribe *const*)ptr, "wsnt:Subscribe");
	case SOAP_TYPE_PointerTo_wsnt__Unsubscribe:
		return soap_out_PointerTo_wsnt__Unsubscribe(soap, tag, id, (_wsnt__Unsubscribe *const*)ptr, "wsnt:Unsubscribe");
	case SOAP_TYPE_PointerTo_wsnt__Renew:
		return soap_out_PointerTo_wsnt__Renew(soap, tag, id, (_wsnt__Renew *const*)ptr, "wsnt:Renew");
	case SOAP_TYPE_PointerTo_eventws__GetEventProperties:
		return soap_out_PointerTo_eventws__GetEventProperties(soap, tag, id, (_eventws__GetEventProperties *const*)ptr, "eventws:GetEventProperties");
	case SOAP_TYPE_PointerTo_eventws__CreatePullPointSubscription:
		return soap_out_PointerTo_eventws__CreatePullPointSubscription(soap, tag, id, (_eventws__CreatePullPointSubscription *const*)ptr, "eventws:CreatePullPointSubscription");
	case SOAP_TYPE_PointerTo_eventws__GetServiceCapabilities:
		return soap_out_PointerTo_eventws__GetServiceCapabilities(soap, tag, id, (_eventws__GetServiceCapabilities *const*)ptr, "eventws:GetServiceCapabilities");
	case SOAP_TYPE_PointerTo_eventws__SetSynchronizationPoint:
		return soap_out_PointerTo_eventws__SetSynchronizationPoint(soap, tag, id, (_eventws__SetSynchronizationPoint *const*)ptr, "eventws:SetSynchronizationPoint");
	case SOAP_TYPE_PointerTo_eventws__Seek:
		return soap_out_PointerTo_eventws__Seek(soap, tag, id, (_eventws__Seek *const*)ptr, "eventws:Seek");
	case SOAP_TYPE_PointerTo_eventws__PullMessages:
		return soap_out_PointerTo_eventws__PullMessages(soap, tag, id, (_eventws__PullMessages *const*)ptr, "eventws:PullMessages");
	case SOAP_TYPE_PointerTowsnt__UnsupportedPolicyRequestFaultType:
		return soap_out_PointerTowsnt__UnsupportedPolicyRequestFaultType(soap, tag, id, (wsnt__UnsupportedPolicyRequestFaultType *const*)ptr, "wsnt:UnsupportedPolicyRequestFaultType");
	case SOAP_TYPE_PointerTowsnt__UnrecognizedPolicyRequestFaultType:
		return soap_out_PointerTowsnt__UnrecognizedPolicyRequestFaultType(soap, tag, id, (wsnt__UnrecognizedPolicyRequestFaultType *const*)ptr, "wsnt:UnrecognizedPolicyRequestFaultType");
	case SOAP_TYPE_PointerTowsnt__UnacceptableTerminationTimeFaultType:
		return soap_out_PointerTowsnt__UnacceptableTerminationTimeFaultType(soap, tag, id, (wsnt__UnacceptableTerminationTimeFaultType *const*)ptr, "wsnt:UnacceptableTerminationTimeFaultType");
	case SOAP_TYPE_PointerTowsnt__UnacceptableInitialTerminationTimeFaultType:
		return soap_out_PointerTowsnt__UnacceptableInitialTerminationTimeFaultType(soap, tag, id, (wsnt__UnacceptableInitialTerminationTimeFaultType *const*)ptr, "wsnt:UnacceptableInitialTerminationTimeFaultType");
	case SOAP_TYPE_PointerTowsnt__UnableToGetMessagesFaultType:
		return soap_out_PointerTowsnt__UnableToGetMessagesFaultType(soap, tag, id, (wsnt__UnableToGetMessagesFaultType *const*)ptr, "wsnt:UnableToGetMessagesFaultType");
	case SOAP_TYPE_PointerTowsnt__UnableToDestroySubscriptionFaultType:
		return soap_out_PointerTowsnt__UnableToDestroySubscriptionFaultType(soap, tag, id, (wsnt__UnableToDestroySubscriptionFaultType *const*)ptr, "wsnt:UnableToDestroySubscriptionFaultType");
	case SOAP_TYPE_PointerTowsnt__UnableToDestroyPullPointFaultType:
		return soap_out_PointerTowsnt__UnableToDestroyPullPointFaultType(soap, tag, id, (wsnt__UnableToDestroyPullPointFaultType *const*)ptr, "wsnt:UnableToDestroyPullPointFaultType");
	case SOAP_TYPE_PointerTowsnt__UnableToCreatePullPointFaultType:
		return soap_out_PointerTowsnt__UnableToCreatePullPointFaultType(soap, tag, id, (wsnt__UnableToCreatePullPointFaultType *const*)ptr, "wsnt:UnableToCreatePullPointFaultType");
	case SOAP_TYPE_PointerTowsnt__TopicNotSupportedFaultType:
		return soap_out_PointerTowsnt__TopicNotSupportedFaultType(soap, tag, id, (wsnt__TopicNotSupportedFaultType *const*)ptr, "wsnt:TopicNotSupportedFaultType");
	case SOAP_TYPE_PointerTowsnt__TopicExpressionDialectUnknownFaultType:
		return soap_out_PointerTowsnt__TopicExpressionDialectUnknownFaultType(soap, tag, id, (wsnt__TopicExpressionDialectUnknownFaultType *const*)ptr, "wsnt:TopicExpressionDialectUnknownFaultType");
	case SOAP_TYPE_PointerTowsnt__SubscribeCreationFailedFaultType:
		return soap_out_PointerTowsnt__SubscribeCreationFailedFaultType(soap, tag, id, (wsnt__SubscribeCreationFailedFaultType *const*)ptr, "wsnt:SubscribeCreationFailedFaultType");
	case SOAP_TYPE_PointerTowsnt__ResumeFailedFaultType:
		return soap_out_PointerTowsnt__ResumeFailedFaultType(soap, tag, id, (wsnt__ResumeFailedFaultType *const*)ptr, "wsnt:ResumeFailedFaultType");
	case SOAP_TYPE_PointerTowsrfr__ResourceUnknownFaultType:
		return soap_out_PointerTowsrfr__ResourceUnknownFaultType(soap, tag, id, (wsrfr__ResourceUnknownFaultType *const*)ptr, "wsrfr:ResourceUnknownFaultType");
	case SOAP_TYPE_PointerTo_eventws__PullMessagesFaultResponse:
		return soap_out_PointerTo_eventws__PullMessagesFaultResponse(soap, tag, id, (_eventws__PullMessagesFaultResponse *const*)ptr, "eventws:PullMessagesFaultResponse");
	case SOAP_TYPE_PointerTowsnt__PauseFailedFaultType:
		return soap_out_PointerTowsnt__PauseFailedFaultType(soap, tag, id, (wsnt__PauseFailedFaultType *const*)ptr, "wsnt:PauseFailedFaultType");
	case SOAP_TYPE_PointerTowsnt__NotifyMessageNotSupportedFaultType:
		return soap_out_PointerTowsnt__NotifyMessageNotSupportedFaultType(soap, tag, id, (wsnt__NotifyMessageNotSupportedFaultType *const*)ptr, "wsnt:NotifyMessageNotSupportedFaultType");
	case SOAP_TYPE_PointerTowsnt__NoCurrentMessageOnTopicFaultType:
		return soap_out_PointerTowsnt__NoCurrentMessageOnTopicFaultType(soap, tag, id, (wsnt__NoCurrentMessageOnTopicFaultType *const*)ptr, "wsnt:NoCurrentMessageOnTopicFaultType");
	case SOAP_TYPE_PointerTowsnt__MultipleTopicsSpecifiedFaultType:
		return soap_out_PointerTowsnt__MultipleTopicsSpecifiedFaultType(soap, tag, id, (wsnt__MultipleTopicsSpecifiedFaultType *const*)ptr, "wsnt:MultipleTopicsSpecifiedFaultType");
	case SOAP_TYPE_PointerTowsnt__InvalidTopicExpressionFaultType:
		return soap_out_PointerTowsnt__InvalidTopicExpressionFaultType(soap, tag, id, (wsnt__InvalidTopicExpressionFaultType *const*)ptr, "wsnt:InvalidTopicExpressionFaultType");
	case SOAP_TYPE_PointerTowsnt__InvalidProducerPropertiesExpressionFaultType:
		return soap_out_PointerTowsnt__InvalidProducerPropertiesExpressionFaultType(soap, tag, id, (wsnt__InvalidProducerPropertiesExpressionFaultType *const*)ptr, "wsnt:InvalidProducerPropertiesExpressionFaultType");
	case SOAP_TYPE_PointerTowsnt__InvalidMessageContentExpressionFaultType:
		return soap_out_PointerTowsnt__InvalidMessageContentExpressionFaultType(soap, tag, id, (wsnt__InvalidMessageContentExpressionFaultType *const*)ptr, "wsnt:InvalidMessageContentExpressionFaultType");
	case SOAP_TYPE_PointerTowsnt__InvalidFilterFaultType:
		return soap_out_PointerTowsnt__InvalidFilterFaultType(soap, tag, id, (wsnt__InvalidFilterFaultType *const*)ptr, "wsnt:InvalidFilterFaultType");
	case SOAP_TYPE_PointerToxsd__NCName:
		return soap_out_PointerToxsd__NCName(soap, tag, id, (std::string *const*)ptr, "xsd:NCName");
	case SOAP_TYPE_PointerTowstop__ConcreteTopicExpression:
		return soap_out_PointerTowstop__ConcreteTopicExpression(soap, tag, id, (std::string *const*)ptr, "wstop:ConcreteTopicExpression");
	case SOAP_TYPE_PointerToxsd__QName:
		return soap_out_PointerToxsd__QName(soap, tag, id, (std::string *const*)ptr, "xsd:QName");
	case SOAP_TYPE_PointerTowstop__TopicType:
		return soap_out_PointerTowstop__TopicType(soap, tag, id, (wstop__TopicType *const*)ptr, "wstop:TopicType");
	case SOAP_TYPE_PointerTowstop__QueryExpressionType:
		return soap_out_PointerTowstop__QueryExpressionType(soap, tag, id, (wstop__QueryExpressionType *const*)ptr, "wstop:QueryExpressionType");
	case SOAP_TYPE_PointerTowstop__Documentation:
		return soap_out_PointerTowstop__Documentation(soap, tag, id, (wstop__Documentation *const*)ptr, "wstop:Documentation");
	case SOAP_TYPE_PointerToxsd__nonNegativeInteger:
		return soap_out_PointerToxsd__nonNegativeInteger(soap, tag, id, (std::string *const*)ptr, "xsd:nonNegativeInteger");
	case SOAP_TYPE_PointerTo_wsnt__Subscribe_SubscriptionPolicy:
		return soap_out_PointerTo_wsnt__Subscribe_SubscriptionPolicy(soap, tag, id, (_wsnt__Subscribe_SubscriptionPolicy *const*)ptr, "wsnt:Subscribe-SubscriptionPolicy");
	case SOAP_TYPE_PointerTotime:
		return soap_out_PointerTotime(soap, tag, id, (time_t *const*)ptr, "xsd:dateTime");
	case SOAP_TYPE_PointerTowsnt__SubscriptionPolicyType:
		return soap_out_PointerTowsnt__SubscriptionPolicyType(soap, tag, id, (wsnt__SubscriptionPolicyType *const*)ptr, "wsnt:SubscriptionPolicyType");
	case SOAP_TYPE_PointerTowsnt__TopicExpressionType:
		return soap_out_PointerTowsnt__TopicExpressionType(soap, tag, id, (wsnt__TopicExpressionType *const*)ptr, "wsnt:TopicExpressionType");
	case SOAP_TYPE_PointerTo_wsrfbf__BaseFaultType_FaultCause:
		return soap_out_PointerTo_wsrfbf__BaseFaultType_FaultCause(soap, tag, id, (_wsrfbf__BaseFaultType_FaultCause *const*)ptr, "wsrfbf:BaseFaultType-FaultCause");
	case SOAP_TYPE_PointerTo_xml__lang:
		return soap_out_PointerTo_xml__lang(soap, tag, id, (std::string *const*)ptr, "xml:lang");
	case SOAP_TYPE_PointerTo_wsrfbf__BaseFaultType_ErrorCode:
		return soap_out_PointerTo_wsrfbf__BaseFaultType_ErrorCode(soap, tag, id, (_wsrfbf__BaseFaultType_ErrorCode *const*)ptr, "wsrfbf:BaseFaultType-ErrorCode");
	case SOAP_TYPE_PointerTowsa5__EndpointReferenceType:
		return soap_out_PointerTowsa5__EndpointReferenceType(soap, tag, id, (struct wsa5__EndpointReferenceType *const*)ptr, "wsa5:EndpointReferenceType");
	case SOAP_TYPE_PointerTowstop__TopicSetType:
		return soap_out_PointerTowstop__TopicSetType(soap, tag, id, (wstop__TopicSetType *const*)ptr, "wstop:TopicSetType");
	case SOAP_TYPE_PointerTowsnt__NotificationMessageHolderType:
		return soap_out_PointerTowsnt__NotificationMessageHolderType(soap, tag, id, (wsnt__NotificationMessageHolderType *const*)ptr, "wsnt:NotificationMessageHolderType");
	case SOAP_TYPE_PointerTo_eventws__CreatePullPointSubscription_SubscriptionPolicy:
		return soap_out_PointerTo_eventws__CreatePullPointSubscription_SubscriptionPolicy(soap, tag, id, (_eventws__CreatePullPointSubscription_SubscriptionPolicy *const*)ptr, "eventws:CreatePullPointSubscription-SubscriptionPolicy");
	case SOAP_TYPE_PointerTowsnt__AbsoluteOrRelativeTimeType:
		return soap_out_PointerTowsnt__AbsoluteOrRelativeTimeType(soap, tag, id, (std::string *const*)ptr, "wsnt:AbsoluteOrRelativeTimeType");
	case SOAP_TYPE_PointerTowsnt__FilterType:
		return soap_out_PointerTowsnt__FilterType(soap, tag, id, (wsnt__FilterType *const*)ptr, "wsnt:FilterType");
	case SOAP_TYPE_PointerToeventws__Capabilities:
		return soap_out_PointerToeventws__Capabilities(soap, tag, id, (eventws__Capabilities *const*)ptr, "eventws:Capabilities");
	case SOAP_TYPE_PointerTobool:
		return soap_out_PointerTobool(soap, tag, id, (bool *const*)ptr, "xsd:boolean");
	case SOAP_TYPE_PointerTochan__ChannelInstanceType:
		return soap_out_PointerTochan__ChannelInstanceType(soap, tag, id, (struct chan__ChannelInstanceType *const*)ptr, "chan:ChannelInstanceType");
	case SOAP_TYPE_PointerTo_wsa5__FaultTo:
		return soap_out_PointerTo_wsa5__FaultTo(soap, tag, id, (struct wsa5__EndpointReferenceType *const*)ptr, "wsa5:FaultTo");
	case SOAP_TYPE_PointerTo_wsa5__ReplyTo:
		return soap_out_PointerTo_wsa5__ReplyTo(soap, tag, id, (struct wsa5__EndpointReferenceType *const*)ptr, "wsa5:ReplyTo");
	case SOAP_TYPE_PointerTo_wsa5__From:
		return soap_out_PointerTo_wsa5__From(soap, tag, id, (struct wsa5__EndpointReferenceType *const*)ptr, "wsa5:From");
	case SOAP_TYPE_PointerTo_wsa5__RelatesTo:
		return soap_out_PointerTo_wsa5__RelatesTo(soap, tag, id, (struct wsa5__RelatesToType *const*)ptr, "wsa5:RelatesTo");
	case SOAP_TYPE__wsa5__ProblemIRI:
		return soap_out_string(soap, "wsa5:ProblemIRI", id, (char*const*)(void*)&ptr, NULL);
	case SOAP_TYPE__wsa5__ProblemHeaderQName:
		return soap_out_string(soap, tag, id, (char*const*)(void*)&ptr, "xsd:QName");
	case SOAP_TYPE__wsa5__Action:
		return soap_out_string(soap, "wsa5:Action", id, (char*const*)(void*)&ptr, NULL);
	case SOAP_TYPE__wsa5__To:
		return soap_out_string(soap, "wsa5:To", id, (char*const*)(void*)&ptr, NULL);
	case SOAP_TYPE__wsa5__MessageID:
		return soap_out_string(soap, "wsa5:MessageID", id, (char*const*)(void*)&ptr, NULL);
	case SOAP_TYPE_PointerToint:
		return soap_out_PointerToint(soap, tag, id, (int *const*)ptr, "xsd:int");
	case SOAP_TYPE_PointerTowsa5__MetadataType:
		return soap_out_PointerTowsa5__MetadataType(soap, tag, id, (struct wsa5__MetadataType *const*)ptr, "wsa5:MetadataType");
	case SOAP_TYPE_PointerTowsa5__ReferenceParametersType:
		return soap_out_PointerTowsa5__ReferenceParametersType(soap, tag, id, (struct wsa5__ReferenceParametersType *const*)ptr, "wsa5:ReferenceParametersType");
	case SOAP_TYPE_wsa5__FaultCodesOpenEnumType:
		return soap_out_string(soap, tag, id, (char*const*)(void*)&ptr, "wsa5:FaultCodesOpenEnumType");
	case SOAP_TYPE_wsa5__RelationshipTypeOpenEnum:
		return soap_out_string(soap, tag, id, (char*const*)(void*)&ptr, "wsa5:RelationshipTypeOpenEnum");
	case SOAP_TYPE__QName:
		return soap_out_string(soap, tag, id, (char*const*)(void*)&ptr, "xsd:QName");
	case SOAP_TYPE_string:
		return soap_out_string(soap, tag, id, (char*const*)(void*)&ptr, "xsd:string");
	}
	return SOAP_OK;
}

#ifdef __cplusplus
}
#endif

#ifndef WITH_NOIDREF

#ifdef __cplusplus
extern "C" {
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_markelement(struct soap *soap, const void *ptr, int type)
{
	(void)soap; (void)ptr; (void)type; /* appease -Wall -Werror */
	switch (type)
	{
	case SOAP_TYPE__wstop__TopicNamespaceType_Topic:
		((_wstop__TopicNamespaceType_Topic *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__wsnt__Subscribe_SubscriptionPolicy:
		((_wsnt__Subscribe_SubscriptionPolicy *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__wsnt__NotificationMessageHolderType_Message:
		((_wsnt__NotificationMessageHolderType_Message *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__wsrfbf__BaseFaultType_FaultCause:
		((_wsrfbf__BaseFaultType_FaultCause *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__wsrfbf__BaseFaultType_Description:
		((_wsrfbf__BaseFaultType_Description *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__wsrfbf__BaseFaultType_ErrorCode:
		((_wsrfbf__BaseFaultType_ErrorCode *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__eventws__CreatePullPointSubscription_SubscriptionPolicy:
		((_eventws__CreatePullPointSubscription_SubscriptionPolicy *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_wstop__SimpleTopicExpression__:
		((wstop__SimpleTopicExpression__ *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_wstop__SimpleTopicExpression:
		soap_serialize_wstop__SimpleTopicExpression(soap, (const std::string *)ptr);
		break;
	case SOAP_TYPE_wstop__ConcreteTopicExpression__:
		((wstop__ConcreteTopicExpression__ *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_wstop__ConcreteTopicExpression:
		soap_serialize_wstop__ConcreteTopicExpression(soap, (const std::string *)ptr);
		break;
	case SOAP_TYPE_wstop__FullTopicExpression__:
		((wstop__FullTopicExpression__ *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_wstop__FullTopicExpression:
		soap_serialize_wstop__FullTopicExpression(soap, (const std::string *)ptr);
		break;
	case SOAP_TYPE_wsnt__AbsoluteOrRelativeTimeType:
		soap_serialize_wsnt__AbsoluteOrRelativeTimeType(soap, (const std::string *)ptr);
		break;
	case SOAP_TYPE_wstop__TopicSetType:
		((wstop__TopicSetType *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_wstop__TopicType:
		((wstop__TopicType *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_wstop__TopicNamespaceType:
		((wstop__TopicNamespaceType *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_wstop__QueryExpressionType:
		((wstop__QueryExpressionType *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_wstop__ExtensibleDocumented:
		((wstop__ExtensibleDocumented *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_wstop__Documentation:
		((wstop__Documentation *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__wsnt__ResumeSubscriptionResponse:
		((_wsnt__ResumeSubscriptionResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__wsnt__ResumeSubscription:
		((_wsnt__ResumeSubscription *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__wsnt__PauseSubscriptionResponse:
		((_wsnt__PauseSubscriptionResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__wsnt__PauseSubscription:
		((_wsnt__PauseSubscription *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__wsnt__UnsubscribeResponse:
		((_wsnt__UnsubscribeResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__wsnt__Unsubscribe:
		((_wsnt__Unsubscribe *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__wsnt__RenewResponse:
		((_wsnt__RenewResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__wsnt__Renew:
		((_wsnt__Renew *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__wsnt__CreatePullPointResponse:
		((_wsnt__CreatePullPointResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__wsnt__CreatePullPoint:
		((_wsnt__CreatePullPoint *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__wsnt__DestroyPullPointResponse:
		((_wsnt__DestroyPullPointResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__wsnt__DestroyPullPoint:
		((_wsnt__DestroyPullPoint *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__wsnt__GetMessagesResponse:
		((_wsnt__GetMessagesResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__wsnt__GetMessages:
		((_wsnt__GetMessages *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__wsnt__GetCurrentMessageResponse:
		((_wsnt__GetCurrentMessageResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__wsnt__GetCurrentMessage:
		((_wsnt__GetCurrentMessage *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__wsnt__SubscribeResponse:
		((_wsnt__SubscribeResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__wsnt__Subscribe:
		((_wsnt__Subscribe *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__wsnt__UseRaw:
		((_wsnt__UseRaw *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__wsnt__Notify:
		((_wsnt__Notify *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__wsnt__SubscriptionManagerRP:
		((_wsnt__SubscriptionManagerRP *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__wsnt__NotificationProducerRP:
		((_wsnt__NotificationProducerRP *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_wsnt__ResumeFailedFaultType:
		((wsnt__ResumeFailedFaultType *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_wsnt__PauseFailedFaultType:
		((wsnt__PauseFailedFaultType *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_wsnt__UnableToDestroySubscriptionFaultType:
		((wsnt__UnableToDestroySubscriptionFaultType *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_wsnt__UnacceptableTerminationTimeFaultType:
		((wsnt__UnacceptableTerminationTimeFaultType *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_wsnt__UnableToCreatePullPointFaultType:
		((wsnt__UnableToCreatePullPointFaultType *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_wsnt__UnableToDestroyPullPointFaultType:
		((wsnt__UnableToDestroyPullPointFaultType *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_wsnt__UnableToGetMessagesFaultType:
		((wsnt__UnableToGetMessagesFaultType *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_wsnt__NoCurrentMessageOnTopicFaultType:
		((wsnt__NoCurrentMessageOnTopicFaultType *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_wsnt__UnacceptableInitialTerminationTimeFaultType:
		((wsnt__UnacceptableInitialTerminationTimeFaultType *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_wsnt__NotifyMessageNotSupportedFaultType:
		((wsnt__NotifyMessageNotSupportedFaultType *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_wsnt__UnsupportedPolicyRequestFaultType:
		((wsnt__UnsupportedPolicyRequestFaultType *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_wsnt__UnrecognizedPolicyRequestFaultType:
		((wsnt__UnrecognizedPolicyRequestFaultType *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_wsnt__InvalidMessageContentExpressionFaultType:
		((wsnt__InvalidMessageContentExpressionFaultType *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_wsnt__InvalidProducerPropertiesExpressionFaultType:
		((wsnt__InvalidProducerPropertiesExpressionFaultType *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_wsnt__MultipleTopicsSpecifiedFaultType:
		((wsnt__MultipleTopicsSpecifiedFaultType *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_wsnt__TopicNotSupportedFaultType:
		((wsnt__TopicNotSupportedFaultType *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_wsnt__InvalidTopicExpressionFaultType:
		((wsnt__InvalidTopicExpressionFaultType *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_wsnt__TopicExpressionDialectUnknownFaultType:
		((wsnt__TopicExpressionDialectUnknownFaultType *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_wsnt__InvalidFilterFaultType:
		((wsnt__InvalidFilterFaultType *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_wsnt__SubscribeCreationFailedFaultType:
		((wsnt__SubscribeCreationFailedFaultType *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_wsnt__NotificationMessageHolderType:
		((wsnt__NotificationMessageHolderType *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_wsnt__SubscriptionPolicyType:
		((wsnt__SubscriptionPolicyType *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_wsnt__FilterType:
		((wsnt__FilterType *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_wsnt__TopicExpressionType:
		((wsnt__TopicExpressionType *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_wsnt__QueryExpressionType:
		((wsnt__QueryExpressionType *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_wsrfbf__BaseFaultType:
		((wsrfbf__BaseFaultType *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_wsrfr__ResourceUnavailableFaultType:
		((wsrfr__ResourceUnavailableFaultType *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_wsrfr__ResourceUnknownFaultType:
		((wsrfr__ResourceUnknownFaultType *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__eventws__GetEventPropertiesResponse:
		((_eventws__GetEventPropertiesResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__eventws__GetEventProperties:
		((_eventws__GetEventProperties *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__eventws__SetSynchronizationPointResponse:
		((_eventws__SetSynchronizationPointResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__eventws__SetSynchronizationPoint:
		((_eventws__SetSynchronizationPoint *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__eventws__SeekResponse:
		((_eventws__SeekResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__eventws__Seek:
		((_eventws__Seek *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__eventws__PullMessagesFaultResponse:
		((_eventws__PullMessagesFaultResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__eventws__PullMessagesResponse:
		((_eventws__PullMessagesResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__eventws__PullMessages:
		((_eventws__PullMessages *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__eventws__CreatePullPointSubscriptionResponse:
		((_eventws__CreatePullPointSubscriptionResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__eventws__CreatePullPointSubscription:
		((_eventws__CreatePullPointSubscription *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__eventws__GetServiceCapabilitiesResponse:
		((_eventws__GetServiceCapabilitiesResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__eventws__GetServiceCapabilities:
		((_eventws__GetServiceCapabilities *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_eventws__SubscriptionPolicy:
		((eventws__SubscriptionPolicy *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_eventws__Capabilities:
		((eventws__Capabilities *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__xml__lang:
		soap_serialize__xml__lang(soap, (const std::string *)ptr);
		break;
	case SOAP_TYPE_xsd__token_:
		((xsd__token_ *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_xsd__token:
		soap_serialize_xsd__token(soap, (const std::string *)ptr);
		break;
	case SOAP_TYPE_xsd__string:
		((xsd__string *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_xsd__nonNegativeInteger_:
		((xsd__nonNegativeInteger_ *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_xsd__nonNegativeInteger:
		soap_serialize_xsd__nonNegativeInteger(soap, (const std::string *)ptr);
		break;
	case SOAP_TYPE_xsd__int:
		((xsd__int *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_xsd__duration_:
		((xsd__duration_ *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_xsd__dateTime:
		((xsd__dateTime *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_xsd__boolean:
		((xsd__boolean *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_xsd__anyURI_:
		((xsd__anyURI_ *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_xsd__anyURI:
		soap_serialize_xsd__anyURI(soap, (const std::string *)ptr);
		break;
	case SOAP_TYPE_xsd__QName_:
		((xsd__QName_ *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_xsd__NCName_:
		((xsd__NCName_ *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_xsd__NCName:
		soap_serialize_xsd__NCName(soap, (const std::string *)ptr);
		break;
	case SOAP_TYPE_xsd__QName:
		soap_serialize_xsd__QName(soap, (const std::string *)ptr);
		break;
	case SOAP_TYPE_std__string:
		soap_serialize_std__string(soap, (const std::string *)ptr);
		break;
	case SOAP_TYPE_xsd__anyType:
		((xsd__anyType *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE___eventws__ResumeSubscription:
		soap_serialize___eventws__ResumeSubscription(soap, (const struct __eventws__ResumeSubscription *)ptr);
		break;
	case SOAP_TYPE___eventws__PauseSubscription:
		soap_serialize___eventws__PauseSubscription(soap, (const struct __eventws__PauseSubscription *)ptr);
		break;
	case SOAP_TYPE___eventws__Unsubscribe_:
		soap_serialize___eventws__Unsubscribe_(soap, (const struct __eventws__Unsubscribe_ *)ptr);
		break;
	case SOAP_TYPE___eventws__Renew_:
		soap_serialize___eventws__Renew_(soap, (const struct __eventws__Renew_ *)ptr);
		break;
	case SOAP_TYPE___eventws__CreatePullPoint:
		soap_serialize___eventws__CreatePullPoint(soap, (const struct __eventws__CreatePullPoint *)ptr);
		break;
	case SOAP_TYPE___eventws__Notify_:
		soap_serialize___eventws__Notify_(soap, (const struct __eventws__Notify_ *)ptr);
		break;
	case SOAP_TYPE___eventws__DestroyPullPoint:
		soap_serialize___eventws__DestroyPullPoint(soap, (const struct __eventws__DestroyPullPoint *)ptr);
		break;
	case SOAP_TYPE___eventws__GetMessages:
		soap_serialize___eventws__GetMessages(soap, (const struct __eventws__GetMessages *)ptr);
		break;
	case SOAP_TYPE___eventws__Notify:
		soap_serialize___eventws__Notify(soap, (const struct __eventws__Notify *)ptr);
		break;
	case SOAP_TYPE___eventws__GetCurrentMessage:
		soap_serialize___eventws__GetCurrentMessage(soap, (const struct __eventws__GetCurrentMessage *)ptr);
		break;
	case SOAP_TYPE___eventws__Subscribe:
		soap_serialize___eventws__Subscribe(soap, (const struct __eventws__Subscribe *)ptr);
		break;
	case SOAP_TYPE___eventws__Unsubscribe:
		soap_serialize___eventws__Unsubscribe(soap, (const struct __eventws__Unsubscribe *)ptr);
		break;
	case SOAP_TYPE___eventws__Renew:
		soap_serialize___eventws__Renew(soap, (const struct __eventws__Renew *)ptr);
		break;
	case SOAP_TYPE___eventws__GetEventProperties:
		soap_serialize___eventws__GetEventProperties(soap, (const struct __eventws__GetEventProperties *)ptr);
		break;
	case SOAP_TYPE___eventws__CreatePullPointSubscription:
		soap_serialize___eventws__CreatePullPointSubscription(soap, (const struct __eventws__CreatePullPointSubscription *)ptr);
		break;
	case SOAP_TYPE___eventws__GetServiceCapabilities:
		soap_serialize___eventws__GetServiceCapabilities(soap, (const struct __eventws__GetServiceCapabilities *)ptr);
		break;
	case SOAP_TYPE___eventws__SetSynchronizationPoint:
		soap_serialize___eventws__SetSynchronizationPoint(soap, (const struct __eventws__SetSynchronizationPoint *)ptr);
		break;
	case SOAP_TYPE___eventws__Seek:
		soap_serialize___eventws__Seek(soap, (const struct __eventws__Seek *)ptr);
		break;
	case SOAP_TYPE___eventws__PullMessages:
		soap_serialize___eventws__PullMessages(soap, (const struct __eventws__PullMessages *)ptr);
		break;
	case SOAP_TYPE_chan__ChannelInstanceType:
		soap_serialize_chan__ChannelInstanceType(soap, (const struct chan__ChannelInstanceType *)ptr);
		break;
	case SOAP_TYPE__wsa5__ProblemAction:
		soap_serialize__wsa5__ProblemAction(soap, (const struct wsa5__ProblemActionType *)ptr);
		break;
	case SOAP_TYPE__wsa5__FaultTo:
		soap_serialize__wsa5__FaultTo(soap, (const struct wsa5__EndpointReferenceType *)ptr);
		break;
	case SOAP_TYPE__wsa5__From:
		soap_serialize__wsa5__From(soap, (const struct wsa5__EndpointReferenceType *)ptr);
		break;
	case SOAP_TYPE__wsa5__ReplyTo:
		soap_serialize__wsa5__ReplyTo(soap, (const struct wsa5__EndpointReferenceType *)ptr);
		break;
	case SOAP_TYPE__wsa5__RelatesTo:
		soap_serialize__wsa5__RelatesTo(soap, (const struct wsa5__RelatesToType *)ptr);
		break;
	case SOAP_TYPE__wsa5__Metadata:
		soap_serialize__wsa5__Metadata(soap, (const struct wsa5__MetadataType *)ptr);
		break;
	case SOAP_TYPE__wsa5__ReferenceParameters:
		soap_serialize__wsa5__ReferenceParameters(soap, (const struct wsa5__ReferenceParametersType *)ptr);
		break;
	case SOAP_TYPE__wsa5__EndpointReference:
		soap_serialize__wsa5__EndpointReference(soap, (const struct wsa5__EndpointReferenceType *)ptr);
		break;
	case SOAP_TYPE_wsa5__ProblemActionType:
		soap_serialize_wsa5__ProblemActionType(soap, (const struct wsa5__ProblemActionType *)ptr);
		break;
	case SOAP_TYPE_wsa5__RelatesToType:
		soap_serialize_wsa5__RelatesToType(soap, (const struct wsa5__RelatesToType *)ptr);
		break;
	case SOAP_TYPE_wsa5__MetadataType:
		soap_serialize_wsa5__MetadataType(soap, (const struct wsa5__MetadataType *)ptr);
		break;
	case SOAP_TYPE_wsa5__ReferenceParametersType:
		soap_serialize_wsa5__ReferenceParametersType(soap, (const struct wsa5__ReferenceParametersType *)ptr);
		break;
	case SOAP_TYPE_wsa5__EndpointReferenceType:
		soap_serialize_wsa5__EndpointReferenceType(soap, (const struct wsa5__EndpointReferenceType *)ptr);
		break;
	case SOAP_TYPE_PointerTo_wsnt__ResumeSubscription:
		soap_serialize_PointerTo_wsnt__ResumeSubscription(soap, (_wsnt__ResumeSubscription *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_wsnt__PauseSubscription:
		soap_serialize_PointerTo_wsnt__PauseSubscription(soap, (_wsnt__PauseSubscription *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_wsnt__CreatePullPoint:
		soap_serialize_PointerTo_wsnt__CreatePullPoint(soap, (_wsnt__CreatePullPoint *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_wsnt__DestroyPullPoint:
		soap_serialize_PointerTo_wsnt__DestroyPullPoint(soap, (_wsnt__DestroyPullPoint *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_wsnt__GetMessages:
		soap_serialize_PointerTo_wsnt__GetMessages(soap, (_wsnt__GetMessages *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_wsnt__Notify:
		soap_serialize_PointerTo_wsnt__Notify(soap, (_wsnt__Notify *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_wsnt__GetCurrentMessage:
		soap_serialize_PointerTo_wsnt__GetCurrentMessage(soap, (_wsnt__GetCurrentMessage *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_wsnt__Subscribe:
		soap_serialize_PointerTo_wsnt__Subscribe(soap, (_wsnt__Subscribe *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_wsnt__Unsubscribe:
		soap_serialize_PointerTo_wsnt__Unsubscribe(soap, (_wsnt__Unsubscribe *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_wsnt__Renew:
		soap_serialize_PointerTo_wsnt__Renew(soap, (_wsnt__Renew *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_eventws__GetEventProperties:
		soap_serialize_PointerTo_eventws__GetEventProperties(soap, (_eventws__GetEventProperties *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_eventws__CreatePullPointSubscription:
		soap_serialize_PointerTo_eventws__CreatePullPointSubscription(soap, (_eventws__CreatePullPointSubscription *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_eventws__GetServiceCapabilities:
		soap_serialize_PointerTo_eventws__GetServiceCapabilities(soap, (_eventws__GetServiceCapabilities *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_eventws__SetSynchronizationPoint:
		soap_serialize_PointerTo_eventws__SetSynchronizationPoint(soap, (_eventws__SetSynchronizationPoint *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_eventws__Seek:
		soap_serialize_PointerTo_eventws__Seek(soap, (_eventws__Seek *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_eventws__PullMessages:
		soap_serialize_PointerTo_eventws__PullMessages(soap, (_eventws__PullMessages *const*)ptr);
		break;
	case SOAP_TYPE_PointerTowsnt__UnsupportedPolicyRequestFaultType:
		soap_serialize_PointerTowsnt__UnsupportedPolicyRequestFaultType(soap, (wsnt__UnsupportedPolicyRequestFaultType *const*)ptr);
		break;
	case SOAP_TYPE_PointerTowsnt__UnrecognizedPolicyRequestFaultType:
		soap_serialize_PointerTowsnt__UnrecognizedPolicyRequestFaultType(soap, (wsnt__UnrecognizedPolicyRequestFaultType *const*)ptr);
		break;
	case SOAP_TYPE_PointerTowsnt__UnacceptableTerminationTimeFaultType:
		soap_serialize_PointerTowsnt__UnacceptableTerminationTimeFaultType(soap, (wsnt__UnacceptableTerminationTimeFaultType *const*)ptr);
		break;
	case SOAP_TYPE_PointerTowsnt__UnacceptableInitialTerminationTimeFaultType:
		soap_serialize_PointerTowsnt__UnacceptableInitialTerminationTimeFaultType(soap, (wsnt__UnacceptableInitialTerminationTimeFaultType *const*)ptr);
		break;
	case SOAP_TYPE_PointerTowsnt__UnableToGetMessagesFaultType:
		soap_serialize_PointerTowsnt__UnableToGetMessagesFaultType(soap, (wsnt__UnableToGetMessagesFaultType *const*)ptr);
		break;
	case SOAP_TYPE_PointerTowsnt__UnableToDestroySubscriptionFaultType:
		soap_serialize_PointerTowsnt__UnableToDestroySubscriptionFaultType(soap, (wsnt__UnableToDestroySubscriptionFaultType *const*)ptr);
		break;
	case SOAP_TYPE_PointerTowsnt__UnableToDestroyPullPointFaultType:
		soap_serialize_PointerTowsnt__UnableToDestroyPullPointFaultType(soap, (wsnt__UnableToDestroyPullPointFaultType *const*)ptr);
		break;
	case SOAP_TYPE_PointerTowsnt__UnableToCreatePullPointFaultType:
		soap_serialize_PointerTowsnt__UnableToCreatePullPointFaultType(soap, (wsnt__UnableToCreatePullPointFaultType *const*)ptr);
		break;
	case SOAP_TYPE_PointerTowsnt__TopicNotSupportedFaultType:
		soap_serialize_PointerTowsnt__TopicNotSupportedFaultType(soap, (wsnt__TopicNotSupportedFaultType *const*)ptr);
		break;
	case SOAP_TYPE_PointerTowsnt__TopicExpressionDialectUnknownFaultType:
		soap_serialize_PointerTowsnt__TopicExpressionDialectUnknownFaultType(soap, (wsnt__TopicExpressionDialectUnknownFaultType *const*)ptr);
		break;
	case SOAP_TYPE_PointerTowsnt__SubscribeCreationFailedFaultType:
		soap_serialize_PointerTowsnt__SubscribeCreationFailedFaultType(soap, (wsnt__SubscribeCreationFailedFaultType *const*)ptr);
		break;
	case SOAP_TYPE_PointerTowsnt__ResumeFailedFaultType:
		soap_serialize_PointerTowsnt__ResumeFailedFaultType(soap, (wsnt__ResumeFailedFaultType *const*)ptr);
		break;
	case SOAP_TYPE_PointerTowsrfr__ResourceUnknownFaultType:
		soap_serialize_PointerTowsrfr__ResourceUnknownFaultType(soap, (wsrfr__ResourceUnknownFaultType *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_eventws__PullMessagesFaultResponse:
		soap_serialize_PointerTo_eventws__PullMessagesFaultResponse(soap, (_eventws__PullMessagesFaultResponse *const*)ptr);
		break;
	case SOAP_TYPE_PointerTowsnt__PauseFailedFaultType:
		soap_serialize_PointerTowsnt__PauseFailedFaultType(soap, (wsnt__PauseFailedFaultType *const*)ptr);
		break;
	case SOAP_TYPE_PointerTowsnt__NotifyMessageNotSupportedFaultType:
		soap_serialize_PointerTowsnt__NotifyMessageNotSupportedFaultType(soap, (wsnt__NotifyMessageNotSupportedFaultType *const*)ptr);
		break;
	case SOAP_TYPE_PointerTowsnt__NoCurrentMessageOnTopicFaultType:
		soap_serialize_PointerTowsnt__NoCurrentMessageOnTopicFaultType(soap, (wsnt__NoCurrentMessageOnTopicFaultType *const*)ptr);
		break;
	case SOAP_TYPE_PointerTowsnt__MultipleTopicsSpecifiedFaultType:
		soap_serialize_PointerTowsnt__MultipleTopicsSpecifiedFaultType(soap, (wsnt__MultipleTopicsSpecifiedFaultType *const*)ptr);
		break;
	case SOAP_TYPE_PointerTowsnt__InvalidTopicExpressionFaultType:
		soap_serialize_PointerTowsnt__InvalidTopicExpressionFaultType(soap, (wsnt__InvalidTopicExpressionFaultType *const*)ptr);
		break;
	case SOAP_TYPE_PointerTowsnt__InvalidProducerPropertiesExpressionFaultType:
		soap_serialize_PointerTowsnt__InvalidProducerPropertiesExpressionFaultType(soap, (wsnt__InvalidProducerPropertiesExpressionFaultType *const*)ptr);
		break;
	case SOAP_TYPE_PointerTowsnt__InvalidMessageContentExpressionFaultType:
		soap_serialize_PointerTowsnt__InvalidMessageContentExpressionFaultType(soap, (wsnt__InvalidMessageContentExpressionFaultType *const*)ptr);
		break;
	case SOAP_TYPE_PointerTowsnt__InvalidFilterFaultType:
		soap_serialize_PointerTowsnt__InvalidFilterFaultType(soap, (wsnt__InvalidFilterFaultType *const*)ptr);
		break;
	case SOAP_TYPE_PointerToxsd__NCName:
		soap_serialize_PointerToxsd__NCName(soap, (std::string *const*)ptr);
		break;
	case SOAP_TYPE_PointerTowstop__ConcreteTopicExpression:
		soap_serialize_PointerTowstop__ConcreteTopicExpression(soap, (std::string *const*)ptr);
		break;
	case SOAP_TYPE_PointerToxsd__QName:
		soap_serialize_PointerToxsd__QName(soap, (std::string *const*)ptr);
		break;
	case SOAP_TYPE_PointerTowstop__TopicType:
		soap_serialize_PointerTowstop__TopicType(soap, (wstop__TopicType *const*)ptr);
		break;
	case SOAP_TYPE_PointerTowstop__QueryExpressionType:
		soap_serialize_PointerTowstop__QueryExpressionType(soap, (wstop__QueryExpressionType *const*)ptr);
		break;
	case SOAP_TYPE_PointerTowstop__Documentation:
		soap_serialize_PointerTowstop__Documentation(soap, (wstop__Documentation *const*)ptr);
		break;
	case SOAP_TYPE_PointerToxsd__nonNegativeInteger:
		soap_serialize_PointerToxsd__nonNegativeInteger(soap, (std::string *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_wsnt__Subscribe_SubscriptionPolicy:
		soap_serialize_PointerTo_wsnt__Subscribe_SubscriptionPolicy(soap, (_wsnt__Subscribe_SubscriptionPolicy *const*)ptr);
		break;
	case SOAP_TYPE_PointerTotime:
		soap_serialize_PointerTotime(soap, (time_t *const*)ptr);
		break;
	case SOAP_TYPE_PointerTowsnt__SubscriptionPolicyType:
		soap_serialize_PointerTowsnt__SubscriptionPolicyType(soap, (wsnt__SubscriptionPolicyType *const*)ptr);
		break;
	case SOAP_TYPE_PointerTowsnt__TopicExpressionType:
		soap_serialize_PointerTowsnt__TopicExpressionType(soap, (wsnt__TopicExpressionType *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_wsrfbf__BaseFaultType_FaultCause:
		soap_serialize_PointerTo_wsrfbf__BaseFaultType_FaultCause(soap, (_wsrfbf__BaseFaultType_FaultCause *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_xml__lang:
		soap_serialize_PointerTo_xml__lang(soap, (std::string *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_wsrfbf__BaseFaultType_ErrorCode:
		soap_serialize_PointerTo_wsrfbf__BaseFaultType_ErrorCode(soap, (_wsrfbf__BaseFaultType_ErrorCode *const*)ptr);
		break;
	case SOAP_TYPE_PointerTowsa5__EndpointReferenceType:
		soap_serialize_PointerTowsa5__EndpointReferenceType(soap, (struct wsa5__EndpointReferenceType *const*)ptr);
		break;
	case SOAP_TYPE_PointerTowstop__TopicSetType:
		soap_serialize_PointerTowstop__TopicSetType(soap, (wstop__TopicSetType *const*)ptr);
		break;
	case SOAP_TYPE_PointerTowsnt__NotificationMessageHolderType:
		soap_serialize_PointerTowsnt__NotificationMessageHolderType(soap, (wsnt__NotificationMessageHolderType *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_eventws__CreatePullPointSubscription_SubscriptionPolicy:
		soap_serialize_PointerTo_eventws__CreatePullPointSubscription_SubscriptionPolicy(soap, (_eventws__CreatePullPointSubscription_SubscriptionPolicy *const*)ptr);
		break;
	case SOAP_TYPE_PointerTowsnt__AbsoluteOrRelativeTimeType:
		soap_serialize_PointerTowsnt__AbsoluteOrRelativeTimeType(soap, (std::string *const*)ptr);
		break;
	case SOAP_TYPE_PointerTowsnt__FilterType:
		soap_serialize_PointerTowsnt__FilterType(soap, (wsnt__FilterType *const*)ptr);
		break;
	case SOAP_TYPE_PointerToeventws__Capabilities:
		soap_serialize_PointerToeventws__Capabilities(soap, (eventws__Capabilities *const*)ptr);
		break;
	case SOAP_TYPE_PointerTobool:
		soap_serialize_PointerTobool(soap, (bool *const*)ptr);
		break;
	case SOAP_TYPE_PointerTochan__ChannelInstanceType:
		soap_serialize_PointerTochan__ChannelInstanceType(soap, (struct chan__ChannelInstanceType *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_wsa5__FaultTo:
		soap_serialize_PointerTo_wsa5__FaultTo(soap, (struct wsa5__EndpointReferenceType *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_wsa5__ReplyTo:
		soap_serialize_PointerTo_wsa5__ReplyTo(soap, (struct wsa5__EndpointReferenceType *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_wsa5__From:
		soap_serialize_PointerTo_wsa5__From(soap, (struct wsa5__EndpointReferenceType *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_wsa5__RelatesTo:
		soap_serialize_PointerTo_wsa5__RelatesTo(soap, (struct wsa5__RelatesToType *const*)ptr);
		break;
	case SOAP_TYPE__wsa5__ProblemIRI:
		soap_serialize_string(soap, (char*const*)(void*)&ptr);
		break;
	case SOAP_TYPE__wsa5__ProblemHeaderQName:
		soap_serialize_string(soap, (char*const*)(void*)&ptr);
		break;
	case SOAP_TYPE__wsa5__Action:
		soap_serialize_string(soap, (char*const*)(void*)&ptr);
		break;
	case SOAP_TYPE__wsa5__To:
		soap_serialize_string(soap, (char*const*)(void*)&ptr);
		break;
	case SOAP_TYPE__wsa5__MessageID:
		soap_serialize_string(soap, (char*const*)(void*)&ptr);
		break;
	case SOAP_TYPE_PointerToint:
		soap_serialize_PointerToint(soap, (int *const*)ptr);
		break;
	case SOAP_TYPE_PointerTowsa5__MetadataType:
		soap_serialize_PointerTowsa5__MetadataType(soap, (struct wsa5__MetadataType *const*)ptr);
		break;
	case SOAP_TYPE_PointerTowsa5__ReferenceParametersType:
		soap_serialize_PointerTowsa5__ReferenceParametersType(soap, (struct wsa5__ReferenceParametersType *const*)ptr);
		break;
	case SOAP_TYPE_wsa5__FaultCodesOpenEnumType:
		soap_serialize_string(soap, (char*const*)(void*)&ptr);
		break;
	case SOAP_TYPE_wsa5__RelationshipTypeOpenEnum:
		soap_serialize_string(soap, (char*const*)(void*)&ptr);
		break;
	case SOAP_TYPE__QName:
		soap_serialize_string(soap, (char*const*)(void*)&ptr);
		break;
	case SOAP_TYPE_string:
		soap_serialize_string(soap, (char*const*)(void*)&ptr);
		break;
	}
}

#ifdef __cplusplus
}
#endif
#endif

SOAP_FMAC3 void * SOAP_FMAC4 onvifevent_instantiate(struct soap *soap, int t, const char *type, const char *arrayType, size_t *n)
{	(void)type;
	switch (t)
	{
	case SOAP_TYPE_wsa5__EndpointReferenceType:
		return (void*)soap_instantiate_wsa5__EndpointReferenceType(soap, -1, type, arrayType, n);
	case SOAP_TYPE_wsa5__ReferenceParametersType:
		return (void*)soap_instantiate_wsa5__ReferenceParametersType(soap, -1, type, arrayType, n);
	case SOAP_TYPE_wsa5__MetadataType:
		return (void*)soap_instantiate_wsa5__MetadataType(soap, -1, type, arrayType, n);
	case SOAP_TYPE_wsa5__ProblemActionType:
		return (void*)soap_instantiate_wsa5__ProblemActionType(soap, -1, type, arrayType, n);
	case SOAP_TYPE_wsa5__RelatesToType:
		return (void*)soap_instantiate_wsa5__RelatesToType(soap, -1, type, arrayType, n);
	case SOAP_TYPE_chan__ChannelInstanceType:
		return (void*)soap_instantiate_chan__ChannelInstanceType(soap, -1, type, arrayType, n);
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Header:
		return (void*)soap_instantiate_SOAP_ENV__Header(soap, -1, type, arrayType, n);
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Code:
		return (void*)soap_instantiate_SOAP_ENV__Code(soap, -1, type, arrayType, n);
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Reason:
		return (void*)soap_instantiate_SOAP_ENV__Reason(soap, -1, type, arrayType, n);
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Fault:
		return (void*)soap_instantiate_SOAP_ENV__Fault(soap, -1, type, arrayType, n);
#endif
	case SOAP_TYPE_xsd__anyType:
		return (void*)soap_instantiate_xsd__anyType(soap, -1, type, arrayType, n);
	case SOAP_TYPE_std__string:
		return (void*)soap_instantiate_std__string(soap, -1, type, arrayType, n);
	case SOAP_TYPE_xsd__NCName_:
		return (void*)soap_instantiate_xsd__NCName_(soap, -1, type, arrayType, n);
	case SOAP_TYPE_xsd__QName_:
		return (void*)soap_instantiate_xsd__QName_(soap, -1, type, arrayType, n);
	case SOAP_TYPE_xsd__anyURI_:
		return (void*)soap_instantiate_xsd__anyURI_(soap, -1, type, arrayType, n);
	case SOAP_TYPE_xsd__boolean:
		return (void*)soap_instantiate_xsd__boolean(soap, -1, type, arrayType, n);
	case SOAP_TYPE_xsd__dateTime:
		return (void*)soap_instantiate_xsd__dateTime(soap, -1, type, arrayType, n);
	case SOAP_TYPE_xsd__duration_:
		return (void*)soap_instantiate_xsd__duration_(soap, -1, type, arrayType, n);
	case SOAP_TYPE_xsd__int:
		return (void*)soap_instantiate_xsd__int(soap, -1, type, arrayType, n);
	case SOAP_TYPE_xsd__nonNegativeInteger_:
		return (void*)soap_instantiate_xsd__nonNegativeInteger_(soap, -1, type, arrayType, n);
	case SOAP_TYPE_xsd__string:
		return (void*)soap_instantiate_xsd__string(soap, -1, type, arrayType, n);
	case SOAP_TYPE_xsd__token_:
		return (void*)soap_instantiate_xsd__token_(soap, -1, type, arrayType, n);
	case SOAP_TYPE_wstop__FullTopicExpression__:
		return (void*)soap_instantiate_wstop__FullTopicExpression__(soap, -1, type, arrayType, n);
	case SOAP_TYPE_wstop__ConcreteTopicExpression__:
		return (void*)soap_instantiate_wstop__ConcreteTopicExpression__(soap, -1, type, arrayType, n);
	case SOAP_TYPE_wstop__SimpleTopicExpression__:
		return (void*)soap_instantiate_wstop__SimpleTopicExpression__(soap, -1, type, arrayType, n);
	case SOAP_TYPE_eventws__Capabilities:
		return (void*)soap_instantiate_eventws__Capabilities(soap, -1, type, arrayType, n);
	case SOAP_TYPE_eventws__SubscriptionPolicy:
		return (void*)soap_instantiate_eventws__SubscriptionPolicy(soap, -1, type, arrayType, n);
	case SOAP_TYPE__eventws__GetServiceCapabilities:
		return (void*)soap_instantiate__eventws__GetServiceCapabilities(soap, -1, type, arrayType, n);
	case SOAP_TYPE__eventws__GetServiceCapabilitiesResponse:
		return (void*)soap_instantiate__eventws__GetServiceCapabilitiesResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE__eventws__CreatePullPointSubscription_SubscriptionPolicy:
		return (void*)soap_instantiate__eventws__CreatePullPointSubscription_SubscriptionPolicy(soap, -1, type, arrayType, n);
	case SOAP_TYPE__eventws__CreatePullPointSubscription:
		return (void*)soap_instantiate__eventws__CreatePullPointSubscription(soap, -1, type, arrayType, n);
	case SOAP_TYPE__eventws__CreatePullPointSubscriptionResponse:
		return (void*)soap_instantiate__eventws__CreatePullPointSubscriptionResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE__eventws__PullMessages:
		return (void*)soap_instantiate__eventws__PullMessages(soap, -1, type, arrayType, n);
	case SOAP_TYPE__eventws__PullMessagesResponse:
		return (void*)soap_instantiate__eventws__PullMessagesResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE__eventws__PullMessagesFaultResponse:
		return (void*)soap_instantiate__eventws__PullMessagesFaultResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE__eventws__Seek:
		return (void*)soap_instantiate__eventws__Seek(soap, -1, type, arrayType, n);
	case SOAP_TYPE__eventws__SeekResponse:
		return (void*)soap_instantiate__eventws__SeekResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE__eventws__SetSynchronizationPoint:
		return (void*)soap_instantiate__eventws__SetSynchronizationPoint(soap, -1, type, arrayType, n);
	case SOAP_TYPE__eventws__SetSynchronizationPointResponse:
		return (void*)soap_instantiate__eventws__SetSynchronizationPointResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE__eventws__GetEventProperties:
		return (void*)soap_instantiate__eventws__GetEventProperties(soap, -1, type, arrayType, n);
	case SOAP_TYPE__eventws__GetEventPropertiesResponse:
		return (void*)soap_instantiate__eventws__GetEventPropertiesResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE__wsrfbf__BaseFaultType_ErrorCode:
		return (void*)soap_instantiate__wsrfbf__BaseFaultType_ErrorCode(soap, -1, type, arrayType, n);
	case SOAP_TYPE__wsrfbf__BaseFaultType_Description:
		return (void*)soap_instantiate__wsrfbf__BaseFaultType_Description(soap, -1, type, arrayType, n);
	case SOAP_TYPE__wsrfbf__BaseFaultType_FaultCause:
		return (void*)soap_instantiate__wsrfbf__BaseFaultType_FaultCause(soap, -1, type, arrayType, n);
	case SOAP_TYPE_wsrfbf__BaseFaultType:
		return (void*)soap_instantiate_wsrfbf__BaseFaultType(soap, -1, type, arrayType, n);
	case SOAP_TYPE_wsnt__QueryExpressionType:
		return (void*)soap_instantiate_wsnt__QueryExpressionType(soap, -1, type, arrayType, n);
	case SOAP_TYPE_wsnt__TopicExpressionType:
		return (void*)soap_instantiate_wsnt__TopicExpressionType(soap, -1, type, arrayType, n);
	case SOAP_TYPE_wsnt__FilterType:
		return (void*)soap_instantiate_wsnt__FilterType(soap, -1, type, arrayType, n);
	case SOAP_TYPE_wsnt__SubscriptionPolicyType:
		return (void*)soap_instantiate_wsnt__SubscriptionPolicyType(soap, -1, type, arrayType, n);
	case SOAP_TYPE__wsnt__NotificationMessageHolderType_Message:
		return (void*)soap_instantiate__wsnt__NotificationMessageHolderType_Message(soap, -1, type, arrayType, n);
	case SOAP_TYPE_wsnt__NotificationMessageHolderType:
		return (void*)soap_instantiate_wsnt__NotificationMessageHolderType(soap, -1, type, arrayType, n);
	case SOAP_TYPE__wsnt__NotificationProducerRP:
		return (void*)soap_instantiate__wsnt__NotificationProducerRP(soap, -1, type, arrayType, n);
	case SOAP_TYPE__wsnt__SubscriptionManagerRP:
		return (void*)soap_instantiate__wsnt__SubscriptionManagerRP(soap, -1, type, arrayType, n);
	case SOAP_TYPE__wsnt__Notify:
		return (void*)soap_instantiate__wsnt__Notify(soap, -1, type, arrayType, n);
	case SOAP_TYPE__wsnt__UseRaw:
		return (void*)soap_instantiate__wsnt__UseRaw(soap, -1, type, arrayType, n);
	case SOAP_TYPE__wsnt__Subscribe_SubscriptionPolicy:
		return (void*)soap_instantiate__wsnt__Subscribe_SubscriptionPolicy(soap, -1, type, arrayType, n);
	case SOAP_TYPE__wsnt__Subscribe:
		return (void*)soap_instantiate__wsnt__Subscribe(soap, -1, type, arrayType, n);
	case SOAP_TYPE__wsnt__SubscribeResponse:
		return (void*)soap_instantiate__wsnt__SubscribeResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE__wsnt__GetCurrentMessage:
		return (void*)soap_instantiate__wsnt__GetCurrentMessage(soap, -1, type, arrayType, n);
	case SOAP_TYPE__wsnt__GetCurrentMessageResponse:
		return (void*)soap_instantiate__wsnt__GetCurrentMessageResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE__wsnt__GetMessages:
		return (void*)soap_instantiate__wsnt__GetMessages(soap, -1, type, arrayType, n);
	case SOAP_TYPE__wsnt__GetMessagesResponse:
		return (void*)soap_instantiate__wsnt__GetMessagesResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE__wsnt__DestroyPullPoint:
		return (void*)soap_instantiate__wsnt__DestroyPullPoint(soap, -1, type, arrayType, n);
	case SOAP_TYPE__wsnt__DestroyPullPointResponse:
		return (void*)soap_instantiate__wsnt__DestroyPullPointResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE__wsnt__CreatePullPoint:
		return (void*)soap_instantiate__wsnt__CreatePullPoint(soap, -1, type, arrayType, n);
	case SOAP_TYPE__wsnt__CreatePullPointResponse:
		return (void*)soap_instantiate__wsnt__CreatePullPointResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE__wsnt__Renew:
		return (void*)soap_instantiate__wsnt__Renew(soap, -1, type, arrayType, n);
	case SOAP_TYPE__wsnt__RenewResponse:
		return (void*)soap_instantiate__wsnt__RenewResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE__wsnt__Unsubscribe:
		return (void*)soap_instantiate__wsnt__Unsubscribe(soap, -1, type, arrayType, n);
	case SOAP_TYPE__wsnt__UnsubscribeResponse:
		return (void*)soap_instantiate__wsnt__UnsubscribeResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE__wsnt__PauseSubscription:
		return (void*)soap_instantiate__wsnt__PauseSubscription(soap, -1, type, arrayType, n);
	case SOAP_TYPE__wsnt__PauseSubscriptionResponse:
		return (void*)soap_instantiate__wsnt__PauseSubscriptionResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE__wsnt__ResumeSubscription:
		return (void*)soap_instantiate__wsnt__ResumeSubscription(soap, -1, type, arrayType, n);
	case SOAP_TYPE__wsnt__ResumeSubscriptionResponse:
		return (void*)soap_instantiate__wsnt__ResumeSubscriptionResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE_wstop__Documentation:
		return (void*)soap_instantiate_wstop__Documentation(soap, -1, type, arrayType, n);
	case SOAP_TYPE_wstop__ExtensibleDocumented:
		return (void*)soap_instantiate_wstop__ExtensibleDocumented(soap, -1, type, arrayType, n);
	case SOAP_TYPE_wstop__QueryExpressionType:
		return (void*)soap_instantiate_wstop__QueryExpressionType(soap, -1, type, arrayType, n);
	case SOAP_TYPE_wsrfr__ResourceUnknownFaultType:
		return (void*)soap_instantiate_wsrfr__ResourceUnknownFaultType(soap, -1, type, arrayType, n);
	case SOAP_TYPE_wsrfr__ResourceUnavailableFaultType:
		return (void*)soap_instantiate_wsrfr__ResourceUnavailableFaultType(soap, -1, type, arrayType, n);
	case SOAP_TYPE_wsnt__SubscribeCreationFailedFaultType:
		return (void*)soap_instantiate_wsnt__SubscribeCreationFailedFaultType(soap, -1, type, arrayType, n);
	case SOAP_TYPE_wsnt__InvalidFilterFaultType:
		return (void*)soap_instantiate_wsnt__InvalidFilterFaultType(soap, -1, type, arrayType, n);
	case SOAP_TYPE_wsnt__TopicExpressionDialectUnknownFaultType:
		return (void*)soap_instantiate_wsnt__TopicExpressionDialectUnknownFaultType(soap, -1, type, arrayType, n);
	case SOAP_TYPE_wsnt__InvalidTopicExpressionFaultType:
		return (void*)soap_instantiate_wsnt__InvalidTopicExpressionFaultType(soap, -1, type, arrayType, n);
	case SOAP_TYPE_wsnt__TopicNotSupportedFaultType:
		return (void*)soap_instantiate_wsnt__TopicNotSupportedFaultType(soap, -1, type, arrayType, n);
	case SOAP_TYPE_wsnt__MultipleTopicsSpecifiedFaultType:
		return (void*)soap_instantiate_wsnt__MultipleTopicsSpecifiedFaultType(soap, -1, type, arrayType, n);
	case SOAP_TYPE_wsnt__InvalidProducerPropertiesExpressionFaultType:
		return (void*)soap_instantiate_wsnt__InvalidProducerPropertiesExpressionFaultType(soap, -1, type, arrayType, n);
	case SOAP_TYPE_wsnt__InvalidMessageContentExpressionFaultType:
		return (void*)soap_instantiate_wsnt__InvalidMessageContentExpressionFaultType(soap, -1, type, arrayType, n);
	case SOAP_TYPE_wsnt__UnrecognizedPolicyRequestFaultType:
		return (void*)soap_instantiate_wsnt__UnrecognizedPolicyRequestFaultType(soap, -1, type, arrayType, n);
	case SOAP_TYPE_wsnt__UnsupportedPolicyRequestFaultType:
		return (void*)soap_instantiate_wsnt__UnsupportedPolicyRequestFaultType(soap, -1, type, arrayType, n);
	case SOAP_TYPE_wsnt__NotifyMessageNotSupportedFaultType:
		return (void*)soap_instantiate_wsnt__NotifyMessageNotSupportedFaultType(soap, -1, type, arrayType, n);
	case SOAP_TYPE_wsnt__UnacceptableInitialTerminationTimeFaultType:
		return (void*)soap_instantiate_wsnt__UnacceptableInitialTerminationTimeFaultType(soap, -1, type, arrayType, n);
	case SOAP_TYPE_wsnt__NoCurrentMessageOnTopicFaultType:
		return (void*)soap_instantiate_wsnt__NoCurrentMessageOnTopicFaultType(soap, -1, type, arrayType, n);
	case SOAP_TYPE_wsnt__UnableToGetMessagesFaultType:
		return (void*)soap_instantiate_wsnt__UnableToGetMessagesFaultType(soap, -1, type, arrayType, n);
	case SOAP_TYPE_wsnt__UnableToDestroyPullPointFaultType:
		return (void*)soap_instantiate_wsnt__UnableToDestroyPullPointFaultType(soap, -1, type, arrayType, n);
	case SOAP_TYPE_wsnt__UnableToCreatePullPointFaultType:
		return (void*)soap_instantiate_wsnt__UnableToCreatePullPointFaultType(soap, -1, type, arrayType, n);
	case SOAP_TYPE_wsnt__UnacceptableTerminationTimeFaultType:
		return (void*)soap_instantiate_wsnt__UnacceptableTerminationTimeFaultType(soap, -1, type, arrayType, n);
	case SOAP_TYPE_wsnt__UnableToDestroySubscriptionFaultType:
		return (void*)soap_instantiate_wsnt__UnableToDestroySubscriptionFaultType(soap, -1, type, arrayType, n);
	case SOAP_TYPE_wsnt__PauseFailedFaultType:
		return (void*)soap_instantiate_wsnt__PauseFailedFaultType(soap, -1, type, arrayType, n);
	case SOAP_TYPE_wsnt__ResumeFailedFaultType:
		return (void*)soap_instantiate_wsnt__ResumeFailedFaultType(soap, -1, type, arrayType, n);
	case SOAP_TYPE__wstop__TopicNamespaceType_Topic:
		return (void*)soap_instantiate__wstop__TopicNamespaceType_Topic(soap, -1, type, arrayType, n);
	case SOAP_TYPE_wstop__TopicNamespaceType:
		return (void*)soap_instantiate_wstop__TopicNamespaceType(soap, -1, type, arrayType, n);
	case SOAP_TYPE_wstop__TopicType:
		return (void*)soap_instantiate_wstop__TopicType(soap, -1, type, arrayType, n);
	case SOAP_TYPE_wstop__TopicSetType:
		return (void*)soap_instantiate_wstop__TopicSetType(soap, -1, type, arrayType, n);
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Detail:
		return (void*)soap_instantiate_SOAP_ENV__Detail(soap, -1, type, arrayType, n);
#endif
	case SOAP_TYPE___eventws__PullMessages:
		return (void*)soap_instantiate___eventws__PullMessages(soap, -1, type, arrayType, n);
	case SOAP_TYPE___eventws__Seek:
		return (void*)soap_instantiate___eventws__Seek(soap, -1, type, arrayType, n);
	case SOAP_TYPE___eventws__SetSynchronizationPoint:
		return (void*)soap_instantiate___eventws__SetSynchronizationPoint(soap, -1, type, arrayType, n);
	case SOAP_TYPE___eventws__GetServiceCapabilities:
		return (void*)soap_instantiate___eventws__GetServiceCapabilities(soap, -1, type, arrayType, n);
	case SOAP_TYPE___eventws__CreatePullPointSubscription:
		return (void*)soap_instantiate___eventws__CreatePullPointSubscription(soap, -1, type, arrayType, n);
	case SOAP_TYPE___eventws__GetEventProperties:
		return (void*)soap_instantiate___eventws__GetEventProperties(soap, -1, type, arrayType, n);
	case SOAP_TYPE___eventws__Renew:
		return (void*)soap_instantiate___eventws__Renew(soap, -1, type, arrayType, n);
	case SOAP_TYPE___eventws__Unsubscribe:
		return (void*)soap_instantiate___eventws__Unsubscribe(soap, -1, type, arrayType, n);
	case SOAP_TYPE___eventws__Subscribe:
		return (void*)soap_instantiate___eventws__Subscribe(soap, -1, type, arrayType, n);
	case SOAP_TYPE___eventws__GetCurrentMessage:
		return (void*)soap_instantiate___eventws__GetCurrentMessage(soap, -1, type, arrayType, n);
	case SOAP_TYPE___eventws__Notify:
		return (void*)soap_instantiate___eventws__Notify(soap, -1, type, arrayType, n);
	case SOAP_TYPE___eventws__GetMessages:
		return (void*)soap_instantiate___eventws__GetMessages(soap, -1, type, arrayType, n);
	case SOAP_TYPE___eventws__DestroyPullPoint:
		return (void*)soap_instantiate___eventws__DestroyPullPoint(soap, -1, type, arrayType, n);
	case SOAP_TYPE___eventws__Notify_:
		return (void*)soap_instantiate___eventws__Notify_(soap, -1, type, arrayType, n);
	case SOAP_TYPE___eventws__CreatePullPoint:
		return (void*)soap_instantiate___eventws__CreatePullPoint(soap, -1, type, arrayType, n);
	case SOAP_TYPE___eventws__Renew_:
		return (void*)soap_instantiate___eventws__Renew_(soap, -1, type, arrayType, n);
	case SOAP_TYPE___eventws__Unsubscribe_:
		return (void*)soap_instantiate___eventws__Unsubscribe_(soap, -1, type, arrayType, n);
	case SOAP_TYPE___eventws__PauseSubscription:
		return (void*)soap_instantiate___eventws__PauseSubscription(soap, -1, type, arrayType, n);
	case SOAP_TYPE___eventws__ResumeSubscription:
		return (void*)soap_instantiate___eventws__ResumeSubscription(soap, -1, type, arrayType, n);
	case SOAP_TYPE__wsa5__EndpointReference:
		return (void*)soap_instantiate__wsa5__EndpointReference(soap, -1, type, arrayType, n);
	case SOAP_TYPE__wsa5__ReferenceParameters:
		return (void*)soap_instantiate__wsa5__ReferenceParameters(soap, -1, type, arrayType, n);
	case SOAP_TYPE__wsa5__Metadata:
		return (void*)soap_instantiate__wsa5__Metadata(soap, -1, type, arrayType, n);
	case SOAP_TYPE__wsa5__RelatesTo:
		return (void*)soap_instantiate__wsa5__RelatesTo(soap, -1, type, arrayType, n);
	case SOAP_TYPE__wsa5__ReplyTo:
		return (void*)soap_instantiate__wsa5__ReplyTo(soap, -1, type, arrayType, n);
	case SOAP_TYPE__wsa5__From:
		return (void*)soap_instantiate__wsa5__From(soap, -1, type, arrayType, n);
	case SOAP_TYPE__wsa5__FaultTo:
		return (void*)soap_instantiate__wsa5__FaultTo(soap, -1, type, arrayType, n);
	case SOAP_TYPE__wsa5__ProblemAction:
		return (void*)soap_instantiate__wsa5__ProblemAction(soap, -1, type, arrayType, n);
	case SOAP_TYPE_xsd__QName:
		return (void*)soap_instantiate_xsd__QName(soap, -1, type, arrayType, n);
	case SOAP_TYPE_xsd__NCName:
		return (void*)soap_instantiate_xsd__NCName(soap, -1, type, arrayType, n);
	case SOAP_TYPE_xsd__anyURI:
		return (void*)soap_instantiate_xsd__anyURI(soap, -1, type, arrayType, n);
	case SOAP_TYPE_xsd__nonNegativeInteger:
		return (void*)soap_instantiate_xsd__nonNegativeInteger(soap, -1, type, arrayType, n);
	case SOAP_TYPE_xsd__token:
		return (void*)soap_instantiate_xsd__token(soap, -1, type, arrayType, n);
	case SOAP_TYPE__xml__lang:
		return (void*)soap_instantiate__xml__lang(soap, -1, type, arrayType, n);
	case SOAP_TYPE_wsnt__AbsoluteOrRelativeTimeType:
		return (void*)soap_instantiate_wsnt__AbsoluteOrRelativeTimeType(soap, -1, type, arrayType, n);
	case SOAP_TYPE_wstop__FullTopicExpression:
		return (void*)soap_instantiate_wstop__FullTopicExpression(soap, -1, type, arrayType, n);
	case SOAP_TYPE_wstop__ConcreteTopicExpression:
		return (void*)soap_instantiate_wstop__ConcreteTopicExpression(soap, -1, type, arrayType, n);
	case SOAP_TYPE_wstop__SimpleTopicExpression:
		return (void*)soap_instantiate_wstop__SimpleTopicExpression(soap, -1, type, arrayType, n);
	case SOAP_TYPE_std__vectorTemplateOf_wstop__TopicNamespaceType_Topic:
		return (void*)soap_instantiate_std__vectorTemplateOf_wstop__TopicNamespaceType_Topic(soap, -1, type, arrayType, n);
	case SOAP_TYPE_std__vectorTemplateOfPointerTowstop__TopicType:
		return (void*)soap_instantiate_std__vectorTemplateOfPointerTowstop__TopicType(soap, -1, type, arrayType, n);
	case SOAP_TYPE_std__vectorTemplateOfxsd__QName:
		return (void*)soap_instantiate_std__vectorTemplateOfxsd__QName(soap, -1, type, arrayType, n);
	case SOAP_TYPE_std__vectorTemplateOfPointerTowsnt__TopicExpressionType:
		return (void*)soap_instantiate_std__vectorTemplateOfPointerTowsnt__TopicExpressionType(soap, -1, type, arrayType, n);
	case SOAP_TYPE_std__vectorTemplateOf_wsrfbf__BaseFaultType_Description:
		return (void*)soap_instantiate_std__vectorTemplateOf_wsrfbf__BaseFaultType_Description(soap, -1, type, arrayType, n);
	case SOAP_TYPE_std__vectorTemplateOfxsd__anyURI:
		return (void*)soap_instantiate_std__vectorTemplateOfxsd__anyURI(soap, -1, type, arrayType, n);
	case SOAP_TYPE_std__vectorTemplateOfPointerTowsnt__NotificationMessageHolderType:
		return (void*)soap_instantiate_std__vectorTemplateOfPointerTowsnt__NotificationMessageHolderType(soap, -1, type, arrayType, n);
	case SOAP_TYPE_std__vectorTemplateOf_XML:
		return (void*)soap_instantiate_std__vectorTemplateOf_XML(soap, -1, type, arrayType, n);
	}
	return NULL;
}

SOAP_FMAC3 int SOAP_FMAC4 onvifevent_fdelete(struct soap_clist *p)
{	switch (p->type)
	{
	case SOAP_TYPE_wsa5__EndpointReferenceType:
		if (p->size < 0)
			SOAP_DELETE(static_cast<struct wsa5__EndpointReferenceType*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<struct wsa5__EndpointReferenceType*>(p->ptr));
		break;
	case SOAP_TYPE_wsa5__ReferenceParametersType:
		if (p->size < 0)
			SOAP_DELETE(static_cast<struct wsa5__ReferenceParametersType*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<struct wsa5__ReferenceParametersType*>(p->ptr));
		break;
	case SOAP_TYPE_wsa5__MetadataType:
		if (p->size < 0)
			SOAP_DELETE(static_cast<struct wsa5__MetadataType*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<struct wsa5__MetadataType*>(p->ptr));
		break;
	case SOAP_TYPE_wsa5__ProblemActionType:
		if (p->size < 0)
			SOAP_DELETE(static_cast<struct wsa5__ProblemActionType*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<struct wsa5__ProblemActionType*>(p->ptr));
		break;
	case SOAP_TYPE_wsa5__RelatesToType:
		if (p->size < 0)
			SOAP_DELETE(static_cast<struct wsa5__RelatesToType*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<struct wsa5__RelatesToType*>(p->ptr));
		break;
	case SOAP_TYPE_chan__ChannelInstanceType:
		if (p->size < 0)
			SOAP_DELETE(static_cast<struct chan__ChannelInstanceType*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<struct chan__ChannelInstanceType*>(p->ptr));
		break;
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Header:
		if (p->size < 0)
			SOAP_DELETE(static_cast<struct SOAP_ENV__Header*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<struct SOAP_ENV__Header*>(p->ptr));
		break;
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Code:
		if (p->size < 0)
			SOAP_DELETE(static_cast<struct SOAP_ENV__Code*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<struct SOAP_ENV__Code*>(p->ptr));
		break;
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Reason:
		if (p->size < 0)
			SOAP_DELETE(static_cast<struct SOAP_ENV__Reason*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<struct SOAP_ENV__Reason*>(p->ptr));
		break;
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Fault:
		if (p->size < 0)
			SOAP_DELETE(static_cast<struct SOAP_ENV__Fault*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<struct SOAP_ENV__Fault*>(p->ptr));
		break;
#endif
	case SOAP_TYPE_xsd__anyType:
		if (p->size < 0)
			SOAP_DELETE(static_cast<xsd__anyType*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<xsd__anyType*>(p->ptr));
		break;
	case SOAP_TYPE_std__string:
		if (p->size < 0)
			SOAP_DELETE(static_cast<std::string*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<std::string*>(p->ptr));
		break;
	case SOAP_TYPE_xsd__NCName_:
		if (p->size < 0)
			SOAP_DELETE(static_cast<xsd__NCName_*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<xsd__NCName_*>(p->ptr));
		break;
	case SOAP_TYPE_xsd__QName_:
		if (p->size < 0)
			SOAP_DELETE(static_cast<xsd__QName_*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<xsd__QName_*>(p->ptr));
		break;
	case SOAP_TYPE_xsd__anyURI_:
		if (p->size < 0)
			SOAP_DELETE(static_cast<xsd__anyURI_*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<xsd__anyURI_*>(p->ptr));
		break;
	case SOAP_TYPE_xsd__boolean:
		if (p->size < 0)
			SOAP_DELETE(static_cast<xsd__boolean*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<xsd__boolean*>(p->ptr));
		break;
	case SOAP_TYPE_xsd__dateTime:
		if (p->size < 0)
			SOAP_DELETE(static_cast<xsd__dateTime*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<xsd__dateTime*>(p->ptr));
		break;
	case SOAP_TYPE_xsd__duration_:
		if (p->size < 0)
			SOAP_DELETE(static_cast<xsd__duration_*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<xsd__duration_*>(p->ptr));
		break;
	case SOAP_TYPE_xsd__int:
		if (p->size < 0)
			SOAP_DELETE(static_cast<xsd__int*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<xsd__int*>(p->ptr));
		break;
	case SOAP_TYPE_xsd__nonNegativeInteger_:
		if (p->size < 0)
			SOAP_DELETE(static_cast<xsd__nonNegativeInteger_*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<xsd__nonNegativeInteger_*>(p->ptr));
		break;
	case SOAP_TYPE_xsd__string:
		if (p->size < 0)
			SOAP_DELETE(static_cast<xsd__string*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<xsd__string*>(p->ptr));
		break;
	case SOAP_TYPE_xsd__token_:
		if (p->size < 0)
			SOAP_DELETE(static_cast<xsd__token_*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<xsd__token_*>(p->ptr));
		break;
	case SOAP_TYPE_wstop__FullTopicExpression__:
		if (p->size < 0)
			SOAP_DELETE(static_cast<wstop__FullTopicExpression__*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<wstop__FullTopicExpression__*>(p->ptr));
		break;
	case SOAP_TYPE_wstop__ConcreteTopicExpression__:
		if (p->size < 0)
			SOAP_DELETE(static_cast<wstop__ConcreteTopicExpression__*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<wstop__ConcreteTopicExpression__*>(p->ptr));
		break;
	case SOAP_TYPE_wstop__SimpleTopicExpression__:
		if (p->size < 0)
			SOAP_DELETE(static_cast<wstop__SimpleTopicExpression__*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<wstop__SimpleTopicExpression__*>(p->ptr));
		break;
	case SOAP_TYPE_eventws__Capabilities:
		if (p->size < 0)
			SOAP_DELETE(static_cast<eventws__Capabilities*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<eventws__Capabilities*>(p->ptr));
		break;
	case SOAP_TYPE_eventws__SubscriptionPolicy:
		if (p->size < 0)
			SOAP_DELETE(static_cast<eventws__SubscriptionPolicy*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<eventws__SubscriptionPolicy*>(p->ptr));
		break;
	case SOAP_TYPE__eventws__GetServiceCapabilities:
		if (p->size < 0)
			SOAP_DELETE(static_cast<_eventws__GetServiceCapabilities*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<_eventws__GetServiceCapabilities*>(p->ptr));
		break;
	case SOAP_TYPE__eventws__GetServiceCapabilitiesResponse:
		if (p->size < 0)
			SOAP_DELETE(static_cast<_eventws__GetServiceCapabilitiesResponse*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<_eventws__GetServiceCapabilitiesResponse*>(p->ptr));
		break;
	case SOAP_TYPE__eventws__CreatePullPointSubscription_SubscriptionPolicy:
		if (p->size < 0)
			SOAP_DELETE(static_cast<_eventws__CreatePullPointSubscription_SubscriptionPolicy*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<_eventws__CreatePullPointSubscription_SubscriptionPolicy*>(p->ptr));
		break;
	case SOAP_TYPE__eventws__CreatePullPointSubscription:
		if (p->size < 0)
			SOAP_DELETE(static_cast<_eventws__CreatePullPointSubscription*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<_eventws__CreatePullPointSubscription*>(p->ptr));
		break;
	case SOAP_TYPE__eventws__CreatePullPointSubscriptionResponse:
		if (p->size < 0)
			SOAP_DELETE(static_cast<_eventws__CreatePullPointSubscriptionResponse*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<_eventws__CreatePullPointSubscriptionResponse*>(p->ptr));
		break;
	case SOAP_TYPE__eventws__PullMessages:
		if (p->size < 0)
			SOAP_DELETE(static_cast<_eventws__PullMessages*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<_eventws__PullMessages*>(p->ptr));
		break;
	case SOAP_TYPE__eventws__PullMessagesResponse:
		if (p->size < 0)
			SOAP_DELETE(static_cast<_eventws__PullMessagesResponse*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<_eventws__PullMessagesResponse*>(p->ptr));
		break;
	case SOAP_TYPE__eventws__PullMessagesFaultResponse:
		if (p->size < 0)
			SOAP_DELETE(static_cast<_eventws__PullMessagesFaultResponse*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<_eventws__PullMessagesFaultResponse*>(p->ptr));
		break;
	case SOAP_TYPE__eventws__Seek:
		if (p->size < 0)
			SOAP_DELETE(static_cast<_eventws__Seek*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<_eventws__Seek*>(p->ptr));
		break;
	case SOAP_TYPE__eventws__SeekResponse:
		if (p->size < 0)
			SOAP_DELETE(static_cast<_eventws__SeekResponse*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<_eventws__SeekResponse*>(p->ptr));
		break;
	case SOAP_TYPE__eventws__SetSynchronizationPoint:
		if (p->size < 0)
			SOAP_DELETE(static_cast<_eventws__SetSynchronizationPoint*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<_eventws__SetSynchronizationPoint*>(p->ptr));
		break;
	case SOAP_TYPE__eventws__SetSynchronizationPointResponse:
		if (p->size < 0)
			SOAP_DELETE(static_cast<_eventws__SetSynchronizationPointResponse*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<_eventws__SetSynchronizationPointResponse*>(p->ptr));
		break;
	case SOAP_TYPE__eventws__GetEventProperties:
		if (p->size < 0)
			SOAP_DELETE(static_cast<_eventws__GetEventProperties*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<_eventws__GetEventProperties*>(p->ptr));
		break;
	case SOAP_TYPE__eventws__GetEventPropertiesResponse:
		if (p->size < 0)
			SOAP_DELETE(static_cast<_eventws__GetEventPropertiesResponse*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<_eventws__GetEventPropertiesResponse*>(p->ptr));
		break;
	case SOAP_TYPE__wsrfbf__BaseFaultType_ErrorCode:
		if (p->size < 0)
			SOAP_DELETE(static_cast<_wsrfbf__BaseFaultType_ErrorCode*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<_wsrfbf__BaseFaultType_ErrorCode*>(p->ptr));
		break;
	case SOAP_TYPE__wsrfbf__BaseFaultType_Description:
		if (p->size < 0)
			SOAP_DELETE(static_cast<_wsrfbf__BaseFaultType_Description*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<_wsrfbf__BaseFaultType_Description*>(p->ptr));
		break;
	case SOAP_TYPE__wsrfbf__BaseFaultType_FaultCause:
		if (p->size < 0)
			SOAP_DELETE(static_cast<_wsrfbf__BaseFaultType_FaultCause*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<_wsrfbf__BaseFaultType_FaultCause*>(p->ptr));
		break;
	case SOAP_TYPE_wsrfbf__BaseFaultType:
		if (p->size < 0)
			SOAP_DELETE(static_cast<wsrfbf__BaseFaultType*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<wsrfbf__BaseFaultType*>(p->ptr));
		break;
	case SOAP_TYPE_wsnt__QueryExpressionType:
		if (p->size < 0)
			SOAP_DELETE(static_cast<wsnt__QueryExpressionType*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<wsnt__QueryExpressionType*>(p->ptr));
		break;
	case SOAP_TYPE_wsnt__TopicExpressionType:
		if (p->size < 0)
			SOAP_DELETE(static_cast<wsnt__TopicExpressionType*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<wsnt__TopicExpressionType*>(p->ptr));
		break;
	case SOAP_TYPE_wsnt__FilterType:
		if (p->size < 0)
			SOAP_DELETE(static_cast<wsnt__FilterType*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<wsnt__FilterType*>(p->ptr));
		break;
	case SOAP_TYPE_wsnt__SubscriptionPolicyType:
		if (p->size < 0)
			SOAP_DELETE(static_cast<wsnt__SubscriptionPolicyType*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<wsnt__SubscriptionPolicyType*>(p->ptr));
		break;
	case SOAP_TYPE__wsnt__NotificationMessageHolderType_Message:
		if (p->size < 0)
			SOAP_DELETE(static_cast<_wsnt__NotificationMessageHolderType_Message*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<_wsnt__NotificationMessageHolderType_Message*>(p->ptr));
		break;
	case SOAP_TYPE_wsnt__NotificationMessageHolderType:
		if (p->size < 0)
			SOAP_DELETE(static_cast<wsnt__NotificationMessageHolderType*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<wsnt__NotificationMessageHolderType*>(p->ptr));
		break;
	case SOAP_TYPE__wsnt__NotificationProducerRP:
		if (p->size < 0)
			SOAP_DELETE(static_cast<_wsnt__NotificationProducerRP*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<_wsnt__NotificationProducerRP*>(p->ptr));
		break;
	case SOAP_TYPE__wsnt__SubscriptionManagerRP:
		if (p->size < 0)
			SOAP_DELETE(static_cast<_wsnt__SubscriptionManagerRP*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<_wsnt__SubscriptionManagerRP*>(p->ptr));
		break;
	case SOAP_TYPE__wsnt__Notify:
		if (p->size < 0)
			SOAP_DELETE(static_cast<_wsnt__Notify*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<_wsnt__Notify*>(p->ptr));
		break;
	case SOAP_TYPE__wsnt__UseRaw:
		if (p->size < 0)
			SOAP_DELETE(static_cast<_wsnt__UseRaw*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<_wsnt__UseRaw*>(p->ptr));
		break;
	case SOAP_TYPE__wsnt__Subscribe_SubscriptionPolicy:
		if (p->size < 0)
			SOAP_DELETE(static_cast<_wsnt__Subscribe_SubscriptionPolicy*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<_wsnt__Subscribe_SubscriptionPolicy*>(p->ptr));
		break;
	case SOAP_TYPE__wsnt__Subscribe:
		if (p->size < 0)
			SOAP_DELETE(static_cast<_wsnt__Subscribe*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<_wsnt__Subscribe*>(p->ptr));
		break;
	case SOAP_TYPE__wsnt__SubscribeResponse:
		if (p->size < 0)
			SOAP_DELETE(static_cast<_wsnt__SubscribeResponse*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<_wsnt__SubscribeResponse*>(p->ptr));
		break;
	case SOAP_TYPE__wsnt__GetCurrentMessage:
		if (p->size < 0)
			SOAP_DELETE(static_cast<_wsnt__GetCurrentMessage*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<_wsnt__GetCurrentMessage*>(p->ptr));
		break;
	case SOAP_TYPE__wsnt__GetCurrentMessageResponse:
		if (p->size < 0)
			SOAP_DELETE(static_cast<_wsnt__GetCurrentMessageResponse*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<_wsnt__GetCurrentMessageResponse*>(p->ptr));
		break;
	case SOAP_TYPE__wsnt__GetMessages:
		if (p->size < 0)
			SOAP_DELETE(static_cast<_wsnt__GetMessages*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<_wsnt__GetMessages*>(p->ptr));
		break;
	case SOAP_TYPE__wsnt__GetMessagesResponse:
		if (p->size < 0)
			SOAP_DELETE(static_cast<_wsnt__GetMessagesResponse*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<_wsnt__GetMessagesResponse*>(p->ptr));
		break;
	case SOAP_TYPE__wsnt__DestroyPullPoint:
		if (p->size < 0)
			SOAP_DELETE(static_cast<_wsnt__DestroyPullPoint*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<_wsnt__DestroyPullPoint*>(p->ptr));
		break;
	case SOAP_TYPE__wsnt__DestroyPullPointResponse:
		if (p->size < 0)
			SOAP_DELETE(static_cast<_wsnt__DestroyPullPointResponse*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<_wsnt__DestroyPullPointResponse*>(p->ptr));
		break;
	case SOAP_TYPE__wsnt__CreatePullPoint:
		if (p->size < 0)
			SOAP_DELETE(static_cast<_wsnt__CreatePullPoint*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<_wsnt__CreatePullPoint*>(p->ptr));
		break;
	case SOAP_TYPE__wsnt__CreatePullPointResponse:
		if (p->size < 0)
			SOAP_DELETE(static_cast<_wsnt__CreatePullPointResponse*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<_wsnt__CreatePullPointResponse*>(p->ptr));
		break;
	case SOAP_TYPE__wsnt__Renew:
		if (p->size < 0)
			SOAP_DELETE(static_cast<_wsnt__Renew*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<_wsnt__Renew*>(p->ptr));
		break;
	case SOAP_TYPE__wsnt__RenewResponse:
		if (p->size < 0)
			SOAP_DELETE(static_cast<_wsnt__RenewResponse*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<_wsnt__RenewResponse*>(p->ptr));
		break;
	case SOAP_TYPE__wsnt__Unsubscribe:
		if (p->size < 0)
			SOAP_DELETE(static_cast<_wsnt__Unsubscribe*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<_wsnt__Unsubscribe*>(p->ptr));
		break;
	case SOAP_TYPE__wsnt__UnsubscribeResponse:
		if (p->size < 0)
			SOAP_DELETE(static_cast<_wsnt__UnsubscribeResponse*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<_wsnt__UnsubscribeResponse*>(p->ptr));
		break;
	case SOAP_TYPE__wsnt__PauseSubscription:
		if (p->size < 0)
			SOAP_DELETE(static_cast<_wsnt__PauseSubscription*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<_wsnt__PauseSubscription*>(p->ptr));
		break;
	case SOAP_TYPE__wsnt__PauseSubscriptionResponse:
		if (p->size < 0)
			SOAP_DELETE(static_cast<_wsnt__PauseSubscriptionResponse*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<_wsnt__PauseSubscriptionResponse*>(p->ptr));
		break;
	case SOAP_TYPE__wsnt__ResumeSubscription:
		if (p->size < 0)
			SOAP_DELETE(static_cast<_wsnt__ResumeSubscription*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<_wsnt__ResumeSubscription*>(p->ptr));
		break;
	case SOAP_TYPE__wsnt__ResumeSubscriptionResponse:
		if (p->size < 0)
			SOAP_DELETE(static_cast<_wsnt__ResumeSubscriptionResponse*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<_wsnt__ResumeSubscriptionResponse*>(p->ptr));
		break;
	case SOAP_TYPE_wstop__Documentation:
		if (p->size < 0)
			SOAP_DELETE(static_cast<wstop__Documentation*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<wstop__Documentation*>(p->ptr));
		break;
	case SOAP_TYPE_wstop__ExtensibleDocumented:
		if (p->size < 0)
			SOAP_DELETE(static_cast<wstop__ExtensibleDocumented*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<wstop__ExtensibleDocumented*>(p->ptr));
		break;
	case SOAP_TYPE_wstop__QueryExpressionType:
		if (p->size < 0)
			SOAP_DELETE(static_cast<wstop__QueryExpressionType*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<wstop__QueryExpressionType*>(p->ptr));
		break;
	case SOAP_TYPE_wsrfr__ResourceUnknownFaultType:
		if (p->size < 0)
			SOAP_DELETE(static_cast<wsrfr__ResourceUnknownFaultType*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<wsrfr__ResourceUnknownFaultType*>(p->ptr));
		break;
	case SOAP_TYPE_wsrfr__ResourceUnavailableFaultType:
		if (p->size < 0)
			SOAP_DELETE(static_cast<wsrfr__ResourceUnavailableFaultType*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<wsrfr__ResourceUnavailableFaultType*>(p->ptr));
		break;
	case SOAP_TYPE_wsnt__SubscribeCreationFailedFaultType:
		if (p->size < 0)
			SOAP_DELETE(static_cast<wsnt__SubscribeCreationFailedFaultType*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<wsnt__SubscribeCreationFailedFaultType*>(p->ptr));
		break;
	case SOAP_TYPE_wsnt__InvalidFilterFaultType:
		if (p->size < 0)
			SOAP_DELETE(static_cast<wsnt__InvalidFilterFaultType*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<wsnt__InvalidFilterFaultType*>(p->ptr));
		break;
	case SOAP_TYPE_wsnt__TopicExpressionDialectUnknownFaultType:
		if (p->size < 0)
			SOAP_DELETE(static_cast<wsnt__TopicExpressionDialectUnknownFaultType*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<wsnt__TopicExpressionDialectUnknownFaultType*>(p->ptr));
		break;
	case SOAP_TYPE_wsnt__InvalidTopicExpressionFaultType:
		if (p->size < 0)
			SOAP_DELETE(static_cast<wsnt__InvalidTopicExpressionFaultType*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<wsnt__InvalidTopicExpressionFaultType*>(p->ptr));
		break;
	case SOAP_TYPE_wsnt__TopicNotSupportedFaultType:
		if (p->size < 0)
			SOAP_DELETE(static_cast<wsnt__TopicNotSupportedFaultType*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<wsnt__TopicNotSupportedFaultType*>(p->ptr));
		break;
	case SOAP_TYPE_wsnt__MultipleTopicsSpecifiedFaultType:
		if (p->size < 0)
			SOAP_DELETE(static_cast<wsnt__MultipleTopicsSpecifiedFaultType*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<wsnt__MultipleTopicsSpecifiedFaultType*>(p->ptr));
		break;
	case SOAP_TYPE_wsnt__InvalidProducerPropertiesExpressionFaultType:
		if (p->size < 0)
			SOAP_DELETE(static_cast<wsnt__InvalidProducerPropertiesExpressionFaultType*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<wsnt__InvalidProducerPropertiesExpressionFaultType*>(p->ptr));
		break;
	case SOAP_TYPE_wsnt__InvalidMessageContentExpressionFaultType:
		if (p->size < 0)
			SOAP_DELETE(static_cast<wsnt__InvalidMessageContentExpressionFaultType*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<wsnt__InvalidMessageContentExpressionFaultType*>(p->ptr));
		break;
	case SOAP_TYPE_wsnt__UnrecognizedPolicyRequestFaultType:
		if (p->size < 0)
			SOAP_DELETE(static_cast<wsnt__UnrecognizedPolicyRequestFaultType*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<wsnt__UnrecognizedPolicyRequestFaultType*>(p->ptr));
		break;
	case SOAP_TYPE_wsnt__UnsupportedPolicyRequestFaultType:
		if (p->size < 0)
			SOAP_DELETE(static_cast<wsnt__UnsupportedPolicyRequestFaultType*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<wsnt__UnsupportedPolicyRequestFaultType*>(p->ptr));
		break;
	case SOAP_TYPE_wsnt__NotifyMessageNotSupportedFaultType:
		if (p->size < 0)
			SOAP_DELETE(static_cast<wsnt__NotifyMessageNotSupportedFaultType*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<wsnt__NotifyMessageNotSupportedFaultType*>(p->ptr));
		break;
	case SOAP_TYPE_wsnt__UnacceptableInitialTerminationTimeFaultType:
		if (p->size < 0)
			SOAP_DELETE(static_cast<wsnt__UnacceptableInitialTerminationTimeFaultType*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<wsnt__UnacceptableInitialTerminationTimeFaultType*>(p->ptr));
		break;
	case SOAP_TYPE_wsnt__NoCurrentMessageOnTopicFaultType:
		if (p->size < 0)
			SOAP_DELETE(static_cast<wsnt__NoCurrentMessageOnTopicFaultType*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<wsnt__NoCurrentMessageOnTopicFaultType*>(p->ptr));
		break;
	case SOAP_TYPE_wsnt__UnableToGetMessagesFaultType:
		if (p->size < 0)
			SOAP_DELETE(static_cast<wsnt__UnableToGetMessagesFaultType*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<wsnt__UnableToGetMessagesFaultType*>(p->ptr));
		break;
	case SOAP_TYPE_wsnt__UnableToDestroyPullPointFaultType:
		if (p->size < 0)
			SOAP_DELETE(static_cast<wsnt__UnableToDestroyPullPointFaultType*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<wsnt__UnableToDestroyPullPointFaultType*>(p->ptr));
		break;
	case SOAP_TYPE_wsnt__UnableToCreatePullPointFaultType:
		if (p->size < 0)
			SOAP_DELETE(static_cast<wsnt__UnableToCreatePullPointFaultType*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<wsnt__UnableToCreatePullPointFaultType*>(p->ptr));
		break;
	case SOAP_TYPE_wsnt__UnacceptableTerminationTimeFaultType:
		if (p->size < 0)
			SOAP_DELETE(static_cast<wsnt__UnacceptableTerminationTimeFaultType*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<wsnt__UnacceptableTerminationTimeFaultType*>(p->ptr));
		break;
	case SOAP_TYPE_wsnt__UnableToDestroySubscriptionFaultType:
		if (p->size < 0)
			SOAP_DELETE(static_cast<wsnt__UnableToDestroySubscriptionFaultType*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<wsnt__UnableToDestroySubscriptionFaultType*>(p->ptr));
		break;
	case SOAP_TYPE_wsnt__PauseFailedFaultType:
		if (p->size < 0)
			SOAP_DELETE(static_cast<wsnt__PauseFailedFaultType*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<wsnt__PauseFailedFaultType*>(p->ptr));
		break;
	case SOAP_TYPE_wsnt__ResumeFailedFaultType:
		if (p->size < 0)
			SOAP_DELETE(static_cast<wsnt__ResumeFailedFaultType*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<wsnt__ResumeFailedFaultType*>(p->ptr));
		break;
	case SOAP_TYPE__wstop__TopicNamespaceType_Topic:
		if (p->size < 0)
			SOAP_DELETE(static_cast<_wstop__TopicNamespaceType_Topic*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<_wstop__TopicNamespaceType_Topic*>(p->ptr));
		break;
	case SOAP_TYPE_wstop__TopicNamespaceType:
		if (p->size < 0)
			SOAP_DELETE(static_cast<wstop__TopicNamespaceType*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<wstop__TopicNamespaceType*>(p->ptr));
		break;
	case SOAP_TYPE_wstop__TopicType:
		if (p->size < 0)
			SOAP_DELETE(static_cast<wstop__TopicType*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<wstop__TopicType*>(p->ptr));
		break;
	case SOAP_TYPE_wstop__TopicSetType:
		if (p->size < 0)
			SOAP_DELETE(static_cast<wstop__TopicSetType*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<wstop__TopicSetType*>(p->ptr));
		break;
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Detail:
		if (p->size < 0)
			SOAP_DELETE(static_cast<struct SOAP_ENV__Detail*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<struct SOAP_ENV__Detail*>(p->ptr));
		break;
#endif
	case SOAP_TYPE___eventws__PullMessages:
		if (p->size < 0)
			SOAP_DELETE(static_cast<struct __eventws__PullMessages*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<struct __eventws__PullMessages*>(p->ptr));
		break;
	case SOAP_TYPE___eventws__Seek:
		if (p->size < 0)
			SOAP_DELETE(static_cast<struct __eventws__Seek*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<struct __eventws__Seek*>(p->ptr));
		break;
	case SOAP_TYPE___eventws__SetSynchronizationPoint:
		if (p->size < 0)
			SOAP_DELETE(static_cast<struct __eventws__SetSynchronizationPoint*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<struct __eventws__SetSynchronizationPoint*>(p->ptr));
		break;
	case SOAP_TYPE___eventws__GetServiceCapabilities:
		if (p->size < 0)
			SOAP_DELETE(static_cast<struct __eventws__GetServiceCapabilities*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<struct __eventws__GetServiceCapabilities*>(p->ptr));
		break;
	case SOAP_TYPE___eventws__CreatePullPointSubscription:
		if (p->size < 0)
			SOAP_DELETE(static_cast<struct __eventws__CreatePullPointSubscription*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<struct __eventws__CreatePullPointSubscription*>(p->ptr));
		break;
	case SOAP_TYPE___eventws__GetEventProperties:
		if (p->size < 0)
			SOAP_DELETE(static_cast<struct __eventws__GetEventProperties*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<struct __eventws__GetEventProperties*>(p->ptr));
		break;
	case SOAP_TYPE___eventws__Renew:
		if (p->size < 0)
			SOAP_DELETE(static_cast<struct __eventws__Renew*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<struct __eventws__Renew*>(p->ptr));
		break;
	case SOAP_TYPE___eventws__Unsubscribe:
		if (p->size < 0)
			SOAP_DELETE(static_cast<struct __eventws__Unsubscribe*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<struct __eventws__Unsubscribe*>(p->ptr));
		break;
	case SOAP_TYPE___eventws__Subscribe:
		if (p->size < 0)
			SOAP_DELETE(static_cast<struct __eventws__Subscribe*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<struct __eventws__Subscribe*>(p->ptr));
		break;
	case SOAP_TYPE___eventws__GetCurrentMessage:
		if (p->size < 0)
			SOAP_DELETE(static_cast<struct __eventws__GetCurrentMessage*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<struct __eventws__GetCurrentMessage*>(p->ptr));
		break;
	case SOAP_TYPE___eventws__Notify:
		if (p->size < 0)
			SOAP_DELETE(static_cast<struct __eventws__Notify*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<struct __eventws__Notify*>(p->ptr));
		break;
	case SOAP_TYPE___eventws__GetMessages:
		if (p->size < 0)
			SOAP_DELETE(static_cast<struct __eventws__GetMessages*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<struct __eventws__GetMessages*>(p->ptr));
		break;
	case SOAP_TYPE___eventws__DestroyPullPoint:
		if (p->size < 0)
			SOAP_DELETE(static_cast<struct __eventws__DestroyPullPoint*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<struct __eventws__DestroyPullPoint*>(p->ptr));
		break;
	case SOAP_TYPE___eventws__Notify_:
		if (p->size < 0)
			SOAP_DELETE(static_cast<struct __eventws__Notify_*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<struct __eventws__Notify_*>(p->ptr));
		break;
	case SOAP_TYPE___eventws__CreatePullPoint:
		if (p->size < 0)
			SOAP_DELETE(static_cast<struct __eventws__CreatePullPoint*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<struct __eventws__CreatePullPoint*>(p->ptr));
		break;
	case SOAP_TYPE___eventws__Renew_:
		if (p->size < 0)
			SOAP_DELETE(static_cast<struct __eventws__Renew_*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<struct __eventws__Renew_*>(p->ptr));
		break;
	case SOAP_TYPE___eventws__Unsubscribe_:
		if (p->size < 0)
			SOAP_DELETE(static_cast<struct __eventws__Unsubscribe_*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<struct __eventws__Unsubscribe_*>(p->ptr));
		break;
	case SOAP_TYPE___eventws__PauseSubscription:
		if (p->size < 0)
			SOAP_DELETE(static_cast<struct __eventws__PauseSubscription*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<struct __eventws__PauseSubscription*>(p->ptr));
		break;
	case SOAP_TYPE___eventws__ResumeSubscription:
		if (p->size < 0)
			SOAP_DELETE(static_cast<struct __eventws__ResumeSubscription*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<struct __eventws__ResumeSubscription*>(p->ptr));
		break;
	case SOAP_TYPE__wsa5__EndpointReference:
		if (p->size < 0)
			SOAP_DELETE(static_cast<struct wsa5__EndpointReferenceType*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<struct wsa5__EndpointReferenceType*>(p->ptr));
		break;
	case SOAP_TYPE__wsa5__ReferenceParameters:
		if (p->size < 0)
			SOAP_DELETE(static_cast<struct wsa5__ReferenceParametersType*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<struct wsa5__ReferenceParametersType*>(p->ptr));
		break;
	case SOAP_TYPE__wsa5__Metadata:
		if (p->size < 0)
			SOAP_DELETE(static_cast<struct wsa5__MetadataType*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<struct wsa5__MetadataType*>(p->ptr));
		break;
	case SOAP_TYPE__wsa5__RelatesTo:
		if (p->size < 0)
			SOAP_DELETE(static_cast<struct wsa5__RelatesToType*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<struct wsa5__RelatesToType*>(p->ptr));
		break;
	case SOAP_TYPE__wsa5__ReplyTo:
		if (p->size < 0)
			SOAP_DELETE(static_cast<struct wsa5__EndpointReferenceType*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<struct wsa5__EndpointReferenceType*>(p->ptr));
		break;
	case SOAP_TYPE__wsa5__From:
		if (p->size < 0)
			SOAP_DELETE(static_cast<struct wsa5__EndpointReferenceType*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<struct wsa5__EndpointReferenceType*>(p->ptr));
		break;
	case SOAP_TYPE__wsa5__FaultTo:
		if (p->size < 0)
			SOAP_DELETE(static_cast<struct wsa5__EndpointReferenceType*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<struct wsa5__EndpointReferenceType*>(p->ptr));
		break;
	case SOAP_TYPE__wsa5__ProblemAction:
		if (p->size < 0)
			SOAP_DELETE(static_cast<struct wsa5__ProblemActionType*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<struct wsa5__ProblemActionType*>(p->ptr));
		break;
	case SOAP_TYPE_xsd__QName:
		if (p->size < 0)
			SOAP_DELETE(static_cast<std::string*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<std::string*>(p->ptr));
		break;
	case SOAP_TYPE_xsd__NCName:
		if (p->size < 0)
			SOAP_DELETE(static_cast<std::string*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<std::string*>(p->ptr));
		break;
	case SOAP_TYPE_xsd__anyURI:
		if (p->size < 0)
			SOAP_DELETE(static_cast<std::string*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<std::string*>(p->ptr));
		break;
	case SOAP_TYPE_xsd__nonNegativeInteger:
		if (p->size < 0)
			SOAP_DELETE(static_cast<std::string*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<std::string*>(p->ptr));
		break;
	case SOAP_TYPE_xsd__token:
		if (p->size < 0)
			SOAP_DELETE(static_cast<std::string*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<std::string*>(p->ptr));
		break;
	case SOAP_TYPE__xml__lang:
		if (p->size < 0)
			SOAP_DELETE(static_cast<std::string*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<std::string*>(p->ptr));
		break;
	case SOAP_TYPE_wsnt__AbsoluteOrRelativeTimeType:
		if (p->size < 0)
			SOAP_DELETE(static_cast<std::string*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<std::string*>(p->ptr));
		break;
	case SOAP_TYPE_wstop__FullTopicExpression:
		if (p->size < 0)
			SOAP_DELETE(static_cast<std::string*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<std::string*>(p->ptr));
		break;
	case SOAP_TYPE_wstop__ConcreteTopicExpression:
		if (p->size < 0)
			SOAP_DELETE(static_cast<std::string*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<std::string*>(p->ptr));
		break;
	case SOAP_TYPE_wstop__SimpleTopicExpression:
		if (p->size < 0)
			SOAP_DELETE(static_cast<std::string*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<std::string*>(p->ptr));
		break;
	case SOAP_TYPE_std__vectorTemplateOf_wstop__TopicNamespaceType_Topic:
		if (p->size < 0)
			SOAP_DELETE(static_cast<std::vector<_wstop__TopicNamespaceType_Topic >*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<std::vector<_wstop__TopicNamespaceType_Topic >*>(p->ptr));
		break;
	case SOAP_TYPE_std__vectorTemplateOfPointerTowstop__TopicType:
		if (p->size < 0)
			SOAP_DELETE(static_cast<std::vector<wstop__TopicType * >*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<std::vector<wstop__TopicType * >*>(p->ptr));
		break;
	case SOAP_TYPE_std__vectorTemplateOfxsd__QName:
		if (p->size < 0)
			SOAP_DELETE(static_cast<std::vector<std::string >*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<std::vector<std::string >*>(p->ptr));
		break;
	case SOAP_TYPE_std__vectorTemplateOfPointerTowsnt__TopicExpressionType:
		if (p->size < 0)
			SOAP_DELETE(static_cast<std::vector<wsnt__TopicExpressionType * >*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<std::vector<wsnt__TopicExpressionType * >*>(p->ptr));
		break;
	case SOAP_TYPE_std__vectorTemplateOf_wsrfbf__BaseFaultType_Description:
		if (p->size < 0)
			SOAP_DELETE(static_cast<std::vector<_wsrfbf__BaseFaultType_Description >*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<std::vector<_wsrfbf__BaseFaultType_Description >*>(p->ptr));
		break;
	case SOAP_TYPE_std__vectorTemplateOfxsd__anyURI:
		if (p->size < 0)
			SOAP_DELETE(static_cast<std::vector<std::string >*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<std::vector<std::string >*>(p->ptr));
		break;
	case SOAP_TYPE_std__vectorTemplateOfPointerTowsnt__NotificationMessageHolderType:
		if (p->size < 0)
			SOAP_DELETE(static_cast<std::vector<wsnt__NotificationMessageHolderType * >*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<std::vector<wsnt__NotificationMessageHolderType * >*>(p->ptr));
		break;
	case SOAP_TYPE_std__vectorTemplateOf_XML:
		if (p->size < 0)
			SOAP_DELETE(static_cast<std::vector<char * >*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<std::vector<char * >*>(p->ptr));
		break;
	default:	return SOAP_ERR;
	}
	return SOAP_OK;
}

SOAP_FMAC3 void* SOAP_FMAC4 soap_class_id_enter(struct soap *soap, const char *id, void *p, int t, size_t n, const char *type, const char *arrayType)
{	return soap_id_enter(soap, id, p, t, n, 0, type, arrayType, onvifevent_instantiate);
}

SOAP_FMAC3 void* SOAP_FMAC4 soap_container_id_forward(struct soap *soap, const char *href, void *p, size_t len, int st, int tt, size_t n, unsigned int k)
{	return soap_id_forward(soap, href, p, len, st, tt, n, k, onvifevent_container_insert);
}

SOAP_FMAC3 void SOAP_FMAC4 onvifevent_container_insert(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
#ifdef WIN32
#pragma warning(push)
#pragma warning(disable:4065)
#endif
{
	(void)soap; (void)st; (void)p; (void)len; (void)q; (void)n; /* appease -Wall -Werror */
	switch (tt)
	{
	case SOAP_TYPE_std__vectorTemplateOf_wstop__TopicNamespaceType_Topic:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Container onvifevent_container_insert type = %d in %d location = %p object = %p len = %lu\n", st, tt, p, q, (unsigned long)len));
		(*(std::vector<_wstop__TopicNamespaceType_Topic >*)p)[len] = *(_wstop__TopicNamespaceType_Topic *)q;
		break;
	case SOAP_TYPE_std__vectorTemplateOfPointerTowstop__TopicType:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Container onvifevent_container_insert type = %d in %d location = %p object = %p len = %lu\n", st, tt, p, q, (unsigned long)len));
		(*(std::vector<wstop__TopicType * >*)p)[len] = *(wstop__TopicType **)q;
		break;
	case SOAP_TYPE_std__vectorTemplateOfxsd__QName:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Container onvifevent_container_insert type = %d in %d location = %p object = %p len = %lu\n", st, tt, p, q, (unsigned long)len));
		(*(std::vector<std::string >*)p)[len] = *(std::string *)q;
		break;
	case SOAP_TYPE_std__vectorTemplateOfPointerTowsnt__TopicExpressionType:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Container onvifevent_container_insert type = %d in %d location = %p object = %p len = %lu\n", st, tt, p, q, (unsigned long)len));
		(*(std::vector<wsnt__TopicExpressionType * >*)p)[len] = *(wsnt__TopicExpressionType **)q;
		break;
	case SOAP_TYPE_std__vectorTemplateOf_wsrfbf__BaseFaultType_Description:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Container onvifevent_container_insert type = %d in %d location = %p object = %p len = %lu\n", st, tt, p, q, (unsigned long)len));
		(*(std::vector<_wsrfbf__BaseFaultType_Description >*)p)[len] = *(_wsrfbf__BaseFaultType_Description *)q;
		break;
	case SOAP_TYPE_std__vectorTemplateOfxsd__anyURI:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Container onvifevent_container_insert type = %d in %d location = %p object = %p len = %lu\n", st, tt, p, q, (unsigned long)len));
		(*(std::vector<std::string >*)p)[len] = *(std::string *)q;
		break;
	case SOAP_TYPE_std__vectorTemplateOfPointerTowsnt__NotificationMessageHolderType:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Container onvifevent_container_insert type = %d in %d location = %p object = %p len = %lu\n", st, tt, p, q, (unsigned long)len));
		(*(std::vector<wsnt__NotificationMessageHolderType * >*)p)[len] = *(wsnt__NotificationMessageHolderType **)q;
		break;
	case SOAP_TYPE_std__vectorTemplateOf_XML:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Container onvifevent_container_insert type = %d in %d location = %p object = %p len = %lu\n", st, tt, p, q, (unsigned long)len));
		(*(std::vector<char * >*)p)[len] = *(char **)q;
		break;
	default:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Could not insert type = %d in %d\n", st, tt));
	}
#ifdef WIN32
#pragma warning(pop)
#endif
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_byte(struct soap *soap, char *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_byte
	*a = SOAP_DEFAULT_byte;
#else
	*a = (char)0;
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_byte(struct soap *soap, const char *tag, int id, const char *a, const char *type)
{
	return soap_outbyte(soap, tag, id, a, type, SOAP_TYPE_byte);
}

SOAP_FMAC3 char * SOAP_FMAC4 soap_in_byte(struct soap *soap, const char *tag, char *a, const char *type)
{	char *p;
	p = soap_inbyte(soap, tag, a, type, SOAP_TYPE_byte);
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_byte(struct soap *soap, const char *a, const char *tag, const char *type)
{
	int id = soap_embed(soap, (void*)a, NULL, 0, SOAP_TYPE_byte);
	if (soap_out_byte(soap, tag?tag:"byte", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 char * SOAP_FMAC4 soap_get_byte(struct soap *soap, char *p, const char *tag, const char *type)
{
	if ((p = soap_in_byte(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_int(struct soap *soap, int *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_int
	*a = SOAP_DEFAULT_int;
#else
	*a = (int)0;
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_int(struct soap *soap, const char *tag, int id, const int *a, const char *type)
{
	return soap_outint(soap, tag, id, a, type, SOAP_TYPE_int);
}

SOAP_FMAC3 int * SOAP_FMAC4 soap_in_int(struct soap *soap, const char *tag, int *a, const char *type)
{	int *p;
	p = soap_inint(soap, tag, a, type, SOAP_TYPE_int);
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_int(struct soap *soap, const int *a, const char *tag, const char *type)
{
	int id = soap_embed(soap, (void*)a, NULL, 0, SOAP_TYPE_int);
	if (soap_out_int(soap, tag?tag:"int", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int * SOAP_FMAC4 soap_get_int(struct soap *soap, int *p, const char *tag, const char *type)
{
	if ((p = soap_in_int(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_xsd__duration(struct soap *soap, const LONG64 *a, const char *tag, const char *type)
{
	int id = soap_embed(soap, (void*)a, NULL, 0, SOAP_TYPE_xsd__duration);
	if (soap_out_xsd__duration(soap, tag?tag:"xsd:duration", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 LONG64 * SOAP_FMAC4 soap_get_xsd__duration(struct soap *soap, LONG64 *p, const char *tag, const char *type)
{
	if ((p = soap_in_xsd__duration(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_unsignedLONG64(struct soap *soap, ULONG64 *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_unsignedLONG64
	*a = SOAP_DEFAULT_unsignedLONG64;
#else
	*a = (ULONG64)0;
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_unsignedLONG64(struct soap *soap, const char *tag, int id, const ULONG64 *a, const char *type)
{
	return soap_outULONG64(soap, tag, id, a, type, SOAP_TYPE_unsignedLONG64);
}

SOAP_FMAC3 ULONG64 * SOAP_FMAC4 soap_in_unsignedLONG64(struct soap *soap, const char *tag, ULONG64 *a, const char *type)
{	ULONG64 *p;
	p = soap_inULONG64(soap, tag, a, type, SOAP_TYPE_unsignedLONG64);
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_unsignedLONG64(struct soap *soap, const ULONG64 *a, const char *tag, const char *type)
{
	int id = soap_embed(soap, (void*)a, NULL, 0, SOAP_TYPE_unsignedLONG64);
	if (soap_out_unsignedLONG64(soap, tag?tag:"unsignedLong", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 ULONG64 * SOAP_FMAC4 soap_get_unsignedLONG64(struct soap *soap, ULONG64 *p, const char *tag, const char *type)
{
	if ((p = soap_in_unsignedLONG64(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_time(struct soap *soap, time_t *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_time
	*a = SOAP_DEFAULT_time;
#else
	*a = (time_t)0;
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_time(struct soap *soap, const char *tag, int id, const time_t *a, const char *type)
{
	return soap_outdateTime(soap, tag, id, a, type, SOAP_TYPE_time);
}

SOAP_FMAC3 time_t * SOAP_FMAC4 soap_in_time(struct soap *soap, const char *tag, time_t *a, const char *type)
{	time_t *p;
	p = soap_indateTime(soap, tag, a, type, SOAP_TYPE_time);
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_time(struct soap *soap, const time_t *a, const char *tag, const char *type)
{
	int id = soap_embed(soap, (void*)a, NULL, 0, SOAP_TYPE_time);
	if (soap_out_time(soap, tag?tag:"dateTime", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 time_t * SOAP_FMAC4 soap_get_time(struct soap *soap, time_t *p, const char *tag, const char *type)
{
	if ((p = soap_in_time(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_bool(struct soap *soap, bool *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_bool
	*a = SOAP_DEFAULT_bool;
#else
	*a = (bool)0;
#endif
}

static const struct soap_code_map soap_codes_bool[] =
{	{ (long)false, "false" },
	{ (long)true, "true" },
	{ 0, NULL }
};

SOAP_FMAC3S const char* SOAP_FMAC4S soap_bool2s(struct soap *soap, bool n)
{
	(void)soap; /* appease -Wall -Werror */
return soap_code_str(soap_codes_bool, n != 0);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_bool(struct soap *soap, const char *tag, int id, const bool *a, const char *type)
{	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_bool), type) || soap_send(soap, soap_bool2s(soap, *a)))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3S int SOAP_FMAC4S soap_s2bool(struct soap *soap, const char *s, bool *a)
{
	const struct soap_code_map *map;
	if (!s)
		return soap->error;
	map = soap_code(soap_codes_bool, s);
	if (map)
		*a = (bool)(map->code != 0);
	else
	{	long n;
		if (soap_s2long(soap, s, &n) || n < 0 || n > 1)
			return soap->error = SOAP_TYPE;
		*a = (bool)(n != 0);
	}
	return SOAP_OK;
}

SOAP_FMAC3 bool * SOAP_FMAC4 soap_in_bool(struct soap *soap, const char *tag, bool *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	if (*soap->type && soap_match_tag(soap, soap->type, type) && soap_match_tag(soap, soap->type, ":boolean"))
	{	soap->error = SOAP_TYPE;
		return NULL;
	}
	a = (bool *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_bool, sizeof(bool), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	if (soap->body && !*soap->href)
	{	if (soap_s2bool(soap, soap_value(soap), a) || soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (bool *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_bool, 0, sizeof(bool), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_bool(struct soap *soap, const bool *a, const char *tag, const char *type)
{
	int id = soap_embed(soap, (void*)a, NULL, 0, SOAP_TYPE_bool);
	if (soap_out_bool(soap, tag?tag:"boolean", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 bool * SOAP_FMAC4 soap_get_bool(struct soap *soap, bool *p, const char *tag, const char *type)
{
	if ((p = soap_in_bool(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default__wsa5__IsReferenceParameter(struct soap *soap, enum _wsa5__IsReferenceParameter *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT__wsa5__IsReferenceParameter
	*a = SOAP_DEFAULT__wsa5__IsReferenceParameter;
#else
	*a = (enum _wsa5__IsReferenceParameter)0;
#endif
}

static const struct soap_code_map soap_codes__wsa5__IsReferenceParameter[] =
{	{ (long)_wsa5__IsReferenceParameter__false, "false" },
	{ (long)_wsa5__IsReferenceParameter__true, "true" },
	{ 0, NULL }
};

SOAP_FMAC3S const char* SOAP_FMAC4S soap__wsa5__IsReferenceParameter2s(struct soap *soap, enum _wsa5__IsReferenceParameter n)
{	const char *s = soap_code_str(soap_codes__wsa5__IsReferenceParameter, (long)n);
	if (s)
		return s;
	return soap_long2s(soap, (long)n);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__wsa5__IsReferenceParameter(struct soap *soap, const char *tag, int id, const enum _wsa5__IsReferenceParameter *a, const char *type)
{	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__wsa5__IsReferenceParameter), type) || soap_send(soap, soap__wsa5__IsReferenceParameter2s(soap, *a)))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3S int SOAP_FMAC4S soap_s2_wsa5__IsReferenceParameter(struct soap *soap, const char *s, enum _wsa5__IsReferenceParameter *a)
{
	const struct soap_code_map *map;
	if (!s)
		return soap->error;
	map = soap_code(soap_codes__wsa5__IsReferenceParameter, s);
	if (map)
		*a = (enum _wsa5__IsReferenceParameter)map->code;
	else
	{	long n;
		if (soap_s2long(soap, s, &n) || ((soap->mode & SOAP_XML_STRICT) && (n < 0 || n > 1)))
			return soap->error = SOAP_TYPE;
		*a = (enum _wsa5__IsReferenceParameter)n;
	}
	return SOAP_OK;
}

SOAP_FMAC3 enum _wsa5__IsReferenceParameter * SOAP_FMAC4 soap_in__wsa5__IsReferenceParameter(struct soap *soap, const char *tag, enum _wsa5__IsReferenceParameter *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (enum _wsa5__IsReferenceParameter *)soap_id_enter(soap, soap->id, a, SOAP_TYPE__wsa5__IsReferenceParameter, sizeof(enum _wsa5__IsReferenceParameter), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	if (soap->body && !*soap->href)
	{	if (soap_s2_wsa5__IsReferenceParameter(soap, soap_value(soap), a) || soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (enum _wsa5__IsReferenceParameter *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__wsa5__IsReferenceParameter, 0, sizeof(enum _wsa5__IsReferenceParameter), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put__wsa5__IsReferenceParameter(struct soap *soap, const enum _wsa5__IsReferenceParameter *a, const char *tag, const char *type)
{
	int id = soap_embed(soap, (void*)a, NULL, 0, SOAP_TYPE__wsa5__IsReferenceParameter);
	if (soap_out__wsa5__IsReferenceParameter(soap, tag?tag:"wsa5:IsReferenceParameter", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 enum _wsa5__IsReferenceParameter * SOAP_FMAC4 soap_get__wsa5__IsReferenceParameter(struct soap *soap, enum _wsa5__IsReferenceParameter *p, const char *tag, const char *type)
{
	if ((p = soap_in__wsa5__IsReferenceParameter(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_wsa5__FaultCodesType(struct soap *soap, enum wsa5__FaultCodesType *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_wsa5__FaultCodesType
	*a = SOAP_DEFAULT_wsa5__FaultCodesType;
#else
	*a = (enum wsa5__FaultCodesType)0;
#endif
}

static const struct soap_code_map soap_codes_wsa5__FaultCodesType[] =
{	{ (long)wsa5__InvalidAddressingHeader, "wsa5:InvalidAddressingHeader" },
	{ (long)wsa5__InvalidAddress, "wsa5:InvalidAddress" },
	{ (long)wsa5__InvalidEPR, "wsa5:InvalidEPR" },
	{ (long)wsa5__InvalidCardinality, "wsa5:InvalidCardinality" },
	{ (long)wsa5__MissingAddressInEPR, "wsa5:MissingAddressInEPR" },
	{ (long)wsa5__DuplicateMessageID, "wsa5:DuplicateMessageID" },
	{ (long)wsa5__ActionMismatch, "wsa5:ActionMismatch" },
	{ (long)wsa5__MessageAddressingHeaderRequired, "wsa5:MessageAddressingHeaderRequired" },
	{ (long)wsa5__DestinationUnreachable, "wsa5:DestinationUnreachable" },
	{ (long)wsa5__ActionNotSupported, "wsa5:ActionNotSupported" },
	{ (long)wsa5__EndpointUnavailable, "wsa5:EndpointUnavailable" },
	{ 0, NULL }
};

SOAP_FMAC3S const char* SOAP_FMAC4S soap_wsa5__FaultCodesType2s(struct soap *soap, enum wsa5__FaultCodesType n)
{	const char *s = soap_code_str(soap_codes_wsa5__FaultCodesType, (long)n);
	if (s)
		return s;
	return soap_long2s(soap, (long)n);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_wsa5__FaultCodesType(struct soap *soap, const char *tag, int id, const enum wsa5__FaultCodesType *a, const char *type)
{	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_wsa5__FaultCodesType), type) || soap_send(soap, soap_wsa5__FaultCodesType2s(soap, *a)))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3S int SOAP_FMAC4S soap_s2wsa5__FaultCodesType(struct soap *soap, const char *s, enum wsa5__FaultCodesType *a)
{
	const struct soap_code_map *map;
	char *t;
	if (!s)
		return soap->error;
	soap_s2QName(soap, s, &t, 0, -1);
	map = soap_code(soap_codes_wsa5__FaultCodesType, t);
	if (map)
		*a = (enum wsa5__FaultCodesType)map->code;
	else
	{	long n;
		if (soap_s2long(soap, s, &n) || ((soap->mode & SOAP_XML_STRICT) && (n < 0 || n > 10)))
			return soap->error = SOAP_TYPE;
		*a = (enum wsa5__FaultCodesType)n;
	}
	return SOAP_OK;
}

SOAP_FMAC3 enum wsa5__FaultCodesType * SOAP_FMAC4 soap_in_wsa5__FaultCodesType(struct soap *soap, const char *tag, enum wsa5__FaultCodesType *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (enum wsa5__FaultCodesType *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_wsa5__FaultCodesType, sizeof(enum wsa5__FaultCodesType), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	if (soap->body && !*soap->href)
	{	if (soap_s2wsa5__FaultCodesType(soap, soap_value(soap), a) || soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (enum wsa5__FaultCodesType *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_wsa5__FaultCodesType, 0, sizeof(enum wsa5__FaultCodesType), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_wsa5__FaultCodesType(struct soap *soap, const enum wsa5__FaultCodesType *a, const char *tag, const char *type)
{
	int id = soap_embed(soap, (void*)a, NULL, 0, SOAP_TYPE_wsa5__FaultCodesType);
	if (soap_out_wsa5__FaultCodesType(soap, tag?tag:"wsa5:FaultCodesType", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 enum wsa5__FaultCodesType * SOAP_FMAC4 soap_get_wsa5__FaultCodesType(struct soap *soap, enum wsa5__FaultCodesType *p, const char *tag, const char *type)
{
	if ((p = soap_in_wsa5__FaultCodesType(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_wsa5__RelationshipType(struct soap *soap, enum wsa5__RelationshipType *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_wsa5__RelationshipType
	*a = SOAP_DEFAULT_wsa5__RelationshipType;
#else
	*a = (enum wsa5__RelationshipType)0;
#endif
}

static const struct soap_code_map soap_codes_wsa5__RelationshipType[] =
{	{ (long)http_x003a_x002f_x002fwww_x002ew3_x002eorg_x002f2005_x002f08_x002faddressing_x002freply, "http://www.w3.org/2005/08/addressing/reply" },
	{ 0, NULL }
};

SOAP_FMAC3S const char* SOAP_FMAC4S soap_wsa5__RelationshipType2s(struct soap *soap, enum wsa5__RelationshipType n)
{	const char *s = soap_code_str(soap_codes_wsa5__RelationshipType, (long)n);
	if (s)
		return s;
	return soap_long2s(soap, (long)n);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_wsa5__RelationshipType(struct soap *soap, const char *tag, int id, const enum wsa5__RelationshipType *a, const char *type)
{	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_wsa5__RelationshipType), type) || soap_send(soap, soap_wsa5__RelationshipType2s(soap, *a)))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3S int SOAP_FMAC4S soap_s2wsa5__RelationshipType(struct soap *soap, const char *s, enum wsa5__RelationshipType *a)
{
	const struct soap_code_map *map;
	if (!s)
		return soap->error;
	map = soap_code(soap_codes_wsa5__RelationshipType, s);
	if (map)
		*a = (enum wsa5__RelationshipType)map->code;
	else
	{	long n;
		if (soap_s2long(soap, s, &n) || ((soap->mode & SOAP_XML_STRICT) && (n < 0 || n > 0)))
			return soap->error = SOAP_TYPE;
		*a = (enum wsa5__RelationshipType)n;
	}
	return SOAP_OK;
}

SOAP_FMAC3 enum wsa5__RelationshipType * SOAP_FMAC4 soap_in_wsa5__RelationshipType(struct soap *soap, const char *tag, enum wsa5__RelationshipType *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (enum wsa5__RelationshipType *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_wsa5__RelationshipType, sizeof(enum wsa5__RelationshipType), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	if (soap->body && !*soap->href)
	{	if (soap_s2wsa5__RelationshipType(soap, soap_value(soap), a) || soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (enum wsa5__RelationshipType *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_wsa5__RelationshipType, 0, sizeof(enum wsa5__RelationshipType), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_wsa5__RelationshipType(struct soap *soap, const enum wsa5__RelationshipType *a, const char *tag, const char *type)
{
	int id = soap_embed(soap, (void*)a, NULL, 0, SOAP_TYPE_wsa5__RelationshipType);
	if (soap_out_wsa5__RelationshipType(soap, tag?tag:"wsa5:RelationshipType", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 enum wsa5__RelationshipType * SOAP_FMAC4 soap_get_wsa5__RelationshipType(struct soap *soap, enum wsa5__RelationshipType *p, const char *tag, const char *type)
{
	if ((p = soap_in_wsa5__RelationshipType(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void _wstop__TopicNamespaceType_Topic::soap_default(struct soap *soap)
{
	(void)soap; /* appease -Wall -Werror */
	this->_wstop__TopicNamespaceType_Topic::documentation = NULL;
	this->_wstop__TopicNamespaceType_Topic::__anyAttribute = NULL;
	this->_wstop__TopicNamespaceType_Topic::MessagePattern = NULL;
	soap_default_std__vectorTemplateOfPointerTowstop__TopicType(soap, &this->_wstop__TopicNamespaceType_Topic::Topic);
	soap_default_std__vectorTemplateOf_XML(soap, &this->_wstop__TopicNamespaceType_Topic::__any);
	soap_default_xsd__NCName(soap, &this->_wstop__TopicNamespaceType_Topic::name);
	this->_wstop__TopicNamespaceType_Topic::messageTypes = NULL;
	this->_wstop__TopicNamespaceType_Topic::final_ = (bool)0;
	this->_wstop__TopicNamespaceType_Topic::parent = NULL;
}

void _wstop__TopicNamespaceType_Topic::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTowstop__Documentation(soap, &this->_wstop__TopicNamespaceType_Topic::documentation);
	soap_serialize_PointerTowstop__QueryExpressionType(soap, &this->_wstop__TopicNamespaceType_Topic::MessagePattern);
	soap_serialize_std__vectorTemplateOfPointerTowstop__TopicType(soap, &this->_wstop__TopicNamespaceType_Topic::Topic);
	soap_serialize_std__vectorTemplateOf_XML(soap, &this->_wstop__TopicNamespaceType_Topic::__any);
#endif
}

int _wstop__TopicNamespaceType_Topic::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__wstop__TopicNamespaceType_Topic(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__wstop__TopicNamespaceType_Topic(struct soap *soap, const char *tag, int id, const _wstop__TopicNamespaceType_Topic *a, const char *type)
{
	if (((_wstop__TopicNamespaceType_Topic*)a)->__anyAttribute)
		soap_set_attr(soap, "-anyAttribute", ((_wstop__TopicNamespaceType_Topic*)a)->__anyAttribute, 1);
	soap_set_attr(soap, "name", ((_wstop__TopicNamespaceType_Topic*)a)->name.c_str(), 1);
	if (((_wstop__TopicNamespaceType_Topic*)a)->messageTypes)
		soap_set_attr(soap, "messageTypes", soap_QName2s(soap, ((_wstop__TopicNamespaceType_Topic*)a)->messageTypes->c_str()), 1);
	soap_set_attr(soap, "final", soap_bool2s(soap, ((_wstop__TopicNamespaceType_Topic*)a)->final_), 1);
	if (((_wstop__TopicNamespaceType_Topic*)a)->parent)
		soap_set_attr(soap, "parent", ((_wstop__TopicNamespaceType_Topic*)a)->parent->c_str(), 1);
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__wstop__TopicNamespaceType_Topic), type))
		return soap->error;
	if (soap_out_PointerTowstop__Documentation(soap, "wstop:documentation", -1, &(a->_wstop__TopicNamespaceType_Topic::documentation), ""))
		return soap->error;
	if (soap_out_PointerTowstop__QueryExpressionType(soap, "wstop:MessagePattern", -1, &(a->_wstop__TopicNamespaceType_Topic::MessagePattern), ""))
		return soap->error;
	if (soap_out_std__vectorTemplateOfPointerTowstop__TopicType(soap, "wstop:Topic", -1, &(a->_wstop__TopicNamespaceType_Topic::Topic), ""))
		return soap->error;
	if (soap_out_std__vectorTemplateOf_XML(soap, "-any", -1, &(a->_wstop__TopicNamespaceType_Topic::__any), ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *_wstop__TopicNamespaceType_Topic::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__wstop__TopicNamespaceType_Topic(soap, tag, this, type);
}

SOAP_FMAC3 _wstop__TopicNamespaceType_Topic * SOAP_FMAC4 soap_in__wstop__TopicNamespaceType_Topic(struct soap *soap, const char *tag, _wstop__TopicNamespaceType_Topic *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_wstop__TopicNamespaceType_Topic *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__wstop__TopicNamespaceType_Topic, sizeof(_wstop__TopicNamespaceType_Topic), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__wstop__TopicNamespaceType_Topic)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_wstop__TopicNamespaceType_Topic *)a->soap_in(soap, tag, type);
		}
	}
	if (soap_s2string(soap, soap_attr_value(soap, "-anyAttribute", 0), &((_wstop__TopicNamespaceType_Topic*)a)->__anyAttribute, 0, -1))
		return NULL;
	{	const char *t = soap_attr_value(soap, "name", 1);
		if (t)
		{	char *s;
			if (soap_s2string(soap, t, &s, 0, -1))
				return NULL;
			((_wstop__TopicNamespaceType_Topic*)a)->name.assign(s);
		}
		else if (soap->error)
			return NULL;
	}
	{	const char *t = soap_attr_value(soap, "messageTypes", 0);
		if (t)
		{
			char *s = NULL;
			if (soap_s2QName(soap, t, &s, 0, -1))
				return NULL;
			if (s)
			{	((_wstop__TopicNamespaceType_Topic*)a)->messageTypes = soap_new_std__string(soap, -1);
				((_wstop__TopicNamespaceType_Topic*)a)->messageTypes->assign(s);
			}
		}
		else if (soap->error)
			return NULL;
	}
	if (soap_s2bool(soap, soap_attr_value(soap, "final", 0), &((_wstop__TopicNamespaceType_Topic*)a)->final_))
		return NULL;
	{	const char *t = soap_attr_value(soap, "parent", 0);
		if (t)
		{
			char *s = NULL;
			if (soap_s2string(soap, t, &s, 0, -1))
				return NULL;
			if (s)
			{	((_wstop__TopicNamespaceType_Topic*)a)->parent = soap_new_std__string(soap, -1);
				((_wstop__TopicNamespaceType_Topic*)a)->parent->assign(s);
			}
		}
		else if (soap->error)
			return NULL;
	}
	size_t soap_flag_documentation1 = 1;
	size_t soap_flag_MessagePattern1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_documentation1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTowstop__Documentation(soap, "wstop:documentation", &(a->_wstop__TopicNamespaceType_Topic::documentation), "wstop:Documentation"))
				{	soap_flag_documentation1--;
					continue;
				}
			if (soap_flag_MessagePattern1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTowstop__QueryExpressionType(soap, "wstop:MessagePattern", &(a->_wstop__TopicNamespaceType_Topic::MessagePattern), "wstop:QueryExpressionType"))
				{	soap_flag_MessagePattern1--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_std__vectorTemplateOfPointerTowstop__TopicType(soap, "wstop:Topic", &(a->_wstop__TopicNamespaceType_Topic::Topic), "wstop:TopicType"))
					continue;
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_std__vectorTemplateOf_XML(soap, "-any", &(a->_wstop__TopicNamespaceType_Topic::__any), ""))
					continue;
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_wstop__TopicNamespaceType_Topic *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__wstop__TopicNamespaceType_Topic, 0, sizeof(_wstop__TopicNamespaceType_Topic), 0, soap_copy__wstop__TopicNamespaceType_Topic);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int _wstop__TopicNamespaceType_Topic::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	int id = soap_embed(soap, (void*)this, NULL, 0, SOAP_TYPE__wstop__TopicNamespaceType_Topic);
	if (this->soap_out(soap, tag?tag:"wstop:TopicNamespaceType-Topic", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_wstop__TopicNamespaceType_Topic::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__wstop__TopicNamespaceType_Topic(soap, this, tag, type);
}

SOAP_FMAC3 _wstop__TopicNamespaceType_Topic * SOAP_FMAC4 soap_get__wstop__TopicNamespaceType_Topic(struct soap *soap, _wstop__TopicNamespaceType_Topic *p, const char *tag, const char *type)
{
	if ((p = soap_in__wstop__TopicNamespaceType_Topic(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _wstop__TopicNamespaceType_Topic * SOAP_FMAC2 soap_instantiate__wstop__TopicNamespaceType_Topic(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__wstop__TopicNamespaceType_Topic(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__wstop__TopicNamespaceType_Topic, n, onvifevent_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = SOAP_NEW(_wstop__TopicNamespaceType_Topic);
		if (size)
			*size = sizeof(_wstop__TopicNamespaceType_Topic);
	}
	else
	{	cp->ptr = SOAP_NEW_ARRAY(_wstop__TopicNamespaceType_Topic, n);
		if (size)
			*size = n * sizeof(_wstop__TopicNamespaceType_Topic);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (_wstop__TopicNamespaceType_Topic*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__wstop__TopicNamespaceType_Topic(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _wstop__TopicNamespaceType_Topic %p -> %p\n", q, p));
	*(_wstop__TopicNamespaceType_Topic*)p = *(_wstop__TopicNamespaceType_Topic*)q;
}

void _wsnt__Subscribe_SubscriptionPolicy::soap_default(struct soap *soap)
{
	(void)soap; /* appease -Wall -Werror */
	soap_default_std__vectorTemplateOf_XML(soap, &this->_wsnt__Subscribe_SubscriptionPolicy::__any);
}

void _wsnt__Subscribe_SubscriptionPolicy::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_std__vectorTemplateOf_XML(soap, &this->_wsnt__Subscribe_SubscriptionPolicy::__any);
#endif
}

int _wsnt__Subscribe_SubscriptionPolicy::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__wsnt__Subscribe_SubscriptionPolicy(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__wsnt__Subscribe_SubscriptionPolicy(struct soap *soap, const char *tag, int id, const _wsnt__Subscribe_SubscriptionPolicy *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__wsnt__Subscribe_SubscriptionPolicy), type))
		return soap->error;
	if (soap_out_std__vectorTemplateOf_XML(soap, "-any", -1, &(a->_wsnt__Subscribe_SubscriptionPolicy::__any), ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *_wsnt__Subscribe_SubscriptionPolicy::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__wsnt__Subscribe_SubscriptionPolicy(soap, tag, this, type);
}

SOAP_FMAC3 _wsnt__Subscribe_SubscriptionPolicy * SOAP_FMAC4 soap_in__wsnt__Subscribe_SubscriptionPolicy(struct soap *soap, const char *tag, _wsnt__Subscribe_SubscriptionPolicy *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_wsnt__Subscribe_SubscriptionPolicy *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__wsnt__Subscribe_SubscriptionPolicy, sizeof(_wsnt__Subscribe_SubscriptionPolicy), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__wsnt__Subscribe_SubscriptionPolicy)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_wsnt__Subscribe_SubscriptionPolicy *)a->soap_in(soap, tag, type);
		}
	}
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_std__vectorTemplateOf_XML(soap, "-any", &(a->_wsnt__Subscribe_SubscriptionPolicy::__any), ""))
					continue;
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_wsnt__Subscribe_SubscriptionPolicy *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__wsnt__Subscribe_SubscriptionPolicy, 0, sizeof(_wsnt__Subscribe_SubscriptionPolicy), 0, soap_copy__wsnt__Subscribe_SubscriptionPolicy);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int _wsnt__Subscribe_SubscriptionPolicy::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	int id = soap_embed(soap, (void*)this, NULL, 0, SOAP_TYPE__wsnt__Subscribe_SubscriptionPolicy);
	if (this->soap_out(soap, tag?tag:"wsnt:Subscribe-SubscriptionPolicy", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_wsnt__Subscribe_SubscriptionPolicy::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__wsnt__Subscribe_SubscriptionPolicy(soap, this, tag, type);
}

SOAP_FMAC3 _wsnt__Subscribe_SubscriptionPolicy * SOAP_FMAC4 soap_get__wsnt__Subscribe_SubscriptionPolicy(struct soap *soap, _wsnt__Subscribe_SubscriptionPolicy *p, const char *tag, const char *type)
{
	if ((p = soap_in__wsnt__Subscribe_SubscriptionPolicy(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _wsnt__Subscribe_SubscriptionPolicy * SOAP_FMAC2 soap_instantiate__wsnt__Subscribe_SubscriptionPolicy(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__wsnt__Subscribe_SubscriptionPolicy(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__wsnt__Subscribe_SubscriptionPolicy, n, onvifevent_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = SOAP_NEW(_wsnt__Subscribe_SubscriptionPolicy);
		if (size)
			*size = sizeof(_wsnt__Subscribe_SubscriptionPolicy);
	}
	else
	{	cp->ptr = SOAP_NEW_ARRAY(_wsnt__Subscribe_SubscriptionPolicy, n);
		if (size)
			*size = n * sizeof(_wsnt__Subscribe_SubscriptionPolicy);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (_wsnt__Subscribe_SubscriptionPolicy*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__wsnt__Subscribe_SubscriptionPolicy(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _wsnt__Subscribe_SubscriptionPolicy %p -> %p\n", q, p));
	*(_wsnt__Subscribe_SubscriptionPolicy*)p = *(_wsnt__Subscribe_SubscriptionPolicy*)q;
}

void _wsnt__NotificationMessageHolderType_Message::soap_default(struct soap *soap)
{
	(void)soap; /* appease -Wall -Werror */
	this->_wsnt__NotificationMessageHolderType_Message::__any = NULL;
}

void _wsnt__NotificationMessageHolderType_Message::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
#endif
}

int _wsnt__NotificationMessageHolderType_Message::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__wsnt__NotificationMessageHolderType_Message(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__wsnt__NotificationMessageHolderType_Message(struct soap *soap, const char *tag, int id, const _wsnt__NotificationMessageHolderType_Message *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__wsnt__NotificationMessageHolderType_Message), type))
		return soap->error;
	soap_outliteral(soap, "-any", &(a->_wsnt__NotificationMessageHolderType_Message::__any), NULL);
	return soap_element_end_out(soap, tag);
}

void *_wsnt__NotificationMessageHolderType_Message::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__wsnt__NotificationMessageHolderType_Message(soap, tag, this, type);
}

SOAP_FMAC3 _wsnt__NotificationMessageHolderType_Message * SOAP_FMAC4 soap_in__wsnt__NotificationMessageHolderType_Message(struct soap *soap, const char *tag, _wsnt__NotificationMessageHolderType_Message *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_wsnt__NotificationMessageHolderType_Message *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__wsnt__NotificationMessageHolderType_Message, sizeof(_wsnt__NotificationMessageHolderType_Message), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__wsnt__NotificationMessageHolderType_Message)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_wsnt__NotificationMessageHolderType_Message *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag___any1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag___any1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_inliteral(soap, "-any", &(a->_wsnt__NotificationMessageHolderType_Message::__any)))
				{	soap_flag___any1--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_wsnt__NotificationMessageHolderType_Message *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__wsnt__NotificationMessageHolderType_Message, 0, sizeof(_wsnt__NotificationMessageHolderType_Message), 0, soap_copy__wsnt__NotificationMessageHolderType_Message);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int _wsnt__NotificationMessageHolderType_Message::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	int id = soap_embed(soap, (void*)this, NULL, 0, SOAP_TYPE__wsnt__NotificationMessageHolderType_Message);
	if (this->soap_out(soap, tag?tag:"wsnt:NotificationMessageHolderType-Message", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_wsnt__NotificationMessageHolderType_Message::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__wsnt__NotificationMessageHolderType_Message(soap, this, tag, type);
}

SOAP_FMAC3 _wsnt__NotificationMessageHolderType_Message * SOAP_FMAC4 soap_get__wsnt__NotificationMessageHolderType_Message(struct soap *soap, _wsnt__NotificationMessageHolderType_Message *p, const char *tag, const char *type)
{
	if ((p = soap_in__wsnt__NotificationMessageHolderType_Message(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _wsnt__NotificationMessageHolderType_Message * SOAP_FMAC2 soap_instantiate__wsnt__NotificationMessageHolderType_Message(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__wsnt__NotificationMessageHolderType_Message(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__wsnt__NotificationMessageHolderType_Message, n, onvifevent_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = SOAP_NEW(_wsnt__NotificationMessageHolderType_Message);
		if (size)
			*size = sizeof(_wsnt__NotificationMessageHolderType_Message);
	}
	else
	{	cp->ptr = SOAP_NEW_ARRAY(_wsnt__NotificationMessageHolderType_Message, n);
		if (size)
			*size = n * sizeof(_wsnt__NotificationMessageHolderType_Message);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (_wsnt__NotificationMessageHolderType_Message*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__wsnt__NotificationMessageHolderType_Message(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _wsnt__NotificationMessageHolderType_Message %p -> %p\n", q, p));
	*(_wsnt__NotificationMessageHolderType_Message*)p = *(_wsnt__NotificationMessageHolderType_Message*)q;
}

void _wsrfbf__BaseFaultType_FaultCause::soap_default(struct soap *soap)
{
	(void)soap; /* appease -Wall -Werror */
	this->_wsrfbf__BaseFaultType_FaultCause::__any = NULL;
}

void _wsrfbf__BaseFaultType_FaultCause::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
#endif
}

int _wsrfbf__BaseFaultType_FaultCause::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__wsrfbf__BaseFaultType_FaultCause(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__wsrfbf__BaseFaultType_FaultCause(struct soap *soap, const char *tag, int id, const _wsrfbf__BaseFaultType_FaultCause *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__wsrfbf__BaseFaultType_FaultCause), type))
		return soap->error;
	soap_outliteral(soap, "-any", &(a->_wsrfbf__BaseFaultType_FaultCause::__any), NULL);
	return soap_element_end_out(soap, tag);
}

void *_wsrfbf__BaseFaultType_FaultCause::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__wsrfbf__BaseFaultType_FaultCause(soap, tag, this, type);
}

SOAP_FMAC3 _wsrfbf__BaseFaultType_FaultCause * SOAP_FMAC4 soap_in__wsrfbf__BaseFaultType_FaultCause(struct soap *soap, const char *tag, _wsrfbf__BaseFaultType_FaultCause *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_wsrfbf__BaseFaultType_FaultCause *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__wsrfbf__BaseFaultType_FaultCause, sizeof(_wsrfbf__BaseFaultType_FaultCause), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__wsrfbf__BaseFaultType_FaultCause)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_wsrfbf__BaseFaultType_FaultCause *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag___any1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag___any1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_inliteral(soap, "-any", &(a->_wsrfbf__BaseFaultType_FaultCause::__any)))
				{	soap_flag___any1--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_wsrfbf__BaseFaultType_FaultCause *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__wsrfbf__BaseFaultType_FaultCause, 0, sizeof(_wsrfbf__BaseFaultType_FaultCause), 0, soap_copy__wsrfbf__BaseFaultType_FaultCause);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int _wsrfbf__BaseFaultType_FaultCause::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	int id = soap_embed(soap, (void*)this, NULL, 0, SOAP_TYPE__wsrfbf__BaseFaultType_FaultCause);
	if (this->soap_out(soap, tag?tag:"wsrfbf:BaseFaultType-FaultCause", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_wsrfbf__BaseFaultType_FaultCause::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__wsrfbf__BaseFaultType_FaultCause(soap, this, tag, type);
}

SOAP_FMAC3 _wsrfbf__BaseFaultType_FaultCause * SOAP_FMAC4 soap_get__wsrfbf__BaseFaultType_FaultCause(struct soap *soap, _wsrfbf__BaseFaultType_FaultCause *p, const char *tag, const char *type)
{
	if ((p = soap_in__wsrfbf__BaseFaultType_FaultCause(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _wsrfbf__BaseFaultType_FaultCause * SOAP_FMAC2 soap_instantiate__wsrfbf__BaseFaultType_FaultCause(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__wsrfbf__BaseFaultType_FaultCause(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__wsrfbf__BaseFaultType_FaultCause, n, onvifevent_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = SOAP_NEW(_wsrfbf__BaseFaultType_FaultCause);
		if (size)
			*size = sizeof(_wsrfbf__BaseFaultType_FaultCause);
	}
	else
	{	cp->ptr = SOAP_NEW_ARRAY(_wsrfbf__BaseFaultType_FaultCause, n);
		if (size)
			*size = n * sizeof(_wsrfbf__BaseFaultType_FaultCause);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (_wsrfbf__BaseFaultType_FaultCause*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__wsrfbf__BaseFaultType_FaultCause(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _wsrfbf__BaseFaultType_FaultCause %p -> %p\n", q, p));
	*(_wsrfbf__BaseFaultType_FaultCause*)p = *(_wsrfbf__BaseFaultType_FaultCause*)q;
}

void _wsrfbf__BaseFaultType_Description::soap_default(struct soap *soap)
{
	(void)soap; /* appease -Wall -Werror */
	soap_default_std__string(soap, &this->_wsrfbf__BaseFaultType_Description::__item);
	this->_wsrfbf__BaseFaultType_Description::xml__lang = NULL;
}

void _wsrfbf__BaseFaultType_Description::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_std__string(soap, &this->_wsrfbf__BaseFaultType_Description::__item);
#endif
}

int _wsrfbf__BaseFaultType_Description::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__wsrfbf__BaseFaultType_Description(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__wsrfbf__BaseFaultType_Description(struct soap *soap, const char *tag, int id, const _wsrfbf__BaseFaultType_Description *a, const char *type)
{
	if (((_wsrfbf__BaseFaultType_Description*)a)->xml__lang)
		soap_set_attr(soap, "xml:lang", ((_wsrfbf__BaseFaultType_Description*)a)->xml__lang->c_str(), 1);
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	return soap_out_std__string(soap, tag, id, &a->_wsrfbf__BaseFaultType_Description::__item, "");
}

void *_wsrfbf__BaseFaultType_Description::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__wsrfbf__BaseFaultType_Description(soap, tag, this, type);
}

SOAP_FMAC3 _wsrfbf__BaseFaultType_Description * SOAP_FMAC4 soap_in__wsrfbf__BaseFaultType_Description(struct soap *soap, const char *tag, _wsrfbf__BaseFaultType_Description *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!(a = (_wsrfbf__BaseFaultType_Description *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__wsrfbf__BaseFaultType_Description, sizeof(_wsrfbf__BaseFaultType_Description), soap->type, soap->arrayType)))
	{	soap->error = SOAP_TAG_MISMATCH;
		return NULL;
	}
	soap_revert(soap);
	*soap->id = '\0';
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__wsrfbf__BaseFaultType_Description)
			return (_wsrfbf__BaseFaultType_Description *)a->soap_in(soap, tag, type);
	}
	{	const char *t = soap_attr_value(soap, "xml:lang", 0);
		if (t)
		{
			char *s = NULL;
			if (soap_s2string(soap, t, &s, 0, -1))
				return NULL;
			if (s)
			{	((_wsrfbf__BaseFaultType_Description*)a)->xml__lang = soap_new_std__string(soap, -1);
				((_wsrfbf__BaseFaultType_Description*)a)->xml__lang->assign(s);
			}
		}
		else if (soap->error)
			return NULL;
	}
	if (!soap_in_std__string(soap, tag, &(a->_wsrfbf__BaseFaultType_Description::__item), ""))
		return NULL;
	return a;
}

int _wsrfbf__BaseFaultType_Description::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	int id = soap_embed(soap, (void*)this, NULL, 0, SOAP_TYPE__wsrfbf__BaseFaultType_Description);
	if (this->soap_out(soap, tag?tag:"wsrfbf:BaseFaultType-Description", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_wsrfbf__BaseFaultType_Description::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__wsrfbf__BaseFaultType_Description(soap, this, tag, type);
}

SOAP_FMAC3 _wsrfbf__BaseFaultType_Description * SOAP_FMAC4 soap_get__wsrfbf__BaseFaultType_Description(struct soap *soap, _wsrfbf__BaseFaultType_Description *p, const char *tag, const char *type)
{
	if ((p = soap_in__wsrfbf__BaseFaultType_Description(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _wsrfbf__BaseFaultType_Description * SOAP_FMAC2 soap_instantiate__wsrfbf__BaseFaultType_Description(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__wsrfbf__BaseFaultType_Description(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__wsrfbf__BaseFaultType_Description, n, onvifevent_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = SOAP_NEW(_wsrfbf__BaseFaultType_Description);
		if (size)
			*size = sizeof(_wsrfbf__BaseFaultType_Description);
	}
	else
	{	cp->ptr = SOAP_NEW_ARRAY(_wsrfbf__BaseFaultType_Description, n);
		if (size)
			*size = n * sizeof(_wsrfbf__BaseFaultType_Description);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (_wsrfbf__BaseFaultType_Description*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__wsrfbf__BaseFaultType_Description(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _wsrfbf__BaseFaultType_Description %p -> %p\n", q, p));
	*(_wsrfbf__BaseFaultType_Description*)p = *(_wsrfbf__BaseFaultType_Description*)q;
}

void _wsrfbf__BaseFaultType_ErrorCode::soap_default(struct soap *soap)
{
	(void)soap; /* appease -Wall -Werror */
	soap_default_xsd__anyURI(soap, &this->_wsrfbf__BaseFaultType_ErrorCode::dialect);
}

void _wsrfbf__BaseFaultType_ErrorCode::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
#endif
}

int _wsrfbf__BaseFaultType_ErrorCode::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__wsrfbf__BaseFaultType_ErrorCode(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__wsrfbf__BaseFaultType_ErrorCode(struct soap *soap, const char *tag, int id, const _wsrfbf__BaseFaultType_ErrorCode *a, const char *type)
{
	soap_set_attr(soap, "dialect", ((_wsrfbf__BaseFaultType_ErrorCode*)a)->dialect.c_str(), 1);
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__wsrfbf__BaseFaultType_ErrorCode), type))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *_wsrfbf__BaseFaultType_ErrorCode::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__wsrfbf__BaseFaultType_ErrorCode(soap, tag, this, type);
}

SOAP_FMAC3 _wsrfbf__BaseFaultType_ErrorCode * SOAP_FMAC4 soap_in__wsrfbf__BaseFaultType_ErrorCode(struct soap *soap, const char *tag, _wsrfbf__BaseFaultType_ErrorCode *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_wsrfbf__BaseFaultType_ErrorCode *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__wsrfbf__BaseFaultType_ErrorCode, sizeof(_wsrfbf__BaseFaultType_ErrorCode), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__wsrfbf__BaseFaultType_ErrorCode)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_wsrfbf__BaseFaultType_ErrorCode *)a->soap_in(soap, tag, type);
		}
	}
	{	const char *t = soap_attr_value(soap, "dialect", 1);
		if (t)
		{	char *s;
			if (soap_s2string(soap, t, &s, 0, -1))
				return NULL;
			((_wsrfbf__BaseFaultType_ErrorCode*)a)->dialect.assign(s);
		}
		else if (soap->error)
			return NULL;
	}
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_wsrfbf__BaseFaultType_ErrorCode *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__wsrfbf__BaseFaultType_ErrorCode, 0, sizeof(_wsrfbf__BaseFaultType_ErrorCode), 0, soap_copy__wsrfbf__BaseFaultType_ErrorCode);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int _wsrfbf__BaseFaultType_ErrorCode::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	int id = soap_embed(soap, (void*)this, NULL, 0, SOAP_TYPE__wsrfbf__BaseFaultType_ErrorCode);
	if (this->soap_out(soap, tag?tag:"wsrfbf:BaseFaultType-ErrorCode", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_wsrfbf__BaseFaultType_ErrorCode::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__wsrfbf__BaseFaultType_ErrorCode(soap, this, tag, type);
}

SOAP_FMAC3 _wsrfbf__BaseFaultType_ErrorCode * SOAP_FMAC4 soap_get__wsrfbf__BaseFaultType_ErrorCode(struct soap *soap, _wsrfbf__BaseFaultType_ErrorCode *p, const char *tag, const char *type)
{
	if ((p = soap_in__wsrfbf__BaseFaultType_ErrorCode(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _wsrfbf__BaseFaultType_ErrorCode * SOAP_FMAC2 soap_instantiate__wsrfbf__BaseFaultType_ErrorCode(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__wsrfbf__BaseFaultType_ErrorCode(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__wsrfbf__BaseFaultType_ErrorCode, n, onvifevent_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = SOAP_NEW(_wsrfbf__BaseFaultType_ErrorCode);
		if (size)
			*size = sizeof(_wsrfbf__BaseFaultType_ErrorCode);
	}
	else
	{	cp->ptr = SOAP_NEW_ARRAY(_wsrfbf__BaseFaultType_ErrorCode, n);
		if (size)
			*size = n * sizeof(_wsrfbf__BaseFaultType_ErrorCode);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (_wsrfbf__BaseFaultType_ErrorCode*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__wsrfbf__BaseFaultType_ErrorCode(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _wsrfbf__BaseFaultType_ErrorCode %p -> %p\n", q, p));
	*(_wsrfbf__BaseFaultType_ErrorCode*)p = *(_wsrfbf__BaseFaultType_ErrorCode*)q;
}

void _eventws__CreatePullPointSubscription_SubscriptionPolicy::soap_default(struct soap *soap)
{
	(void)soap; /* appease -Wall -Werror */
	soap_default_std__vectorTemplateOf_XML(soap, &this->_eventws__CreatePullPointSubscription_SubscriptionPolicy::__any);
}

void _eventws__CreatePullPointSubscription_SubscriptionPolicy::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_std__vectorTemplateOf_XML(soap, &this->_eventws__CreatePullPointSubscription_SubscriptionPolicy::__any);
#endif
}

int _eventws__CreatePullPointSubscription_SubscriptionPolicy::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__eventws__CreatePullPointSubscription_SubscriptionPolicy(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__eventws__CreatePullPointSubscription_SubscriptionPolicy(struct soap *soap, const char *tag, int id, const _eventws__CreatePullPointSubscription_SubscriptionPolicy *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__eventws__CreatePullPointSubscription_SubscriptionPolicy), type))
		return soap->error;
	if (soap_out_std__vectorTemplateOf_XML(soap, "-any", -1, &(a->_eventws__CreatePullPointSubscription_SubscriptionPolicy::__any), ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *_eventws__CreatePullPointSubscription_SubscriptionPolicy::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__eventws__CreatePullPointSubscription_SubscriptionPolicy(soap, tag, this, type);
}

SOAP_FMAC3 _eventws__CreatePullPointSubscription_SubscriptionPolicy * SOAP_FMAC4 soap_in__eventws__CreatePullPointSubscription_SubscriptionPolicy(struct soap *soap, const char *tag, _eventws__CreatePullPointSubscription_SubscriptionPolicy *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_eventws__CreatePullPointSubscription_SubscriptionPolicy *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__eventws__CreatePullPointSubscription_SubscriptionPolicy, sizeof(_eventws__CreatePullPointSubscription_SubscriptionPolicy), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__eventws__CreatePullPointSubscription_SubscriptionPolicy)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_eventws__CreatePullPointSubscription_SubscriptionPolicy *)a->soap_in(soap, tag, type);
		}
	}
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_std__vectorTemplateOf_XML(soap, "-any", &(a->_eventws__CreatePullPointSubscription_SubscriptionPolicy::__any), ""))
					continue;
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_eventws__CreatePullPointSubscription_SubscriptionPolicy *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__eventws__CreatePullPointSubscription_SubscriptionPolicy, 0, sizeof(_eventws__CreatePullPointSubscription_SubscriptionPolicy), 0, soap_copy__eventws__CreatePullPointSubscription_SubscriptionPolicy);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int _eventws__CreatePullPointSubscription_SubscriptionPolicy::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	int id = soap_embed(soap, (void*)this, NULL, 0, SOAP_TYPE__eventws__CreatePullPointSubscription_SubscriptionPolicy);
	if (this->soap_out(soap, tag?tag:"eventws:CreatePullPointSubscription-SubscriptionPolicy", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_eventws__CreatePullPointSubscription_SubscriptionPolicy::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__eventws__CreatePullPointSubscription_SubscriptionPolicy(soap, this, tag, type);
}

SOAP_FMAC3 _eventws__CreatePullPointSubscription_SubscriptionPolicy * SOAP_FMAC4 soap_get__eventws__CreatePullPointSubscription_SubscriptionPolicy(struct soap *soap, _eventws__CreatePullPointSubscription_SubscriptionPolicy *p, const char *tag, const char *type)
{
	if ((p = soap_in__eventws__CreatePullPointSubscription_SubscriptionPolicy(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _eventws__CreatePullPointSubscription_SubscriptionPolicy * SOAP_FMAC2 soap_instantiate__eventws__CreatePullPointSubscription_SubscriptionPolicy(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__eventws__CreatePullPointSubscription_SubscriptionPolicy(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__eventws__CreatePullPointSubscription_SubscriptionPolicy, n, onvifevent_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = SOAP_NEW(_eventws__CreatePullPointSubscription_SubscriptionPolicy);
		if (size)
			*size = sizeof(_eventws__CreatePullPointSubscription_SubscriptionPolicy);
	}
	else
	{	cp->ptr = SOAP_NEW_ARRAY(_eventws__CreatePullPointSubscription_SubscriptionPolicy, n);
		if (size)
			*size = n * sizeof(_eventws__CreatePullPointSubscription_SubscriptionPolicy);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (_eventws__CreatePullPointSubscription_SubscriptionPolicy*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__eventws__CreatePullPointSubscription_SubscriptionPolicy(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _eventws__CreatePullPointSubscription_SubscriptionPolicy %p -> %p\n", q, p));
	*(_eventws__CreatePullPointSubscription_SubscriptionPolicy*)p = *(_eventws__CreatePullPointSubscription_SubscriptionPolicy*)q;
}

void wstop__SimpleTopicExpression__::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->xsd__anyType::soap_default(soap);
	soap_default_wstop__SimpleTopicExpression(soap, &this->wstop__SimpleTopicExpression__::__item);
}

void wstop__SimpleTopicExpression__::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_wstop__SimpleTopicExpression(soap, &this->wstop__SimpleTopicExpression__::__item);
	this->xsd__anyType::soap_serialize(soap);
#endif
}

int wstop__SimpleTopicExpression__::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_wstop__SimpleTopicExpression__(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_wstop__SimpleTopicExpression__(struct soap *soap, const char *tag, int id, const wstop__SimpleTopicExpression__ *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	return soap_out_wstop__SimpleTopicExpression(soap, tag, id, &(a->wstop__SimpleTopicExpression__::__item), "wstop:SimpleTopicExpression");
}

void *wstop__SimpleTopicExpression__::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_wstop__SimpleTopicExpression__(soap, tag, this, type);
}

SOAP_FMAC3 wstop__SimpleTopicExpression__ * SOAP_FMAC4 soap_in_wstop__SimpleTopicExpression__(struct soap *soap, const char *tag, wstop__SimpleTopicExpression__ *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!(a = (wstop__SimpleTopicExpression__ *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_wstop__SimpleTopicExpression__, sizeof(wstop__SimpleTopicExpression__), soap->type, soap->arrayType)))
	{	soap->error = SOAP_TAG_MISMATCH;
		return NULL;
	}
	soap_revert(soap);
	*soap->id = '\0';
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_wstop__SimpleTopicExpression__)
			return (wstop__SimpleTopicExpression__ *)a->soap_in(soap, tag, type);
	}
	if (!soap_in_wstop__SimpleTopicExpression(soap, tag, &(a->wstop__SimpleTopicExpression__::__item), "wstop:SimpleTopicExpression"))
		return NULL;
	return a;
}

int wstop__SimpleTopicExpression__::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	int id = soap_embed(soap, (void*)this, NULL, 0, SOAP_TYPE_wstop__SimpleTopicExpression__);
	if (this->soap_out(soap, tag?tag:"wstop:SimpleTopicExpression", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *wstop__SimpleTopicExpression__::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_wstop__SimpleTopicExpression__(soap, this, tag, type);
}

SOAP_FMAC3 wstop__SimpleTopicExpression__ * SOAP_FMAC4 soap_get_wstop__SimpleTopicExpression__(struct soap *soap, wstop__SimpleTopicExpression__ *p, const char *tag, const char *type)
{
	if ((p = soap_in_wstop__SimpleTopicExpression__(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 wstop__SimpleTopicExpression__ * SOAP_FMAC2 soap_instantiate_wstop__SimpleTopicExpression__(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_wstop__SimpleTopicExpression__(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_wstop__SimpleTopicExpression__, n, onvifevent_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = SOAP_NEW(wstop__SimpleTopicExpression__);
		if (size)
			*size = sizeof(wstop__SimpleTopicExpression__);
		((wstop__SimpleTopicExpression__*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = SOAP_NEW_ARRAY(wstop__SimpleTopicExpression__, n);
		if (size)
			*size = n * sizeof(wstop__SimpleTopicExpression__);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((wstop__SimpleTopicExpression__*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (wstop__SimpleTopicExpression__*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_wstop__SimpleTopicExpression__(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying wstop__SimpleTopicExpression__ %p -> %p\n", q, p));
	*(wstop__SimpleTopicExpression__*)p = *(wstop__SimpleTopicExpression__*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_wstop__SimpleTopicExpression(struct soap *soap, const std::string *a)
{	(void)soap; (void)a; /* appease -Wall -Werror */
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_wstop__SimpleTopicExpression(struct soap *soap, const char *tag, int id, const std::string *s, const char *type)
{
	if ((soap->mode & SOAP_C_NILSTRING) && s->empty())
		return soap_element_null(soap, tag, id, type);
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, s, SOAP_TYPE_wstop__SimpleTopicExpression), type) || soap_string_out(soap, s->c_str(), 0) || soap_element_end_out(soap, tag))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_wstop__SimpleTopicExpression(struct soap *soap, const char *tag, std::string *s, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!s)
		s = soap_new_std__string(soap, -1);
	if (soap->null)
		if (s)
			s->erase();
	if (soap->body && !*soap->href)
	{	char *t;
		s = (std::string*)soap_class_id_enter(soap, soap->id, s, SOAP_TYPE_wstop__SimpleTopicExpression, sizeof(std::string), soap->type, soap->arrayType);
		if (s)
		{	if (!(t = soap_string_in(soap, 1, 0, -1, NULL)))
				return NULL;
			s->assign(t);
		}
	}
	else
		s = (std::string*)soap_id_forward(soap, soap->href, soap_class_id_enter(soap, soap->id, s, SOAP_TYPE_wstop__SimpleTopicExpression, sizeof(std::string), soap->type, soap->arrayType), 0, SOAP_TYPE_wstop__SimpleTopicExpression, 0, sizeof(std::string), 0, soap_copy_wstop__SimpleTopicExpression);
	if (soap->body && soap_element_end_in(soap, tag))
		return NULL;
	return s;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_wstop__SimpleTopicExpression(struct soap *soap, const std::string *a, const char *tag, const char *type)
{
	int id = soap_embed(soap, (void*)a, NULL, 0, SOAP_TYPE_wstop__SimpleTopicExpression);
	if (soap_out_wstop__SimpleTopicExpression(soap, tag?tag:"wstop:SimpleTopicExpression", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_wstop__SimpleTopicExpression(struct soap *soap, std::string *p, const char *tag, const char *type)
{
	if ((p = soap_in_wstop__SimpleTopicExpression(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void wstop__ConcreteTopicExpression__::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->xsd__anyType::soap_default(soap);
	soap_default_wstop__ConcreteTopicExpression(soap, &this->wstop__ConcreteTopicExpression__::__item);
}

void wstop__ConcreteTopicExpression__::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_embedded(soap, &this->wstop__ConcreteTopicExpression__::__item, SOAP_TYPE_wstop__ConcreteTopicExpression);
	soap_serialize_wstop__ConcreteTopicExpression(soap, &this->wstop__ConcreteTopicExpression__::__item);
	this->xsd__anyType::soap_serialize(soap);
#endif
}

int wstop__ConcreteTopicExpression__::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_wstop__ConcreteTopicExpression__(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_wstop__ConcreteTopicExpression__(struct soap *soap, const char *tag, int id, const wstop__ConcreteTopicExpression__ *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	return soap_out_wstop__ConcreteTopicExpression(soap, tag, id, &(a->wstop__ConcreteTopicExpression__::__item), "wstop:ConcreteTopicExpression");
}

void *wstop__ConcreteTopicExpression__::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_wstop__ConcreteTopicExpression__(soap, tag, this, type);
}

SOAP_FMAC3 wstop__ConcreteTopicExpression__ * SOAP_FMAC4 soap_in_wstop__ConcreteTopicExpression__(struct soap *soap, const char *tag, wstop__ConcreteTopicExpression__ *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!(a = (wstop__ConcreteTopicExpression__ *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_wstop__ConcreteTopicExpression__, sizeof(wstop__ConcreteTopicExpression__), soap->type, soap->arrayType)))
	{	soap->error = SOAP_TAG_MISMATCH;
		return NULL;
	}
	soap_revert(soap);
	*soap->id = '\0';
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_wstop__ConcreteTopicExpression__)
			return (wstop__ConcreteTopicExpression__ *)a->soap_in(soap, tag, type);
	}
	if (!soap_in_wstop__ConcreteTopicExpression(soap, tag, &(a->wstop__ConcreteTopicExpression__::__item), "wstop:ConcreteTopicExpression"))
		return NULL;
	return a;
}

int wstop__ConcreteTopicExpression__::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	int id = soap_embed(soap, (void*)this, NULL, 0, SOAP_TYPE_wstop__ConcreteTopicExpression__);
	if (this->soap_out(soap, tag?tag:"wstop:ConcreteTopicExpression", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *wstop__ConcreteTopicExpression__::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_wstop__ConcreteTopicExpression__(soap, this, tag, type);
}

SOAP_FMAC3 wstop__ConcreteTopicExpression__ * SOAP_FMAC4 soap_get_wstop__ConcreteTopicExpression__(struct soap *soap, wstop__ConcreteTopicExpression__ *p, const char *tag, const char *type)
{
	if ((p = soap_in_wstop__ConcreteTopicExpression__(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 wstop__ConcreteTopicExpression__ * SOAP_FMAC2 soap_instantiate_wstop__ConcreteTopicExpression__(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_wstop__ConcreteTopicExpression__(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_wstop__ConcreteTopicExpression__, n, onvifevent_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = SOAP_NEW(wstop__ConcreteTopicExpression__);
		if (size)
			*size = sizeof(wstop__ConcreteTopicExpression__);
		((wstop__ConcreteTopicExpression__*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = SOAP_NEW_ARRAY(wstop__ConcreteTopicExpression__, n);
		if (size)
			*size = n * sizeof(wstop__ConcreteTopicExpression__);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((wstop__ConcreteTopicExpression__*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (wstop__ConcreteTopicExpression__*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_wstop__ConcreteTopicExpression__(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying wstop__ConcreteTopicExpression__ %p -> %p\n", q, p));
	*(wstop__ConcreteTopicExpression__*)p = *(wstop__ConcreteTopicExpression__*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_wstop__ConcreteTopicExpression(struct soap *soap, const std::string *a)
{	(void)soap; (void)a; /* appease -Wall -Werror */
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_wstop__ConcreteTopicExpression(struct soap *soap, const char *tag, int id, const std::string *s, const char *type)
{
	if ((soap->mode & SOAP_C_NILSTRING) && s->empty())
		return soap_element_null(soap, tag, id, type);
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, s, SOAP_TYPE_wstop__ConcreteTopicExpression), type) || soap_string_out(soap, s->c_str(), 0) || soap_element_end_out(soap, tag))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_wstop__ConcreteTopicExpression(struct soap *soap, const char *tag, std::string *s, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!s)
		s = soap_new_std__string(soap, -1);
	if (soap->null)
		if (s)
			s->erase();
	if (soap->body && !*soap->href)
	{	char *t;
		s = (std::string*)soap_class_id_enter(soap, soap->id, s, SOAP_TYPE_wstop__ConcreteTopicExpression, sizeof(std::string), soap->type, soap->arrayType);
		if (s)
		{	if (!(t = soap_string_in(soap, 1, 0, -1, "(([\\i-[:]][\\c-[:]]*:)?[\\i-[:]][\\c-[:]]*)(/([\\i-[:]][\\c-[:]]*:)?[\\i-[:]][\\c-[:]]*)*")))
				return NULL;
			s->assign(t);
		}
	}
	else
		s = (std::string*)soap_id_forward(soap, soap->href, soap_class_id_enter(soap, soap->id, s, SOAP_TYPE_wstop__ConcreteTopicExpression, sizeof(std::string), soap->type, soap->arrayType), 0, SOAP_TYPE_wstop__ConcreteTopicExpression, 0, sizeof(std::string), 0, soap_copy_wstop__ConcreteTopicExpression);
	if (soap->body && soap_element_end_in(soap, tag))
		return NULL;
	return s;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_wstop__ConcreteTopicExpression(struct soap *soap, const std::string *a, const char *tag, const char *type)
{
	int id = soap_embed(soap, (void*)a, NULL, 0, SOAP_TYPE_wstop__ConcreteTopicExpression);
	if (soap_out_wstop__ConcreteTopicExpression(soap, tag?tag:"wstop:ConcreteTopicExpression", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_wstop__ConcreteTopicExpression(struct soap *soap, std::string *p, const char *tag, const char *type)
{
	if ((p = soap_in_wstop__ConcreteTopicExpression(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void wstop__FullTopicExpression__::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->xsd__anyType::soap_default(soap);
	soap_default_wstop__FullTopicExpression(soap, &this->wstop__FullTopicExpression__::__item);
}

void wstop__FullTopicExpression__::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_wstop__FullTopicExpression(soap, &this->wstop__FullTopicExpression__::__item);
	this->xsd__anyType::soap_serialize(soap);
#endif
}

int wstop__FullTopicExpression__::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_wstop__FullTopicExpression__(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_wstop__FullTopicExpression__(struct soap *soap, const char *tag, int id, const wstop__FullTopicExpression__ *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	return soap_out_wstop__FullTopicExpression(soap, tag, id, &(a->wstop__FullTopicExpression__::__item), "wstop:FullTopicExpression");
}

void *wstop__FullTopicExpression__::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_wstop__FullTopicExpression__(soap, tag, this, type);
}

SOAP_FMAC3 wstop__FullTopicExpression__ * SOAP_FMAC4 soap_in_wstop__FullTopicExpression__(struct soap *soap, const char *tag, wstop__FullTopicExpression__ *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!(a = (wstop__FullTopicExpression__ *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_wstop__FullTopicExpression__, sizeof(wstop__FullTopicExpression__), soap->type, soap->arrayType)))
	{	soap->error = SOAP_TAG_MISMATCH;
		return NULL;
	}
	soap_revert(soap);
	*soap->id = '\0';
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_wstop__FullTopicExpression__)
			return (wstop__FullTopicExpression__ *)a->soap_in(soap, tag, type);
	}
	if (!soap_in_wstop__FullTopicExpression(soap, tag, &(a->wstop__FullTopicExpression__::__item), "wstop:FullTopicExpression"))
		return NULL;
	return a;
}

int wstop__FullTopicExpression__::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	int id = soap_embed(soap, (void*)this, NULL, 0, SOAP_TYPE_wstop__FullTopicExpression__);
	if (this->soap_out(soap, tag?tag:"wstop:FullTopicExpression", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *wstop__FullTopicExpression__::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_wstop__FullTopicExpression__(soap, this, tag, type);
}

SOAP_FMAC3 wstop__FullTopicExpression__ * SOAP_FMAC4 soap_get_wstop__FullTopicExpression__(struct soap *soap, wstop__FullTopicExpression__ *p, const char *tag, const char *type)
{
	if ((p = soap_in_wstop__FullTopicExpression__(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 wstop__FullTopicExpression__ * SOAP_FMAC2 soap_instantiate_wstop__FullTopicExpression__(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_wstop__FullTopicExpression__(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_wstop__FullTopicExpression__, n, onvifevent_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = SOAP_NEW(wstop__FullTopicExpression__);
		if (size)
			*size = sizeof(wstop__FullTopicExpression__);
		((wstop__FullTopicExpression__*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = SOAP_NEW_ARRAY(wstop__FullTopicExpression__, n);
		if (size)
			*size = n * sizeof(wstop__FullTopicExpression__);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((wstop__FullTopicExpression__*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (wstop__FullTopicExpression__*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_wstop__FullTopicExpression__(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying wstop__FullTopicExpression__ %p -> %p\n", q, p));
	*(wstop__FullTopicExpression__*)p = *(wstop__FullTopicExpression__*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_wstop__FullTopicExpression(struct soap *soap, const std::string *a)
{	(void)soap; (void)a; /* appease -Wall -Werror */
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_wstop__FullTopicExpression(struct soap *soap, const char *tag, int id, const std::string *s, const char *type)
{
	if ((soap->mode & SOAP_C_NILSTRING) && s->empty())
		return soap_element_null(soap, tag, id, type);
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, s, SOAP_TYPE_wstop__FullTopicExpression), type) || soap_string_out(soap, s->c_str(), 0) || soap_element_end_out(soap, tag))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_wstop__FullTopicExpression(struct soap *soap, const char *tag, std::string *s, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!s)
		s = soap_new_std__string(soap, -1);
	if (soap->null)
		if (s)
			s->erase();
	if (soap->body && !*soap->href)
	{	char *t;
		s = (std::string*)soap_class_id_enter(soap, soap->id, s, SOAP_TYPE_wstop__FullTopicExpression, sizeof(std::string), soap->type, soap->arrayType);
		if (s)
		{	if (!(t = soap_string_in(soap, 1, 0, -1, "([\\i-[:]][\\c-[:]]*:)?(//)?([\\i-[:]][\\c-[:]]*|\\*)((/|//)(([\\i-[:]][\\c-[:]]*:)?[\\i-[:]][\\c-[:]]*|\\*|[.]))*(\\|([\\i-[:]][\\c-[:]]*:)?(//)?([\\i-[:]][\\c-[:]]*|\\*)((/|//)(([\\i-[:]][\\c-[:]]*:)?[\\i-[:]][\\c-[:]]*|\\*|[.]))*)*")))
				return NULL;
			s->assign(t);
		}
	}
	else
		s = (std::string*)soap_id_forward(soap, soap->href, soap_class_id_enter(soap, soap->id, s, SOAP_TYPE_wstop__FullTopicExpression, sizeof(std::string), soap->type, soap->arrayType), 0, SOAP_TYPE_wstop__FullTopicExpression, 0, sizeof(std::string), 0, soap_copy_wstop__FullTopicExpression);
	if (soap->body && soap_element_end_in(soap, tag))
		return NULL;
	return s;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_wstop__FullTopicExpression(struct soap *soap, const std::string *a, const char *tag, const char *type)
{
	int id = soap_embed(soap, (void*)a, NULL, 0, SOAP_TYPE_wstop__FullTopicExpression);
	if (soap_out_wstop__FullTopicExpression(soap, tag?tag:"wstop:FullTopicExpression", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_wstop__FullTopicExpression(struct soap *soap, std::string *p, const char *tag, const char *type)
{
	if ((p = soap_in_wstop__FullTopicExpression(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_wsnt__AbsoluteOrRelativeTimeType(struct soap *soap, const std::string *a)
{	(void)soap; (void)a; /* appease -Wall -Werror */
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_wsnt__AbsoluteOrRelativeTimeType(struct soap *soap, const char *tag, int id, const std::string *s, const char *type)
{
	if ((soap->mode & SOAP_C_NILSTRING) && s->empty())
		return soap_element_null(soap, tag, id, type);
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, s, SOAP_TYPE_wsnt__AbsoluteOrRelativeTimeType), type) || soap_string_out(soap, s->c_str(), 0) || soap_element_end_out(soap, tag))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_wsnt__AbsoluteOrRelativeTimeType(struct soap *soap, const char *tag, std::string *s, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!s)
		s = soap_new_std__string(soap, -1);
	if (soap->null)
		if (s)
			s->erase();
	if (soap->body && !*soap->href)
	{	char *t;
		s = (std::string*)soap_class_id_enter(soap, soap->id, s, SOAP_TYPE_wsnt__AbsoluteOrRelativeTimeType, sizeof(std::string), soap->type, soap->arrayType);
		if (s)
		{	if (!(t = soap_string_in(soap, 1, 0, -1, NULL)))
				return NULL;
			s->assign(t);
		}
	}
	else
		s = (std::string*)soap_id_forward(soap, soap->href, soap_class_id_enter(soap, soap->id, s, SOAP_TYPE_wsnt__AbsoluteOrRelativeTimeType, sizeof(std::string), soap->type, soap->arrayType), 0, SOAP_TYPE_wsnt__AbsoluteOrRelativeTimeType, 0, sizeof(std::string), 0, soap_copy_wsnt__AbsoluteOrRelativeTimeType);
	if (soap->body && soap_element_end_in(soap, tag))
		return NULL;
	return s;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_wsnt__AbsoluteOrRelativeTimeType(struct soap *soap, const std::string *a, const char *tag, const char *type)
{
	int id = soap_embed(soap, (void*)a, NULL, 0, SOAP_TYPE_wsnt__AbsoluteOrRelativeTimeType);
	if (soap_out_wsnt__AbsoluteOrRelativeTimeType(soap, tag?tag:"wsnt:AbsoluteOrRelativeTimeType", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_wsnt__AbsoluteOrRelativeTimeType(struct soap *soap, std::string *p, const char *tag, const char *type)
{
	if ((p = soap_in_wsnt__AbsoluteOrRelativeTimeType(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void wstop__TopicSetType::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->wstop__ExtensibleDocumented::soap_default(soap);
	soap_default_std__vectorTemplateOf_XML(soap, &this->wstop__TopicSetType::__any);
}

void wstop__TopicSetType::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_std__vectorTemplateOf_XML(soap, &this->wstop__TopicSetType::__any);
	this->wstop__ExtensibleDocumented::soap_serialize(soap);
#endif
}

int wstop__TopicSetType::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_wstop__TopicSetType(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_wstop__TopicSetType(struct soap *soap, const char *tag, int id, const wstop__TopicSetType *a, const char *type)
{
	if (((wstop__ExtensibleDocumented*)a)->__anyAttribute)
		soap_set_attr(soap, "-anyAttribute", ((wstop__ExtensibleDocumented*)a)->__anyAttribute, 1);
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_wstop__TopicSetType), "wstop:TopicSetType"))
		return soap->error;
	/* transient soap skipped */
	if (soap_out_PointerTowstop__Documentation(soap, "wstop:documentation", -1, &(a->wstop__ExtensibleDocumented::documentation), ""))
		return soap->error;
	if (soap_out_std__vectorTemplateOf_XML(soap, "-any", -1, &(a->wstop__TopicSetType::__any), ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *wstop__TopicSetType::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_wstop__TopicSetType(soap, tag, this, type);
}

SOAP_FMAC3 wstop__TopicSetType * SOAP_FMAC4 soap_in_wstop__TopicSetType(struct soap *soap, const char *tag, wstop__TopicSetType *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (wstop__TopicSetType *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_wstop__TopicSetType, sizeof(wstop__TopicSetType), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_wstop__TopicSetType)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (wstop__TopicSetType *)a->soap_in(soap, tag, type);
		}
	}
	if (soap_s2string(soap, soap_attr_value(soap, "-anyAttribute", 0), &((wstop__ExtensibleDocumented*)a)->__anyAttribute, 0, -1))
		return NULL;
	size_t soap_flag___item3 = 1;
	size_t soap_flag_documentation2 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			/* transient soap skipped */
			if (soap_flag_documentation2 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTowstop__Documentation(soap, "wstop:documentation", &(a->wstop__ExtensibleDocumented::documentation), "wstop:Documentation"))
				{	soap_flag_documentation2--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_std__vectorTemplateOf_XML(soap, "-any", &(a->wstop__TopicSetType::__any), ""))
					continue;
			if (soap_flag___item3 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_inliteral(soap, "-item", &(a->xsd__anyType::__item)))
				{	soap_flag___item3--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (wstop__TopicSetType *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_wstop__TopicSetType, 0, sizeof(wstop__TopicSetType), 0, soap_copy_wstop__TopicSetType);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int wstop__TopicSetType::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	int id = soap_embed(soap, (void*)this, NULL, 0, SOAP_TYPE_wstop__TopicSetType);
	if (this->soap_out(soap, tag?tag:"wstop:TopicSetType", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *wstop__TopicSetType::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_wstop__TopicSetType(soap, this, tag, type);
}

SOAP_FMAC3 wstop__TopicSetType * SOAP_FMAC4 soap_get_wstop__TopicSetType(struct soap *soap, wstop__TopicSetType *p, const char *tag, const char *type)
{
	if ((p = soap_in_wstop__TopicSetType(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 wstop__TopicSetType * SOAP_FMAC2 soap_instantiate_wstop__TopicSetType(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_wstop__TopicSetType(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_wstop__TopicSetType, n, onvifevent_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = SOAP_NEW(wstop__TopicSetType);
		if (size)
			*size = sizeof(wstop__TopicSetType);
		((wstop__TopicSetType*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = SOAP_NEW_ARRAY(wstop__TopicSetType, n);
		if (size)
			*size = n * sizeof(wstop__TopicSetType);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((wstop__TopicSetType*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (wstop__TopicSetType*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_wstop__TopicSetType(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying wstop__TopicSetType %p -> %p\n", q, p));
	*(wstop__TopicSetType*)p = *(wstop__TopicSetType*)q;
}

void wstop__TopicType::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->wstop__ExtensibleDocumented::soap_default(soap);
	this->wstop__TopicType::MessagePattern = NULL;
	soap_default_std__vectorTemplateOfPointerTowstop__TopicType(soap, &this->wstop__TopicType::Topic);
	soap_default_std__vectorTemplateOf_XML(soap, &this->wstop__TopicType::__any);
	soap_default_xsd__NCName(soap, &this->wstop__TopicType::name);
	this->wstop__TopicType::messageTypes = NULL;
	this->wstop__TopicType::final_ = (bool)0;
}

void wstop__TopicType::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTowstop__QueryExpressionType(soap, &this->wstop__TopicType::MessagePattern);
	soap_serialize_std__vectorTemplateOfPointerTowstop__TopicType(soap, &this->wstop__TopicType::Topic);
	soap_serialize_std__vectorTemplateOf_XML(soap, &this->wstop__TopicType::__any);
	this->wstop__ExtensibleDocumented::soap_serialize(soap);
#endif
}

int wstop__TopicType::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_wstop__TopicType(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_wstop__TopicType(struct soap *soap, const char *tag, int id, const wstop__TopicType *a, const char *type)
{
	soap_set_attr(soap, "name", ((wstop__TopicType*)a)->name.c_str(), 1);
	if (((wstop__TopicType*)a)->messageTypes)
		soap_set_attr(soap, "messageTypes", soap_QName2s(soap, ((wstop__TopicType*)a)->messageTypes->c_str()), 1);
	soap_set_attr(soap, "final", soap_bool2s(soap, ((wstop__TopicType*)a)->final_), 1);
	if (((wstop__ExtensibleDocumented*)a)->__anyAttribute)
		soap_set_attr(soap, "-anyAttribute", ((wstop__ExtensibleDocumented*)a)->__anyAttribute, 1);
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_wstop__TopicType), "wstop:TopicType"))
		return soap->error;
	/* transient soap skipped */
	if (soap_out_PointerTowstop__Documentation(soap, "wstop:documentation", -1, &(a->wstop__ExtensibleDocumented::documentation), ""))
		return soap->error;
	if (soap_out_PointerTowstop__QueryExpressionType(soap, "wstop:MessagePattern", -1, &(a->wstop__TopicType::MessagePattern), ""))
		return soap->error;
	if (soap_out_std__vectorTemplateOfPointerTowstop__TopicType(soap, "wstop:Topic", -1, &(a->wstop__TopicType::Topic), ""))
		return soap->error;
	if (soap_out_std__vectorTemplateOf_XML(soap, "-any", -1, &(a->wstop__TopicType::__any), ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *wstop__TopicType::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_wstop__TopicType(soap, tag, this, type);
}

SOAP_FMAC3 wstop__TopicType * SOAP_FMAC4 soap_in_wstop__TopicType(struct soap *soap, const char *tag, wstop__TopicType *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (wstop__TopicType *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_wstop__TopicType, sizeof(wstop__TopicType), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_wstop__TopicType)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (wstop__TopicType *)a->soap_in(soap, tag, type);
		}
	}
	{	const char *t = soap_attr_value(soap, "name", 1);
		if (t)
		{	char *s;
			if (soap_s2string(soap, t, &s, 0, -1))
				return NULL;
			((wstop__TopicType*)a)->name.assign(s);
		}
		else if (soap->error)
			return NULL;
	}
	{	const char *t = soap_attr_value(soap, "messageTypes", 0);
		if (t)
		{
			char *s = NULL;
			if (soap_s2QName(soap, t, &s, 0, -1))
				return NULL;
			if (s)
			{	((wstop__TopicType*)a)->messageTypes = soap_new_std__string(soap, -1);
				((wstop__TopicType*)a)->messageTypes->assign(s);
			}
		}
		else if (soap->error)
			return NULL;
	}
	if (soap_s2bool(soap, soap_attr_value(soap, "final", 0), &((wstop__TopicType*)a)->final_))
		return NULL;
	if (soap_s2string(soap, soap_attr_value(soap, "-anyAttribute", 0), &((wstop__ExtensibleDocumented*)a)->__anyAttribute, 0, -1))
		return NULL;
	size_t soap_flag___item3 = 1;
	size_t soap_flag_documentation2 = 1;
	size_t soap_flag_MessagePattern1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			/* transient soap skipped */
			if (soap_flag_documentation2 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTowstop__Documentation(soap, "wstop:documentation", &(a->wstop__ExtensibleDocumented::documentation), "wstop:Documentation"))
				{	soap_flag_documentation2--;
					continue;
				}
			if (soap_flag_MessagePattern1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTowstop__QueryExpressionType(soap, "wstop:MessagePattern", &(a->wstop__TopicType::MessagePattern), "wstop:QueryExpressionType"))
				{	soap_flag_MessagePattern1--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_std__vectorTemplateOfPointerTowstop__TopicType(soap, "wstop:Topic", &(a->wstop__TopicType::Topic), "wstop:TopicType"))
					continue;
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_std__vectorTemplateOf_XML(soap, "-any", &(a->wstop__TopicType::__any), ""))
					continue;
			if (soap_flag___item3 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_inliteral(soap, "-item", &(a->xsd__anyType::__item)))
				{	soap_flag___item3--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (wstop__TopicType *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_wstop__TopicType, 0, sizeof(wstop__TopicType), 0, soap_copy_wstop__TopicType);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int wstop__TopicType::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	int id = soap_embed(soap, (void*)this, NULL, 0, SOAP_TYPE_wstop__TopicType);
	if (this->soap_out(soap, tag?tag:"wstop:TopicType", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *wstop__TopicType::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_wstop__TopicType(soap, this, tag, type);
}

SOAP_FMAC3 wstop__TopicType * SOAP_FMAC4 soap_get_wstop__TopicType(struct soap *soap, wstop__TopicType *p, const char *tag, const char *type)
{
	if ((p = soap_in_wstop__TopicType(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 wstop__TopicType * SOAP_FMAC2 soap_instantiate_wstop__TopicType(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_wstop__TopicType(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_wstop__TopicType, n, onvifevent_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = SOAP_NEW(wstop__TopicType);
		if (size)
			*size = sizeof(wstop__TopicType);
		((wstop__TopicType*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = SOAP_NEW_ARRAY(wstop__TopicType, n);
		if (size)
			*size = n * sizeof(wstop__TopicType);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((wstop__TopicType*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (wstop__TopicType*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_wstop__TopicType(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying wstop__TopicType %p -> %p\n", q, p));
	*(wstop__TopicType*)p = *(wstop__TopicType*)q;
}

void wstop__TopicNamespaceType::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->wstop__ExtensibleDocumented::soap_default(soap);
	this->wstop__TopicNamespaceType::Topic = NULL;
	soap_default_std__vectorTemplateOf_XML(soap, &this->wstop__TopicNamespaceType::__any);
	this->wstop__TopicNamespaceType::name = NULL;
	soap_default_xsd__anyURI(soap, &this->wstop__TopicNamespaceType::targetNamespace);
	this->wstop__TopicNamespaceType::final_ = (bool)0;
}

void wstop__TopicNamespaceType::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTostd__vectorTemplateOf_wstop__TopicNamespaceType_Topic(soap, &this->wstop__TopicNamespaceType::Topic);
	soap_serialize_std__vectorTemplateOf_XML(soap, &this->wstop__TopicNamespaceType::__any);
	this->wstop__ExtensibleDocumented::soap_serialize(soap);
#endif
}

int wstop__TopicNamespaceType::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_wstop__TopicNamespaceType(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_wstop__TopicNamespaceType(struct soap *soap, const char *tag, int id, const wstop__TopicNamespaceType *a, const char *type)
{
	if (((wstop__TopicNamespaceType*)a)->name)
		soap_set_attr(soap, "name", ((wstop__TopicNamespaceType*)a)->name->c_str(), 1);
	soap_set_attr(soap, "targetNamespace", ((wstop__TopicNamespaceType*)a)->targetNamespace.c_str(), 1);
	soap_set_attr(soap, "final", soap_bool2s(soap, ((wstop__TopicNamespaceType*)a)->final_), 1);
	if (((wstop__ExtensibleDocumented*)a)->__anyAttribute)
		soap_set_attr(soap, "-anyAttribute", ((wstop__ExtensibleDocumented*)a)->__anyAttribute, 1);
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_wstop__TopicNamespaceType), "wstop:TopicNamespaceType"))
		return soap->error;
	/* transient soap skipped */
	if (soap_out_PointerTowstop__Documentation(soap, "wstop:documentation", -1, &(a->wstop__ExtensibleDocumented::documentation), ""))
		return soap->error;
	if (soap_out_PointerTostd__vectorTemplateOf_wstop__TopicNamespaceType_Topic(soap, "wstop:Topic", -1, &(a->wstop__TopicNamespaceType::Topic), ""))
		return soap->error;
	if (soap_out_std__vectorTemplateOf_XML(soap, "-any", -1, &(a->wstop__TopicNamespaceType::__any), ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *wstop__TopicNamespaceType::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_wstop__TopicNamespaceType(soap, tag, this, type);
}

SOAP_FMAC3 wstop__TopicNamespaceType * SOAP_FMAC4 soap_in_wstop__TopicNamespaceType(struct soap *soap, const char *tag, wstop__TopicNamespaceType *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (wstop__TopicNamespaceType *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_wstop__TopicNamespaceType, sizeof(wstop__TopicNamespaceType), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_wstop__TopicNamespaceType)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (wstop__TopicNamespaceType *)a->soap_in(soap, tag, type);
		}
	}
	{	const char *t = soap_attr_value(soap, "name", 0);
		if (t)
		{
			char *s = NULL;
			if (soap_s2string(soap, t, &s, 0, -1))
				return NULL;
			if (s)
			{	((wstop__TopicNamespaceType*)a)->name = soap_new_std__string(soap, -1);
				((wstop__TopicNamespaceType*)a)->name->assign(s);
			}
		}
		else if (soap->error)
			return NULL;
	}
	{	const char *t = soap_attr_value(soap, "targetNamespace", 1);
		if (t)
		{	char *s;
			if (soap_s2string(soap, t, &s, 0, -1))
				return NULL;
			((wstop__TopicNamespaceType*)a)->targetNamespace.assign(s);
		}
		else if (soap->error)
			return NULL;
	}
	if (soap_s2bool(soap, soap_attr_value(soap, "final", 0), &((wstop__TopicNamespaceType*)a)->final_))
		return NULL;
	if (soap_s2string(soap, soap_attr_value(soap, "-anyAttribute", 0), &((wstop__ExtensibleDocumented*)a)->__anyAttribute, 0, -1))
		return NULL;
	size_t soap_flag___item3 = 1;
	size_t soap_flag_documentation2 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			/* transient soap skipped */
			if (soap_flag_documentation2 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTowstop__Documentation(soap, "wstop:documentation", &(a->wstop__ExtensibleDocumented::documentation), "wstop:Documentation"))
				{	soap_flag_documentation2--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTostd__vectorTemplateOf_wstop__TopicNamespaceType_Topic(soap, "wstop:Topic", &(a->wstop__TopicNamespaceType::Topic), ""))
					continue;
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_std__vectorTemplateOf_XML(soap, "-any", &(a->wstop__TopicNamespaceType::__any), ""))
					continue;
			if (soap_flag___item3 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_inliteral(soap, "-item", &(a->xsd__anyType::__item)))
				{	soap_flag___item3--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (wstop__TopicNamespaceType *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_wstop__TopicNamespaceType, 0, sizeof(wstop__TopicNamespaceType), 0, soap_copy_wstop__TopicNamespaceType);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int wstop__TopicNamespaceType::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	int id = soap_embed(soap, (void*)this, NULL, 0, SOAP_TYPE_wstop__TopicNamespaceType);
	if (this->soap_out(soap, tag?tag:"wstop:TopicNamespaceType", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *wstop__TopicNamespaceType::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_wstop__TopicNamespaceType(soap, this, tag, type);
}

SOAP_FMAC3 wstop__TopicNamespaceType * SOAP_FMAC4 soap_get_wstop__TopicNamespaceType(struct soap *soap, wstop__TopicNamespaceType *p, const char *tag, const char *type)
{
	if ((p = soap_in_wstop__TopicNamespaceType(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 wstop__TopicNamespaceType * SOAP_FMAC2 soap_instantiate_wstop__TopicNamespaceType(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_wstop__TopicNamespaceType(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_wstop__TopicNamespaceType, n, onvifevent_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = SOAP_NEW(wstop__TopicNamespaceType);
		if (size)
			*size = sizeof(wstop__TopicNamespaceType);
		((wstop__TopicNamespaceType*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = SOAP_NEW_ARRAY(wstop__TopicNamespaceType, n);
		if (size)
			*size = n * sizeof(wstop__TopicNamespaceType);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((wstop__TopicNamespaceType*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (wstop__TopicNamespaceType*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_wstop__TopicNamespaceType(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying wstop__TopicNamespaceType %p -> %p\n", q, p));
	*(wstop__TopicNamespaceType*)p = *(wstop__TopicNamespaceType*)q;
}

void wstop__QueryExpressionType::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->xsd__anyType::soap_default(soap);
	this->wstop__QueryExpressionType::__any = NULL;
	soap_default_xsd__anyURI(soap, &this->wstop__QueryExpressionType::Dialect);
	this->wstop__QueryExpressionType::__mixed = NULL;
}

void wstop__QueryExpressionType::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	this->xsd__anyType::soap_serialize(soap);
#endif
}

int wstop__QueryExpressionType::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_wstop__QueryExpressionType(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_wstop__QueryExpressionType(struct soap *soap, const char *tag, int id, const wstop__QueryExpressionType *a, const char *type)
{
	soap_set_attr(soap, "Dialect", ((wstop__QueryExpressionType*)a)->Dialect.c_str(), 1);
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_wstop__QueryExpressionType), "wstop:QueryExpressionType"))
		return soap->error;
	/* transient soap skipped */
	soap_outliteral(soap, "-any", &(a->wstop__QueryExpressionType::__any), NULL);
	soap_outliteral(soap, "-mixed", &(a->wstop__QueryExpressionType::__mixed), NULL);
	return soap_element_end_out(soap, tag);
}

void *wstop__QueryExpressionType::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_wstop__QueryExpressionType(soap, tag, this, type);
}

SOAP_FMAC3 wstop__QueryExpressionType * SOAP_FMAC4 soap_in_wstop__QueryExpressionType(struct soap *soap, const char *tag, wstop__QueryExpressionType *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (wstop__QueryExpressionType *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_wstop__QueryExpressionType, sizeof(wstop__QueryExpressionType), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_wstop__QueryExpressionType)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (wstop__QueryExpressionType *)a->soap_in(soap, tag, type);
		}
	}
	{	const char *t = soap_attr_value(soap, "Dialect", 1);
		if (t)
		{	char *s;
			if (soap_s2string(soap, t, &s, 0, -1))
				return NULL;
			((wstop__QueryExpressionType*)a)->Dialect.assign(s);
		}
		else if (soap->error)
			return NULL;
	}
	size_t soap_flag___item2 = 1;
	size_t soap_flag___any1 = 1;
	size_t soap_flag___mixed1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			/* transient soap skipped */
			if (soap_flag___any1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_inliteral(soap, "-any", &(a->wstop__QueryExpressionType::__any)))
				{	soap_flag___any1--;
					continue;
				}
			if (soap_flag___mixed1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_inliteral(soap, "-mixed", &(a->wstop__QueryExpressionType::__mixed)))
				{	soap_flag___mixed1--;
					continue;
				}
			if (soap_flag___item2 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_inliteral(soap, "-item", &(a->xsd__anyType::__item)))
				{	soap_flag___item2--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (wstop__QueryExpressionType *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_wstop__QueryExpressionType, 0, sizeof(wstop__QueryExpressionType), 0, soap_copy_wstop__QueryExpressionType);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int wstop__QueryExpressionType::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	int id = soap_embed(soap, (void*)this, NULL, 0, SOAP_TYPE_wstop__QueryExpressionType);
	if (this->soap_out(soap, tag?tag:"wstop:QueryExpressionType", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *wstop__QueryExpressionType::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_wstop__QueryExpressionType(soap, this, tag, type);
}

SOAP_FMAC3 wstop__QueryExpressionType * SOAP_FMAC4 soap_get_wstop__QueryExpressionType(struct soap *soap, wstop__QueryExpressionType *p, const char *tag, const char *type)
{
	if ((p = soap_in_wstop__QueryExpressionType(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 wstop__QueryExpressionType * SOAP_FMAC2 soap_instantiate_wstop__QueryExpressionType(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_wstop__QueryExpressionType(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_wstop__QueryExpressionType, n, onvifevent_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = SOAP_NEW(wstop__QueryExpressionType);
		if (size)
			*size = sizeof(wstop__QueryExpressionType);
		((wstop__QueryExpressionType*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = SOAP_NEW_ARRAY(wstop__QueryExpressionType, n);
		if (size)
			*size = n * sizeof(wstop__QueryExpressionType);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((wstop__QueryExpressionType*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (wstop__QueryExpressionType*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_wstop__QueryExpressionType(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying wstop__QueryExpressionType %p -> %p\n", q, p));
	*(wstop__QueryExpressionType*)p = *(wstop__QueryExpressionType*)q;
}

void wstop__ExtensibleDocumented::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->xsd__anyType::soap_default(soap);
	this->wstop__ExtensibleDocumented::documentation = NULL;
	this->wstop__ExtensibleDocumented::__anyAttribute = NULL;
}

void wstop__ExtensibleDocumented::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTowstop__Documentation(soap, &this->wstop__ExtensibleDocumented::documentation);
	this->xsd__anyType::soap_serialize(soap);
#endif
}

int wstop__ExtensibleDocumented::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_wstop__ExtensibleDocumented(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_wstop__ExtensibleDocumented(struct soap *soap, const char *tag, int id, const wstop__ExtensibleDocumented *a, const char *type)
{
	if (((wstop__ExtensibleDocumented*)a)->__anyAttribute)
		soap_set_attr(soap, "-anyAttribute", ((wstop__ExtensibleDocumented*)a)->__anyAttribute, 1);
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_wstop__ExtensibleDocumented), "wstop:ExtensibleDocumented"))
		return soap->error;
	/* transient soap skipped */
	if (soap_out_PointerTowstop__Documentation(soap, "wstop:documentation", -1, &(a->wstop__ExtensibleDocumented::documentation), ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *wstop__ExtensibleDocumented::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_wstop__ExtensibleDocumented(soap, tag, this, type);
}

SOAP_FMAC3 wstop__ExtensibleDocumented * SOAP_FMAC4 soap_in_wstop__ExtensibleDocumented(struct soap *soap, const char *tag, wstop__ExtensibleDocumented *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (wstop__ExtensibleDocumented *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_wstop__ExtensibleDocumented, sizeof(wstop__ExtensibleDocumented), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_wstop__ExtensibleDocumented)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (wstop__ExtensibleDocumented *)a->soap_in(soap, tag, type);
		}
	}
	if (soap_s2string(soap, soap_attr_value(soap, "-anyAttribute", 0), &((wstop__ExtensibleDocumented*)a)->__anyAttribute, 0, -1))
		return NULL;
	size_t soap_flag___item2 = 1;
	size_t soap_flag_documentation1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			/* transient soap skipped */
			if (soap_flag_documentation1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTowstop__Documentation(soap, "wstop:documentation", &(a->wstop__ExtensibleDocumented::documentation), "wstop:Documentation"))
				{	soap_flag_documentation1--;
					continue;
				}
			if (soap_flag___item2 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_inliteral(soap, "-item", &(a->xsd__anyType::__item)))
				{	soap_flag___item2--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (wstop__ExtensibleDocumented *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_wstop__ExtensibleDocumented, 0, sizeof(wstop__ExtensibleDocumented), 0, soap_copy_wstop__ExtensibleDocumented);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int wstop__ExtensibleDocumented::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	int id = soap_embed(soap, (void*)this, NULL, 0, SOAP_TYPE_wstop__ExtensibleDocumented);
	if (this->soap_out(soap, tag?tag:"wstop:ExtensibleDocumented", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *wstop__ExtensibleDocumented::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_wstop__ExtensibleDocumented(soap, this, tag, type);
}

SOAP_FMAC3 wstop__ExtensibleDocumented * SOAP_FMAC4 soap_get_wstop__ExtensibleDocumented(struct soap *soap, wstop__ExtensibleDocumented *p, const char *tag, const char *type)
{
	if ((p = soap_in_wstop__ExtensibleDocumented(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 wstop__ExtensibleDocumented * SOAP_FMAC2 soap_instantiate_wstop__ExtensibleDocumented(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_wstop__ExtensibleDocumented(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_wstop__ExtensibleDocumented, n, onvifevent_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (type && !soap_match_tag(soap, type, "wstop:TopicNamespaceType"))
	{	cp->type = SOAP_TYPE_wstop__TopicNamespaceType;
		if (n < 0)
		{	cp->ptr = SOAP_NEW(wstop__TopicNamespaceType);
			if (size)
				*size = sizeof(wstop__TopicNamespaceType);
			((wstop__TopicNamespaceType*)cp->ptr)->soap = soap;
		}
		else
		{	cp->ptr = SOAP_NEW_ARRAY(wstop__TopicNamespaceType, n);
			if (size)
				*size = n * sizeof(wstop__TopicNamespaceType);
			if (cp->ptr)
				for (int i = 0; i < n; i++)
					((wstop__TopicNamespaceType*)cp->ptr)[i].soap = soap;
		}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
		if (!cp->ptr)
			soap->error = SOAP_EOM;
		return (wstop__TopicNamespaceType*)cp->ptr;
	}
	if (type && !soap_match_tag(soap, type, "wstop:TopicType"))
	{	cp->type = SOAP_TYPE_wstop__TopicType;
		if (n < 0)
		{	cp->ptr = SOAP_NEW(wstop__TopicType);
			if (size)
				*size = sizeof(wstop__TopicType);
			((wstop__TopicType*)cp->ptr)->soap = soap;
		}
		else
		{	cp->ptr = SOAP_NEW_ARRAY(wstop__TopicType, n);
			if (size)
				*size = n * sizeof(wstop__TopicType);
			if (cp->ptr)
				for (int i = 0; i < n; i++)
					((wstop__TopicType*)cp->ptr)[i].soap = soap;
		}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
		if (!cp->ptr)
			soap->error = SOAP_EOM;
		return (wstop__TopicType*)cp->ptr;
	}
	if (type && !soap_match_tag(soap, type, "wstop:TopicSetType"))
	{	cp->type = SOAP_TYPE_wstop__TopicSetType;
		if (n < 0)
		{	cp->ptr = SOAP_NEW(wstop__TopicSetType);
			if (size)
				*size = sizeof(wstop__TopicSetType);
			((wstop__TopicSetType*)cp->ptr)->soap = soap;
		}
		else
		{	cp->ptr = SOAP_NEW_ARRAY(wstop__TopicSetType, n);
			if (size)
				*size = n * sizeof(wstop__TopicSetType);
			if (cp->ptr)
				for (int i = 0; i < n; i++)
					((wstop__TopicSetType*)cp->ptr)[i].soap = soap;
		}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
		if (!cp->ptr)
			soap->error = SOAP_EOM;
		return (wstop__TopicSetType*)cp->ptr;
	}
	if (n < 0)
	{	cp->ptr = SOAP_NEW(wstop__ExtensibleDocumented);
		if (size)
			*size = sizeof(wstop__ExtensibleDocumented);
		((wstop__ExtensibleDocumented*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = SOAP_NEW_ARRAY(wstop__ExtensibleDocumented, n);
		if (size)
			*size = n * sizeof(wstop__ExtensibleDocumented);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((wstop__ExtensibleDocumented*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (wstop__ExtensibleDocumented*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_wstop__ExtensibleDocumented(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying wstop__ExtensibleDocumented %p -> %p\n", q, p));
	*(wstop__ExtensibleDocumented*)p = *(wstop__ExtensibleDocumented*)q;
}

void wstop__Documentation::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->xsd__anyType::soap_default(soap);
	soap_default_std__vectorTemplateOf_XML(soap, &this->wstop__Documentation::__any);
	this->wstop__Documentation::__mixed = NULL;
}

void wstop__Documentation::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_std__vectorTemplateOf_XML(soap, &this->wstop__Documentation::__any);
	this->xsd__anyType::soap_serialize(soap);
#endif
}

int wstop__Documentation::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_wstop__Documentation(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_wstop__Documentation(struct soap *soap, const char *tag, int id, const wstop__Documentation *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_wstop__Documentation), "wstop:Documentation"))
		return soap->error;
	/* transient soap skipped */
	if (soap_out_std__vectorTemplateOf_XML(soap, "-any", -1, &(a->wstop__Documentation::__any), ""))
		return soap->error;
	soap_outliteral(soap, "-mixed", &(a->wstop__Documentation::__mixed), NULL);
	return soap_element_end_out(soap, tag);
}

void *wstop__Documentation::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_wstop__Documentation(soap, tag, this, type);
}

SOAP_FMAC3 wstop__Documentation * SOAP_FMAC4 soap_in_wstop__Documentation(struct soap *soap, const char *tag, wstop__Documentation *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (wstop__Documentation *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_wstop__Documentation, sizeof(wstop__Documentation), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_wstop__Documentation)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (wstop__Documentation *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag___item2 = 1;
	size_t soap_flag___mixed1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_std__vectorTemplateOf_XML(soap, "-any", &(a->wstop__Documentation::__any), ""))
					continue;
			if (soap_flag___mixed1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_inliteral(soap, "-mixed", &(a->wstop__Documentation::__mixed)))
				{	soap_flag___mixed1--;
					continue;
				}
			if (soap_flag___item2 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_inliteral(soap, "-item", &(a->xsd__anyType::__item)))
				{	soap_flag___item2--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (wstop__Documentation *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_wstop__Documentation, 0, sizeof(wstop__Documentation), 0, soap_copy_wstop__Documentation);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int wstop__Documentation::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	int id = soap_embed(soap, (void*)this, NULL, 0, SOAP_TYPE_wstop__Documentation);
	if (this->soap_out(soap, tag?tag:"wstop:Documentation", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *wstop__Documentation::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_wstop__Documentation(soap, this, tag, type);
}

SOAP_FMAC3 wstop__Documentation * SOAP_FMAC4 soap_get_wstop__Documentation(struct soap *soap, wstop__Documentation *p, const char *tag, const char *type)
{
	if ((p = soap_in_wstop__Documentation(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 wstop__Documentation * SOAP_FMAC2 soap_instantiate_wstop__Documentation(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_wstop__Documentation(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_wstop__Documentation, n, onvifevent_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = SOAP_NEW(wstop__Documentation);
		if (size)
			*size = sizeof(wstop__Documentation);
		((wstop__Documentation*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = SOAP_NEW_ARRAY(wstop__Documentation, n);
		if (size)
			*size = n * sizeof(wstop__Documentation);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((wstop__Documentation*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (wstop__Documentation*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_wstop__Documentation(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying wstop__Documentation %p -> %p\n", q, p));
	*(wstop__Documentation*)p = *(wstop__Documentation*)q;
}

void _wsnt__ResumeSubscriptionResponse::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_std__vectorTemplateOf_XML(soap, &this->_wsnt__ResumeSubscriptionResponse::__any);
	/* transient soap skipped */
}

void _wsnt__ResumeSubscriptionResponse::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_std__vectorTemplateOf_XML(soap, &this->_wsnt__ResumeSubscriptionResponse::__any);
	/* transient soap skipped */
#endif
}

int _wsnt__ResumeSubscriptionResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__wsnt__ResumeSubscriptionResponse(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__wsnt__ResumeSubscriptionResponse(struct soap *soap, const char *tag, int id, const _wsnt__ResumeSubscriptionResponse *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__wsnt__ResumeSubscriptionResponse), type))
		return soap->error;
	soap_element_result(soap, "-any");
	if (soap_out_std__vectorTemplateOf_XML(soap, "-any", -1, &(a->_wsnt__ResumeSubscriptionResponse::__any), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_wsnt__ResumeSubscriptionResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__wsnt__ResumeSubscriptionResponse(soap, tag, this, type);
}

SOAP_FMAC3 _wsnt__ResumeSubscriptionResponse * SOAP_FMAC4 soap_in__wsnt__ResumeSubscriptionResponse(struct soap *soap, const char *tag, _wsnt__ResumeSubscriptionResponse *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_wsnt__ResumeSubscriptionResponse *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__wsnt__ResumeSubscriptionResponse, sizeof(_wsnt__ResumeSubscriptionResponse), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__wsnt__ResumeSubscriptionResponse)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_wsnt__ResumeSubscriptionResponse *)a->soap_in(soap, tag, type);
		}
	}
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_std__vectorTemplateOf_XML(soap, "-any", &(a->_wsnt__ResumeSubscriptionResponse::__any), ""))
					continue;
			soap_check_result(soap, "-any");
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_wsnt__ResumeSubscriptionResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__wsnt__ResumeSubscriptionResponse, 0, sizeof(_wsnt__ResumeSubscriptionResponse), 0, soap_copy__wsnt__ResumeSubscriptionResponse);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int _wsnt__ResumeSubscriptionResponse::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	int id = soap_embed(soap, (void*)this, NULL, 0, SOAP_TYPE__wsnt__ResumeSubscriptionResponse);
	if (this->soap_out(soap, tag?tag:"wsnt:ResumeSubscriptionResponse", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_wsnt__ResumeSubscriptionResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__wsnt__ResumeSubscriptionResponse(soap, this, tag, type);
}

SOAP_FMAC3 _wsnt__ResumeSubscriptionResponse * SOAP_FMAC4 soap_get__wsnt__ResumeSubscriptionResponse(struct soap *soap, _wsnt__ResumeSubscriptionResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in__wsnt__ResumeSubscriptionResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _wsnt__ResumeSubscriptionResponse * SOAP_FMAC2 soap_instantiate__wsnt__ResumeSubscriptionResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__wsnt__ResumeSubscriptionResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__wsnt__ResumeSubscriptionResponse, n, onvifevent_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = SOAP_NEW(_wsnt__ResumeSubscriptionResponse);
		if (size)
			*size = sizeof(_wsnt__ResumeSubscriptionResponse);
		((_wsnt__ResumeSubscriptionResponse*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = SOAP_NEW_ARRAY(_wsnt__ResumeSubscriptionResponse, n);
		if (size)
			*size = n * sizeof(_wsnt__ResumeSubscriptionResponse);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((_wsnt__ResumeSubscriptionResponse*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (_wsnt__ResumeSubscriptionResponse*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__wsnt__ResumeSubscriptionResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _wsnt__ResumeSubscriptionResponse %p -> %p\n", q, p));
	*(_wsnt__ResumeSubscriptionResponse*)p = *(_wsnt__ResumeSubscriptionResponse*)q;
}

void _wsnt__ResumeSubscription::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_std__vectorTemplateOf_XML(soap, &this->_wsnt__ResumeSubscription::__any);
	/* transient soap skipped */
}

void _wsnt__ResumeSubscription::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_std__vectorTemplateOf_XML(soap, &this->_wsnt__ResumeSubscription::__any);
	/* transient soap skipped */
#endif
}

int _wsnt__ResumeSubscription::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__wsnt__ResumeSubscription(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__wsnt__ResumeSubscription(struct soap *soap, const char *tag, int id, const _wsnt__ResumeSubscription *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__wsnt__ResumeSubscription), type))
		return soap->error;
	if (soap_out_std__vectorTemplateOf_XML(soap, "-any", -1, &(a->_wsnt__ResumeSubscription::__any), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_wsnt__ResumeSubscription::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__wsnt__ResumeSubscription(soap, tag, this, type);
}

SOAP_FMAC3 _wsnt__ResumeSubscription * SOAP_FMAC4 soap_in__wsnt__ResumeSubscription(struct soap *soap, const char *tag, _wsnt__ResumeSubscription *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_wsnt__ResumeSubscription *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__wsnt__ResumeSubscription, sizeof(_wsnt__ResumeSubscription), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__wsnt__ResumeSubscription)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_wsnt__ResumeSubscription *)a->soap_in(soap, tag, type);
		}
	}
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_std__vectorTemplateOf_XML(soap, "-any", &(a->_wsnt__ResumeSubscription::__any), ""))
					continue;
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_wsnt__ResumeSubscription *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__wsnt__ResumeSubscription, 0, sizeof(_wsnt__ResumeSubscription), 0, soap_copy__wsnt__ResumeSubscription);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int _wsnt__ResumeSubscription::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	int id = soap_embed(soap, (void*)this, NULL, 0, SOAP_TYPE__wsnt__ResumeSubscription);
	if (this->soap_out(soap, tag?tag:"wsnt:ResumeSubscription", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_wsnt__ResumeSubscription::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__wsnt__ResumeSubscription(soap, this, tag, type);
}

SOAP_FMAC3 _wsnt__ResumeSubscription * SOAP_FMAC4 soap_get__wsnt__ResumeSubscription(struct soap *soap, _wsnt__ResumeSubscription *p, const char *tag, const char *type)
{
	if ((p = soap_in__wsnt__ResumeSubscription(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _wsnt__ResumeSubscription * SOAP_FMAC2 soap_instantiate__wsnt__ResumeSubscription(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__wsnt__ResumeSubscription(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__wsnt__ResumeSubscription, n, onvifevent_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = SOAP_NEW(_wsnt__ResumeSubscription);
		if (size)
			*size = sizeof(_wsnt__ResumeSubscription);
		((_wsnt__ResumeSubscription*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = SOAP_NEW_ARRAY(_wsnt__ResumeSubscription, n);
		if (size)
			*size = n * sizeof(_wsnt__ResumeSubscription);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((_wsnt__ResumeSubscription*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (_wsnt__ResumeSubscription*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__wsnt__ResumeSubscription(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _wsnt__ResumeSubscription %p -> %p\n", q, p));
	*(_wsnt__ResumeSubscription*)p = *(_wsnt__ResumeSubscription*)q;
}

void _wsnt__PauseSubscriptionResponse::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_std__vectorTemplateOf_XML(soap, &this->_wsnt__PauseSubscriptionResponse::__any);
	/* transient soap skipped */
}

void _wsnt__PauseSubscriptionResponse::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_std__vectorTemplateOf_XML(soap, &this->_wsnt__PauseSubscriptionResponse::__any);
	/* transient soap skipped */
#endif
}

int _wsnt__PauseSubscriptionResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__wsnt__PauseSubscriptionResponse(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__wsnt__PauseSubscriptionResponse(struct soap *soap, const char *tag, int id, const _wsnt__PauseSubscriptionResponse *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__wsnt__PauseSubscriptionResponse), type))
		return soap->error;
	soap_element_result(soap, "-any");
	if (soap_out_std__vectorTemplateOf_XML(soap, "-any", -1, &(a->_wsnt__PauseSubscriptionResponse::__any), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_wsnt__PauseSubscriptionResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__wsnt__PauseSubscriptionResponse(soap, tag, this, type);
}

SOAP_FMAC3 _wsnt__PauseSubscriptionResponse * SOAP_FMAC4 soap_in__wsnt__PauseSubscriptionResponse(struct soap *soap, const char *tag, _wsnt__PauseSubscriptionResponse *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_wsnt__PauseSubscriptionResponse *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__wsnt__PauseSubscriptionResponse, sizeof(_wsnt__PauseSubscriptionResponse), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__wsnt__PauseSubscriptionResponse)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_wsnt__PauseSubscriptionResponse *)a->soap_in(soap, tag, type);
		}
	}
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_std__vectorTemplateOf_XML(soap, "-any", &(a->_wsnt__PauseSubscriptionResponse::__any), ""))
					continue;
			soap_check_result(soap, "-any");
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_wsnt__PauseSubscriptionResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__wsnt__PauseSubscriptionResponse, 0, sizeof(_wsnt__PauseSubscriptionResponse), 0, soap_copy__wsnt__PauseSubscriptionResponse);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int _wsnt__PauseSubscriptionResponse::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	int id = soap_embed(soap, (void*)this, NULL, 0, SOAP_TYPE__wsnt__PauseSubscriptionResponse);
	if (this->soap_out(soap, tag?tag:"wsnt:PauseSubscriptionResponse", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_wsnt__PauseSubscriptionResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__wsnt__PauseSubscriptionResponse(soap, this, tag, type);
}

SOAP_FMAC3 _wsnt__PauseSubscriptionResponse * SOAP_FMAC4 soap_get__wsnt__PauseSubscriptionResponse(struct soap *soap, _wsnt__PauseSubscriptionResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in__wsnt__PauseSubscriptionResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _wsnt__PauseSubscriptionResponse * SOAP_FMAC2 soap_instantiate__wsnt__PauseSubscriptionResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__wsnt__PauseSubscriptionResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__wsnt__PauseSubscriptionResponse, n, onvifevent_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = SOAP_NEW(_wsnt__PauseSubscriptionResponse);
		if (size)
			*size = sizeof(_wsnt__PauseSubscriptionResponse);
		((_wsnt__PauseSubscriptionResponse*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = SOAP_NEW_ARRAY(_wsnt__PauseSubscriptionResponse, n);
		if (size)
			*size = n * sizeof(_wsnt__PauseSubscriptionResponse);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((_wsnt__PauseSubscriptionResponse*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (_wsnt__PauseSubscriptionResponse*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__wsnt__PauseSubscriptionResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _wsnt__PauseSubscriptionResponse %p -> %p\n", q, p));
	*(_wsnt__PauseSubscriptionResponse*)p = *(_wsnt__PauseSubscriptionResponse*)q;
}

void _wsnt__PauseSubscription::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_std__vectorTemplateOf_XML(soap, &this->_wsnt__PauseSubscription::__any);
	/* transient soap skipped */
}

void _wsnt__PauseSubscription::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_std__vectorTemplateOf_XML(soap, &this->_wsnt__PauseSubscription::__any);
	/* transient soap skipped */
#endif
}

int _wsnt__PauseSubscription::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__wsnt__PauseSubscription(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__wsnt__PauseSubscription(struct soap *soap, const char *tag, int id, const _wsnt__PauseSubscription *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__wsnt__PauseSubscription), type))
		return soap->error;
	if (soap_out_std__vectorTemplateOf_XML(soap, "-any", -1, &(a->_wsnt__PauseSubscription::__any), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_wsnt__PauseSubscription::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__wsnt__PauseSubscription(soap, tag, this, type);
}

SOAP_FMAC3 _wsnt__PauseSubscription * SOAP_FMAC4 soap_in__wsnt__PauseSubscription(struct soap *soap, const char *tag, _wsnt__PauseSubscription *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_wsnt__PauseSubscription *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__wsnt__PauseSubscription, sizeof(_wsnt__PauseSubscription), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__wsnt__PauseSubscription)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_wsnt__PauseSubscription *)a->soap_in(soap, tag, type);
		}
	}
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_std__vectorTemplateOf_XML(soap, "-any", &(a->_wsnt__PauseSubscription::__any), ""))
					continue;
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_wsnt__PauseSubscription *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__wsnt__PauseSubscription, 0, sizeof(_wsnt__PauseSubscription), 0, soap_copy__wsnt__PauseSubscription);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int _wsnt__PauseSubscription::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	int id = soap_embed(soap, (void*)this, NULL, 0, SOAP_TYPE__wsnt__PauseSubscription);
	if (this->soap_out(soap, tag?tag:"wsnt:PauseSubscription", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_wsnt__PauseSubscription::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__wsnt__PauseSubscription(soap, this, tag, type);
}

SOAP_FMAC3 _wsnt__PauseSubscription * SOAP_FMAC4 soap_get__wsnt__PauseSubscription(struct soap *soap, _wsnt__PauseSubscription *p, const char *tag, const char *type)
{
	if ((p = soap_in__wsnt__PauseSubscription(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _wsnt__PauseSubscription * SOAP_FMAC2 soap_instantiate__wsnt__PauseSubscription(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__wsnt__PauseSubscription(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__wsnt__PauseSubscription, n, onvifevent_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = SOAP_NEW(_wsnt__PauseSubscription);
		if (size)
			*size = sizeof(_wsnt__PauseSubscription);
		((_wsnt__PauseSubscription*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = SOAP_NEW_ARRAY(_wsnt__PauseSubscription, n);
		if (size)
			*size = n * sizeof(_wsnt__PauseSubscription);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((_wsnt__PauseSubscription*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (_wsnt__PauseSubscription*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__wsnt__PauseSubscription(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _wsnt__PauseSubscription %p -> %p\n", q, p));
	*(_wsnt__PauseSubscription*)p = *(_wsnt__PauseSubscription*)q;
}

void _wsnt__UnsubscribeResponse::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_std__vectorTemplateOf_XML(soap, &this->_wsnt__UnsubscribeResponse::__any);
	/* transient soap skipped */
}

void _wsnt__UnsubscribeResponse::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_std__vectorTemplateOf_XML(soap, &this->_wsnt__UnsubscribeResponse::__any);
	/* transient soap skipped */
#endif
}

int _wsnt__UnsubscribeResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__wsnt__UnsubscribeResponse(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__wsnt__UnsubscribeResponse(struct soap *soap, const char *tag, int id, const _wsnt__UnsubscribeResponse *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__wsnt__UnsubscribeResponse), type))
		return soap->error;
	soap_element_result(soap, "-any");
	if (soap_out_std__vectorTemplateOf_XML(soap, "-any", -1, &(a->_wsnt__UnsubscribeResponse::__any), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_wsnt__UnsubscribeResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__wsnt__UnsubscribeResponse(soap, tag, this, type);
}

SOAP_FMAC3 _wsnt__UnsubscribeResponse * SOAP_FMAC4 soap_in__wsnt__UnsubscribeResponse(struct soap *soap, const char *tag, _wsnt__UnsubscribeResponse *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_wsnt__UnsubscribeResponse *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__wsnt__UnsubscribeResponse, sizeof(_wsnt__UnsubscribeResponse), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__wsnt__UnsubscribeResponse)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_wsnt__UnsubscribeResponse *)a->soap_in(soap, tag, type);
		}
	}
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_std__vectorTemplateOf_XML(soap, "-any", &(a->_wsnt__UnsubscribeResponse::__any), ""))
					continue;
			soap_check_result(soap, "-any");
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_wsnt__UnsubscribeResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__wsnt__UnsubscribeResponse, 0, sizeof(_wsnt__UnsubscribeResponse), 0, soap_copy__wsnt__UnsubscribeResponse);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int _wsnt__UnsubscribeResponse::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	int id = soap_embed(soap, (void*)this, NULL, 0, SOAP_TYPE__wsnt__UnsubscribeResponse);
	if (this->soap_out(soap, tag?tag:"wsnt:UnsubscribeResponse", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_wsnt__UnsubscribeResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__wsnt__UnsubscribeResponse(soap, this, tag, type);
}

SOAP_FMAC3 _wsnt__UnsubscribeResponse * SOAP_FMAC4 soap_get__wsnt__UnsubscribeResponse(struct soap *soap, _wsnt__UnsubscribeResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in__wsnt__UnsubscribeResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _wsnt__UnsubscribeResponse * SOAP_FMAC2 soap_instantiate__wsnt__UnsubscribeResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__wsnt__UnsubscribeResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__wsnt__UnsubscribeResponse, n, onvifevent_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = SOAP_NEW(_wsnt__UnsubscribeResponse);
		if (size)
			*size = sizeof(_wsnt__UnsubscribeResponse);
		((_wsnt__UnsubscribeResponse*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = SOAP_NEW_ARRAY(_wsnt__UnsubscribeResponse, n);
		if (size)
			*size = n * sizeof(_wsnt__UnsubscribeResponse);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((_wsnt__UnsubscribeResponse*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (_wsnt__UnsubscribeResponse*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__wsnt__UnsubscribeResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _wsnt__UnsubscribeResponse %p -> %p\n", q, p));
	*(_wsnt__UnsubscribeResponse*)p = *(_wsnt__UnsubscribeResponse*)q;
}

void _wsnt__Unsubscribe::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_std__vectorTemplateOf_XML(soap, &this->_wsnt__Unsubscribe::__any);
	/* transient soap skipped */
}

void _wsnt__Unsubscribe::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_std__vectorTemplateOf_XML(soap, &this->_wsnt__Unsubscribe::__any);
	/* transient soap skipped */
#endif
}

int _wsnt__Unsubscribe::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__wsnt__Unsubscribe(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__wsnt__Unsubscribe(struct soap *soap, const char *tag, int id, const _wsnt__Unsubscribe *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__wsnt__Unsubscribe), type))
		return soap->error;
	if (soap_out_std__vectorTemplateOf_XML(soap, "-any", -1, &(a->_wsnt__Unsubscribe::__any), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_wsnt__Unsubscribe::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__wsnt__Unsubscribe(soap, tag, this, type);
}

SOAP_FMAC3 _wsnt__Unsubscribe * SOAP_FMAC4 soap_in__wsnt__Unsubscribe(struct soap *soap, const char *tag, _wsnt__Unsubscribe *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_wsnt__Unsubscribe *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__wsnt__Unsubscribe, sizeof(_wsnt__Unsubscribe), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__wsnt__Unsubscribe)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_wsnt__Unsubscribe *)a->soap_in(soap, tag, type);
		}
	}
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_std__vectorTemplateOf_XML(soap, "-any", &(a->_wsnt__Unsubscribe::__any), ""))
					continue;
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_wsnt__Unsubscribe *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__wsnt__Unsubscribe, 0, sizeof(_wsnt__Unsubscribe), 0, soap_copy__wsnt__Unsubscribe);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int _wsnt__Unsubscribe::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	int id = soap_embed(soap, (void*)this, NULL, 0, SOAP_TYPE__wsnt__Unsubscribe);
	if (this->soap_out(soap, tag?tag:"wsnt:Unsubscribe", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_wsnt__Unsubscribe::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__wsnt__Unsubscribe(soap, this, tag, type);
}

SOAP_FMAC3 _wsnt__Unsubscribe * SOAP_FMAC4 soap_get__wsnt__Unsubscribe(struct soap *soap, _wsnt__Unsubscribe *p, const char *tag, const char *type)
{
	if ((p = soap_in__wsnt__Unsubscribe(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _wsnt__Unsubscribe * SOAP_FMAC2 soap_instantiate__wsnt__Unsubscribe(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__wsnt__Unsubscribe(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__wsnt__Unsubscribe, n, onvifevent_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = SOAP_NEW(_wsnt__Unsubscribe);
		if (size)
			*size = sizeof(_wsnt__Unsubscribe);
		((_wsnt__Unsubscribe*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = SOAP_NEW_ARRAY(_wsnt__Unsubscribe, n);
		if (size)
			*size = n * sizeof(_wsnt__Unsubscribe);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((_wsnt__Unsubscribe*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (_wsnt__Unsubscribe*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__wsnt__Unsubscribe(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _wsnt__Unsubscribe %p -> %p\n", q, p));
	*(_wsnt__Unsubscribe*)p = *(_wsnt__Unsubscribe*)q;
}

void _wsnt__RenewResponse::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_time(soap, &this->_wsnt__RenewResponse::TerminationTime);
	this->_wsnt__RenewResponse::CurrentTime = NULL;
	soap_default_std__vectorTemplateOf_XML(soap, &this->_wsnt__RenewResponse::__any);
	/* transient soap skipped */
}

void _wsnt__RenewResponse::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_embedded(soap, &this->_wsnt__RenewResponse::TerminationTime, SOAP_TYPE_time);
	soap_serialize_PointerTotime(soap, &this->_wsnt__RenewResponse::CurrentTime);
	soap_serialize_std__vectorTemplateOf_XML(soap, &this->_wsnt__RenewResponse::__any);
	/* transient soap skipped */
#endif
}

int _wsnt__RenewResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__wsnt__RenewResponse(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__wsnt__RenewResponse(struct soap *soap, const char *tag, int id, const _wsnt__RenewResponse *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__wsnt__RenewResponse), type))
		return soap->error;
	soap_element_result(soap, "wsnt:TerminationTime");
	if (soap_out_time(soap, "wsnt:TerminationTime", -1, &(a->_wsnt__RenewResponse::TerminationTime), ""))
		return soap->error;
	if (soap_out_PointerTotime(soap, "wsnt:CurrentTime", -1, &(a->_wsnt__RenewResponse::CurrentTime), ""))
		return soap->error;
	if (soap_out_std__vectorTemplateOf_XML(soap, "-any", -1, &(a->_wsnt__RenewResponse::__any), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_wsnt__RenewResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__wsnt__RenewResponse(soap, tag, this, type);
}

SOAP_FMAC3 _wsnt__RenewResponse * SOAP_FMAC4 soap_in__wsnt__RenewResponse(struct soap *soap, const char *tag, _wsnt__RenewResponse *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_wsnt__RenewResponse *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__wsnt__RenewResponse, sizeof(_wsnt__RenewResponse), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__wsnt__RenewResponse)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_wsnt__RenewResponse *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_TerminationTime1 = 1;
	size_t soap_flag_CurrentTime1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_TerminationTime1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_time(soap, "wsnt:TerminationTime", &(a->_wsnt__RenewResponse::TerminationTime), "xsd:dateTime"))
				{	soap_flag_TerminationTime1--;
					continue;
				}
			if (soap_flag_CurrentTime1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTotime(soap, "wsnt:CurrentTime", &(a->_wsnt__RenewResponse::CurrentTime), "xsd:dateTime"))
				{	soap_flag_CurrentTime1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_std__vectorTemplateOf_XML(soap, "-any", &(a->_wsnt__RenewResponse::__any), ""))
					continue;
			soap_check_result(soap, "wsnt:TerminationTime");
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_wsnt__RenewResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__wsnt__RenewResponse, 0, sizeof(_wsnt__RenewResponse), 0, soap_copy__wsnt__RenewResponse);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_TerminationTime1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int _wsnt__RenewResponse::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	int id = soap_embed(soap, (void*)this, NULL, 0, SOAP_TYPE__wsnt__RenewResponse);
	if (this->soap_out(soap, tag?tag:"wsnt:RenewResponse", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_wsnt__RenewResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__wsnt__RenewResponse(soap, this, tag, type);
}

SOAP_FMAC3 _wsnt__RenewResponse * SOAP_FMAC4 soap_get__wsnt__RenewResponse(struct soap *soap, _wsnt__RenewResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in__wsnt__RenewResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _wsnt__RenewResponse * SOAP_FMAC2 soap_instantiate__wsnt__RenewResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__wsnt__RenewResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__wsnt__RenewResponse, n, onvifevent_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = SOAP_NEW(_wsnt__RenewResponse);
		if (size)
			*size = sizeof(_wsnt__RenewResponse);
		((_wsnt__RenewResponse*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = SOAP_NEW_ARRAY(_wsnt__RenewResponse, n);
		if (size)
			*size = n * sizeof(_wsnt__RenewResponse);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((_wsnt__RenewResponse*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (_wsnt__RenewResponse*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__wsnt__RenewResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _wsnt__RenewResponse %p -> %p\n", q, p));
	*(_wsnt__RenewResponse*)p = *(_wsnt__RenewResponse*)q;
}

void _wsnt__Renew::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->_wsnt__Renew::TerminationTime = NULL;
	soap_default_std__vectorTemplateOf_XML(soap, &this->_wsnt__Renew::__any);
	/* transient soap skipped */
}

void _wsnt__Renew::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTowsnt__AbsoluteOrRelativeTimeType(soap, &this->_wsnt__Renew::TerminationTime);
	soap_serialize_std__vectorTemplateOf_XML(soap, &this->_wsnt__Renew::__any);
	/* transient soap skipped */
#endif
}

int _wsnt__Renew::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__wsnt__Renew(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__wsnt__Renew(struct soap *soap, const char *tag, int id, const _wsnt__Renew *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__wsnt__Renew), type))
		return soap->error;
	if (a->_wsnt__Renew::TerminationTime)
	{	if (soap_out_PointerTowsnt__AbsoluteOrRelativeTimeType(soap, "wsnt:TerminationTime", -1, &a->_wsnt__Renew::TerminationTime, ""))
			return soap->error;
	}
	else if (soap_element_nil(soap, "wsnt:TerminationTime"))
		return soap->error;
	if (soap_out_std__vectorTemplateOf_XML(soap, "-any", -1, &(a->_wsnt__Renew::__any), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_wsnt__Renew::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__wsnt__Renew(soap, tag, this, type);
}

SOAP_FMAC3 _wsnt__Renew * SOAP_FMAC4 soap_in__wsnt__Renew(struct soap *soap, const char *tag, _wsnt__Renew *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_wsnt__Renew *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__wsnt__Renew, sizeof(_wsnt__Renew), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__wsnt__Renew)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_wsnt__Renew *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_TerminationTime1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_TerminationTime1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTowsnt__AbsoluteOrRelativeTimeType(soap, "wsnt:TerminationTime", &(a->_wsnt__Renew::TerminationTime), "wsnt:AbsoluteOrRelativeTimeType"))
				{	soap_flag_TerminationTime1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_std__vectorTemplateOf_XML(soap, "-any", &(a->_wsnt__Renew::__any), ""))
					continue;
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_wsnt__Renew *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__wsnt__Renew, 0, sizeof(_wsnt__Renew), 0, soap_copy__wsnt__Renew);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_TerminationTime1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int _wsnt__Renew::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	int id = soap_embed(soap, (void*)this, NULL, 0, SOAP_TYPE__wsnt__Renew);
	if (this->soap_out(soap, tag?tag:"wsnt:Renew", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_wsnt__Renew::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__wsnt__Renew(soap, this, tag, type);
}

SOAP_FMAC3 _wsnt__Renew * SOAP_FMAC4 soap_get__wsnt__Renew(struct soap *soap, _wsnt__Renew *p, const char *tag, const char *type)
{
	if ((p = soap_in__wsnt__Renew(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _wsnt__Renew * SOAP_FMAC2 soap_instantiate__wsnt__Renew(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__wsnt__Renew(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__wsnt__Renew, n, onvifevent_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = SOAP_NEW(_wsnt__Renew);
		if (size)
			*size = sizeof(_wsnt__Renew);
		((_wsnt__Renew*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = SOAP_NEW_ARRAY(_wsnt__Renew, n);
		if (size)
			*size = n * sizeof(_wsnt__Renew);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((_wsnt__Renew*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (_wsnt__Renew*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__wsnt__Renew(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _wsnt__Renew %p -> %p\n", q, p));
	*(_wsnt__Renew*)p = *(_wsnt__Renew*)q;
}

void _wsnt__CreatePullPointResponse::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_wsa5__EndpointReferenceType(soap, &this->_wsnt__CreatePullPointResponse::PullPoint);
	soap_default_std__vectorTemplateOf_XML(soap, &this->_wsnt__CreatePullPointResponse::__any);
	this->_wsnt__CreatePullPointResponse::__anyAttribute = NULL;
	/* transient soap skipped */
}

void _wsnt__CreatePullPointResponse::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_embedded(soap, &this->_wsnt__CreatePullPointResponse::PullPoint, SOAP_TYPE_wsa5__EndpointReferenceType);
	soap_serialize_wsa5__EndpointReferenceType(soap, &this->_wsnt__CreatePullPointResponse::PullPoint);
	soap_serialize_std__vectorTemplateOf_XML(soap, &this->_wsnt__CreatePullPointResponse::__any);
	/* transient soap skipped */
#endif
}

int _wsnt__CreatePullPointResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__wsnt__CreatePullPointResponse(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__wsnt__CreatePullPointResponse(struct soap *soap, const char *tag, int id, const _wsnt__CreatePullPointResponse *a, const char *type)
{
	if (((_wsnt__CreatePullPointResponse*)a)->__anyAttribute)
		soap_set_attr(soap, "-anyAttribute", ((_wsnt__CreatePullPointResponse*)a)->__anyAttribute, 1);
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__wsnt__CreatePullPointResponse), type))
		return soap->error;
	soap_element_result(soap, "wsnt:PullPoint");
	if (soap_out_wsa5__EndpointReferenceType(soap, "wsnt:PullPoint", -1, &(a->_wsnt__CreatePullPointResponse::PullPoint), ""))
		return soap->error;
	if (soap_out_std__vectorTemplateOf_XML(soap, "-any", -1, &(a->_wsnt__CreatePullPointResponse::__any), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_wsnt__CreatePullPointResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__wsnt__CreatePullPointResponse(soap, tag, this, type);
}

SOAP_FMAC3 _wsnt__CreatePullPointResponse * SOAP_FMAC4 soap_in__wsnt__CreatePullPointResponse(struct soap *soap, const char *tag, _wsnt__CreatePullPointResponse *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_wsnt__CreatePullPointResponse *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__wsnt__CreatePullPointResponse, sizeof(_wsnt__CreatePullPointResponse), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__wsnt__CreatePullPointResponse)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_wsnt__CreatePullPointResponse *)a->soap_in(soap, tag, type);
		}
	}
	if (soap_s2string(soap, soap_attr_value(soap, "-anyAttribute", 0), &((_wsnt__CreatePullPointResponse*)a)->__anyAttribute, 0, -1))
		return NULL;
	size_t soap_flag_PullPoint1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_PullPoint1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_wsa5__EndpointReferenceType(soap, "wsnt:PullPoint", &(a->_wsnt__CreatePullPointResponse::PullPoint), "wsa5:EndpointReferenceType"))
				{	soap_flag_PullPoint1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_std__vectorTemplateOf_XML(soap, "-any", &(a->_wsnt__CreatePullPointResponse::__any), ""))
					continue;
			soap_check_result(soap, "wsnt:PullPoint");
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_wsnt__CreatePullPointResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__wsnt__CreatePullPointResponse, 0, sizeof(_wsnt__CreatePullPointResponse), 0, soap_copy__wsnt__CreatePullPointResponse);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_PullPoint1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int _wsnt__CreatePullPointResponse::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	int id = soap_embed(soap, (void*)this, NULL, 0, SOAP_TYPE__wsnt__CreatePullPointResponse);
	if (this->soap_out(soap, tag?tag:"wsnt:CreatePullPointResponse", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_wsnt__CreatePullPointResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__wsnt__CreatePullPointResponse(soap, this, tag, type);
}

SOAP_FMAC3 _wsnt__CreatePullPointResponse * SOAP_FMAC4 soap_get__wsnt__CreatePullPointResponse(struct soap *soap, _wsnt__CreatePullPointResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in__wsnt__CreatePullPointResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _wsnt__CreatePullPointResponse * SOAP_FMAC2 soap_instantiate__wsnt__CreatePullPointResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__wsnt__CreatePullPointResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__wsnt__CreatePullPointResponse, n, onvifevent_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = SOAP_NEW(_wsnt__CreatePullPointResponse);
		if (size)
			*size = sizeof(_wsnt__CreatePullPointResponse);
		((_wsnt__CreatePullPointResponse*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = SOAP_NEW_ARRAY(_wsnt__CreatePullPointResponse, n);
		if (size)
			*size = n * sizeof(_wsnt__CreatePullPointResponse);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((_wsnt__CreatePullPointResponse*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (_wsnt__CreatePullPointResponse*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__wsnt__CreatePullPointResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _wsnt__CreatePullPointResponse %p -> %p\n", q, p));
	*(_wsnt__CreatePullPointResponse*)p = *(_wsnt__CreatePullPointResponse*)q;
}

void _wsnt__CreatePullPoint::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_std__vectorTemplateOf_XML(soap, &this->_wsnt__CreatePullPoint::__any);
	this->_wsnt__CreatePullPoint::__anyAttribute = NULL;
	/* transient soap skipped */
}

void _wsnt__CreatePullPoint::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_std__vectorTemplateOf_XML(soap, &this->_wsnt__CreatePullPoint::__any);
	/* transient soap skipped */
#endif
}

int _wsnt__CreatePullPoint::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__wsnt__CreatePullPoint(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__wsnt__CreatePullPoint(struct soap *soap, const char *tag, int id, const _wsnt__CreatePullPoint *a, const char *type)
{
	if (((_wsnt__CreatePullPoint*)a)->__anyAttribute)
		soap_set_attr(soap, "-anyAttribute", ((_wsnt__CreatePullPoint*)a)->__anyAttribute, 1);
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__wsnt__CreatePullPoint), type))
		return soap->error;
	if (soap_out_std__vectorTemplateOf_XML(soap, "-any", -1, &(a->_wsnt__CreatePullPoint::__any), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_wsnt__CreatePullPoint::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__wsnt__CreatePullPoint(soap, tag, this, type);
}

SOAP_FMAC3 _wsnt__CreatePullPoint * SOAP_FMAC4 soap_in__wsnt__CreatePullPoint(struct soap *soap, const char *tag, _wsnt__CreatePullPoint *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_wsnt__CreatePullPoint *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__wsnt__CreatePullPoint, sizeof(_wsnt__CreatePullPoint), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__wsnt__CreatePullPoint)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_wsnt__CreatePullPoint *)a->soap_in(soap, tag, type);
		}
	}
	if (soap_s2string(soap, soap_attr_value(soap, "-anyAttribute", 0), &((_wsnt__CreatePullPoint*)a)->__anyAttribute, 0, -1))
		return NULL;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_std__vectorTemplateOf_XML(soap, "-any", &(a->_wsnt__CreatePullPoint::__any), ""))
					continue;
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_wsnt__CreatePullPoint *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__wsnt__CreatePullPoint, 0, sizeof(_wsnt__CreatePullPoint), 0, soap_copy__wsnt__CreatePullPoint);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int _wsnt__CreatePullPoint::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	int id = soap_embed(soap, (void*)this, NULL, 0, SOAP_TYPE__wsnt__CreatePullPoint);
	if (this->soap_out(soap, tag?tag:"wsnt:CreatePullPoint", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_wsnt__CreatePullPoint::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__wsnt__CreatePullPoint(soap, this, tag, type);
}

SOAP_FMAC3 _wsnt__CreatePullPoint * SOAP_FMAC4 soap_get__wsnt__CreatePullPoint(struct soap *soap, _wsnt__CreatePullPoint *p, const char *tag, const char *type)
{
	if ((p = soap_in__wsnt__CreatePullPoint(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _wsnt__CreatePullPoint * SOAP_FMAC2 soap_instantiate__wsnt__CreatePullPoint(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__wsnt__CreatePullPoint(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__wsnt__CreatePullPoint, n, onvifevent_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = SOAP_NEW(_wsnt__CreatePullPoint);
		if (size)
			*size = sizeof(_wsnt__CreatePullPoint);
		((_wsnt__CreatePullPoint*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = SOAP_NEW_ARRAY(_wsnt__CreatePullPoint, n);
		if (size)
			*size = n * sizeof(_wsnt__CreatePullPoint);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((_wsnt__CreatePullPoint*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (_wsnt__CreatePullPoint*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__wsnt__CreatePullPoint(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _wsnt__CreatePullPoint %p -> %p\n", q, p));
	*(_wsnt__CreatePullPoint*)p = *(_wsnt__CreatePullPoint*)q;
}

void _wsnt__DestroyPullPointResponse::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_std__vectorTemplateOf_XML(soap, &this->_wsnt__DestroyPullPointResponse::__any);
	this->_wsnt__DestroyPullPointResponse::__anyAttribute = NULL;
	/* transient soap skipped */
}

void _wsnt__DestroyPullPointResponse::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_std__vectorTemplateOf_XML(soap, &this->_wsnt__DestroyPullPointResponse::__any);
	/* transient soap skipped */
#endif
}

int _wsnt__DestroyPullPointResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__wsnt__DestroyPullPointResponse(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__wsnt__DestroyPullPointResponse(struct soap *soap, const char *tag, int id, const _wsnt__DestroyPullPointResponse *a, const char *type)
{
	if (((_wsnt__DestroyPullPointResponse*)a)->__anyAttribute)
		soap_set_attr(soap, "-anyAttribute", ((_wsnt__DestroyPullPointResponse*)a)->__anyAttribute, 1);
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__wsnt__DestroyPullPointResponse), type))
		return soap->error;
	soap_element_result(soap, "-any");
	if (soap_out_std__vectorTemplateOf_XML(soap, "-any", -1, &(a->_wsnt__DestroyPullPointResponse::__any), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_wsnt__DestroyPullPointResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__wsnt__DestroyPullPointResponse(soap, tag, this, type);
}

SOAP_FMAC3 _wsnt__DestroyPullPointResponse * SOAP_FMAC4 soap_in__wsnt__DestroyPullPointResponse(struct soap *soap, const char *tag, _wsnt__DestroyPullPointResponse *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_wsnt__DestroyPullPointResponse *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__wsnt__DestroyPullPointResponse, sizeof(_wsnt__DestroyPullPointResponse), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__wsnt__DestroyPullPointResponse)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_wsnt__DestroyPullPointResponse *)a->soap_in(soap, tag, type);
		}
	}
	if (soap_s2string(soap, soap_attr_value(soap, "-anyAttribute", 0), &((_wsnt__DestroyPullPointResponse*)a)->__anyAttribute, 0, -1))
		return NULL;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_std__vectorTemplateOf_XML(soap, "-any", &(a->_wsnt__DestroyPullPointResponse::__any), ""))
					continue;
			soap_check_result(soap, "-any");
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_wsnt__DestroyPullPointResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__wsnt__DestroyPullPointResponse, 0, sizeof(_wsnt__DestroyPullPointResponse), 0, soap_copy__wsnt__DestroyPullPointResponse);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int _wsnt__DestroyPullPointResponse::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	int id = soap_embed(soap, (void*)this, NULL, 0, SOAP_TYPE__wsnt__DestroyPullPointResponse);
	if (this->soap_out(soap, tag?tag:"wsnt:DestroyPullPointResponse", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_wsnt__DestroyPullPointResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__wsnt__DestroyPullPointResponse(soap, this, tag, type);
}

SOAP_FMAC3 _wsnt__DestroyPullPointResponse * SOAP_FMAC4 soap_get__wsnt__DestroyPullPointResponse(struct soap *soap, _wsnt__DestroyPullPointResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in__wsnt__DestroyPullPointResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _wsnt__DestroyPullPointResponse * SOAP_FMAC2 soap_instantiate__wsnt__DestroyPullPointResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__wsnt__DestroyPullPointResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__wsnt__DestroyPullPointResponse, n, onvifevent_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = SOAP_NEW(_wsnt__DestroyPullPointResponse);
		if (size)
			*size = sizeof(_wsnt__DestroyPullPointResponse);
		((_wsnt__DestroyPullPointResponse*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = SOAP_NEW_ARRAY(_wsnt__DestroyPullPointResponse, n);
		if (size)
			*size = n * sizeof(_wsnt__DestroyPullPointResponse);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((_wsnt__DestroyPullPointResponse*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (_wsnt__DestroyPullPointResponse*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__wsnt__DestroyPullPointResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _wsnt__DestroyPullPointResponse %p -> %p\n", q, p));
	*(_wsnt__DestroyPullPointResponse*)p = *(_wsnt__DestroyPullPointResponse*)q;
}

void _wsnt__DestroyPullPoint::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_std__vectorTemplateOf_XML(soap, &this->_wsnt__DestroyPullPoint::__any);
	this->_wsnt__DestroyPullPoint::__anyAttribute = NULL;
	/* transient soap skipped */
}

void _wsnt__DestroyPullPoint::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_std__vectorTemplateOf_XML(soap, &this->_wsnt__DestroyPullPoint::__any);
	/* transient soap skipped */
#endif
}

int _wsnt__DestroyPullPoint::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__wsnt__DestroyPullPoint(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__wsnt__DestroyPullPoint(struct soap *soap, const char *tag, int id, const _wsnt__DestroyPullPoint *a, const char *type)
{
	if (((_wsnt__DestroyPullPoint*)a)->__anyAttribute)
		soap_set_attr(soap, "-anyAttribute", ((_wsnt__DestroyPullPoint*)a)->__anyAttribute, 1);
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__wsnt__DestroyPullPoint), type))
		return soap->error;
	if (soap_out_std__vectorTemplateOf_XML(soap, "-any", -1, &(a->_wsnt__DestroyPullPoint::__any), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_wsnt__DestroyPullPoint::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__wsnt__DestroyPullPoint(soap, tag, this, type);
}

SOAP_FMAC3 _wsnt__DestroyPullPoint * SOAP_FMAC4 soap_in__wsnt__DestroyPullPoint(struct soap *soap, const char *tag, _wsnt__DestroyPullPoint *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_wsnt__DestroyPullPoint *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__wsnt__DestroyPullPoint, sizeof(_wsnt__DestroyPullPoint), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__wsnt__DestroyPullPoint)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_wsnt__DestroyPullPoint *)a->soap_in(soap, tag, type);
		}
	}
	if (soap_s2string(soap, soap_attr_value(soap, "-anyAttribute", 0), &((_wsnt__DestroyPullPoint*)a)->__anyAttribute, 0, -1))
		return NULL;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_std__vectorTemplateOf_XML(soap, "-any", &(a->_wsnt__DestroyPullPoint::__any), ""))
					continue;
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_wsnt__DestroyPullPoint *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__wsnt__DestroyPullPoint, 0, sizeof(_wsnt__DestroyPullPoint), 0, soap_copy__wsnt__DestroyPullPoint);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int _wsnt__DestroyPullPoint::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	int id = soap_embed(soap, (void*)this, NULL, 0, SOAP_TYPE__wsnt__DestroyPullPoint);
	if (this->soap_out(soap, tag?tag:"wsnt:DestroyPullPoint", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_wsnt__DestroyPullPoint::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__wsnt__DestroyPullPoint(soap, this, tag, type);
}

SOAP_FMAC3 _wsnt__DestroyPullPoint * SOAP_FMAC4 soap_get__wsnt__DestroyPullPoint(struct soap *soap, _wsnt__DestroyPullPoint *p, const char *tag, const char *type)
{
	if ((p = soap_in__wsnt__DestroyPullPoint(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _wsnt__DestroyPullPoint * SOAP_FMAC2 soap_instantiate__wsnt__DestroyPullPoint(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__wsnt__DestroyPullPoint(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__wsnt__DestroyPullPoint, n, onvifevent_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = SOAP_NEW(_wsnt__DestroyPullPoint);
		if (size)
			*size = sizeof(_wsnt__DestroyPullPoint);
		((_wsnt__DestroyPullPoint*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = SOAP_NEW_ARRAY(_wsnt__DestroyPullPoint, n);
		if (size)
			*size = n * sizeof(_wsnt__DestroyPullPoint);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((_wsnt__DestroyPullPoint*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (_wsnt__DestroyPullPoint*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__wsnt__DestroyPullPoint(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _wsnt__DestroyPullPoint %p -> %p\n", q, p));
	*(_wsnt__DestroyPullPoint*)p = *(_wsnt__DestroyPullPoint*)q;
}

void _wsnt__GetMessagesResponse::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_std__vectorTemplateOfPointerTowsnt__NotificationMessageHolderType(soap, &this->_wsnt__GetMessagesResponse::NotificationMessage);
	soap_default_std__vectorTemplateOf_XML(soap, &this->_wsnt__GetMessagesResponse::__any);
	this->_wsnt__GetMessagesResponse::__anyAttribute = NULL;
	/* transient soap skipped */
}

void _wsnt__GetMessagesResponse::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_std__vectorTemplateOfPointerTowsnt__NotificationMessageHolderType(soap, &this->_wsnt__GetMessagesResponse::NotificationMessage);
	soap_serialize_std__vectorTemplateOf_XML(soap, &this->_wsnt__GetMessagesResponse::__any);
	/* transient soap skipped */
#endif
}

int _wsnt__GetMessagesResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__wsnt__GetMessagesResponse(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__wsnt__GetMessagesResponse(struct soap *soap, const char *tag, int id, const _wsnt__GetMessagesResponse *a, const char *type)
{
	if (((_wsnt__GetMessagesResponse*)a)->__anyAttribute)
		soap_set_attr(soap, "-anyAttribute", ((_wsnt__GetMessagesResponse*)a)->__anyAttribute, 1);
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__wsnt__GetMessagesResponse), type))
		return soap->error;
	soap_element_result(soap, "wsnt:NotificationMessage");
	if (soap_out_std__vectorTemplateOfPointerTowsnt__NotificationMessageHolderType(soap, "wsnt:NotificationMessage", -1, &(a->_wsnt__GetMessagesResponse::NotificationMessage), ""))
		return soap->error;
	if (soap_out_std__vectorTemplateOf_XML(soap, "-any", -1, &(a->_wsnt__GetMessagesResponse::__any), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_wsnt__GetMessagesResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__wsnt__GetMessagesResponse(soap, tag, this, type);
}

SOAP_FMAC3 _wsnt__GetMessagesResponse * SOAP_FMAC4 soap_in__wsnt__GetMessagesResponse(struct soap *soap, const char *tag, _wsnt__GetMessagesResponse *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_wsnt__GetMessagesResponse *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__wsnt__GetMessagesResponse, sizeof(_wsnt__GetMessagesResponse), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__wsnt__GetMessagesResponse)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_wsnt__GetMessagesResponse *)a->soap_in(soap, tag, type);
		}
	}
	if (soap_s2string(soap, soap_attr_value(soap, "-anyAttribute", 0), &((_wsnt__GetMessagesResponse*)a)->__anyAttribute, 0, -1))
		return NULL;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_std__vectorTemplateOfPointerTowsnt__NotificationMessageHolderType(soap, "wsnt:NotificationMessage", &(a->_wsnt__GetMessagesResponse::NotificationMessage), "wsnt:NotificationMessageHolderType"))
					continue;
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_std__vectorTemplateOf_XML(soap, "-any", &(a->_wsnt__GetMessagesResponse::__any), ""))
					continue;
			soap_check_result(soap, "wsnt:NotificationMessage");
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_wsnt__GetMessagesResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__wsnt__GetMessagesResponse, 0, sizeof(_wsnt__GetMessagesResponse), 0, soap_copy__wsnt__GetMessagesResponse);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int _wsnt__GetMessagesResponse::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	int id = soap_embed(soap, (void*)this, NULL, 0, SOAP_TYPE__wsnt__GetMessagesResponse);
	if (this->soap_out(soap, tag?tag:"wsnt:GetMessagesResponse", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_wsnt__GetMessagesResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__wsnt__GetMessagesResponse(soap, this, tag, type);
}

SOAP_FMAC3 _wsnt__GetMessagesResponse * SOAP_FMAC4 soap_get__wsnt__GetMessagesResponse(struct soap *soap, _wsnt__GetMessagesResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in__wsnt__GetMessagesResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _wsnt__GetMessagesResponse * SOAP_FMAC2 soap_instantiate__wsnt__GetMessagesResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__wsnt__GetMessagesResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__wsnt__GetMessagesResponse, n, onvifevent_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = SOAP_NEW(_wsnt__GetMessagesResponse);
		if (size)
			*size = sizeof(_wsnt__GetMessagesResponse);
		((_wsnt__GetMessagesResponse*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = SOAP_NEW_ARRAY(_wsnt__GetMessagesResponse, n);
		if (size)
			*size = n * sizeof(_wsnt__GetMessagesResponse);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((_wsnt__GetMessagesResponse*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (_wsnt__GetMessagesResponse*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__wsnt__GetMessagesResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _wsnt__GetMessagesResponse %p -> %p\n", q, p));
	*(_wsnt__GetMessagesResponse*)p = *(_wsnt__GetMessagesResponse*)q;
}

void _wsnt__GetMessages::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->_wsnt__GetMessages::MaximumNumber = NULL;
	soap_default_std__vectorTemplateOf_XML(soap, &this->_wsnt__GetMessages::__any);
	this->_wsnt__GetMessages::__anyAttribute = NULL;
	/* transient soap skipped */
}

void _wsnt__GetMessages::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerToxsd__nonNegativeInteger(soap, &this->_wsnt__GetMessages::MaximumNumber);
	soap_serialize_std__vectorTemplateOf_XML(soap, &this->_wsnt__GetMessages::__any);
	/* transient soap skipped */
#endif
}

int _wsnt__GetMessages::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__wsnt__GetMessages(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__wsnt__GetMessages(struct soap *soap, const char *tag, int id, const _wsnt__GetMessages *a, const char *type)
{
	if (((_wsnt__GetMessages*)a)->__anyAttribute)
		soap_set_attr(soap, "-anyAttribute", ((_wsnt__GetMessages*)a)->__anyAttribute, 1);
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__wsnt__GetMessages), type))
		return soap->error;
	if (soap_out_PointerToxsd__nonNegativeInteger(soap, "wsnt:MaximumNumber", -1, &(a->_wsnt__GetMessages::MaximumNumber), ""))
		return soap->error;
	if (soap_out_std__vectorTemplateOf_XML(soap, "-any", -1, &(a->_wsnt__GetMessages::__any), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_wsnt__GetMessages::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__wsnt__GetMessages(soap, tag, this, type);
}

SOAP_FMAC3 _wsnt__GetMessages * SOAP_FMAC4 soap_in__wsnt__GetMessages(struct soap *soap, const char *tag, _wsnt__GetMessages *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_wsnt__GetMessages *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__wsnt__GetMessages, sizeof(_wsnt__GetMessages), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__wsnt__GetMessages)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_wsnt__GetMessages *)a->soap_in(soap, tag, type);
		}
	}
	if (soap_s2string(soap, soap_attr_value(soap, "-anyAttribute", 0), &((_wsnt__GetMessages*)a)->__anyAttribute, 0, -1))
		return NULL;
	size_t soap_flag_MaximumNumber1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_MaximumNumber1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerToxsd__nonNegativeInteger(soap, "wsnt:MaximumNumber", &(a->_wsnt__GetMessages::MaximumNumber), "xsd:nonNegativeInteger"))
				{	soap_flag_MaximumNumber1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_std__vectorTemplateOf_XML(soap, "-any", &(a->_wsnt__GetMessages::__any), ""))
					continue;
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_wsnt__GetMessages *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__wsnt__GetMessages, 0, sizeof(_wsnt__GetMessages), 0, soap_copy__wsnt__GetMessages);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int _wsnt__GetMessages::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	int id = soap_embed(soap, (void*)this, NULL, 0, SOAP_TYPE__wsnt__GetMessages);
	if (this->soap_out(soap, tag?tag:"wsnt:GetMessages", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_wsnt__GetMessages::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__wsnt__GetMessages(soap, this, tag, type);
}

SOAP_FMAC3 _wsnt__GetMessages * SOAP_FMAC4 soap_get__wsnt__GetMessages(struct soap *soap, _wsnt__GetMessages *p, const char *tag, const char *type)
{
	if ((p = soap_in__wsnt__GetMessages(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _wsnt__GetMessages * SOAP_FMAC2 soap_instantiate__wsnt__GetMessages(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__wsnt__GetMessages(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__wsnt__GetMessages, n, onvifevent_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = SOAP_NEW(_wsnt__GetMessages);
		if (size)
			*size = sizeof(_wsnt__GetMessages);
		((_wsnt__GetMessages*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = SOAP_NEW_ARRAY(_wsnt__GetMessages, n);
		if (size)
			*size = n * sizeof(_wsnt__GetMessages);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((_wsnt__GetMessages*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (_wsnt__GetMessages*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__wsnt__GetMessages(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _wsnt__GetMessages %p -> %p\n", q, p));
	*(_wsnt__GetMessages*)p = *(_wsnt__GetMessages*)q;
}

void _wsnt__GetCurrentMessageResponse::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_std__vectorTemplateOf_XML(soap, &this->_wsnt__GetCurrentMessageResponse::__any);
	/* transient soap skipped */
}

void _wsnt__GetCurrentMessageResponse::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_std__vectorTemplateOf_XML(soap, &this->_wsnt__GetCurrentMessageResponse::__any);
	/* transient soap skipped */
#endif
}

int _wsnt__GetCurrentMessageResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__wsnt__GetCurrentMessageResponse(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__wsnt__GetCurrentMessageResponse(struct soap *soap, const char *tag, int id, const _wsnt__GetCurrentMessageResponse *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__wsnt__GetCurrentMessageResponse), type))
		return soap->error;
	soap_element_result(soap, "-any");
	if (soap_out_std__vectorTemplateOf_XML(soap, "-any", -1, &(a->_wsnt__GetCurrentMessageResponse::__any), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_wsnt__GetCurrentMessageResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__wsnt__GetCurrentMessageResponse(soap, tag, this, type);
}

SOAP_FMAC3 _wsnt__GetCurrentMessageResponse * SOAP_FMAC4 soap_in__wsnt__GetCurrentMessageResponse(struct soap *soap, const char *tag, _wsnt__GetCurrentMessageResponse *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_wsnt__GetCurrentMessageResponse *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__wsnt__GetCurrentMessageResponse, sizeof(_wsnt__GetCurrentMessageResponse), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__wsnt__GetCurrentMessageResponse)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_wsnt__GetCurrentMessageResponse *)a->soap_in(soap, tag, type);
		}
	}
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_std__vectorTemplateOf_XML(soap, "-any", &(a->_wsnt__GetCurrentMessageResponse::__any), ""))
					continue;
			soap_check_result(soap, "-any");
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_wsnt__GetCurrentMessageResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__wsnt__GetCurrentMessageResponse, 0, sizeof(_wsnt__GetCurrentMessageResponse), 0, soap_copy__wsnt__GetCurrentMessageResponse);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int _wsnt__GetCurrentMessageResponse::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	int id = soap_embed(soap, (void*)this, NULL, 0, SOAP_TYPE__wsnt__GetCurrentMessageResponse);
	if (this->soap_out(soap, tag?tag:"wsnt:GetCurrentMessageResponse", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_wsnt__GetCurrentMessageResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__wsnt__GetCurrentMessageResponse(soap, this, tag, type);
}

SOAP_FMAC3 _wsnt__GetCurrentMessageResponse * SOAP_FMAC4 soap_get__wsnt__GetCurrentMessageResponse(struct soap *soap, _wsnt__GetCurrentMessageResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in__wsnt__GetCurrentMessageResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _wsnt__GetCurrentMessageResponse * SOAP_FMAC2 soap_instantiate__wsnt__GetCurrentMessageResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__wsnt__GetCurrentMessageResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__wsnt__GetCurrentMessageResponse, n, onvifevent_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = SOAP_NEW(_wsnt__GetCurrentMessageResponse);
		if (size)
			*size = sizeof(_wsnt__GetCurrentMessageResponse);
		((_wsnt__GetCurrentMessageResponse*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = SOAP_NEW_ARRAY(_wsnt__GetCurrentMessageResponse, n);
		if (size)
			*size = n * sizeof(_wsnt__GetCurrentMessageResponse);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((_wsnt__GetCurrentMessageResponse*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (_wsnt__GetCurrentMessageResponse*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__wsnt__GetCurrentMessageResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _wsnt__GetCurrentMessageResponse %p -> %p\n", q, p));
	*(_wsnt__GetCurrentMessageResponse*)p = *(_wsnt__GetCurrentMessageResponse*)q;
}

void _wsnt__GetCurrentMessage::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->_wsnt__GetCurrentMessage::Topic = NULL;
	soap_default_std__vectorTemplateOf_XML(soap, &this->_wsnt__GetCurrentMessage::__any);
	/* transient soap skipped */
}

void _wsnt__GetCurrentMessage::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTowsnt__TopicExpressionType(soap, &this->_wsnt__GetCurrentMessage::Topic);
	soap_serialize_std__vectorTemplateOf_XML(soap, &this->_wsnt__GetCurrentMessage::__any);
	/* transient soap skipped */
#endif
}

int _wsnt__GetCurrentMessage::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__wsnt__GetCurrentMessage(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__wsnt__GetCurrentMessage(struct soap *soap, const char *tag, int id, const _wsnt__GetCurrentMessage *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__wsnt__GetCurrentMessage), type))
		return soap->error;
	if (a->_wsnt__GetCurrentMessage::Topic)
	{	if (soap_out_PointerTowsnt__TopicExpressionType(soap, "wsnt:Topic", -1, &a->_wsnt__GetCurrentMessage::Topic, ""))
			return soap->error;
	}
	else if (soap_element_nil(soap, "wsnt:Topic"))
		return soap->error;
	if (soap_out_std__vectorTemplateOf_XML(soap, "-any", -1, &(a->_wsnt__GetCurrentMessage::__any), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_wsnt__GetCurrentMessage::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__wsnt__GetCurrentMessage(soap, tag, this, type);
}

SOAP_FMAC3 _wsnt__GetCurrentMessage * SOAP_FMAC4 soap_in__wsnt__GetCurrentMessage(struct soap *soap, const char *tag, _wsnt__GetCurrentMessage *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_wsnt__GetCurrentMessage *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__wsnt__GetCurrentMessage, sizeof(_wsnt__GetCurrentMessage), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__wsnt__GetCurrentMessage)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_wsnt__GetCurrentMessage *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_Topic1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_Topic1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTowsnt__TopicExpressionType(soap, "wsnt:Topic", &(a->_wsnt__GetCurrentMessage::Topic), "wsnt:TopicExpressionType"))
				{	soap_flag_Topic1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_std__vectorTemplateOf_XML(soap, "-any", &(a->_wsnt__GetCurrentMessage::__any), ""))
					continue;
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_wsnt__GetCurrentMessage *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__wsnt__GetCurrentMessage, 0, sizeof(_wsnt__GetCurrentMessage), 0, soap_copy__wsnt__GetCurrentMessage);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_Topic1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int _wsnt__GetCurrentMessage::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	int id = soap_embed(soap, (void*)this, NULL, 0, SOAP_TYPE__wsnt__GetCurrentMessage);
	if (this->soap_out(soap, tag?tag:"wsnt:GetCurrentMessage", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_wsnt__GetCurrentMessage::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__wsnt__GetCurrentMessage(soap, this, tag, type);
}

SOAP_FMAC3 _wsnt__GetCurrentMessage * SOAP_FMAC4 soap_get__wsnt__GetCurrentMessage(struct soap *soap, _wsnt__GetCurrentMessage *p, const char *tag, const char *type)
{
	if ((p = soap_in__wsnt__GetCurrentMessage(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _wsnt__GetCurrentMessage * SOAP_FMAC2 soap_instantiate__wsnt__GetCurrentMessage(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__wsnt__GetCurrentMessage(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__wsnt__GetCurrentMessage, n, onvifevent_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = SOAP_NEW(_wsnt__GetCurrentMessage);
		if (size)
			*size = sizeof(_wsnt__GetCurrentMessage);
		((_wsnt__GetCurrentMessage*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = SOAP_NEW_ARRAY(_wsnt__GetCurrentMessage, n);
		if (size)
			*size = n * sizeof(_wsnt__GetCurrentMessage);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((_wsnt__GetCurrentMessage*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (_wsnt__GetCurrentMessage*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__wsnt__GetCurrentMessage(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _wsnt__GetCurrentMessage %p -> %p\n", q, p));
	*(_wsnt__GetCurrentMessage*)p = *(_wsnt__GetCurrentMessage*)q;
}

void _wsnt__SubscribeResponse::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_wsa5__EndpointReferenceType(soap, &this->_wsnt__SubscribeResponse::SubscriptionReference);
	this->_wsnt__SubscribeResponse::CurrentTime = NULL;
	this->_wsnt__SubscribeResponse::TerminationTime = NULL;
	soap_default_std__vectorTemplateOf_XML(soap, &this->_wsnt__SubscribeResponse::__any);
	/* transient soap skipped */
}

void _wsnt__SubscribeResponse::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_embedded(soap, &this->_wsnt__SubscribeResponse::SubscriptionReference, SOAP_TYPE_wsa5__EndpointReferenceType);
	soap_serialize_wsa5__EndpointReferenceType(soap, &this->_wsnt__SubscribeResponse::SubscriptionReference);
	soap_serialize_PointerTotime(soap, &this->_wsnt__SubscribeResponse::CurrentTime);
	soap_serialize_PointerTotime(soap, &this->_wsnt__SubscribeResponse::TerminationTime);
	soap_serialize_std__vectorTemplateOf_XML(soap, &this->_wsnt__SubscribeResponse::__any);
	/* transient soap skipped */
#endif
}

int _wsnt__SubscribeResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__wsnt__SubscribeResponse(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__wsnt__SubscribeResponse(struct soap *soap, const char *tag, int id, const _wsnt__SubscribeResponse *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__wsnt__SubscribeResponse), type))
		return soap->error;
	soap_element_result(soap, "wsnt:SubscriptionReference");
	if (soap_out_wsa5__EndpointReferenceType(soap, "wsnt:SubscriptionReference", -1, &(a->_wsnt__SubscribeResponse::SubscriptionReference), ""))
		return soap->error;
	if (soap_out_PointerTotime(soap, "wsnt:CurrentTime", -1, &(a->_wsnt__SubscribeResponse::CurrentTime), ""))
		return soap->error;
	if (soap_out_PointerTotime(soap, "wsnt:TerminationTime", -1, &(a->_wsnt__SubscribeResponse::TerminationTime), ""))
		return soap->error;
	if (soap_out_std__vectorTemplateOf_XML(soap, "-any", -1, &(a->_wsnt__SubscribeResponse::__any), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_wsnt__SubscribeResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__wsnt__SubscribeResponse(soap, tag, this, type);
}

SOAP_FMAC3 _wsnt__SubscribeResponse * SOAP_FMAC4 soap_in__wsnt__SubscribeResponse(struct soap *soap, const char *tag, _wsnt__SubscribeResponse *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_wsnt__SubscribeResponse *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__wsnt__SubscribeResponse, sizeof(_wsnt__SubscribeResponse), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__wsnt__SubscribeResponse)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_wsnt__SubscribeResponse *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_SubscriptionReference1 = 1;
	size_t soap_flag_CurrentTime1 = 1;
	size_t soap_flag_TerminationTime1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_SubscriptionReference1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_wsa5__EndpointReferenceType(soap, "wsnt:SubscriptionReference", &(a->_wsnt__SubscribeResponse::SubscriptionReference), "wsa5:EndpointReferenceType"))
				{	soap_flag_SubscriptionReference1--;
					continue;
				}
			if (soap_flag_CurrentTime1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTotime(soap, "wsnt:CurrentTime", &(a->_wsnt__SubscribeResponse::CurrentTime), "xsd:dateTime"))
				{	soap_flag_CurrentTime1--;
					continue;
				}
			if (soap_flag_TerminationTime1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTotime(soap, "wsnt:TerminationTime", &(a->_wsnt__SubscribeResponse::TerminationTime), "xsd:dateTime"))
				{	soap_flag_TerminationTime1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_std__vectorTemplateOf_XML(soap, "-any", &(a->_wsnt__SubscribeResponse::__any), ""))
					continue;
			soap_check_result(soap, "wsnt:SubscriptionReference");
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_wsnt__SubscribeResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__wsnt__SubscribeResponse, 0, sizeof(_wsnt__SubscribeResponse), 0, soap_copy__wsnt__SubscribeResponse);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_SubscriptionReference1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int _wsnt__SubscribeResponse::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	int id = soap_embed(soap, (void*)this, NULL, 0, SOAP_TYPE__wsnt__SubscribeResponse);
	if (this->soap_out(soap, tag?tag:"wsnt:SubscribeResponse", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_wsnt__SubscribeResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__wsnt__SubscribeResponse(soap, this, tag, type);
}

SOAP_FMAC3 _wsnt__SubscribeResponse * SOAP_FMAC4 soap_get__wsnt__SubscribeResponse(struct soap *soap, _wsnt__SubscribeResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in__wsnt__SubscribeResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _wsnt__SubscribeResponse * SOAP_FMAC2 soap_instantiate__wsnt__SubscribeResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__wsnt__SubscribeResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__wsnt__SubscribeResponse, n, onvifevent_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = SOAP_NEW(_wsnt__SubscribeResponse);
		if (size)
			*size = sizeof(_wsnt__SubscribeResponse);
		((_wsnt__SubscribeResponse*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = SOAP_NEW_ARRAY(_wsnt__SubscribeResponse, n);
		if (size)
			*size = n * sizeof(_wsnt__SubscribeResponse);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((_wsnt__SubscribeResponse*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (_wsnt__SubscribeResponse*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__wsnt__SubscribeResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _wsnt__SubscribeResponse %p -> %p\n", q, p));
	*(_wsnt__SubscribeResponse*)p = *(_wsnt__SubscribeResponse*)q;
}

void _wsnt__Subscribe::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_wsa5__EndpointReferenceType(soap, &this->_wsnt__Subscribe::ConsumerReference);
	this->_wsnt__Subscribe::Filter = NULL;
	this->_wsnt__Subscribe::InitialTerminationTime = NULL;
	this->_wsnt__Subscribe::SubscriptionPolicy = NULL;
	soap_default_std__vectorTemplateOf_XML(soap, &this->_wsnt__Subscribe::__any);
	/* transient soap skipped */
}

void _wsnt__Subscribe::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_embedded(soap, &this->_wsnt__Subscribe::ConsumerReference, SOAP_TYPE_wsa5__EndpointReferenceType);
	soap_serialize_wsa5__EndpointReferenceType(soap, &this->_wsnt__Subscribe::ConsumerReference);
	soap_serialize_PointerTowsnt__FilterType(soap, &this->_wsnt__Subscribe::Filter);
	soap_serialize_PointerTowsnt__AbsoluteOrRelativeTimeType(soap, &this->_wsnt__Subscribe::InitialTerminationTime);
	soap_serialize_PointerTo_wsnt__Subscribe_SubscriptionPolicy(soap, &this->_wsnt__Subscribe::SubscriptionPolicy);
	soap_serialize_std__vectorTemplateOf_XML(soap, &this->_wsnt__Subscribe::__any);
	/* transient soap skipped */
#endif
}

int _wsnt__Subscribe::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__wsnt__Subscribe(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__wsnt__Subscribe(struct soap *soap, const char *tag, int id, const _wsnt__Subscribe *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__wsnt__Subscribe), type))
		return soap->error;
	if (soap_out_wsa5__EndpointReferenceType(soap, "wsnt:ConsumerReference", -1, &(a->_wsnt__Subscribe::ConsumerReference), ""))
		return soap->error;
	if (soap_out_PointerTowsnt__FilterType(soap, "wsnt:Filter", -1, &(a->_wsnt__Subscribe::Filter), ""))
		return soap->error;
	if (soap_out_PointerTowsnt__AbsoluteOrRelativeTimeType(soap, "wsnt:InitialTerminationTime", -1, &(a->_wsnt__Subscribe::InitialTerminationTime), ""))
		return soap->error;
	if (soap_out_PointerTo_wsnt__Subscribe_SubscriptionPolicy(soap, "wsnt:SubscriptionPolicy", -1, &(a->_wsnt__Subscribe::SubscriptionPolicy), ""))
		return soap->error;
	if (soap_out_std__vectorTemplateOf_XML(soap, "-any", -1, &(a->_wsnt__Subscribe::__any), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_wsnt__Subscribe::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__wsnt__Subscribe(soap, tag, this, type);
}

SOAP_FMAC3 _wsnt__Subscribe * SOAP_FMAC4 soap_in__wsnt__Subscribe(struct soap *soap, const char *tag, _wsnt__Subscribe *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_wsnt__Subscribe *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__wsnt__Subscribe, sizeof(_wsnt__Subscribe), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__wsnt__Subscribe)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_wsnt__Subscribe *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_ConsumerReference1 = 1;
	size_t soap_flag_Filter1 = 1;
	size_t soap_flag_InitialTerminationTime1 = 1;
	size_t soap_flag_SubscriptionPolicy1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ConsumerReference1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_wsa5__EndpointReferenceType(soap, "wsnt:ConsumerReference", &(a->_wsnt__Subscribe::ConsumerReference), "wsa5:EndpointReferenceType"))
				{	soap_flag_ConsumerReference1--;
					continue;
				}
			if (soap_flag_Filter1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTowsnt__FilterType(soap, "wsnt:Filter", &(a->_wsnt__Subscribe::Filter), "wsnt:FilterType"))
				{	soap_flag_Filter1--;
					continue;
				}
			if (soap_flag_InitialTerminationTime1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTowsnt__AbsoluteOrRelativeTimeType(soap, "wsnt:InitialTerminationTime", &(a->_wsnt__Subscribe::InitialTerminationTime), "wsnt:AbsoluteOrRelativeTimeType"))
				{	soap_flag_InitialTerminationTime1--;
					continue;
				}
			if (soap_flag_SubscriptionPolicy1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_wsnt__Subscribe_SubscriptionPolicy(soap, "wsnt:SubscriptionPolicy", &(a->_wsnt__Subscribe::SubscriptionPolicy), ""))
				{	soap_flag_SubscriptionPolicy1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_std__vectorTemplateOf_XML(soap, "-any", &(a->_wsnt__Subscribe::__any), ""))
					continue;
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_wsnt__Subscribe *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__wsnt__Subscribe, 0, sizeof(_wsnt__Subscribe), 0, soap_copy__wsnt__Subscribe);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_ConsumerReference1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int _wsnt__Subscribe::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	int id = soap_embed(soap, (void*)this, NULL, 0, SOAP_TYPE__wsnt__Subscribe);
	if (this->soap_out(soap, tag?tag:"wsnt:Subscribe", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_wsnt__Subscribe::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__wsnt__Subscribe(soap, this, tag, type);
}

SOAP_FMAC3 _wsnt__Subscribe * SOAP_FMAC4 soap_get__wsnt__Subscribe(struct soap *soap, _wsnt__Subscribe *p, const char *tag, const char *type)
{
	if ((p = soap_in__wsnt__Subscribe(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _wsnt__Subscribe * SOAP_FMAC2 soap_instantiate__wsnt__Subscribe(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__wsnt__Subscribe(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__wsnt__Subscribe, n, onvifevent_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = SOAP_NEW(_wsnt__Subscribe);
		if (size)
			*size = sizeof(_wsnt__Subscribe);
		((_wsnt__Subscribe*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = SOAP_NEW_ARRAY(_wsnt__Subscribe, n);
		if (size)
			*size = n * sizeof(_wsnt__Subscribe);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((_wsnt__Subscribe*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (_wsnt__Subscribe*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__wsnt__Subscribe(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _wsnt__Subscribe %p -> %p\n", q, p));
	*(_wsnt__Subscribe*)p = *(_wsnt__Subscribe*)q;
}

void _wsnt__UseRaw::soap_default(struct soap *soap)
{
	this->soap = soap;
	/* transient soap skipped */
}

void _wsnt__UseRaw::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	/* transient soap skipped */
#endif
}

int _wsnt__UseRaw::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__wsnt__UseRaw(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__wsnt__UseRaw(struct soap *soap, const char *tag, int id, const _wsnt__UseRaw *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__wsnt__UseRaw), type))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_wsnt__UseRaw::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__wsnt__UseRaw(soap, tag, this, type);
}

SOAP_FMAC3 _wsnt__UseRaw * SOAP_FMAC4 soap_in__wsnt__UseRaw(struct soap *soap, const char *tag, _wsnt__UseRaw *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_wsnt__UseRaw *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__wsnt__UseRaw, sizeof(_wsnt__UseRaw), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__wsnt__UseRaw)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_wsnt__UseRaw *)a->soap_in(soap, tag, type);
		}
	}
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_wsnt__UseRaw *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__wsnt__UseRaw, 0, sizeof(_wsnt__UseRaw), 0, soap_copy__wsnt__UseRaw);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int _wsnt__UseRaw::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	int id = soap_embed(soap, (void*)this, NULL, 0, SOAP_TYPE__wsnt__UseRaw);
	if (this->soap_out(soap, tag?tag:"wsnt:UseRaw", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_wsnt__UseRaw::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__wsnt__UseRaw(soap, this, tag, type);
}

SOAP_FMAC3 _wsnt__UseRaw * SOAP_FMAC4 soap_get__wsnt__UseRaw(struct soap *soap, _wsnt__UseRaw *p, const char *tag, const char *type)
{
	if ((p = soap_in__wsnt__UseRaw(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _wsnt__UseRaw * SOAP_FMAC2 soap_instantiate__wsnt__UseRaw(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__wsnt__UseRaw(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__wsnt__UseRaw, n, onvifevent_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = SOAP_NEW(_wsnt__UseRaw);
		if (size)
			*size = sizeof(_wsnt__UseRaw);
		((_wsnt__UseRaw*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = SOAP_NEW_ARRAY(_wsnt__UseRaw, n);
		if (size)
			*size = n * sizeof(_wsnt__UseRaw);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((_wsnt__UseRaw*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (_wsnt__UseRaw*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__wsnt__UseRaw(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _wsnt__UseRaw %p -> %p\n", q, p));
	*(_wsnt__UseRaw*)p = *(_wsnt__UseRaw*)q;
}

void _wsnt__Notify::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_std__vectorTemplateOfPointerTowsnt__NotificationMessageHolderType(soap, &this->_wsnt__Notify::NotificationMessage);
	soap_default_std__vectorTemplateOf_XML(soap, &this->_wsnt__Notify::__any);
	/* transient soap skipped */
}

void _wsnt__Notify::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_std__vectorTemplateOfPointerTowsnt__NotificationMessageHolderType(soap, &this->_wsnt__Notify::NotificationMessage);
	soap_serialize_std__vectorTemplateOf_XML(soap, &this->_wsnt__Notify::__any);
	/* transient soap skipped */
#endif
}

int _wsnt__Notify::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__wsnt__Notify(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__wsnt__Notify(struct soap *soap, const char *tag, int id, const _wsnt__Notify *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__wsnt__Notify), type))
		return soap->error;
	if (soap_out_std__vectorTemplateOfPointerTowsnt__NotificationMessageHolderType(soap, "wsnt:NotificationMessage", -1, &(a->_wsnt__Notify::NotificationMessage), ""))
		return soap->error;
	if (soap_out_std__vectorTemplateOf_XML(soap, "-any", -1, &(a->_wsnt__Notify::__any), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_wsnt__Notify::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__wsnt__Notify(soap, tag, this, type);
}

SOAP_FMAC3 _wsnt__Notify * SOAP_FMAC4 soap_in__wsnt__Notify(struct soap *soap, const char *tag, _wsnt__Notify *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_wsnt__Notify *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__wsnt__Notify, sizeof(_wsnt__Notify), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__wsnt__Notify)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_wsnt__Notify *)a->soap_in(soap, tag, type);
		}
	}
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_std__vectorTemplateOfPointerTowsnt__NotificationMessageHolderType(soap, "wsnt:NotificationMessage", &(a->_wsnt__Notify::NotificationMessage), "wsnt:NotificationMessageHolderType"))
					continue;
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_std__vectorTemplateOf_XML(soap, "-any", &(a->_wsnt__Notify::__any), ""))
					continue;
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_wsnt__Notify *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__wsnt__Notify, 0, sizeof(_wsnt__Notify), 0, soap_copy__wsnt__Notify);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (a->_wsnt__Notify::NotificationMessage.size() < 1))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int _wsnt__Notify::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	int id = soap_embed(soap, (void*)this, NULL, 0, SOAP_TYPE__wsnt__Notify);
	if (this->soap_out(soap, tag?tag:"wsnt:Notify", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_wsnt__Notify::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__wsnt__Notify(soap, this, tag, type);
}

SOAP_FMAC3 _wsnt__Notify * SOAP_FMAC4 soap_get__wsnt__Notify(struct soap *soap, _wsnt__Notify *p, const char *tag, const char *type)
{
	if ((p = soap_in__wsnt__Notify(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _wsnt__Notify * SOAP_FMAC2 soap_instantiate__wsnt__Notify(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__wsnt__Notify(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__wsnt__Notify, n, onvifevent_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = SOAP_NEW(_wsnt__Notify);
		if (size)
			*size = sizeof(_wsnt__Notify);
		((_wsnt__Notify*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = SOAP_NEW_ARRAY(_wsnt__Notify, n);
		if (size)
			*size = n * sizeof(_wsnt__Notify);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((_wsnt__Notify*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (_wsnt__Notify*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__wsnt__Notify(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _wsnt__Notify %p -> %p\n", q, p));
	*(_wsnt__Notify*)p = *(_wsnt__Notify*)q;
}

void _wsnt__SubscriptionManagerRP::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_wsa5__EndpointReferenceType(soap, &this->_wsnt__SubscriptionManagerRP::ConsumerReference);
	this->_wsnt__SubscriptionManagerRP::Filter = NULL;
	this->_wsnt__SubscriptionManagerRP::SubscriptionPolicy = NULL;
	this->_wsnt__SubscriptionManagerRP::CreationTime = NULL;
	/* transient soap skipped */
}

void _wsnt__SubscriptionManagerRP::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_embedded(soap, &this->_wsnt__SubscriptionManagerRP::ConsumerReference, SOAP_TYPE_wsa5__EndpointReferenceType);
	soap_serialize_wsa5__EndpointReferenceType(soap, &this->_wsnt__SubscriptionManagerRP::ConsumerReference);
	soap_serialize_PointerTowsnt__FilterType(soap, &this->_wsnt__SubscriptionManagerRP::Filter);
	soap_serialize_PointerTowsnt__SubscriptionPolicyType(soap, &this->_wsnt__SubscriptionManagerRP::SubscriptionPolicy);
	soap_serialize_PointerTotime(soap, &this->_wsnt__SubscriptionManagerRP::CreationTime);
	/* transient soap skipped */
#endif
}

int _wsnt__SubscriptionManagerRP::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__wsnt__SubscriptionManagerRP(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__wsnt__SubscriptionManagerRP(struct soap *soap, const char *tag, int id, const _wsnt__SubscriptionManagerRP *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__wsnt__SubscriptionManagerRP), type))
		return soap->error;
	if (soap_out_wsa5__EndpointReferenceType(soap, "wsnt:ConsumerReference", -1, &(a->_wsnt__SubscriptionManagerRP::ConsumerReference), ""))
		return soap->error;
	if (soap_out_PointerTowsnt__FilterType(soap, "wsnt:Filter", -1, &(a->_wsnt__SubscriptionManagerRP::Filter), ""))
		return soap->error;
	if (soap_out_PointerTowsnt__SubscriptionPolicyType(soap, "wsnt:SubscriptionPolicy", -1, &(a->_wsnt__SubscriptionManagerRP::SubscriptionPolicy), ""))
		return soap->error;
	if (soap_out_PointerTotime(soap, "wsnt:CreationTime", -1, &(a->_wsnt__SubscriptionManagerRP::CreationTime), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_wsnt__SubscriptionManagerRP::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__wsnt__SubscriptionManagerRP(soap, tag, this, type);
}

SOAP_FMAC3 _wsnt__SubscriptionManagerRP * SOAP_FMAC4 soap_in__wsnt__SubscriptionManagerRP(struct soap *soap, const char *tag, _wsnt__SubscriptionManagerRP *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_wsnt__SubscriptionManagerRP *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__wsnt__SubscriptionManagerRP, sizeof(_wsnt__SubscriptionManagerRP), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__wsnt__SubscriptionManagerRP)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_wsnt__SubscriptionManagerRP *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_ConsumerReference1 = 1;
	size_t soap_flag_Filter1 = 1;
	size_t soap_flag_SubscriptionPolicy1 = 1;
	size_t soap_flag_CreationTime1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ConsumerReference1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_wsa5__EndpointReferenceType(soap, "wsnt:ConsumerReference", &(a->_wsnt__SubscriptionManagerRP::ConsumerReference), "wsa5:EndpointReferenceType"))
				{	soap_flag_ConsumerReference1--;
					continue;
				}
			if (soap_flag_Filter1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTowsnt__FilterType(soap, "wsnt:Filter", &(a->_wsnt__SubscriptionManagerRP::Filter), "wsnt:FilterType"))
				{	soap_flag_Filter1--;
					continue;
				}
			if (soap_flag_SubscriptionPolicy1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTowsnt__SubscriptionPolicyType(soap, "wsnt:SubscriptionPolicy", &(a->_wsnt__SubscriptionManagerRP::SubscriptionPolicy), "wsnt:SubscriptionPolicyType"))
				{	soap_flag_SubscriptionPolicy1--;
					continue;
				}
			if (soap_flag_CreationTime1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTotime(soap, "wsnt:CreationTime", &(a->_wsnt__SubscriptionManagerRP::CreationTime), "xsd:dateTime"))
				{	soap_flag_CreationTime1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_wsnt__SubscriptionManagerRP *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__wsnt__SubscriptionManagerRP, 0, sizeof(_wsnt__SubscriptionManagerRP), 0, soap_copy__wsnt__SubscriptionManagerRP);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_ConsumerReference1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int _wsnt__SubscriptionManagerRP::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	int id = soap_embed(soap, (void*)this, NULL, 0, SOAP_TYPE__wsnt__SubscriptionManagerRP);
	if (this->soap_out(soap, tag?tag:"wsnt:SubscriptionManagerRP", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_wsnt__SubscriptionManagerRP::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__wsnt__SubscriptionManagerRP(soap, this, tag, type);
}

SOAP_FMAC3 _wsnt__SubscriptionManagerRP * SOAP_FMAC4 soap_get__wsnt__SubscriptionManagerRP(struct soap *soap, _wsnt__SubscriptionManagerRP *p, const char *tag, const char *type)
{
	if ((p = soap_in__wsnt__SubscriptionManagerRP(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _wsnt__SubscriptionManagerRP * SOAP_FMAC2 soap_instantiate__wsnt__SubscriptionManagerRP(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__wsnt__SubscriptionManagerRP(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__wsnt__SubscriptionManagerRP, n, onvifevent_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = SOAP_NEW(_wsnt__SubscriptionManagerRP);
		if (size)
			*size = sizeof(_wsnt__SubscriptionManagerRP);
		((_wsnt__SubscriptionManagerRP*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = SOAP_NEW_ARRAY(_wsnt__SubscriptionManagerRP, n);
		if (size)
			*size = n * sizeof(_wsnt__SubscriptionManagerRP);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((_wsnt__SubscriptionManagerRP*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (_wsnt__SubscriptionManagerRP*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__wsnt__SubscriptionManagerRP(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _wsnt__SubscriptionManagerRP %p -> %p\n", q, p));
	*(_wsnt__SubscriptionManagerRP*)p = *(_wsnt__SubscriptionManagerRP*)q;
}

void _wsnt__NotificationProducerRP::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_std__vectorTemplateOfPointerTowsnt__TopicExpressionType(soap, &this->_wsnt__NotificationProducerRP::TopicExpression);
	this->_wsnt__NotificationProducerRP::FixedTopicSet = NULL;
	soap_default_std__vectorTemplateOfxsd__anyURI(soap, &this->_wsnt__NotificationProducerRP::TopicExpressionDialect);
	this->_wsnt__NotificationProducerRP::wstop__TopicSet = NULL;
	/* transient soap skipped */
}

void _wsnt__NotificationProducerRP::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_std__vectorTemplateOfPointerTowsnt__TopicExpressionType(soap, &this->_wsnt__NotificationProducerRP::TopicExpression);
	soap_serialize_PointerTobool(soap, &this->_wsnt__NotificationProducerRP::FixedTopicSet);
	soap_serialize_std__vectorTemplateOfxsd__anyURI(soap, &this->_wsnt__NotificationProducerRP::TopicExpressionDialect);
	soap_serialize_PointerTowstop__TopicSetType(soap, &this->_wsnt__NotificationProducerRP::wstop__TopicSet);
	/* transient soap skipped */
#endif
}

int _wsnt__NotificationProducerRP::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__wsnt__NotificationProducerRP(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__wsnt__NotificationProducerRP(struct soap *soap, const char *tag, int id, const _wsnt__NotificationProducerRP *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__wsnt__NotificationProducerRP), type))
		return soap->error;
	if (soap_out_std__vectorTemplateOfPointerTowsnt__TopicExpressionType(soap, "wsnt:TopicExpression", -1, &(a->_wsnt__NotificationProducerRP::TopicExpression), ""))
		return soap->error;
	if (soap_out_PointerTobool(soap, "wsnt:FixedTopicSet", -1, &(a->_wsnt__NotificationProducerRP::FixedTopicSet), ""))
		return soap->error;
	if (soap_out_std__vectorTemplateOfxsd__anyURI(soap, "wsnt:TopicExpressionDialect", -1, &(a->_wsnt__NotificationProducerRP::TopicExpressionDialect), ""))
		return soap->error;
	if (soap_out_PointerTowstop__TopicSetType(soap, "wstop:TopicSet", -1, &(a->_wsnt__NotificationProducerRP::wstop__TopicSet), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_wsnt__NotificationProducerRP::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__wsnt__NotificationProducerRP(soap, tag, this, type);
}

SOAP_FMAC3 _wsnt__NotificationProducerRP * SOAP_FMAC4 soap_in__wsnt__NotificationProducerRP(struct soap *soap, const char *tag, _wsnt__NotificationProducerRP *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_wsnt__NotificationProducerRP *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__wsnt__NotificationProducerRP, sizeof(_wsnt__NotificationProducerRP), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__wsnt__NotificationProducerRP)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_wsnt__NotificationProducerRP *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_FixedTopicSet1 = 1;
	size_t soap_flag_wstop__TopicSet1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_std__vectorTemplateOfPointerTowsnt__TopicExpressionType(soap, "wsnt:TopicExpression", &(a->_wsnt__NotificationProducerRP::TopicExpression), "wsnt:TopicExpressionType"))
					continue;
			if (soap_flag_FixedTopicSet1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTobool(soap, "wsnt:FixedTopicSet", &(a->_wsnt__NotificationProducerRP::FixedTopicSet), "xsd:boolean"))
				{	soap_flag_FixedTopicSet1--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_std__vectorTemplateOfxsd__anyURI(soap, "wsnt:TopicExpressionDialect", &(a->_wsnt__NotificationProducerRP::TopicExpressionDialect), "xsd:anyURI"))
					continue;
			if (soap_flag_wstop__TopicSet1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTowstop__TopicSetType(soap, "wstop:TopicSet", &(a->_wsnt__NotificationProducerRP::wstop__TopicSet), "wstop:TopicSetType"))
				{	soap_flag_wstop__TopicSet1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_wsnt__NotificationProducerRP *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__wsnt__NotificationProducerRP, 0, sizeof(_wsnt__NotificationProducerRP), 0, soap_copy__wsnt__NotificationProducerRP);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int _wsnt__NotificationProducerRP::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	int id = soap_embed(soap, (void*)this, NULL, 0, SOAP_TYPE__wsnt__NotificationProducerRP);
	if (this->soap_out(soap, tag?tag:"wsnt:NotificationProducerRP", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_wsnt__NotificationProducerRP::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__wsnt__NotificationProducerRP(soap, this, tag, type);
}

SOAP_FMAC3 _wsnt__NotificationProducerRP * SOAP_FMAC4 soap_get__wsnt__NotificationProducerRP(struct soap *soap, _wsnt__NotificationProducerRP *p, const char *tag, const char *type)
{
	if ((p = soap_in__wsnt__NotificationProducerRP(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _wsnt__NotificationProducerRP * SOAP_FMAC2 soap_instantiate__wsnt__NotificationProducerRP(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__wsnt__NotificationProducerRP(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__wsnt__NotificationProducerRP, n, onvifevent_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = SOAP_NEW(_wsnt__NotificationProducerRP);
		if (size)
			*size = sizeof(_wsnt__NotificationProducerRP);
		((_wsnt__NotificationProducerRP*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = SOAP_NEW_ARRAY(_wsnt__NotificationProducerRP, n);
		if (size)
			*size = n * sizeof(_wsnt__NotificationProducerRP);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((_wsnt__NotificationProducerRP*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (_wsnt__NotificationProducerRP*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__wsnt__NotificationProducerRP(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _wsnt__NotificationProducerRP %p -> %p\n", q, p));
	*(_wsnt__NotificationProducerRP*)p = *(_wsnt__NotificationProducerRP*)q;
}

void wsnt__ResumeFailedFaultType::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->wsrfbf__BaseFaultType::soap_default(soap);
}

void wsnt__ResumeFailedFaultType::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	this->wsrfbf__BaseFaultType::soap_serialize(soap);
#endif
}

int wsnt__ResumeFailedFaultType::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_wsnt__ResumeFailedFaultType(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_wsnt__ResumeFailedFaultType(struct soap *soap, const char *tag, int id, const wsnt__ResumeFailedFaultType *a, const char *type)
{
	if (((wsrfbf__BaseFaultType*)a)->__anyAttribute)
		soap_set_attr(soap, "-anyAttribute", ((wsrfbf__BaseFaultType*)a)->__anyAttribute, 1);
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_wsnt__ResumeFailedFaultType), "wsnt:ResumeFailedFaultType"))
		return soap->error;
	/* transient soap skipped */
	if (soap_out_std__vectorTemplateOf_XML(soap, "-any", -1, &(a->wsrfbf__BaseFaultType::__any), ""))
		return soap->error;
	if (soap_out_time(soap, "wsrfbf:Timestamp", -1, &(a->wsrfbf__BaseFaultType::Timestamp), ""))
		return soap->error;
	if (soap_out_PointerTowsa5__EndpointReferenceType(soap, "wsrfbf:Originator", -1, &(a->wsrfbf__BaseFaultType::Originator), ""))
		return soap->error;
	if (soap_out_PointerTo_wsrfbf__BaseFaultType_ErrorCode(soap, "wsrfbf:ErrorCode", -1, &(a->wsrfbf__BaseFaultType::ErrorCode), ""))
		return soap->error;
	if (soap_out_PointerTostd__vectorTemplateOf_wsrfbf__BaseFaultType_Description(soap, "wsrfbf:Description", -1, &(a->wsrfbf__BaseFaultType::Description), ""))
		return soap->error;
	if (soap_out_PointerTo_wsrfbf__BaseFaultType_FaultCause(soap, "wsrfbf:FaultCause", -1, &(a->wsrfbf__BaseFaultType::FaultCause), ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *wsnt__ResumeFailedFaultType::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_wsnt__ResumeFailedFaultType(soap, tag, this, type);
}

SOAP_FMAC3 wsnt__ResumeFailedFaultType * SOAP_FMAC4 soap_in_wsnt__ResumeFailedFaultType(struct soap *soap, const char *tag, wsnt__ResumeFailedFaultType *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (wsnt__ResumeFailedFaultType *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_wsnt__ResumeFailedFaultType, sizeof(wsnt__ResumeFailedFaultType), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_wsnt__ResumeFailedFaultType)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (wsnt__ResumeFailedFaultType *)a->soap_in(soap, tag, type);
		}
	}
	if (soap_s2string(soap, soap_attr_value(soap, "-anyAttribute", 0), &((wsrfbf__BaseFaultType*)a)->__anyAttribute, 0, -1))
		return NULL;
	size_t soap_flag___item3 = 1;
	size_t soap_flag_Timestamp2 = 1;
	size_t soap_flag_Originator2 = 1;
	size_t soap_flag_ErrorCode2 = 1;
	size_t soap_flag_FaultCause2 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			/* transient soap skipped */
			if (soap_flag_Timestamp2 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_time(soap, "wsrfbf:Timestamp", &(a->wsrfbf__BaseFaultType::Timestamp), "xsd:dateTime"))
				{	soap_flag_Timestamp2--;
					continue;
				}
			if (soap_flag_Originator2 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTowsa5__EndpointReferenceType(soap, "wsrfbf:Originator", &(a->wsrfbf__BaseFaultType::Originator), "wsa5:EndpointReferenceType"))
				{	soap_flag_Originator2--;
					continue;
				}
			if (soap_flag_ErrorCode2 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_wsrfbf__BaseFaultType_ErrorCode(soap, "wsrfbf:ErrorCode", &(a->wsrfbf__BaseFaultType::ErrorCode), ""))
				{	soap_flag_ErrorCode2--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTostd__vectorTemplateOf_wsrfbf__BaseFaultType_Description(soap, "wsrfbf:Description", &(a->wsrfbf__BaseFaultType::Description), ""))
					continue;
			if (soap_flag_FaultCause2 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_wsrfbf__BaseFaultType_FaultCause(soap, "wsrfbf:FaultCause", &(a->wsrfbf__BaseFaultType::FaultCause), ""))
				{	soap_flag_FaultCause2--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_std__vectorTemplateOf_XML(soap, "-any", &(a->wsrfbf__BaseFaultType::__any), ""))
					continue;
			if (soap_flag___item3 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_inliteral(soap, "-item", &(a->xsd__anyType::__item)))
				{	soap_flag___item3--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (wsnt__ResumeFailedFaultType *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_wsnt__ResumeFailedFaultType, 0, sizeof(wsnt__ResumeFailedFaultType), 0, soap_copy_wsnt__ResumeFailedFaultType);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_Timestamp2 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int wsnt__ResumeFailedFaultType::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	int id = soap_embed(soap, (void*)this, NULL, 0, SOAP_TYPE_wsnt__ResumeFailedFaultType);
	if (this->soap_out(soap, tag?tag:"wsnt:ResumeFailedFaultType", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *wsnt__ResumeFailedFaultType::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_wsnt__ResumeFailedFaultType(soap, this, tag, type);
}

SOAP_FMAC3 wsnt__ResumeFailedFaultType * SOAP_FMAC4 soap_get_wsnt__ResumeFailedFaultType(struct soap *soap, wsnt__ResumeFailedFaultType *p, const char *tag, const char *type)
{
	if ((p = soap_in_wsnt__ResumeFailedFaultType(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 wsnt__ResumeFailedFaultType * SOAP_FMAC2 soap_instantiate_wsnt__ResumeFailedFaultType(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_wsnt__ResumeFailedFaultType(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_wsnt__ResumeFailedFaultType, n, onvifevent_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = SOAP_NEW(wsnt__ResumeFailedFaultType);
		if (size)
			*size = sizeof(wsnt__ResumeFailedFaultType);
		((wsnt__ResumeFailedFaultType*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = SOAP_NEW_ARRAY(wsnt__ResumeFailedFaultType, n);
		if (size)
			*size = n * sizeof(wsnt__ResumeFailedFaultType);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((wsnt__ResumeFailedFaultType*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (wsnt__ResumeFailedFaultType*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_wsnt__ResumeFailedFaultType(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying wsnt__ResumeFailedFaultType %p -> %p\n", q, p));
	*(wsnt__ResumeFailedFaultType*)p = *(wsnt__ResumeFailedFaultType*)q;
}

void wsnt__PauseFailedFaultType::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->wsrfbf__BaseFaultType::soap_default(soap);
}

void wsnt__PauseFailedFaultType::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	this->wsrfbf__BaseFaultType::soap_serialize(soap);
#endif
}

int wsnt__PauseFailedFaultType::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_wsnt__PauseFailedFaultType(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_wsnt__PauseFailedFaultType(struct soap *soap, const char *tag, int id, const wsnt__PauseFailedFaultType *a, const char *type)
{
	if (((wsrfbf__BaseFaultType*)a)->__anyAttribute)
		soap_set_attr(soap, "-anyAttribute", ((wsrfbf__BaseFaultType*)a)->__anyAttribute, 1);
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_wsnt__PauseFailedFaultType), "wsnt:PauseFailedFaultType"))
		return soap->error;
	/* transient soap skipped */
	if (soap_out_std__vectorTemplateOf_XML(soap, "-any", -1, &(a->wsrfbf__BaseFaultType::__any), ""))
		return soap->error;
	if (soap_out_time(soap, "wsrfbf:Timestamp", -1, &(a->wsrfbf__BaseFaultType::Timestamp), ""))
		return soap->error;
	if (soap_out_PointerTowsa5__EndpointReferenceType(soap, "wsrfbf:Originator", -1, &(a->wsrfbf__BaseFaultType::Originator), ""))
		return soap->error;
	if (soap_out_PointerTo_wsrfbf__BaseFaultType_ErrorCode(soap, "wsrfbf:ErrorCode", -1, &(a->wsrfbf__BaseFaultType::ErrorCode), ""))
		return soap->error;
	if (soap_out_PointerTostd__vectorTemplateOf_wsrfbf__BaseFaultType_Description(soap, "wsrfbf:Description", -1, &(a->wsrfbf__BaseFaultType::Description), ""))
		return soap->error;
	if (soap_out_PointerTo_wsrfbf__BaseFaultType_FaultCause(soap, "wsrfbf:FaultCause", -1, &(a->wsrfbf__BaseFaultType::FaultCause), ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *wsnt__PauseFailedFaultType::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_wsnt__PauseFailedFaultType(soap, tag, this, type);
}

SOAP_FMAC3 wsnt__PauseFailedFaultType * SOAP_FMAC4 soap_in_wsnt__PauseFailedFaultType(struct soap *soap, const char *tag, wsnt__PauseFailedFaultType *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (wsnt__PauseFailedFaultType *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_wsnt__PauseFailedFaultType, sizeof(wsnt__PauseFailedFaultType), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_wsnt__PauseFailedFaultType)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (wsnt__PauseFailedFaultType *)a->soap_in(soap, tag, type);
		}
	}
	if (soap_s2string(soap, soap_attr_value(soap, "-anyAttribute", 0), &((wsrfbf__BaseFaultType*)a)->__anyAttribute, 0, -1))
		return NULL;
	size_t soap_flag___item3 = 1;
	size_t soap_flag_Timestamp2 = 1;
	size_t soap_flag_Originator2 = 1;
	size_t soap_flag_ErrorCode2 = 1;
	size_t soap_flag_FaultCause2 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			/* transient soap skipped */
			if (soap_flag_Timestamp2 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_time(soap, "wsrfbf:Timestamp", &(a->wsrfbf__BaseFaultType::Timestamp), "xsd:dateTime"))
				{	soap_flag_Timestamp2--;
					continue;
				}
			if (soap_flag_Originator2 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTowsa5__EndpointReferenceType(soap, "wsrfbf:Originator", &(a->wsrfbf__BaseFaultType::Originator), "wsa5:EndpointReferenceType"))
				{	soap_flag_Originator2--;
					continue;
				}
			if (soap_flag_ErrorCode2 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_wsrfbf__BaseFaultType_ErrorCode(soap, "wsrfbf:ErrorCode", &(a->wsrfbf__BaseFaultType::ErrorCode), ""))
				{	soap_flag_ErrorCode2--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTostd__vectorTemplateOf_wsrfbf__BaseFaultType_Description(soap, "wsrfbf:Description", &(a->wsrfbf__BaseFaultType::Description), ""))
					continue;
			if (soap_flag_FaultCause2 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_wsrfbf__BaseFaultType_FaultCause(soap, "wsrfbf:FaultCause", &(a->wsrfbf__BaseFaultType::FaultCause), ""))
				{	soap_flag_FaultCause2--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_std__vectorTemplateOf_XML(soap, "-any", &(a->wsrfbf__BaseFaultType::__any), ""))
					continue;
			if (soap_flag___item3 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_inliteral(soap, "-item", &(a->xsd__anyType::__item)))
				{	soap_flag___item3--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (wsnt__PauseFailedFaultType *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_wsnt__PauseFailedFaultType, 0, sizeof(wsnt__PauseFailedFaultType), 0, soap_copy_wsnt__PauseFailedFaultType);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_Timestamp2 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int wsnt__PauseFailedFaultType::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	int id = soap_embed(soap, (void*)this, NULL, 0, SOAP_TYPE_wsnt__PauseFailedFaultType);
	if (this->soap_out(soap, tag?tag:"wsnt:PauseFailedFaultType", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *wsnt__PauseFailedFaultType::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_wsnt__PauseFailedFaultType(soap, this, tag, type);
}

SOAP_FMAC3 wsnt__PauseFailedFaultType * SOAP_FMAC4 soap_get_wsnt__PauseFailedFaultType(struct soap *soap, wsnt__PauseFailedFaultType *p, const char *tag, const char *type)
{
	if ((p = soap_in_wsnt__PauseFailedFaultType(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 wsnt__PauseFailedFaultType * SOAP_FMAC2 soap_instantiate_wsnt__PauseFailedFaultType(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_wsnt__PauseFailedFaultType(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_wsnt__PauseFailedFaultType, n, onvifevent_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = SOAP_NEW(wsnt__PauseFailedFaultType);
		if (size)
			*size = sizeof(wsnt__PauseFailedFaultType);
		((wsnt__PauseFailedFaultType*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = SOAP_NEW_ARRAY(wsnt__PauseFailedFaultType, n);
		if (size)
			*size = n * sizeof(wsnt__PauseFailedFaultType);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((wsnt__PauseFailedFaultType*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (wsnt__PauseFailedFaultType*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_wsnt__PauseFailedFaultType(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying wsnt__PauseFailedFaultType %p -> %p\n", q, p));
	*(wsnt__PauseFailedFaultType*)p = *(wsnt__PauseFailedFaultType*)q;
}

void wsnt__UnableToDestroySubscriptionFaultType::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->wsrfbf__BaseFaultType::soap_default(soap);
}

void wsnt__UnableToDestroySubscriptionFaultType::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	this->wsrfbf__BaseFaultType::soap_serialize(soap);
#endif
}

int wsnt__UnableToDestroySubscriptionFaultType::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_wsnt__UnableToDestroySubscriptionFaultType(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_wsnt__UnableToDestroySubscriptionFaultType(struct soap *soap, const char *tag, int id, const wsnt__UnableToDestroySubscriptionFaultType *a, const char *type)
{
	if (((wsrfbf__BaseFaultType*)a)->__anyAttribute)
		soap_set_attr(soap, "-anyAttribute", ((wsrfbf__BaseFaultType*)a)->__anyAttribute, 1);
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_wsnt__UnableToDestroySubscriptionFaultType), "wsnt:UnableToDestroySubscriptionFaultType"))
		return soap->error;
	/* transient soap skipped */
	if (soap_out_std__vectorTemplateOf_XML(soap, "-any", -1, &(a->wsrfbf__BaseFaultType::__any), ""))
		return soap->error;
	if (soap_out_time(soap, "wsrfbf:Timestamp", -1, &(a->wsrfbf__BaseFaultType::Timestamp), ""))
		return soap->error;
	if (soap_out_PointerTowsa5__EndpointReferenceType(soap, "wsrfbf:Originator", -1, &(a->wsrfbf__BaseFaultType::Originator), ""))
		return soap->error;
	if (soap_out_PointerTo_wsrfbf__BaseFaultType_ErrorCode(soap, "wsrfbf:ErrorCode", -1, &(a->wsrfbf__BaseFaultType::ErrorCode), ""))
		return soap->error;
	if (soap_out_PointerTostd__vectorTemplateOf_wsrfbf__BaseFaultType_Description(soap, "wsrfbf:Description", -1, &(a->wsrfbf__BaseFaultType::Description), ""))
		return soap->error;
	if (soap_out_PointerTo_wsrfbf__BaseFaultType_FaultCause(soap, "wsrfbf:FaultCause", -1, &(a->wsrfbf__BaseFaultType::FaultCause), ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *wsnt__UnableToDestroySubscriptionFaultType::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_wsnt__UnableToDestroySubscriptionFaultType(soap, tag, this, type);
}

SOAP_FMAC3 wsnt__UnableToDestroySubscriptionFaultType * SOAP_FMAC4 soap_in_wsnt__UnableToDestroySubscriptionFaultType(struct soap *soap, const char *tag, wsnt__UnableToDestroySubscriptionFaultType *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (wsnt__UnableToDestroySubscriptionFaultType *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_wsnt__UnableToDestroySubscriptionFaultType, sizeof(wsnt__UnableToDestroySubscriptionFaultType), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_wsnt__UnableToDestroySubscriptionFaultType)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (wsnt__UnableToDestroySubscriptionFaultType *)a->soap_in(soap, tag, type);
		}
	}
	if (soap_s2string(soap, soap_attr_value(soap, "-anyAttribute", 0), &((wsrfbf__BaseFaultType*)a)->__anyAttribute, 0, -1))
		return NULL;
	size_t soap_flag___item3 = 1;
	size_t soap_flag_Timestamp2 = 1;
	size_t soap_flag_Originator2 = 1;
	size_t soap_flag_ErrorCode2 = 1;
	size_t soap_flag_FaultCause2 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			/* transient soap skipped */
			if (soap_flag_Timestamp2 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_time(soap, "wsrfbf:Timestamp", &(a->wsrfbf__BaseFaultType::Timestamp), "xsd:dateTime"))
				{	soap_flag_Timestamp2--;
					continue;
				}
			if (soap_flag_Originator2 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTowsa5__EndpointReferenceType(soap, "wsrfbf:Originator", &(a->wsrfbf__BaseFaultType::Originator), "wsa5:EndpointReferenceType"))
				{	soap_flag_Originator2--;
					continue;
				}
			if (soap_flag_ErrorCode2 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_wsrfbf__BaseFaultType_ErrorCode(soap, "wsrfbf:ErrorCode", &(a->wsrfbf__BaseFaultType::ErrorCode), ""))
				{	soap_flag_ErrorCode2--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTostd__vectorTemplateOf_wsrfbf__BaseFaultType_Description(soap, "wsrfbf:Description", &(a->wsrfbf__BaseFaultType::Description), ""))
					continue;
			if (soap_flag_FaultCause2 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_wsrfbf__BaseFaultType_FaultCause(soap, "wsrfbf:FaultCause", &(a->wsrfbf__BaseFaultType::FaultCause), ""))
				{	soap_flag_FaultCause2--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_std__vectorTemplateOf_XML(soap, "-any", &(a->wsrfbf__BaseFaultType::__any), ""))
					continue;
			if (soap_flag___item3 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_inliteral(soap, "-item", &(a->xsd__anyType::__item)))
				{	soap_flag___item3--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (wsnt__UnableToDestroySubscriptionFaultType *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_wsnt__UnableToDestroySubscriptionFaultType, 0, sizeof(wsnt__UnableToDestroySubscriptionFaultType), 0, soap_copy_wsnt__UnableToDestroySubscriptionFaultType);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_Timestamp2 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int wsnt__UnableToDestroySubscriptionFaultType::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	int id = soap_embed(soap, (void*)this, NULL, 0, SOAP_TYPE_wsnt__UnableToDestroySubscriptionFaultType);
	if (this->soap_out(soap, tag?tag:"wsnt:UnableToDestroySubscriptionFaultType", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *wsnt__UnableToDestroySubscriptionFaultType::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_wsnt__UnableToDestroySubscriptionFaultType(soap, this, tag, type);
}

SOAP_FMAC3 wsnt__UnableToDestroySubscriptionFaultType * SOAP_FMAC4 soap_get_wsnt__UnableToDestroySubscriptionFaultType(struct soap *soap, wsnt__UnableToDestroySubscriptionFaultType *p, const char *tag, const char *type)
{
	if ((p = soap_in_wsnt__UnableToDestroySubscriptionFaultType(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 wsnt__UnableToDestroySubscriptionFaultType * SOAP_FMAC2 soap_instantiate_wsnt__UnableToDestroySubscriptionFaultType(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_wsnt__UnableToDestroySubscriptionFaultType(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_wsnt__UnableToDestroySubscriptionFaultType, n, onvifevent_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = SOAP_NEW(wsnt__UnableToDestroySubscriptionFaultType);
		if (size)
			*size = sizeof(wsnt__UnableToDestroySubscriptionFaultType);
		((wsnt__UnableToDestroySubscriptionFaultType*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = SOAP_NEW_ARRAY(wsnt__UnableToDestroySubscriptionFaultType, n);
		if (size)
			*size = n * sizeof(wsnt__UnableToDestroySubscriptionFaultType);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((wsnt__UnableToDestroySubscriptionFaultType*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (wsnt__UnableToDestroySubscriptionFaultType*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_wsnt__UnableToDestroySubscriptionFaultType(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying wsnt__UnableToDestroySubscriptionFaultType %p -> %p\n", q, p));
	*(wsnt__UnableToDestroySubscriptionFaultType*)p = *(wsnt__UnableToDestroySubscriptionFaultType*)q;
}

void wsnt__UnacceptableTerminationTimeFaultType::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->wsrfbf__BaseFaultType::soap_default(soap);
	soap_default_time(soap, &this->wsnt__UnacceptableTerminationTimeFaultType::MinimumTime);
	this->wsnt__UnacceptableTerminationTimeFaultType::MaximumTime = NULL;
}

void wsnt__UnacceptableTerminationTimeFaultType::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_embedded(soap, &this->wsnt__UnacceptableTerminationTimeFaultType::MinimumTime, SOAP_TYPE_time);
	soap_serialize_PointerTotime(soap, &this->wsnt__UnacceptableTerminationTimeFaultType::MaximumTime);
	this->wsrfbf__BaseFaultType::soap_serialize(soap);
#endif
}

int wsnt__UnacceptableTerminationTimeFaultType::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_wsnt__UnacceptableTerminationTimeFaultType(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_wsnt__UnacceptableTerminationTimeFaultType(struct soap *soap, const char *tag, int id, const wsnt__UnacceptableTerminationTimeFaultType *a, const char *type)
{
	if (((wsrfbf__BaseFaultType*)a)->__anyAttribute)
		soap_set_attr(soap, "-anyAttribute", ((wsrfbf__BaseFaultType*)a)->__anyAttribute, 1);
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_wsnt__UnacceptableTerminationTimeFaultType), "wsnt:UnacceptableTerminationTimeFaultType"))
		return soap->error;
	/* transient soap skipped */
	if (soap_out_std__vectorTemplateOf_XML(soap, "-any", -1, &(a->wsrfbf__BaseFaultType::__any), ""))
		return soap->error;
	if (soap_out_time(soap, "wsrfbf:Timestamp", -1, &(a->wsrfbf__BaseFaultType::Timestamp), ""))
		return soap->error;
	if (soap_out_PointerTowsa5__EndpointReferenceType(soap, "wsrfbf:Originator", -1, &(a->wsrfbf__BaseFaultType::Originator), ""))
		return soap->error;
	if (soap_out_PointerTo_wsrfbf__BaseFaultType_ErrorCode(soap, "wsrfbf:ErrorCode", -1, &(a->wsrfbf__BaseFaultType::ErrorCode), ""))
		return soap->error;
	if (soap_out_PointerTostd__vectorTemplateOf_wsrfbf__BaseFaultType_Description(soap, "wsrfbf:Description", -1, &(a->wsrfbf__BaseFaultType::Description), ""))
		return soap->error;
	if (soap_out_PointerTo_wsrfbf__BaseFaultType_FaultCause(soap, "wsrfbf:FaultCause", -1, &(a->wsrfbf__BaseFaultType::FaultCause), ""))
		return soap->error;
	if (soap_out_time(soap, "wsnt:MinimumTime", -1, &(a->wsnt__UnacceptableTerminationTimeFaultType::MinimumTime), ""))
		return soap->error;
	if (soap_out_PointerTotime(soap, "wsnt:MaximumTime", -1, &(a->wsnt__UnacceptableTerminationTimeFaultType::MaximumTime), ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *wsnt__UnacceptableTerminationTimeFaultType::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_wsnt__UnacceptableTerminationTimeFaultType(soap, tag, this, type);
}

SOAP_FMAC3 wsnt__UnacceptableTerminationTimeFaultType * SOAP_FMAC4 soap_in_wsnt__UnacceptableTerminationTimeFaultType(struct soap *soap, const char *tag, wsnt__UnacceptableTerminationTimeFaultType *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (wsnt__UnacceptableTerminationTimeFaultType *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_wsnt__UnacceptableTerminationTimeFaultType, sizeof(wsnt__UnacceptableTerminationTimeFaultType), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_wsnt__UnacceptableTerminationTimeFaultType)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (wsnt__UnacceptableTerminationTimeFaultType *)a->soap_in(soap, tag, type);
		}
	}
	if (soap_s2string(soap, soap_attr_value(soap, "-anyAttribute", 0), &((wsrfbf__BaseFaultType*)a)->__anyAttribute, 0, -1))
		return NULL;
	size_t soap_flag___item3 = 1;
	size_t soap_flag_Timestamp2 = 1;
	size_t soap_flag_Originator2 = 1;
	size_t soap_flag_ErrorCode2 = 1;
	size_t soap_flag_FaultCause2 = 1;
	size_t soap_flag_MinimumTime1 = 1;
	size_t soap_flag_MaximumTime1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			/* transient soap skipped */
			if (soap_flag_Timestamp2 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_time(soap, "wsrfbf:Timestamp", &(a->wsrfbf__BaseFaultType::Timestamp), "xsd:dateTime"))
				{	soap_flag_Timestamp2--;
					continue;
				}
			if (soap_flag_Originator2 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTowsa5__EndpointReferenceType(soap, "wsrfbf:Originator", &(a->wsrfbf__BaseFaultType::Originator), "wsa5:EndpointReferenceType"))
				{	soap_flag_Originator2--;
					continue;
				}
			if (soap_flag_ErrorCode2 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_wsrfbf__BaseFaultType_ErrorCode(soap, "wsrfbf:ErrorCode", &(a->wsrfbf__BaseFaultType::ErrorCode), ""))
				{	soap_flag_ErrorCode2--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTostd__vectorTemplateOf_wsrfbf__BaseFaultType_Description(soap, "wsrfbf:Description", &(a->wsrfbf__BaseFaultType::Description), ""))
					continue;
			if (soap_flag_FaultCause2 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_wsrfbf__BaseFaultType_FaultCause(soap, "wsrfbf:FaultCause", &(a->wsrfbf__BaseFaultType::FaultCause), ""))
				{	soap_flag_FaultCause2--;
					continue;
				}
			if (soap_flag_MinimumTime1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_time(soap, "wsnt:MinimumTime", &(a->wsnt__UnacceptableTerminationTimeFaultType::MinimumTime), "xsd:dateTime"))
				{	soap_flag_MinimumTime1--;
					continue;
				}
			if (soap_flag_MaximumTime1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTotime(soap, "wsnt:MaximumTime", &(a->wsnt__UnacceptableTerminationTimeFaultType::MaximumTime), "xsd:dateTime"))
				{	soap_flag_MaximumTime1--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_std__vectorTemplateOf_XML(soap, "-any", &(a->wsrfbf__BaseFaultType::__any), ""))
					continue;
			if (soap_flag___item3 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_inliteral(soap, "-item", &(a->xsd__anyType::__item)))
				{	soap_flag___item3--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (wsnt__UnacceptableTerminationTimeFaultType *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_wsnt__UnacceptableTerminationTimeFaultType, 0, sizeof(wsnt__UnacceptableTerminationTimeFaultType), 0, soap_copy_wsnt__UnacceptableTerminationTimeFaultType);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_Timestamp2 > 0 || soap_flag_MinimumTime1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int wsnt__UnacceptableTerminationTimeFaultType::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	int id = soap_embed(soap, (void*)this, NULL, 0, SOAP_TYPE_wsnt__UnacceptableTerminationTimeFaultType);
	if (this->soap_out(soap, tag?tag:"wsnt:UnacceptableTerminationTimeFaultType", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *wsnt__UnacceptableTerminationTimeFaultType::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_wsnt__UnacceptableTerminationTimeFaultType(soap, this, tag, type);
}

SOAP_FMAC3 wsnt__UnacceptableTerminationTimeFaultType * SOAP_FMAC4 soap_get_wsnt__UnacceptableTerminationTimeFaultType(struct soap *soap, wsnt__UnacceptableTerminationTimeFaultType *p, const char *tag, const char *type)
{
	if ((p = soap_in_wsnt__UnacceptableTerminationTimeFaultType(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 wsnt__UnacceptableTerminationTimeFaultType * SOAP_FMAC2 soap_instantiate_wsnt__UnacceptableTerminationTimeFaultType(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_wsnt__UnacceptableTerminationTimeFaultType(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_wsnt__UnacceptableTerminationTimeFaultType, n, onvifevent_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = SOAP_NEW(wsnt__UnacceptableTerminationTimeFaultType);
		if (size)
			*size = sizeof(wsnt__UnacceptableTerminationTimeFaultType);
		((wsnt__UnacceptableTerminationTimeFaultType*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = SOAP_NEW_ARRAY(wsnt__UnacceptableTerminationTimeFaultType, n);
		if (size)
			*size = n * sizeof(wsnt__UnacceptableTerminationTimeFaultType);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((wsnt__UnacceptableTerminationTimeFaultType*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (wsnt__UnacceptableTerminationTimeFaultType*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_wsnt__UnacceptableTerminationTimeFaultType(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying wsnt__UnacceptableTerminationTimeFaultType %p -> %p\n", q, p));
	*(wsnt__UnacceptableTerminationTimeFaultType*)p = *(wsnt__UnacceptableTerminationTimeFaultType*)q;
}

void wsnt__UnableToCreatePullPointFaultType::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->wsrfbf__BaseFaultType::soap_default(soap);
}

void wsnt__UnableToCreatePullPointFaultType::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	this->wsrfbf__BaseFaultType::soap_serialize(soap);
#endif
}

int wsnt__UnableToCreatePullPointFaultType::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_wsnt__UnableToCreatePullPointFaultType(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_wsnt__UnableToCreatePullPointFaultType(struct soap *soap, const char *tag, int id, const wsnt__UnableToCreatePullPointFaultType *a, const char *type)
{
	if (((wsrfbf__BaseFaultType*)a)->__anyAttribute)
		soap_set_attr(soap, "-anyAttribute", ((wsrfbf__BaseFaultType*)a)->__anyAttribute, 1);
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_wsnt__UnableToCreatePullPointFaultType), "wsnt:UnableToCreatePullPointFaultType"))
		return soap->error;
	/* transient soap skipped */
	if (soap_out_std__vectorTemplateOf_XML(soap, "-any", -1, &(a->wsrfbf__BaseFaultType::__any), ""))
		return soap->error;
	if (soap_out_time(soap, "wsrfbf:Timestamp", -1, &(a->wsrfbf__BaseFaultType::Timestamp), ""))
		return soap->error;
	if (soap_out_PointerTowsa5__EndpointReferenceType(soap, "wsrfbf:Originator", -1, &(a->wsrfbf__BaseFaultType::Originator), ""))
		return soap->error;
	if (soap_out_PointerTo_wsrfbf__BaseFaultType_ErrorCode(soap, "wsrfbf:ErrorCode", -1, &(a->wsrfbf__BaseFaultType::ErrorCode), ""))
		return soap->error;
	if (soap_out_PointerTostd__vectorTemplateOf_wsrfbf__BaseFaultType_Description(soap, "wsrfbf:Description", -1, &(a->wsrfbf__BaseFaultType::Description), ""))
		return soap->error;
	if (soap_out_PointerTo_wsrfbf__BaseFaultType_FaultCause(soap, "wsrfbf:FaultCause", -1, &(a->wsrfbf__BaseFaultType::FaultCause), ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *wsnt__UnableToCreatePullPointFaultType::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_wsnt__UnableToCreatePullPointFaultType(soap, tag, this, type);
}

SOAP_FMAC3 wsnt__UnableToCreatePullPointFaultType * SOAP_FMAC4 soap_in_wsnt__UnableToCreatePullPointFaultType(struct soap *soap, const char *tag, wsnt__UnableToCreatePullPointFaultType *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (wsnt__UnableToCreatePullPointFaultType *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_wsnt__UnableToCreatePullPointFaultType, sizeof(wsnt__UnableToCreatePullPointFaultType), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_wsnt__UnableToCreatePullPointFaultType)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (wsnt__UnableToCreatePullPointFaultType *)a->soap_in(soap, tag, type);
		}
	}
	if (soap_s2string(soap, soap_attr_value(soap, "-anyAttribute", 0), &((wsrfbf__BaseFaultType*)a)->__anyAttribute, 0, -1))
		return NULL;
	size_t soap_flag___item3 = 1;
	size_t soap_flag_Timestamp2 = 1;
	size_t soap_flag_Originator2 = 1;
	size_t soap_flag_ErrorCode2 = 1;
	size_t soap_flag_FaultCause2 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			/* transient soap skipped */
			if (soap_flag_Timestamp2 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_time(soap, "wsrfbf:Timestamp", &(a->wsrfbf__BaseFaultType::Timestamp), "xsd:dateTime"))
				{	soap_flag_Timestamp2--;
					continue;
				}
			if (soap_flag_Originator2 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTowsa5__EndpointReferenceType(soap, "wsrfbf:Originator", &(a->wsrfbf__BaseFaultType::Originator), "wsa5:EndpointReferenceType"))
				{	soap_flag_Originator2--;
					continue;
				}
			if (soap_flag_ErrorCode2 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_wsrfbf__BaseFaultType_ErrorCode(soap, "wsrfbf:ErrorCode", &(a->wsrfbf__BaseFaultType::ErrorCode), ""))
				{	soap_flag_ErrorCode2--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTostd__vectorTemplateOf_wsrfbf__BaseFaultType_Description(soap, "wsrfbf:Description", &(a->wsrfbf__BaseFaultType::Description), ""))
					continue;
			if (soap_flag_FaultCause2 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_wsrfbf__BaseFaultType_FaultCause(soap, "wsrfbf:FaultCause", &(a->wsrfbf__BaseFaultType::FaultCause), ""))
				{	soap_flag_FaultCause2--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_std__vectorTemplateOf_XML(soap, "-any", &(a->wsrfbf__BaseFaultType::__any), ""))
					continue;
			if (soap_flag___item3 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_inliteral(soap, "-item", &(a->xsd__anyType::__item)))
				{	soap_flag___item3--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (wsnt__UnableToCreatePullPointFaultType *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_wsnt__UnableToCreatePullPointFaultType, 0, sizeof(wsnt__UnableToCreatePullPointFaultType), 0, soap_copy_wsnt__UnableToCreatePullPointFaultType);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_Timestamp2 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int wsnt__UnableToCreatePullPointFaultType::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	int id = soap_embed(soap, (void*)this, NULL, 0, SOAP_TYPE_wsnt__UnableToCreatePullPointFaultType);
	if (this->soap_out(soap, tag?tag:"wsnt:UnableToCreatePullPointFaultType", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *wsnt__UnableToCreatePullPointFaultType::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_wsnt__UnableToCreatePullPointFaultType(soap, this, tag, type);
}

SOAP_FMAC3 wsnt__UnableToCreatePullPointFaultType * SOAP_FMAC4 soap_get_wsnt__UnableToCreatePullPointFaultType(struct soap *soap, wsnt__UnableToCreatePullPointFaultType *p, const char *tag, const char *type)
{
	if ((p = soap_in_wsnt__UnableToCreatePullPointFaultType(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 wsnt__UnableToCreatePullPointFaultType * SOAP_FMAC2 soap_instantiate_wsnt__UnableToCreatePullPointFaultType(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_wsnt__UnableToCreatePullPointFaultType(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_wsnt__UnableToCreatePullPointFaultType, n, onvifevent_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = SOAP_NEW(wsnt__UnableToCreatePullPointFaultType);
		if (size)
			*size = sizeof(wsnt__UnableToCreatePullPointFaultType);
		((wsnt__UnableToCreatePullPointFaultType*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = SOAP_NEW_ARRAY(wsnt__UnableToCreatePullPointFaultType, n);
		if (size)
			*size = n * sizeof(wsnt__UnableToCreatePullPointFaultType);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((wsnt__UnableToCreatePullPointFaultType*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (wsnt__UnableToCreatePullPointFaultType*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_wsnt__UnableToCreatePullPointFaultType(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying wsnt__UnableToCreatePullPointFaultType %p -> %p\n", q, p));
	*(wsnt__UnableToCreatePullPointFaultType*)p = *(wsnt__UnableToCreatePullPointFaultType*)q;
}

void wsnt__UnableToDestroyPullPointFaultType::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->wsrfbf__BaseFaultType::soap_default(soap);
}

void wsnt__UnableToDestroyPullPointFaultType::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	this->wsrfbf__BaseFaultType::soap_serialize(soap);
#endif
}

int wsnt__UnableToDestroyPullPointFaultType::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_wsnt__UnableToDestroyPullPointFaultType(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_wsnt__UnableToDestroyPullPointFaultType(struct soap *soap, const char *tag, int id, const wsnt__UnableToDestroyPullPointFaultType *a, const char *type)
{
	if (((wsrfbf__BaseFaultType*)a)->__anyAttribute)
		soap_set_attr(soap, "-anyAttribute", ((wsrfbf__BaseFaultType*)a)->__anyAttribute, 1);
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_wsnt__UnableToDestroyPullPointFaultType), "wsnt:UnableToDestroyPullPointFaultType"))
		return soap->error;
	/* transient soap skipped */
	if (soap_out_std__vectorTemplateOf_XML(soap, "-any", -1, &(a->wsrfbf__BaseFaultType::__any), ""))
		return soap->error;
	if (soap_out_time(soap, "wsrfbf:Timestamp", -1, &(a->wsrfbf__BaseFaultType::Timestamp), ""))
		return soap->error;
	if (soap_out_PointerTowsa5__EndpointReferenceType(soap, "wsrfbf:Originator", -1, &(a->wsrfbf__BaseFaultType::Originator), ""))
		return soap->error;
	if (soap_out_PointerTo_wsrfbf__BaseFaultType_ErrorCode(soap, "wsrfbf:ErrorCode", -1, &(a->wsrfbf__BaseFaultType::ErrorCode), ""))
		return soap->error;
	if (soap_out_PointerTostd__vectorTemplateOf_wsrfbf__BaseFaultType_Description(soap, "wsrfbf:Description", -1, &(a->wsrfbf__BaseFaultType::Description), ""))
		return soap->error;
	if (soap_out_PointerTo_wsrfbf__BaseFaultType_FaultCause(soap, "wsrfbf:FaultCause", -1, &(a->wsrfbf__BaseFaultType::FaultCause), ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *wsnt__UnableToDestroyPullPointFaultType::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_wsnt__UnableToDestroyPullPointFaultType(soap, tag, this, type);
}

SOAP_FMAC3 wsnt__UnableToDestroyPullPointFaultType * SOAP_FMAC4 soap_in_wsnt__UnableToDestroyPullPointFaultType(struct soap *soap, const char *tag, wsnt__UnableToDestroyPullPointFaultType *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (wsnt__UnableToDestroyPullPointFaultType *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_wsnt__UnableToDestroyPullPointFaultType, sizeof(wsnt__UnableToDestroyPullPointFaultType), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_wsnt__UnableToDestroyPullPointFaultType)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (wsnt__UnableToDestroyPullPointFaultType *)a->soap_in(soap, tag, type);
		}
	}
	if (soap_s2string(soap, soap_attr_value(soap, "-anyAttribute", 0), &((wsrfbf__BaseFaultType*)a)->__anyAttribute, 0, -1))
		return NULL;
	size_t soap_flag___item3 = 1;
	size_t soap_flag_Timestamp2 = 1;
	size_t soap_flag_Originator2 = 1;
	size_t soap_flag_ErrorCode2 = 1;
	size_t soap_flag_FaultCause2 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			/* transient soap skipped */
			if (soap_flag_Timestamp2 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_time(soap, "wsrfbf:Timestamp", &(a->wsrfbf__BaseFaultType::Timestamp), "xsd:dateTime"))
				{	soap_flag_Timestamp2--;
					continue;
				}
			if (soap_flag_Originator2 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTowsa5__EndpointReferenceType(soap, "wsrfbf:Originator", &(a->wsrfbf__BaseFaultType::Originator), "wsa5:EndpointReferenceType"))
				{	soap_flag_Originator2--;
					continue;
				}
			if (soap_flag_ErrorCode2 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_wsrfbf__BaseFaultType_ErrorCode(soap, "wsrfbf:ErrorCode", &(a->wsrfbf__BaseFaultType::ErrorCode), ""))
				{	soap_flag_ErrorCode2--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTostd__vectorTemplateOf_wsrfbf__BaseFaultType_Description(soap, "wsrfbf:Description", &(a->wsrfbf__BaseFaultType::Description), ""))
					continue;
			if (soap_flag_FaultCause2 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_wsrfbf__BaseFaultType_FaultCause(soap, "wsrfbf:FaultCause", &(a->wsrfbf__BaseFaultType::FaultCause), ""))
				{	soap_flag_FaultCause2--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_std__vectorTemplateOf_XML(soap, "-any", &(a->wsrfbf__BaseFaultType::__any), ""))
					continue;
			if (soap_flag___item3 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_inliteral(soap, "-item", &(a->xsd__anyType::__item)))
				{	soap_flag___item3--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (wsnt__UnableToDestroyPullPointFaultType *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_wsnt__UnableToDestroyPullPointFaultType, 0, sizeof(wsnt__UnableToDestroyPullPointFaultType), 0, soap_copy_wsnt__UnableToDestroyPullPointFaultType);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_Timestamp2 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int wsnt__UnableToDestroyPullPointFaultType::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	int id = soap_embed(soap, (void*)this, NULL, 0, SOAP_TYPE_wsnt__UnableToDestroyPullPointFaultType);
	if (this->soap_out(soap, tag?tag:"wsnt:UnableToDestroyPullPointFaultType", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *wsnt__UnableToDestroyPullPointFaultType::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_wsnt__UnableToDestroyPullPointFaultType(soap, this, tag, type);
}

SOAP_FMAC3 wsnt__UnableToDestroyPullPointFaultType * SOAP_FMAC4 soap_get_wsnt__UnableToDestroyPullPointFaultType(struct soap *soap, wsnt__UnableToDestroyPullPointFaultType *p, const char *tag, const char *type)
{
	if ((p = soap_in_wsnt__UnableToDestroyPullPointFaultType(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 wsnt__UnableToDestroyPullPointFaultType * SOAP_FMAC2 soap_instantiate_wsnt__UnableToDestroyPullPointFaultType(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_wsnt__UnableToDestroyPullPointFaultType(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_wsnt__UnableToDestroyPullPointFaultType, n, onvifevent_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = SOAP_NEW(wsnt__UnableToDestroyPullPointFaultType);
		if (size)
			*size = sizeof(wsnt__UnableToDestroyPullPointFaultType);
		((wsnt__UnableToDestroyPullPointFaultType*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = SOAP_NEW_ARRAY(wsnt__UnableToDestroyPullPointFaultType, n);
		if (size)
			*size = n * sizeof(wsnt__UnableToDestroyPullPointFaultType);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((wsnt__UnableToDestroyPullPointFaultType*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (wsnt__UnableToDestroyPullPointFaultType*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_wsnt__UnableToDestroyPullPointFaultType(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying wsnt__UnableToDestroyPullPointFaultType %p -> %p\n", q, p));
	*(wsnt__UnableToDestroyPullPointFaultType*)p = *(wsnt__UnableToDestroyPullPointFaultType*)q;
}

void wsnt__UnableToGetMessagesFaultType::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->wsrfbf__BaseFaultType::soap_default(soap);
}

void wsnt__UnableToGetMessagesFaultType::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	this->wsrfbf__BaseFaultType::soap_serialize(soap);
#endif
}

int wsnt__UnableToGetMessagesFaultType::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_wsnt__UnableToGetMessagesFaultType(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_wsnt__UnableToGetMessagesFaultType(struct soap *soap, const char *tag, int id, const wsnt__UnableToGetMessagesFaultType *a, const char *type)
{
	if (((wsrfbf__BaseFaultType*)a)->__anyAttribute)
		soap_set_attr(soap, "-anyAttribute", ((wsrfbf__BaseFaultType*)a)->__anyAttribute, 1);
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_wsnt__UnableToGetMessagesFaultType), "wsnt:UnableToGetMessagesFaultType"))
		return soap->error;
	/* transient soap skipped */
	if (soap_out_std__vectorTemplateOf_XML(soap, "-any", -1, &(a->wsrfbf__BaseFaultType::__any), ""))
		return soap->error;
	if (soap_out_time(soap, "wsrfbf:Timestamp", -1, &(a->wsrfbf__BaseFaultType::Timestamp), ""))
		return soap->error;
	if (soap_out_PointerTowsa5__EndpointReferenceType(soap, "wsrfbf:Originator", -1, &(a->wsrfbf__BaseFaultType::Originator), ""))
		return soap->error;
	if (soap_out_PointerTo_wsrfbf__BaseFaultType_ErrorCode(soap, "wsrfbf:ErrorCode", -1, &(a->wsrfbf__BaseFaultType::ErrorCode), ""))
		return soap->error;
	if (soap_out_PointerTostd__vectorTemplateOf_wsrfbf__BaseFaultType_Description(soap, "wsrfbf:Description", -1, &(a->wsrfbf__BaseFaultType::Description), ""))
		return soap->error;
	if (soap_out_PointerTo_wsrfbf__BaseFaultType_FaultCause(soap, "wsrfbf:FaultCause", -1, &(a->wsrfbf__BaseFaultType::FaultCause), ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *wsnt__UnableToGetMessagesFaultType::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_wsnt__UnableToGetMessagesFaultType(soap, tag, this, type);
}

SOAP_FMAC3 wsnt__UnableToGetMessagesFaultType * SOAP_FMAC4 soap_in_wsnt__UnableToGetMessagesFaultType(struct soap *soap, const char *tag, wsnt__UnableToGetMessagesFaultType *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (wsnt__UnableToGetMessagesFaultType *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_wsnt__UnableToGetMessagesFaultType, sizeof(wsnt__UnableToGetMessagesFaultType), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_wsnt__UnableToGetMessagesFaultType)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (wsnt__UnableToGetMessagesFaultType *)a->soap_in(soap, tag, type);
		}
	}
	if (soap_s2string(soap, soap_attr_value(soap, "-anyAttribute", 0), &((wsrfbf__BaseFaultType*)a)->__anyAttribute, 0, -1))
		return NULL;
	size_t soap_flag___item3 = 1;
	size_t soap_flag_Timestamp2 = 1;
	size_t soap_flag_Originator2 = 1;
	size_t soap_flag_ErrorCode2 = 1;
	size_t soap_flag_FaultCause2 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			/* transient soap skipped */
			if (soap_flag_Timestamp2 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_time(soap, "wsrfbf:Timestamp", &(a->wsrfbf__BaseFaultType::Timestamp), "xsd:dateTime"))
				{	soap_flag_Timestamp2--;
					continue;
				}
			if (soap_flag_Originator2 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTowsa5__EndpointReferenceType(soap, "wsrfbf:Originator", &(a->wsrfbf__BaseFaultType::Originator), "wsa5:EndpointReferenceType"))
				{	soap_flag_Originator2--;
					continue;
				}
			if (soap_flag_ErrorCode2 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_wsrfbf__BaseFaultType_ErrorCode(soap, "wsrfbf:ErrorCode", &(a->wsrfbf__BaseFaultType::ErrorCode), ""))
				{	soap_flag_ErrorCode2--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTostd__vectorTemplateOf_wsrfbf__BaseFaultType_Description(soap, "wsrfbf:Description", &(a->wsrfbf__BaseFaultType::Description), ""))
					continue;
			if (soap_flag_FaultCause2 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_wsrfbf__BaseFaultType_FaultCause(soap, "wsrfbf:FaultCause", &(a->wsrfbf__BaseFaultType::FaultCause), ""))
				{	soap_flag_FaultCause2--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_std__vectorTemplateOf_XML(soap, "-any", &(a->wsrfbf__BaseFaultType::__any), ""))
					continue;
			if (soap_flag___item3 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_inliteral(soap, "-item", &(a->xsd__anyType::__item)))
				{	soap_flag___item3--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (wsnt__UnableToGetMessagesFaultType *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_wsnt__UnableToGetMessagesFaultType, 0, sizeof(wsnt__UnableToGetMessagesFaultType), 0, soap_copy_wsnt__UnableToGetMessagesFaultType);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_Timestamp2 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int wsnt__UnableToGetMessagesFaultType::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	int id = soap_embed(soap, (void*)this, NULL, 0, SOAP_TYPE_wsnt__UnableToGetMessagesFaultType);
	if (this->soap_out(soap, tag?tag:"wsnt:UnableToGetMessagesFaultType", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *wsnt__UnableToGetMessagesFaultType::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_wsnt__UnableToGetMessagesFaultType(soap, this, tag, type);
}

SOAP_FMAC3 wsnt__UnableToGetMessagesFaultType * SOAP_FMAC4 soap_get_wsnt__UnableToGetMessagesFaultType(struct soap *soap, wsnt__UnableToGetMessagesFaultType *p, const char *tag, const char *type)
{
	if ((p = soap_in_wsnt__UnableToGetMessagesFaultType(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 wsnt__UnableToGetMessagesFaultType * SOAP_FMAC2 soap_instantiate_wsnt__UnableToGetMessagesFaultType(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_wsnt__UnableToGetMessagesFaultType(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_wsnt__UnableToGetMessagesFaultType, n, onvifevent_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = SOAP_NEW(wsnt__UnableToGetMessagesFaultType);
		if (size)
			*size = sizeof(wsnt__UnableToGetMessagesFaultType);
		((wsnt__UnableToGetMessagesFaultType*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = SOAP_NEW_ARRAY(wsnt__UnableToGetMessagesFaultType, n);
		if (size)
			*size = n * sizeof(wsnt__UnableToGetMessagesFaultType);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((wsnt__UnableToGetMessagesFaultType*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (wsnt__UnableToGetMessagesFaultType*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_wsnt__UnableToGetMessagesFaultType(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying wsnt__UnableToGetMessagesFaultType %p -> %p\n", q, p));
	*(wsnt__UnableToGetMessagesFaultType*)p = *(wsnt__UnableToGetMessagesFaultType*)q;
}

void wsnt__NoCurrentMessageOnTopicFaultType::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->wsrfbf__BaseFaultType::soap_default(soap);
}

void wsnt__NoCurrentMessageOnTopicFaultType::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	this->wsrfbf__BaseFaultType::soap_serialize(soap);
#endif
}

int wsnt__NoCurrentMessageOnTopicFaultType::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_wsnt__NoCurrentMessageOnTopicFaultType(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_wsnt__NoCurrentMessageOnTopicFaultType(struct soap *soap, const char *tag, int id, const wsnt__NoCurrentMessageOnTopicFaultType *a, const char *type)
{
	if (((wsrfbf__BaseFaultType*)a)->__anyAttribute)
		soap_set_attr(soap, "-anyAttribute", ((wsrfbf__BaseFaultType*)a)->__anyAttribute, 1);
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_wsnt__NoCurrentMessageOnTopicFaultType), "wsnt:NoCurrentMessageOnTopicFaultType"))
		return soap->error;
	/* transient soap skipped */
	if (soap_out_std__vectorTemplateOf_XML(soap, "-any", -1, &(a->wsrfbf__BaseFaultType::__any), ""))
		return soap->error;
	if (soap_out_time(soap, "wsrfbf:Timestamp", -1, &(a->wsrfbf__BaseFaultType::Timestamp), ""))
		return soap->error;
	if (soap_out_PointerTowsa5__EndpointReferenceType(soap, "wsrfbf:Originator", -1, &(a->wsrfbf__BaseFaultType::Originator), ""))
		return soap->error;
	if (soap_out_PointerTo_wsrfbf__BaseFaultType_ErrorCode(soap, "wsrfbf:ErrorCode", -1, &(a->wsrfbf__BaseFaultType::ErrorCode), ""))
		return soap->error;
	if (soap_out_PointerTostd__vectorTemplateOf_wsrfbf__BaseFaultType_Description(soap, "wsrfbf:Description", -1, &(a->wsrfbf__BaseFaultType::Description), ""))
		return soap->error;
	if (soap_out_PointerTo_wsrfbf__BaseFaultType_FaultCause(soap, "wsrfbf:FaultCause", -1, &(a->wsrfbf__BaseFaultType::FaultCause), ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *wsnt__NoCurrentMessageOnTopicFaultType::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_wsnt__NoCurrentMessageOnTopicFaultType(soap, tag, this, type);
}

SOAP_FMAC3 wsnt__NoCurrentMessageOnTopicFaultType * SOAP_FMAC4 soap_in_wsnt__NoCurrentMessageOnTopicFaultType(struct soap *soap, const char *tag, wsnt__NoCurrentMessageOnTopicFaultType *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (wsnt__NoCurrentMessageOnTopicFaultType *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_wsnt__NoCurrentMessageOnTopicFaultType, sizeof(wsnt__NoCurrentMessageOnTopicFaultType), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_wsnt__NoCurrentMessageOnTopicFaultType)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (wsnt__NoCurrentMessageOnTopicFaultType *)a->soap_in(soap, tag, type);
		}
	}
	if (soap_s2string(soap, soap_attr_value(soap, "-anyAttribute", 0), &((wsrfbf__BaseFaultType*)a)->__anyAttribute, 0, -1))
		return NULL;
	size_t soap_flag___item3 = 1;
	size_t soap_flag_Timestamp2 = 1;
	size_t soap_flag_Originator2 = 1;
	size_t soap_flag_ErrorCode2 = 1;
	size_t soap_flag_FaultCause2 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			/* transient soap skipped */
			if (soap_flag_Timestamp2 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_time(soap, "wsrfbf:Timestamp", &(a->wsrfbf__BaseFaultType::Timestamp), "xsd:dateTime"))
				{	soap_flag_Timestamp2--;
					continue;
				}
			if (soap_flag_Originator2 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTowsa5__EndpointReferenceType(soap, "wsrfbf:Originator", &(a->wsrfbf__BaseFaultType::Originator), "wsa5:EndpointReferenceType"))
				{	soap_flag_Originator2--;
					continue;
				}
			if (soap_flag_ErrorCode2 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_wsrfbf__BaseFaultType_ErrorCode(soap, "wsrfbf:ErrorCode", &(a->wsrfbf__BaseFaultType::ErrorCode), ""))
				{	soap_flag_ErrorCode2--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTostd__vectorTemplateOf_wsrfbf__BaseFaultType_Description(soap, "wsrfbf:Description", &(a->wsrfbf__BaseFaultType::Description), ""))
					continue;
			if (soap_flag_FaultCause2 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_wsrfbf__BaseFaultType_FaultCause(soap, "wsrfbf:FaultCause", &(a->wsrfbf__BaseFaultType::FaultCause), ""))
				{	soap_flag_FaultCause2--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_std__vectorTemplateOf_XML(soap, "-any", &(a->wsrfbf__BaseFaultType::__any), ""))
					continue;
			if (soap_flag___item3 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_inliteral(soap, "-item", &(a->xsd__anyType::__item)))
				{	soap_flag___item3--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (wsnt__NoCurrentMessageOnTopicFaultType *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_wsnt__NoCurrentMessageOnTopicFaultType, 0, sizeof(wsnt__NoCurrentMessageOnTopicFaultType), 0, soap_copy_wsnt__NoCurrentMessageOnTopicFaultType);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_Timestamp2 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int wsnt__NoCurrentMessageOnTopicFaultType::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	int id = soap_embed(soap, (void*)this, NULL, 0, SOAP_TYPE_wsnt__NoCurrentMessageOnTopicFaultType);
	if (this->soap_out(soap, tag?tag:"wsnt:NoCurrentMessageOnTopicFaultType", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *wsnt__NoCurrentMessageOnTopicFaultType::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_wsnt__NoCurrentMessageOnTopicFaultType(soap, this, tag, type);
}

SOAP_FMAC3 wsnt__NoCurrentMessageOnTopicFaultType * SOAP_FMAC4 soap_get_wsnt__NoCurrentMessageOnTopicFaultType(struct soap *soap, wsnt__NoCurrentMessageOnTopicFaultType *p, const char *tag, const char *type)
{
	if ((p = soap_in_wsnt__NoCurrentMessageOnTopicFaultType(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 wsnt__NoCurrentMessageOnTopicFaultType * SOAP_FMAC2 soap_instantiate_wsnt__NoCurrentMessageOnTopicFaultType(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_wsnt__NoCurrentMessageOnTopicFaultType(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_wsnt__NoCurrentMessageOnTopicFaultType, n, onvifevent_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = SOAP_NEW(wsnt__NoCurrentMessageOnTopicFaultType);
		if (size)
			*size = sizeof(wsnt__NoCurrentMessageOnTopicFaultType);
		((wsnt__NoCurrentMessageOnTopicFaultType*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = SOAP_NEW_ARRAY(wsnt__NoCurrentMessageOnTopicFaultType, n);
		if (size)
			*size = n * sizeof(wsnt__NoCurrentMessageOnTopicFaultType);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((wsnt__NoCurrentMessageOnTopicFaultType*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (wsnt__NoCurrentMessageOnTopicFaultType*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_wsnt__NoCurrentMessageOnTopicFaultType(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying wsnt__NoCurrentMessageOnTopicFaultType %p -> %p\n", q, p));
	*(wsnt__NoCurrentMessageOnTopicFaultType*)p = *(wsnt__NoCurrentMessageOnTopicFaultType*)q;
}

void wsnt__UnacceptableInitialTerminationTimeFaultType::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->wsrfbf__BaseFaultType::soap_default(soap);
	soap_default_time(soap, &this->wsnt__UnacceptableInitialTerminationTimeFaultType::MinimumTime);
	this->wsnt__UnacceptableInitialTerminationTimeFaultType::MaximumTime = NULL;
}

void wsnt__UnacceptableInitialTerminationTimeFaultType::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_embedded(soap, &this->wsnt__UnacceptableInitialTerminationTimeFaultType::MinimumTime, SOAP_TYPE_time);
	soap_serialize_PointerTotime(soap, &this->wsnt__UnacceptableInitialTerminationTimeFaultType::MaximumTime);
	this->wsrfbf__BaseFaultType::soap_serialize(soap);
#endif
}

int wsnt__UnacceptableInitialTerminationTimeFaultType::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_wsnt__UnacceptableInitialTerminationTimeFaultType(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_wsnt__UnacceptableInitialTerminationTimeFaultType(struct soap *soap, const char *tag, int id, const wsnt__UnacceptableInitialTerminationTimeFaultType *a, const char *type)
{
	if (((wsrfbf__BaseFaultType*)a)->__anyAttribute)
		soap_set_attr(soap, "-anyAttribute", ((wsrfbf__BaseFaultType*)a)->__anyAttribute, 1);
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_wsnt__UnacceptableInitialTerminationTimeFaultType), "wsnt:UnacceptableInitialTerminationTimeFaultType"))
		return soap->error;
	/* transient soap skipped */
	if (soap_out_std__vectorTemplateOf_XML(soap, "-any", -1, &(a->wsrfbf__BaseFaultType::__any), ""))
		return soap->error;
	if (soap_out_time(soap, "wsrfbf:Timestamp", -1, &(a->wsrfbf__BaseFaultType::Timestamp), ""))
		return soap->error;
	if (soap_out_PointerTowsa5__EndpointReferenceType(soap, "wsrfbf:Originator", -1, &(a->wsrfbf__BaseFaultType::Originator), ""))
		return soap->error;
	if (soap_out_PointerTo_wsrfbf__BaseFaultType_ErrorCode(soap, "wsrfbf:ErrorCode", -1, &(a->wsrfbf__BaseFaultType::ErrorCode), ""))
		return soap->error;
	if (soap_out_PointerTostd__vectorTemplateOf_wsrfbf__BaseFaultType_Description(soap, "wsrfbf:Description", -1, &(a->wsrfbf__BaseFaultType::Description), ""))
		return soap->error;
	if (soap_out_PointerTo_wsrfbf__BaseFaultType_FaultCause(soap, "wsrfbf:FaultCause", -1, &(a->wsrfbf__BaseFaultType::FaultCause), ""))
		return soap->error;
	if (soap_out_time(soap, "wsnt:MinimumTime", -1, &(a->wsnt__UnacceptableInitialTerminationTimeFaultType::MinimumTime), ""))
		return soap->error;
	if (soap_out_PointerTotime(soap, "wsnt:MaximumTime", -1, &(a->wsnt__UnacceptableInitialTerminationTimeFaultType::MaximumTime), ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *wsnt__UnacceptableInitialTerminationTimeFaultType::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_wsnt__UnacceptableInitialTerminationTimeFaultType(soap, tag, this, type);
}

SOAP_FMAC3 wsnt__UnacceptableInitialTerminationTimeFaultType * SOAP_FMAC4 soap_in_wsnt__UnacceptableInitialTerminationTimeFaultType(struct soap *soap, const char *tag, wsnt__UnacceptableInitialTerminationTimeFaultType *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (wsnt__UnacceptableInitialTerminationTimeFaultType *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_wsnt__UnacceptableInitialTerminationTimeFaultType, sizeof(wsnt__UnacceptableInitialTerminationTimeFaultType), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_wsnt__UnacceptableInitialTerminationTimeFaultType)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (wsnt__UnacceptableInitialTerminationTimeFaultType *)a->soap_in(soap, tag, type);
		}
	}
	if (soap_s2string(soap, soap_attr_value(soap, "-anyAttribute", 0), &((wsrfbf__BaseFaultType*)a)->__anyAttribute, 0, -1))
		return NULL;
	size_t soap_flag___item3 = 1;
	size_t soap_flag_Timestamp2 = 1;
	size_t soap_flag_Originator2 = 1;
	size_t soap_flag_ErrorCode2 = 1;
	size_t soap_flag_FaultCause2 = 1;
	size_t soap_flag_MinimumTime1 = 1;
	size_t soap_flag_MaximumTime1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			/* transient soap skipped */
			if (soap_flag_Timestamp2 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_time(soap, "wsrfbf:Timestamp", &(a->wsrfbf__BaseFaultType::Timestamp), "xsd:dateTime"))
				{	soap_flag_Timestamp2--;
					continue;
				}
			if (soap_flag_Originator2 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTowsa5__EndpointReferenceType(soap, "wsrfbf:Originator", &(a->wsrfbf__BaseFaultType::Originator), "wsa5:EndpointReferenceType"))
				{	soap_flag_Originator2--;
					continue;
				}
			if (soap_flag_ErrorCode2 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_wsrfbf__BaseFaultType_ErrorCode(soap, "wsrfbf:ErrorCode", &(a->wsrfbf__BaseFaultType::ErrorCode), ""))
				{	soap_flag_ErrorCode2--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTostd__vectorTemplateOf_wsrfbf__BaseFaultType_Description(soap, "wsrfbf:Description", &(a->wsrfbf__BaseFaultType::Description), ""))
					continue;
			if (soap_flag_FaultCause2 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_wsrfbf__BaseFaultType_FaultCause(soap, "wsrfbf:FaultCause", &(a->wsrfbf__BaseFaultType::FaultCause), ""))
				{	soap_flag_FaultCause2--;
					continue;
				}
			if (soap_flag_MinimumTime1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_time(soap, "wsnt:MinimumTime", &(a->wsnt__UnacceptableInitialTerminationTimeFaultType::MinimumTime), "xsd:dateTime"))
				{	soap_flag_MinimumTime1--;
					continue;
				}
			if (soap_flag_MaximumTime1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTotime(soap, "wsnt:MaximumTime", &(a->wsnt__UnacceptableInitialTerminationTimeFaultType::MaximumTime), "xsd:dateTime"))
				{	soap_flag_MaximumTime1--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_std__vectorTemplateOf_XML(soap, "-any", &(a->wsrfbf__BaseFaultType::__any), ""))
					continue;
			if (soap_flag___item3 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_inliteral(soap, "-item", &(a->xsd__anyType::__item)))
				{	soap_flag___item3--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (wsnt__UnacceptableInitialTerminationTimeFaultType *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_wsnt__UnacceptableInitialTerminationTimeFaultType, 0, sizeof(wsnt__UnacceptableInitialTerminationTimeFaultType), 0, soap_copy_wsnt__UnacceptableInitialTerminationTimeFaultType);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_Timestamp2 > 0 || soap_flag_MinimumTime1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int wsnt__UnacceptableInitialTerminationTimeFaultType::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	int id = soap_embed(soap, (void*)this, NULL, 0, SOAP_TYPE_wsnt__UnacceptableInitialTerminationTimeFaultType);
	if (this->soap_out(soap, tag?tag:"wsnt:UnacceptableInitialTerminationTimeFaultType", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *wsnt__UnacceptableInitialTerminationTimeFaultType::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_wsnt__UnacceptableInitialTerminationTimeFaultType(soap, this, tag, type);
}

SOAP_FMAC3 wsnt__UnacceptableInitialTerminationTimeFaultType * SOAP_FMAC4 soap_get_wsnt__UnacceptableInitialTerminationTimeFaultType(struct soap *soap, wsnt__UnacceptableInitialTerminationTimeFaultType *p, const char *tag, const char *type)
{
	if ((p = soap_in_wsnt__UnacceptableInitialTerminationTimeFaultType(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 wsnt__UnacceptableInitialTerminationTimeFaultType * SOAP_FMAC2 soap_instantiate_wsnt__UnacceptableInitialTerminationTimeFaultType(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_wsnt__UnacceptableInitialTerminationTimeFaultType(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_wsnt__UnacceptableInitialTerminationTimeFaultType, n, onvifevent_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = SOAP_NEW(wsnt__UnacceptableInitialTerminationTimeFaultType);
		if (size)
			*size = sizeof(wsnt__UnacceptableInitialTerminationTimeFaultType);
		((wsnt__UnacceptableInitialTerminationTimeFaultType*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = SOAP_NEW_ARRAY(wsnt__UnacceptableInitialTerminationTimeFaultType, n);
		if (size)
			*size = n * sizeof(wsnt__UnacceptableInitialTerminationTimeFaultType);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((wsnt__UnacceptableInitialTerminationTimeFaultType*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (wsnt__UnacceptableInitialTerminationTimeFaultType*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_wsnt__UnacceptableInitialTerminationTimeFaultType(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying wsnt__UnacceptableInitialTerminationTimeFaultType %p -> %p\n", q, p));
	*(wsnt__UnacceptableInitialTerminationTimeFaultType*)p = *(wsnt__UnacceptableInitialTerminationTimeFaultType*)q;
}

void wsnt__NotifyMessageNotSupportedFaultType::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->wsrfbf__BaseFaultType::soap_default(soap);
}

void wsnt__NotifyMessageNotSupportedFaultType::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	this->wsrfbf__BaseFaultType::soap_serialize(soap);
#endif
}

int wsnt__NotifyMessageNotSupportedFaultType::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_wsnt__NotifyMessageNotSupportedFaultType(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_wsnt__NotifyMessageNotSupportedFaultType(struct soap *soap, const char *tag, int id, const wsnt__NotifyMessageNotSupportedFaultType *a, const char *type)
{
	if (((wsrfbf__BaseFaultType*)a)->__anyAttribute)
		soap_set_attr(soap, "-anyAttribute", ((wsrfbf__BaseFaultType*)a)->__anyAttribute, 1);
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_wsnt__NotifyMessageNotSupportedFaultType), "wsnt:NotifyMessageNotSupportedFaultType"))
		return soap->error;
	/* transient soap skipped */
	if (soap_out_std__vectorTemplateOf_XML(soap, "-any", -1, &(a->wsrfbf__BaseFaultType::__any), ""))
		return soap->error;
	if (soap_out_time(soap, "wsrfbf:Timestamp", -1, &(a->wsrfbf__BaseFaultType::Timestamp), ""))
		return soap->error;
	if (soap_out_PointerTowsa5__EndpointReferenceType(soap, "wsrfbf:Originator", -1, &(a->wsrfbf__BaseFaultType::Originator), ""))
		return soap->error;
	if (soap_out_PointerTo_wsrfbf__BaseFaultType_ErrorCode(soap, "wsrfbf:ErrorCode", -1, &(a->wsrfbf__BaseFaultType::ErrorCode), ""))
		return soap->error;
	if (soap_out_PointerTostd__vectorTemplateOf_wsrfbf__BaseFaultType_Description(soap, "wsrfbf:Description", -1, &(a->wsrfbf__BaseFaultType::Description), ""))
		return soap->error;
	if (soap_out_PointerTo_wsrfbf__BaseFaultType_FaultCause(soap, "wsrfbf:FaultCause", -1, &(a->wsrfbf__BaseFaultType::FaultCause), ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *wsnt__NotifyMessageNotSupportedFaultType::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_wsnt__NotifyMessageNotSupportedFaultType(soap, tag, this, type);
}

SOAP_FMAC3 wsnt__NotifyMessageNotSupportedFaultType * SOAP_FMAC4 soap_in_wsnt__NotifyMessageNotSupportedFaultType(struct soap *soap, const char *tag, wsnt__NotifyMessageNotSupportedFaultType *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (wsnt__NotifyMessageNotSupportedFaultType *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_wsnt__NotifyMessageNotSupportedFaultType, sizeof(wsnt__NotifyMessageNotSupportedFaultType), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_wsnt__NotifyMessageNotSupportedFaultType)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (wsnt__NotifyMessageNotSupportedFaultType *)a->soap_in(soap, tag, type);
		}
	}
	if (soap_s2string(soap, soap_attr_value(soap, "-anyAttribute", 0), &((wsrfbf__BaseFaultType*)a)->__anyAttribute, 0, -1))
		return NULL;
	size_t soap_flag___item3 = 1;
	size_t soap_flag_Timestamp2 = 1;
	size_t soap_flag_Originator2 = 1;
	size_t soap_flag_ErrorCode2 = 1;
	size_t soap_flag_FaultCause2 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			/* transient soap skipped */
			if (soap_flag_Timestamp2 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_time(soap, "wsrfbf:Timestamp", &(a->wsrfbf__BaseFaultType::Timestamp), "xsd:dateTime"))
				{	soap_flag_Timestamp2--;
					continue;
				}
			if (soap_flag_Originator2 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTowsa5__EndpointReferenceType(soap, "wsrfbf:Originator", &(a->wsrfbf__BaseFaultType::Originator), "wsa5:EndpointReferenceType"))
				{	soap_flag_Originator2--;
					continue;
				}
			if (soap_flag_ErrorCode2 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_wsrfbf__BaseFaultType_ErrorCode(soap, "wsrfbf:ErrorCode", &(a->wsrfbf__BaseFaultType::ErrorCode), ""))
				{	soap_flag_ErrorCode2--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTostd__vectorTemplateOf_wsrfbf__BaseFaultType_Description(soap, "wsrfbf:Description", &(a->wsrfbf__BaseFaultType::Description), ""))
					continue;
			if (soap_flag_FaultCause2 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_wsrfbf__BaseFaultType_FaultCause(soap, "wsrfbf:FaultCause", &(a->wsrfbf__BaseFaultType::FaultCause), ""))
				{	soap_flag_FaultCause2--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_std__vectorTemplateOf_XML(soap, "-any", &(a->wsrfbf__BaseFaultType::__any), ""))
					continue;
			if (soap_flag___item3 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_inliteral(soap, "-item", &(a->xsd__anyType::__item)))
				{	soap_flag___item3--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (wsnt__NotifyMessageNotSupportedFaultType *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_wsnt__NotifyMessageNotSupportedFaultType, 0, sizeof(wsnt__NotifyMessageNotSupportedFaultType), 0, soap_copy_wsnt__NotifyMessageNotSupportedFaultType);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_Timestamp2 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int wsnt__NotifyMessageNotSupportedFaultType::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	int id = soap_embed(soap, (void*)this, NULL, 0, SOAP_TYPE_wsnt__NotifyMessageNotSupportedFaultType);
	if (this->soap_out(soap, tag?tag:"wsnt:NotifyMessageNotSupportedFaultType", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *wsnt__NotifyMessageNotSupportedFaultType::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_wsnt__NotifyMessageNotSupportedFaultType(soap, this, tag, type);
}

SOAP_FMAC3 wsnt__NotifyMessageNotSupportedFaultType * SOAP_FMAC4 soap_get_wsnt__NotifyMessageNotSupportedFaultType(struct soap *soap, wsnt__NotifyMessageNotSupportedFaultType *p, const char *tag, const char *type)
{
	if ((p = soap_in_wsnt__NotifyMessageNotSupportedFaultType(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 wsnt__NotifyMessageNotSupportedFaultType * SOAP_FMAC2 soap_instantiate_wsnt__NotifyMessageNotSupportedFaultType(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_wsnt__NotifyMessageNotSupportedFaultType(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_wsnt__NotifyMessageNotSupportedFaultType, n, onvifevent_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = SOAP_NEW(wsnt__NotifyMessageNotSupportedFaultType);
		if (size)
			*size = sizeof(wsnt__NotifyMessageNotSupportedFaultType);
		((wsnt__NotifyMessageNotSupportedFaultType*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = SOAP_NEW_ARRAY(wsnt__NotifyMessageNotSupportedFaultType, n);
		if (size)
			*size = n * sizeof(wsnt__NotifyMessageNotSupportedFaultType);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((wsnt__NotifyMessageNotSupportedFaultType*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (wsnt__NotifyMessageNotSupportedFaultType*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_wsnt__NotifyMessageNotSupportedFaultType(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying wsnt__NotifyMessageNotSupportedFaultType %p -> %p\n", q, p));
	*(wsnt__NotifyMessageNotSupportedFaultType*)p = *(wsnt__NotifyMessageNotSupportedFaultType*)q;
}

void wsnt__UnsupportedPolicyRequestFaultType::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->wsrfbf__BaseFaultType::soap_default(soap);
	soap_default_std__vectorTemplateOfxsd__QName(soap, &this->wsnt__UnsupportedPolicyRequestFaultType::UnsupportedPolicy);
}

void wsnt__UnsupportedPolicyRequestFaultType::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_std__vectorTemplateOfxsd__QName(soap, &this->wsnt__UnsupportedPolicyRequestFaultType::UnsupportedPolicy);
	this->wsrfbf__BaseFaultType::soap_serialize(soap);
#endif
}

int wsnt__UnsupportedPolicyRequestFaultType::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_wsnt__UnsupportedPolicyRequestFaultType(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_wsnt__UnsupportedPolicyRequestFaultType(struct soap *soap, const char *tag, int id, const wsnt__UnsupportedPolicyRequestFaultType *a, const char *type)
{
	if (((wsrfbf__BaseFaultType*)a)->__anyAttribute)
		soap_set_attr(soap, "-anyAttribute", ((wsrfbf__BaseFaultType*)a)->__anyAttribute, 1);
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_wsnt__UnsupportedPolicyRequestFaultType), "wsnt:UnsupportedPolicyRequestFaultType"))
		return soap->error;
	/* transient soap skipped */
	if (soap_out_std__vectorTemplateOf_XML(soap, "-any", -1, &(a->wsrfbf__BaseFaultType::__any), ""))
		return soap->error;
	if (soap_out_time(soap, "wsrfbf:Timestamp", -1, &(a->wsrfbf__BaseFaultType::Timestamp), ""))
		return soap->error;
	if (soap_out_PointerTowsa5__EndpointReferenceType(soap, "wsrfbf:Originator", -1, &(a->wsrfbf__BaseFaultType::Originator), ""))
		return soap->error;
	if (soap_out_PointerTo_wsrfbf__BaseFaultType_ErrorCode(soap, "wsrfbf:ErrorCode", -1, &(a->wsrfbf__BaseFaultType::ErrorCode), ""))
		return soap->error;
	if (soap_out_PointerTostd__vectorTemplateOf_wsrfbf__BaseFaultType_Description(soap, "wsrfbf:Description", -1, &(a->wsrfbf__BaseFaultType::Description), ""))
		return soap->error;
	if (soap_out_PointerTo_wsrfbf__BaseFaultType_FaultCause(soap, "wsrfbf:FaultCause", -1, &(a->wsrfbf__BaseFaultType::FaultCause), ""))
		return soap->error;
	if (soap_out_std__vectorTemplateOfxsd__QName(soap, "wsnt:UnsupportedPolicy", -1, &(a->wsnt__UnsupportedPolicyRequestFaultType::UnsupportedPolicy), ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *wsnt__UnsupportedPolicyRequestFaultType::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_wsnt__UnsupportedPolicyRequestFaultType(soap, tag, this, type);
}

SOAP_FMAC3 wsnt__UnsupportedPolicyRequestFaultType * SOAP_FMAC4 soap_in_wsnt__UnsupportedPolicyRequestFaultType(struct soap *soap, const char *tag, wsnt__UnsupportedPolicyRequestFaultType *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (wsnt__UnsupportedPolicyRequestFaultType *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_wsnt__UnsupportedPolicyRequestFaultType, sizeof(wsnt__UnsupportedPolicyRequestFaultType), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_wsnt__UnsupportedPolicyRequestFaultType)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (wsnt__UnsupportedPolicyRequestFaultType *)a->soap_in(soap, tag, type);
		}
	}
	if (soap_s2string(soap, soap_attr_value(soap, "-anyAttribute", 0), &((wsrfbf__BaseFaultType*)a)->__anyAttribute, 0, -1))
		return NULL;
	size_t soap_flag___item3 = 1;
	size_t soap_flag_Timestamp2 = 1;
	size_t soap_flag_Originator2 = 1;
	size_t soap_flag_ErrorCode2 = 1;
	size_t soap_flag_FaultCause2 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			/* transient soap skipped */
			if (soap_flag_Timestamp2 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_time(soap, "wsrfbf:Timestamp", &(a->wsrfbf__BaseFaultType::Timestamp), "xsd:dateTime"))
				{	soap_flag_Timestamp2--;
					continue;
				}
			if (soap_flag_Originator2 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTowsa5__EndpointReferenceType(soap, "wsrfbf:Originator", &(a->wsrfbf__BaseFaultType::Originator), "wsa5:EndpointReferenceType"))
				{	soap_flag_Originator2--;
					continue;
				}
			if (soap_flag_ErrorCode2 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_wsrfbf__BaseFaultType_ErrorCode(soap, "wsrfbf:ErrorCode", &(a->wsrfbf__BaseFaultType::ErrorCode), ""))
				{	soap_flag_ErrorCode2--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTostd__vectorTemplateOf_wsrfbf__BaseFaultType_Description(soap, "wsrfbf:Description", &(a->wsrfbf__BaseFaultType::Description), ""))
					continue;
			if (soap_flag_FaultCause2 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_wsrfbf__BaseFaultType_FaultCause(soap, "wsrfbf:FaultCause", &(a->wsrfbf__BaseFaultType::FaultCause), ""))
				{	soap_flag_FaultCause2--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_std__vectorTemplateOfxsd__QName(soap, "wsnt:UnsupportedPolicy", &(a->wsnt__UnsupportedPolicyRequestFaultType::UnsupportedPolicy), "xsd:QName"))
					continue;
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_std__vectorTemplateOf_XML(soap, "-any", &(a->wsrfbf__BaseFaultType::__any), ""))
					continue;
			if (soap_flag___item3 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_inliteral(soap, "-item", &(a->xsd__anyType::__item)))
				{	soap_flag___item3--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (wsnt__UnsupportedPolicyRequestFaultType *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_wsnt__UnsupportedPolicyRequestFaultType, 0, sizeof(wsnt__UnsupportedPolicyRequestFaultType), 0, soap_copy_wsnt__UnsupportedPolicyRequestFaultType);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_Timestamp2 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int wsnt__UnsupportedPolicyRequestFaultType::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	int id = soap_embed(soap, (void*)this, NULL, 0, SOAP_TYPE_wsnt__UnsupportedPolicyRequestFaultType);
	if (this->soap_out(soap, tag?tag:"wsnt:UnsupportedPolicyRequestFaultType", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *wsnt__UnsupportedPolicyRequestFaultType::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_wsnt__UnsupportedPolicyRequestFaultType(soap, this, tag, type);
}

SOAP_FMAC3 wsnt__UnsupportedPolicyRequestFaultType * SOAP_FMAC4 soap_get_wsnt__UnsupportedPolicyRequestFaultType(struct soap *soap, wsnt__UnsupportedPolicyRequestFaultType *p, const char *tag, const char *type)
{
	if ((p = soap_in_wsnt__UnsupportedPolicyRequestFaultType(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 wsnt__UnsupportedPolicyRequestFaultType * SOAP_FMAC2 soap_instantiate_wsnt__UnsupportedPolicyRequestFaultType(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_wsnt__UnsupportedPolicyRequestFaultType(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_wsnt__UnsupportedPolicyRequestFaultType, n, onvifevent_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = SOAP_NEW(wsnt__UnsupportedPolicyRequestFaultType);
		if (size)
			*size = sizeof(wsnt__UnsupportedPolicyRequestFaultType);
		((wsnt__UnsupportedPolicyRequestFaultType*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = SOAP_NEW_ARRAY(wsnt__UnsupportedPolicyRequestFaultType, n);
		if (size)
			*size = n * sizeof(wsnt__UnsupportedPolicyRequestFaultType);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((wsnt__UnsupportedPolicyRequestFaultType*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (wsnt__UnsupportedPolicyRequestFaultType*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_wsnt__UnsupportedPolicyRequestFaultType(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying wsnt__UnsupportedPolicyRequestFaultType %p -> %p\n", q, p));
	*(wsnt__UnsupportedPolicyRequestFaultType*)p = *(wsnt__UnsupportedPolicyRequestFaultType*)q;
}

void wsnt__UnrecognizedPolicyRequestFaultType::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->wsrfbf__BaseFaultType::soap_default(soap);
	soap_default_std__vectorTemplateOfxsd__QName(soap, &this->wsnt__UnrecognizedPolicyRequestFaultType::UnrecognizedPolicy);
}

void wsnt__UnrecognizedPolicyRequestFaultType::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_std__vectorTemplateOfxsd__QName(soap, &this->wsnt__UnrecognizedPolicyRequestFaultType::UnrecognizedPolicy);
	this->wsrfbf__BaseFaultType::soap_serialize(soap);
#endif
}

int wsnt__UnrecognizedPolicyRequestFaultType::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_wsnt__UnrecognizedPolicyRequestFaultType(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_wsnt__UnrecognizedPolicyRequestFaultType(struct soap *soap, const char *tag, int id, const wsnt__UnrecognizedPolicyRequestFaultType *a, const char *type)
{
	if (((wsrfbf__BaseFaultType*)a)->__anyAttribute)
		soap_set_attr(soap, "-anyAttribute", ((wsrfbf__BaseFaultType*)a)->__anyAttribute, 1);
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_wsnt__UnrecognizedPolicyRequestFaultType), "wsnt:UnrecognizedPolicyRequestFaultType"))
		return soap->error;
	/* transient soap skipped */
	if (soap_out_std__vectorTemplateOf_XML(soap, "-any", -1, &(a->wsrfbf__BaseFaultType::__any), ""))
		return soap->error;
	if (soap_out_time(soap, "wsrfbf:Timestamp", -1, &(a->wsrfbf__BaseFaultType::Timestamp), ""))
		return soap->error;
	if (soap_out_PointerTowsa5__EndpointReferenceType(soap, "wsrfbf:Originator", -1, &(a->wsrfbf__BaseFaultType::Originator), ""))
		return soap->error;
	if (soap_out_PointerTo_wsrfbf__BaseFaultType_ErrorCode(soap, "wsrfbf:ErrorCode", -1, &(a->wsrfbf__BaseFaultType::ErrorCode), ""))
		return soap->error;
	if (soap_out_PointerTostd__vectorTemplateOf_wsrfbf__BaseFaultType_Description(soap, "wsrfbf:Description", -1, &(a->wsrfbf__BaseFaultType::Description), ""))
		return soap->error;
	if (soap_out_PointerTo_wsrfbf__BaseFaultType_FaultCause(soap, "wsrfbf:FaultCause", -1, &(a->wsrfbf__BaseFaultType::FaultCause), ""))
		return soap->error;
	if (soap_out_std__vectorTemplateOfxsd__QName(soap, "wsnt:UnrecognizedPolicy", -1, &(a->wsnt__UnrecognizedPolicyRequestFaultType::UnrecognizedPolicy), ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *wsnt__UnrecognizedPolicyRequestFaultType::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_wsnt__UnrecognizedPolicyRequestFaultType(soap, tag, this, type);
}

SOAP_FMAC3 wsnt__UnrecognizedPolicyRequestFaultType * SOAP_FMAC4 soap_in_wsnt__UnrecognizedPolicyRequestFaultType(struct soap *soap, const char *tag, wsnt__UnrecognizedPolicyRequestFaultType *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (wsnt__UnrecognizedPolicyRequestFaultType *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_wsnt__UnrecognizedPolicyRequestFaultType, sizeof(wsnt__UnrecognizedPolicyRequestFaultType), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_wsnt__UnrecognizedPolicyRequestFaultType)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (wsnt__UnrecognizedPolicyRequestFaultType *)a->soap_in(soap, tag, type);
		}
	}
	if (soap_s2string(soap, soap_attr_value(soap, "-anyAttribute", 0), &((wsrfbf__BaseFaultType*)a)->__anyAttribute, 0, -1))
		return NULL;
	size_t soap_flag___item3 = 1;
	size_t soap_flag_Timestamp2 = 1;
	size_t soap_flag_Originator2 = 1;
	size_t soap_flag_ErrorCode2 = 1;
	size_t soap_flag_FaultCause2 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			/* transient soap skipped */
			if (soap_flag_Timestamp2 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_time(soap, "wsrfbf:Timestamp", &(a->wsrfbf__BaseFaultType::Timestamp), "xsd:dateTime"))
				{	soap_flag_Timestamp2--;
					continue;
				}
			if (soap_flag_Originator2 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTowsa5__EndpointReferenceType(soap, "wsrfbf:Originator", &(a->wsrfbf__BaseFaultType::Originator), "wsa5:EndpointReferenceType"))
				{	soap_flag_Originator2--;
					continue;
				}
			if (soap_flag_ErrorCode2 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_wsrfbf__BaseFaultType_ErrorCode(soap, "wsrfbf:ErrorCode", &(a->wsrfbf__BaseFaultType::ErrorCode), ""))
				{	soap_flag_ErrorCode2--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTostd__vectorTemplateOf_wsrfbf__BaseFaultType_Description(soap, "wsrfbf:Description", &(a->wsrfbf__BaseFaultType::Description), ""))
					continue;
			if (soap_flag_FaultCause2 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_wsrfbf__BaseFaultType_FaultCause(soap, "wsrfbf:FaultCause", &(a->wsrfbf__BaseFaultType::FaultCause), ""))
				{	soap_flag_FaultCause2--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_std__vectorTemplateOfxsd__QName(soap, "wsnt:UnrecognizedPolicy", &(a->wsnt__UnrecognizedPolicyRequestFaultType::UnrecognizedPolicy), "xsd:QName"))
					continue;
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_std__vectorTemplateOf_XML(soap, "-any", &(a->wsrfbf__BaseFaultType::__any), ""))
					continue;
			if (soap_flag___item3 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_inliteral(soap, "-item", &(a->xsd__anyType::__item)))
				{	soap_flag___item3--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (wsnt__UnrecognizedPolicyRequestFaultType *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_wsnt__UnrecognizedPolicyRequestFaultType, 0, sizeof(wsnt__UnrecognizedPolicyRequestFaultType), 0, soap_copy_wsnt__UnrecognizedPolicyRequestFaultType);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_Timestamp2 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int wsnt__UnrecognizedPolicyRequestFaultType::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	int id = soap_embed(soap, (void*)this, NULL, 0, SOAP_TYPE_wsnt__UnrecognizedPolicyRequestFaultType);
	if (this->soap_out(soap, tag?tag:"wsnt:UnrecognizedPolicyRequestFaultType", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *wsnt__UnrecognizedPolicyRequestFaultType::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_wsnt__UnrecognizedPolicyRequestFaultType(soap, this, tag, type);
}

SOAP_FMAC3 wsnt__UnrecognizedPolicyRequestFaultType * SOAP_FMAC4 soap_get_wsnt__UnrecognizedPolicyRequestFaultType(struct soap *soap, wsnt__UnrecognizedPolicyRequestFaultType *p, const char *tag, const char *type)
{
	if ((p = soap_in_wsnt__UnrecognizedPolicyRequestFaultType(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 wsnt__UnrecognizedPolicyRequestFaultType * SOAP_FMAC2 soap_instantiate_wsnt__UnrecognizedPolicyRequestFaultType(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_wsnt__UnrecognizedPolicyRequestFaultType(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_wsnt__UnrecognizedPolicyRequestFaultType, n, onvifevent_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = SOAP_NEW(wsnt__UnrecognizedPolicyRequestFaultType);
		if (size)
			*size = sizeof(wsnt__UnrecognizedPolicyRequestFaultType);
		((wsnt__UnrecognizedPolicyRequestFaultType*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = SOAP_NEW_ARRAY(wsnt__UnrecognizedPolicyRequestFaultType, n);
		if (size)
			*size = n * sizeof(wsnt__UnrecognizedPolicyRequestFaultType);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((wsnt__UnrecognizedPolicyRequestFaultType*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (wsnt__UnrecognizedPolicyRequestFaultType*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_wsnt__UnrecognizedPolicyRequestFaultType(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying wsnt__UnrecognizedPolicyRequestFaultType %p -> %p\n", q, p));
	*(wsnt__UnrecognizedPolicyRequestFaultType*)p = *(wsnt__UnrecognizedPolicyRequestFaultType*)q;
}

void wsnt__InvalidMessageContentExpressionFaultType::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->wsrfbf__BaseFaultType::soap_default(soap);
}

void wsnt__InvalidMessageContentExpressionFaultType::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	this->wsrfbf__BaseFaultType::soap_serialize(soap);
#endif
}

int wsnt__InvalidMessageContentExpressionFaultType::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_wsnt__InvalidMessageContentExpressionFaultType(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_wsnt__InvalidMessageContentExpressionFaultType(struct soap *soap, const char *tag, int id, const wsnt__InvalidMessageContentExpressionFaultType *a, const char *type)
{
	if (((wsrfbf__BaseFaultType*)a)->__anyAttribute)
		soap_set_attr(soap, "-anyAttribute", ((wsrfbf__BaseFaultType*)a)->__anyAttribute, 1);
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_wsnt__InvalidMessageContentExpressionFaultType), "wsnt:InvalidMessageContentExpressionFaultType"))
		return soap->error;
	/* transient soap skipped */
	if (soap_out_std__vectorTemplateOf_XML(soap, "-any", -1, &(a->wsrfbf__BaseFaultType::__any), ""))
		return soap->error;
	if (soap_out_time(soap, "wsrfbf:Timestamp", -1, &(a->wsrfbf__BaseFaultType::Timestamp), ""))
		return soap->error;
	if (soap_out_PointerTowsa5__EndpointReferenceType(soap, "wsrfbf:Originator", -1, &(a->wsrfbf__BaseFaultType::Originator), ""))
		return soap->error;
	if (soap_out_PointerTo_wsrfbf__BaseFaultType_ErrorCode(soap, "wsrfbf:ErrorCode", -1, &(a->wsrfbf__BaseFaultType::ErrorCode), ""))
		return soap->error;
	if (soap_out_PointerTostd__vectorTemplateOf_wsrfbf__BaseFaultType_Description(soap, "wsrfbf:Description", -1, &(a->wsrfbf__BaseFaultType::Description), ""))
		return soap->error;
	if (soap_out_PointerTo_wsrfbf__BaseFaultType_FaultCause(soap, "wsrfbf:FaultCause", -1, &(a->wsrfbf__BaseFaultType::FaultCause), ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *wsnt__InvalidMessageContentExpressionFaultType::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_wsnt__InvalidMessageContentExpressionFaultType(soap, tag, this, type);
}

SOAP_FMAC3 wsnt__InvalidMessageContentExpressionFaultType * SOAP_FMAC4 soap_in_wsnt__InvalidMessageContentExpressionFaultType(struct soap *soap, const char *tag, wsnt__InvalidMessageContentExpressionFaultType *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (wsnt__InvalidMessageContentExpressionFaultType *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_wsnt__InvalidMessageContentExpressionFaultType, sizeof(wsnt__InvalidMessageContentExpressionFaultType), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_wsnt__InvalidMessageContentExpressionFaultType)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (wsnt__InvalidMessageContentExpressionFaultType *)a->soap_in(soap, tag, type);
		}
	}
	if (soap_s2string(soap, soap_attr_value(soap, "-anyAttribute", 0), &((wsrfbf__BaseFaultType*)a)->__anyAttribute, 0, -1))
		return NULL;
	size_t soap_flag___item3 = 1;
	size_t soap_flag_Timestamp2 = 1;
	size_t soap_flag_Originator2 = 1;
	size_t soap_flag_ErrorCode2 = 1;
	size_t soap_flag_FaultCause2 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			/* transient soap skipped */
			if (soap_flag_Timestamp2 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_time(soap, "wsrfbf:Timestamp", &(a->wsrfbf__BaseFaultType::Timestamp), "xsd:dateTime"))
				{	soap_flag_Timestamp2--;
					continue;
				}
			if (soap_flag_Originator2 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTowsa5__EndpointReferenceType(soap, "wsrfbf:Originator", &(a->wsrfbf__BaseFaultType::Originator), "wsa5:EndpointReferenceType"))
				{	soap_flag_Originator2--;
					continue;
				}
			if (soap_flag_ErrorCode2 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_wsrfbf__BaseFaultType_ErrorCode(soap, "wsrfbf:ErrorCode", &(a->wsrfbf__BaseFaultType::ErrorCode), ""))
				{	soap_flag_ErrorCode2--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTostd__vectorTemplateOf_wsrfbf__BaseFaultType_Description(soap, "wsrfbf:Description", &(a->wsrfbf__BaseFaultType::Description), ""))
					continue;
			if (soap_flag_FaultCause2 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_wsrfbf__BaseFaultType_FaultCause(soap, "wsrfbf:FaultCause", &(a->wsrfbf__BaseFaultType::FaultCause), ""))
				{	soap_flag_FaultCause2--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_std__vectorTemplateOf_XML(soap, "-any", &(a->wsrfbf__BaseFaultType::__any), ""))
					continue;
			if (soap_flag___item3 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_inliteral(soap, "-item", &(a->xsd__anyType::__item)))
				{	soap_flag___item3--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (wsnt__InvalidMessageContentExpressionFaultType *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_wsnt__InvalidMessageContentExpressionFaultType, 0, sizeof(wsnt__InvalidMessageContentExpressionFaultType), 0, soap_copy_wsnt__InvalidMessageContentExpressionFaultType);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_Timestamp2 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int wsnt__InvalidMessageContentExpressionFaultType::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	int id = soap_embed(soap, (void*)this, NULL, 0, SOAP_TYPE_wsnt__InvalidMessageContentExpressionFaultType);
	if (this->soap_out(soap, tag?tag:"wsnt:InvalidMessageContentExpressionFaultType", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *wsnt__InvalidMessageContentExpressionFaultType::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_wsnt__InvalidMessageContentExpressionFaultType(soap, this, tag, type);
}

SOAP_FMAC3 wsnt__InvalidMessageContentExpressionFaultType * SOAP_FMAC4 soap_get_wsnt__InvalidMessageContentExpressionFaultType(struct soap *soap, wsnt__InvalidMessageContentExpressionFaultType *p, const char *tag, const char *type)
{
	if ((p = soap_in_wsnt__InvalidMessageContentExpressionFaultType(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 wsnt__InvalidMessageContentExpressionFaultType * SOAP_FMAC2 soap_instantiate_wsnt__InvalidMessageContentExpressionFaultType(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_wsnt__InvalidMessageContentExpressionFaultType(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_wsnt__InvalidMessageContentExpressionFaultType, n, onvifevent_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = SOAP_NEW(wsnt__InvalidMessageContentExpressionFaultType);
		if (size)
			*size = sizeof(wsnt__InvalidMessageContentExpressionFaultType);
		((wsnt__InvalidMessageContentExpressionFaultType*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = SOAP_NEW_ARRAY(wsnt__InvalidMessageContentExpressionFaultType, n);
		if (size)
			*size = n * sizeof(wsnt__InvalidMessageContentExpressionFaultType);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((wsnt__InvalidMessageContentExpressionFaultType*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (wsnt__InvalidMessageContentExpressionFaultType*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_wsnt__InvalidMessageContentExpressionFaultType(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying wsnt__InvalidMessageContentExpressionFaultType %p -> %p\n", q, p));
	*(wsnt__InvalidMessageContentExpressionFaultType*)p = *(wsnt__InvalidMessageContentExpressionFaultType*)q;
}

void wsnt__InvalidProducerPropertiesExpressionFaultType::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->wsrfbf__BaseFaultType::soap_default(soap);
}

void wsnt__InvalidProducerPropertiesExpressionFaultType::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	this->wsrfbf__BaseFaultType::soap_serialize(soap);
#endif
}

int wsnt__InvalidProducerPropertiesExpressionFaultType::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_wsnt__InvalidProducerPropertiesExpressionFaultType(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_wsnt__InvalidProducerPropertiesExpressionFaultType(struct soap *soap, const char *tag, int id, const wsnt__InvalidProducerPropertiesExpressionFaultType *a, const char *type)
{
	if (((wsrfbf__BaseFaultType*)a)->__anyAttribute)
		soap_set_attr(soap, "-anyAttribute", ((wsrfbf__BaseFaultType*)a)->__anyAttribute, 1);
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_wsnt__InvalidProducerPropertiesExpressionFaultType), "wsnt:InvalidProducerPropertiesExpressionFaultType"))
		return soap->error;
	/* transient soap skipped */
	if (soap_out_std__vectorTemplateOf_XML(soap, "-any", -1, &(a->wsrfbf__BaseFaultType::__any), ""))
		return soap->error;
	if (soap_out_time(soap, "wsrfbf:Timestamp", -1, &(a->wsrfbf__BaseFaultType::Timestamp), ""))
		return soap->error;
	if (soap_out_PointerTowsa5__EndpointReferenceType(soap, "wsrfbf:Originator", -1, &(a->wsrfbf__BaseFaultType::Originator), ""))
		return soap->error;
	if (soap_out_PointerTo_wsrfbf__BaseFaultType_ErrorCode(soap, "wsrfbf:ErrorCode", -1, &(a->wsrfbf__BaseFaultType::ErrorCode), ""))
		return soap->error;
	if (soap_out_PointerTostd__vectorTemplateOf_wsrfbf__BaseFaultType_Description(soap, "wsrfbf:Description", -1, &(a->wsrfbf__BaseFaultType::Description), ""))
		return soap->error;
	if (soap_out_PointerTo_wsrfbf__BaseFaultType_FaultCause(soap, "wsrfbf:FaultCause", -1, &(a->wsrfbf__BaseFaultType::FaultCause), ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *wsnt__InvalidProducerPropertiesExpressionFaultType::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_wsnt__InvalidProducerPropertiesExpressionFaultType(soap, tag, this, type);
}

SOAP_FMAC3 wsnt__InvalidProducerPropertiesExpressionFaultType * SOAP_FMAC4 soap_in_wsnt__InvalidProducerPropertiesExpressionFaultType(struct soap *soap, const char *tag, wsnt__InvalidProducerPropertiesExpressionFaultType *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (wsnt__InvalidProducerPropertiesExpressionFaultType *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_wsnt__InvalidProducerPropertiesExpressionFaultType, sizeof(wsnt__InvalidProducerPropertiesExpressionFaultType), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_wsnt__InvalidProducerPropertiesExpressionFaultType)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (wsnt__InvalidProducerPropertiesExpressionFaultType *)a->soap_in(soap, tag, type);
		}
	}
	if (soap_s2string(soap, soap_attr_value(soap, "-anyAttribute", 0), &((wsrfbf__BaseFaultType*)a)->__anyAttribute, 0, -1))
		return NULL;
	size_t soap_flag___item3 = 1;
	size_t soap_flag_Timestamp2 = 1;
	size_t soap_flag_Originator2 = 1;
	size_t soap_flag_ErrorCode2 = 1;
	size_t soap_flag_FaultCause2 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			/* transient soap skipped */
			if (soap_flag_Timestamp2 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_time(soap, "wsrfbf:Timestamp", &(a->wsrfbf__BaseFaultType::Timestamp), "xsd:dateTime"))
				{	soap_flag_Timestamp2--;
					continue;
				}
			if (soap_flag_Originator2 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTowsa5__EndpointReferenceType(soap, "wsrfbf:Originator", &(a->wsrfbf__BaseFaultType::Originator), "wsa5:EndpointReferenceType"))
				{	soap_flag_Originator2--;
					continue;
				}
			if (soap_flag_ErrorCode2 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_wsrfbf__BaseFaultType_ErrorCode(soap, "wsrfbf:ErrorCode", &(a->wsrfbf__BaseFaultType::ErrorCode), ""))
				{	soap_flag_ErrorCode2--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTostd__vectorTemplateOf_wsrfbf__BaseFaultType_Description(soap, "wsrfbf:Description", &(a->wsrfbf__BaseFaultType::Description), ""))
					continue;
			if (soap_flag_FaultCause2 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_wsrfbf__BaseFaultType_FaultCause(soap, "wsrfbf:FaultCause", &(a->wsrfbf__BaseFaultType::FaultCause), ""))
				{	soap_flag_FaultCause2--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_std__vectorTemplateOf_XML(soap, "-any", &(a->wsrfbf__BaseFaultType::__any), ""))
					continue;
			if (soap_flag___item3 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_inliteral(soap, "-item", &(a->xsd__anyType::__item)))
				{	soap_flag___item3--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (wsnt__InvalidProducerPropertiesExpressionFaultType *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_wsnt__InvalidProducerPropertiesExpressionFaultType, 0, sizeof(wsnt__InvalidProducerPropertiesExpressionFaultType), 0, soap_copy_wsnt__InvalidProducerPropertiesExpressionFaultType);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_Timestamp2 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int wsnt__InvalidProducerPropertiesExpressionFaultType::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	int id = soap_embed(soap, (void*)this, NULL, 0, SOAP_TYPE_wsnt__InvalidProducerPropertiesExpressionFaultType);
	if (this->soap_out(soap, tag?tag:"wsnt:InvalidProducerPropertiesExpressionFaultType", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *wsnt__InvalidProducerPropertiesExpressionFaultType::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_wsnt__InvalidProducerPropertiesExpressionFaultType(soap, this, tag, type);
}

SOAP_FMAC3 wsnt__InvalidProducerPropertiesExpressionFaultType * SOAP_FMAC4 soap_get_wsnt__InvalidProducerPropertiesExpressionFaultType(struct soap *soap, wsnt__InvalidProducerPropertiesExpressionFaultType *p, const char *tag, const char *type)
{
	if ((p = soap_in_wsnt__InvalidProducerPropertiesExpressionFaultType(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 wsnt__InvalidProducerPropertiesExpressionFaultType * SOAP_FMAC2 soap_instantiate_wsnt__InvalidProducerPropertiesExpressionFaultType(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_wsnt__InvalidProducerPropertiesExpressionFaultType(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_wsnt__InvalidProducerPropertiesExpressionFaultType, n, onvifevent_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = SOAP_NEW(wsnt__InvalidProducerPropertiesExpressionFaultType);
		if (size)
			*size = sizeof(wsnt__InvalidProducerPropertiesExpressionFaultType);
		((wsnt__InvalidProducerPropertiesExpressionFaultType*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = SOAP_NEW_ARRAY(wsnt__InvalidProducerPropertiesExpressionFaultType, n);
		if (size)
			*size = n * sizeof(wsnt__InvalidProducerPropertiesExpressionFaultType);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((wsnt__InvalidProducerPropertiesExpressionFaultType*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (wsnt__InvalidProducerPropertiesExpressionFaultType*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_wsnt__InvalidProducerPropertiesExpressionFaultType(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying wsnt__InvalidProducerPropertiesExpressionFaultType %p -> %p\n", q, p));
	*(wsnt__InvalidProducerPropertiesExpressionFaultType*)p = *(wsnt__InvalidProducerPropertiesExpressionFaultType*)q;
}

void wsnt__MultipleTopicsSpecifiedFaultType::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->wsrfbf__BaseFaultType::soap_default(soap);
}

void wsnt__MultipleTopicsSpecifiedFaultType::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	this->wsrfbf__BaseFaultType::soap_serialize(soap);
#endif
}

int wsnt__MultipleTopicsSpecifiedFaultType::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_wsnt__MultipleTopicsSpecifiedFaultType(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_wsnt__MultipleTopicsSpecifiedFaultType(struct soap *soap, const char *tag, int id, const wsnt__MultipleTopicsSpecifiedFaultType *a, const char *type)
{
	if (((wsrfbf__BaseFaultType*)a)->__anyAttribute)
		soap_set_attr(soap, "-anyAttribute", ((wsrfbf__BaseFaultType*)a)->__anyAttribute, 1);
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_wsnt__MultipleTopicsSpecifiedFaultType), "wsnt:MultipleTopicsSpecifiedFaultType"))
		return soap->error;
	/* transient soap skipped */
	if (soap_out_std__vectorTemplateOf_XML(soap, "-any", -1, &(a->wsrfbf__BaseFaultType::__any), ""))
		return soap->error;
	if (soap_out_time(soap, "wsrfbf:Timestamp", -1, &(a->wsrfbf__BaseFaultType::Timestamp), ""))
		return soap->error;
	if (soap_out_PointerTowsa5__EndpointReferenceType(soap, "wsrfbf:Originator", -1, &(a->wsrfbf__BaseFaultType::Originator), ""))
		return soap->error;
	if (soap_out_PointerTo_wsrfbf__BaseFaultType_ErrorCode(soap, "wsrfbf:ErrorCode", -1, &(a->wsrfbf__BaseFaultType::ErrorCode), ""))
		return soap->error;
	if (soap_out_PointerTostd__vectorTemplateOf_wsrfbf__BaseFaultType_Description(soap, "wsrfbf:Description", -1, &(a->wsrfbf__BaseFaultType::Description), ""))
		return soap->error;
	if (soap_out_PointerTo_wsrfbf__BaseFaultType_FaultCause(soap, "wsrfbf:FaultCause", -1, &(a->wsrfbf__BaseFaultType::FaultCause), ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *wsnt__MultipleTopicsSpecifiedFaultType::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_wsnt__MultipleTopicsSpecifiedFaultType(soap, tag, this, type);
}

SOAP_FMAC3 wsnt__MultipleTopicsSpecifiedFaultType * SOAP_FMAC4 soap_in_wsnt__MultipleTopicsSpecifiedFaultType(struct soap *soap, const char *tag, wsnt__MultipleTopicsSpecifiedFaultType *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (wsnt__MultipleTopicsSpecifiedFaultType *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_wsnt__MultipleTopicsSpecifiedFaultType, sizeof(wsnt__MultipleTopicsSpecifiedFaultType), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_wsnt__MultipleTopicsSpecifiedFaultType)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (wsnt__MultipleTopicsSpecifiedFaultType *)a->soap_in(soap, tag, type);
		}
	}
	if (soap_s2string(soap, soap_attr_value(soap, "-anyAttribute", 0), &((wsrfbf__BaseFaultType*)a)->__anyAttribute, 0, -1))
		return NULL;
	size_t soap_flag___item3 = 1;
	size_t soap_flag_Timestamp2 = 1;
	size_t soap_flag_Originator2 = 1;
	size_t soap_flag_ErrorCode2 = 1;
	size_t soap_flag_FaultCause2 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			/* transient soap skipped */
			if (soap_flag_Timestamp2 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_time(soap, "wsrfbf:Timestamp", &(a->wsrfbf__BaseFaultType::Timestamp), "xsd:dateTime"))
				{	soap_flag_Timestamp2--;
					continue;
				}
			if (soap_flag_Originator2 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTowsa5__EndpointReferenceType(soap, "wsrfbf:Originator", &(a->wsrfbf__BaseFaultType::Originator), "wsa5:EndpointReferenceType"))
				{	soap_flag_Originator2--;
					continue;
				}
			if (soap_flag_ErrorCode2 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_wsrfbf__BaseFaultType_ErrorCode(soap, "wsrfbf:ErrorCode", &(a->wsrfbf__BaseFaultType::ErrorCode), ""))
				{	soap_flag_ErrorCode2--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTostd__vectorTemplateOf_wsrfbf__BaseFaultType_Description(soap, "wsrfbf:Description", &(a->wsrfbf__BaseFaultType::Description), ""))
					continue;
			if (soap_flag_FaultCause2 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_wsrfbf__BaseFaultType_FaultCause(soap, "wsrfbf:FaultCause", &(a->wsrfbf__BaseFaultType::FaultCause), ""))
				{	soap_flag_FaultCause2--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_std__vectorTemplateOf_XML(soap, "-any", &(a->wsrfbf__BaseFaultType::__any), ""))
					continue;
			if (soap_flag___item3 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_inliteral(soap, "-item", &(a->xsd__anyType::__item)))
				{	soap_flag___item3--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (wsnt__MultipleTopicsSpecifiedFaultType *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_wsnt__MultipleTopicsSpecifiedFaultType, 0, sizeof(wsnt__MultipleTopicsSpecifiedFaultType), 0, soap_copy_wsnt__MultipleTopicsSpecifiedFaultType);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_Timestamp2 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int wsnt__MultipleTopicsSpecifiedFaultType::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	int id = soap_embed(soap, (void*)this, NULL, 0, SOAP_TYPE_wsnt__MultipleTopicsSpecifiedFaultType);
	if (this->soap_out(soap, tag?tag:"wsnt:MultipleTopicsSpecifiedFaultType", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *wsnt__MultipleTopicsSpecifiedFaultType::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_wsnt__MultipleTopicsSpecifiedFaultType(soap, this, tag, type);
}

SOAP_FMAC3 wsnt__MultipleTopicsSpecifiedFaultType * SOAP_FMAC4 soap_get_wsnt__MultipleTopicsSpecifiedFaultType(struct soap *soap, wsnt__MultipleTopicsSpecifiedFaultType *p, const char *tag, const char *type)
{
	if ((p = soap_in_wsnt__MultipleTopicsSpecifiedFaultType(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 wsnt__MultipleTopicsSpecifiedFaultType * SOAP_FMAC2 soap_instantiate_wsnt__MultipleTopicsSpecifiedFaultType(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_wsnt__MultipleTopicsSpecifiedFaultType(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_wsnt__MultipleTopicsSpecifiedFaultType, n, onvifevent_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = SOAP_NEW(wsnt__MultipleTopicsSpecifiedFaultType);
		if (size)
			*size = sizeof(wsnt__MultipleTopicsSpecifiedFaultType);
		((wsnt__MultipleTopicsSpecifiedFaultType*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = SOAP_NEW_ARRAY(wsnt__MultipleTopicsSpecifiedFaultType, n);
		if (size)
			*size = n * sizeof(wsnt__MultipleTopicsSpecifiedFaultType);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((wsnt__MultipleTopicsSpecifiedFaultType*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (wsnt__MultipleTopicsSpecifiedFaultType*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_wsnt__MultipleTopicsSpecifiedFaultType(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying wsnt__MultipleTopicsSpecifiedFaultType %p -> %p\n", q, p));
	*(wsnt__MultipleTopicsSpecifiedFaultType*)p = *(wsnt__MultipleTopicsSpecifiedFaultType*)q;
}

void wsnt__TopicNotSupportedFaultType::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->wsrfbf__BaseFaultType::soap_default(soap);
}

void wsnt__TopicNotSupportedFaultType::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	this->wsrfbf__BaseFaultType::soap_serialize(soap);
#endif
}

int wsnt__TopicNotSupportedFaultType::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_wsnt__TopicNotSupportedFaultType(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_wsnt__TopicNotSupportedFaultType(struct soap *soap, const char *tag, int id, const wsnt__TopicNotSupportedFaultType *a, const char *type)
{
	if (((wsrfbf__BaseFaultType*)a)->__anyAttribute)
		soap_set_attr(soap, "-anyAttribute", ((wsrfbf__BaseFaultType*)a)->__anyAttribute, 1);
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_wsnt__TopicNotSupportedFaultType), "wsnt:TopicNotSupportedFaultType"))
		return soap->error;
	/* transient soap skipped */
	if (soap_out_std__vectorTemplateOf_XML(soap, "-any", -1, &(a->wsrfbf__BaseFaultType::__any), ""))
		return soap->error;
	if (soap_out_time(soap, "wsrfbf:Timestamp", -1, &(a->wsrfbf__BaseFaultType::Timestamp), ""))
		return soap->error;
	if (soap_out_PointerTowsa5__EndpointReferenceType(soap, "wsrfbf:Originator", -1, &(a->wsrfbf__BaseFaultType::Originator), ""))
		return soap->error;
	if (soap_out_PointerTo_wsrfbf__BaseFaultType_ErrorCode(soap, "wsrfbf:ErrorCode", -1, &(a->wsrfbf__BaseFaultType::ErrorCode), ""))
		return soap->error;
	if (soap_out_PointerTostd__vectorTemplateOf_wsrfbf__BaseFaultType_Description(soap, "wsrfbf:Description", -1, &(a->wsrfbf__BaseFaultType::Description), ""))
		return soap->error;
	if (soap_out_PointerTo_wsrfbf__BaseFaultType_FaultCause(soap, "wsrfbf:FaultCause", -1, &(a->wsrfbf__BaseFaultType::FaultCause), ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *wsnt__TopicNotSupportedFaultType::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_wsnt__TopicNotSupportedFaultType(soap, tag, this, type);
}

SOAP_FMAC3 wsnt__TopicNotSupportedFaultType * SOAP_FMAC4 soap_in_wsnt__TopicNotSupportedFaultType(struct soap *soap, const char *tag, wsnt__TopicNotSupportedFaultType *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (wsnt__TopicNotSupportedFaultType *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_wsnt__TopicNotSupportedFaultType, sizeof(wsnt__TopicNotSupportedFaultType), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_wsnt__TopicNotSupportedFaultType)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (wsnt__TopicNotSupportedFaultType *)a->soap_in(soap, tag, type);
		}
	}
	if (soap_s2string(soap, soap_attr_value(soap, "-anyAttribute", 0), &((wsrfbf__BaseFaultType*)a)->__anyAttribute, 0, -1))
		return NULL;
	size_t soap_flag___item3 = 1;
	size_t soap_flag_Timestamp2 = 1;
	size_t soap_flag_Originator2 = 1;
	size_t soap_flag_ErrorCode2 = 1;
	size_t soap_flag_FaultCause2 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			/* transient soap skipped */
			if (soap_flag_Timestamp2 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_time(soap, "wsrfbf:Timestamp", &(a->wsrfbf__BaseFaultType::Timestamp), "xsd:dateTime"))
				{	soap_flag_Timestamp2--;
					continue;
				}
			if (soap_flag_Originator2 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTowsa5__EndpointReferenceType(soap, "wsrfbf:Originator", &(a->wsrfbf__BaseFaultType::Originator), "wsa5:EndpointReferenceType"))
				{	soap_flag_Originator2--;
					continue;
				}
			if (soap_flag_ErrorCode2 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_wsrfbf__BaseFaultType_ErrorCode(soap, "wsrfbf:ErrorCode", &(a->wsrfbf__BaseFaultType::ErrorCode), ""))
				{	soap_flag_ErrorCode2--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTostd__vectorTemplateOf_wsrfbf__BaseFaultType_Description(soap, "wsrfbf:Description", &(a->wsrfbf__BaseFaultType::Description), ""))
					continue;
			if (soap_flag_FaultCause2 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_wsrfbf__BaseFaultType_FaultCause(soap, "wsrfbf:FaultCause", &(a->wsrfbf__BaseFaultType::FaultCause), ""))
				{	soap_flag_FaultCause2--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_std__vectorTemplateOf_XML(soap, "-any", &(a->wsrfbf__BaseFaultType::__any), ""))
					continue;
			if (soap_flag___item3 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_inliteral(soap, "-item", &(a->xsd__anyType::__item)))
				{	soap_flag___item3--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (wsnt__TopicNotSupportedFaultType *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_wsnt__TopicNotSupportedFaultType, 0, sizeof(wsnt__TopicNotSupportedFaultType), 0, soap_copy_wsnt__TopicNotSupportedFaultType);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_Timestamp2 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int wsnt__TopicNotSupportedFaultType::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	int id = soap_embed(soap, (void*)this, NULL, 0, SOAP_TYPE_wsnt__TopicNotSupportedFaultType);
	if (this->soap_out(soap, tag?tag:"wsnt:TopicNotSupportedFaultType", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *wsnt__TopicNotSupportedFaultType::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_wsnt__TopicNotSupportedFaultType(soap, this, tag, type);
}

SOAP_FMAC3 wsnt__TopicNotSupportedFaultType * SOAP_FMAC4 soap_get_wsnt__TopicNotSupportedFaultType(struct soap *soap, wsnt__TopicNotSupportedFaultType *p, const char *tag, const char *type)
{
	if ((p = soap_in_wsnt__TopicNotSupportedFaultType(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 wsnt__TopicNotSupportedFaultType * SOAP_FMAC2 soap_instantiate_wsnt__TopicNotSupportedFaultType(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_wsnt__TopicNotSupportedFaultType(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_wsnt__TopicNotSupportedFaultType, n, onvifevent_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = SOAP_NEW(wsnt__TopicNotSupportedFaultType);
		if (size)
			*size = sizeof(wsnt__TopicNotSupportedFaultType);
		((wsnt__TopicNotSupportedFaultType*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = SOAP_NEW_ARRAY(wsnt__TopicNotSupportedFaultType, n);
		if (size)
			*size = n * sizeof(wsnt__TopicNotSupportedFaultType);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((wsnt__TopicNotSupportedFaultType*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (wsnt__TopicNotSupportedFaultType*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_wsnt__TopicNotSupportedFaultType(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying wsnt__TopicNotSupportedFaultType %p -> %p\n", q, p));
	*(wsnt__TopicNotSupportedFaultType*)p = *(wsnt__TopicNotSupportedFaultType*)q;
}

void wsnt__InvalidTopicExpressionFaultType::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->wsrfbf__BaseFaultType::soap_default(soap);
}

void wsnt__InvalidTopicExpressionFaultType::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	this->wsrfbf__BaseFaultType::soap_serialize(soap);
#endif
}

int wsnt__InvalidTopicExpressionFaultType::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_wsnt__InvalidTopicExpressionFaultType(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_wsnt__InvalidTopicExpressionFaultType(struct soap *soap, const char *tag, int id, const wsnt__InvalidTopicExpressionFaultType *a, const char *type)
{
	if (((wsrfbf__BaseFaultType*)a)->__anyAttribute)
		soap_set_attr(soap, "-anyAttribute", ((wsrfbf__BaseFaultType*)a)->__anyAttribute, 1);
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_wsnt__InvalidTopicExpressionFaultType), "wsnt:InvalidTopicExpressionFaultType"))
		return soap->error;
	/* transient soap skipped */
	if (soap_out_std__vectorTemplateOf_XML(soap, "-any", -1, &(a->wsrfbf__BaseFaultType::__any), ""))
		return soap->error;
	if (soap_out_time(soap, "wsrfbf:Timestamp", -1, &(a->wsrfbf__BaseFaultType::Timestamp), ""))
		return soap->error;
	if (soap_out_PointerTowsa5__EndpointReferenceType(soap, "wsrfbf:Originator", -1, &(a->wsrfbf__BaseFaultType::Originator), ""))
		return soap->error;
	if (soap_out_PointerTo_wsrfbf__BaseFaultType_ErrorCode(soap, "wsrfbf:ErrorCode", -1, &(a->wsrfbf__BaseFaultType::ErrorCode), ""))
		return soap->error;
	if (soap_out_PointerTostd__vectorTemplateOf_wsrfbf__BaseFaultType_Description(soap, "wsrfbf:Description", -1, &(a->wsrfbf__BaseFaultType::Description), ""))
		return soap->error;
	if (soap_out_PointerTo_wsrfbf__BaseFaultType_FaultCause(soap, "wsrfbf:FaultCause", -1, &(a->wsrfbf__BaseFaultType::FaultCause), ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *wsnt__InvalidTopicExpressionFaultType::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_wsnt__InvalidTopicExpressionFaultType(soap, tag, this, type);
}

SOAP_FMAC3 wsnt__InvalidTopicExpressionFaultType * SOAP_FMAC4 soap_in_wsnt__InvalidTopicExpressionFaultType(struct soap *soap, const char *tag, wsnt__InvalidTopicExpressionFaultType *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (wsnt__InvalidTopicExpressionFaultType *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_wsnt__InvalidTopicExpressionFaultType, sizeof(wsnt__InvalidTopicExpressionFaultType), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_wsnt__InvalidTopicExpressionFaultType)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (wsnt__InvalidTopicExpressionFaultType *)a->soap_in(soap, tag, type);
		}
	}
	if (soap_s2string(soap, soap_attr_value(soap, "-anyAttribute", 0), &((wsrfbf__BaseFaultType*)a)->__anyAttribute, 0, -1))
		return NULL;
	size_t soap_flag___item3 = 1;
	size_t soap_flag_Timestamp2 = 1;
	size_t soap_flag_Originator2 = 1;
	size_t soap_flag_ErrorCode2 = 1;
	size_t soap_flag_FaultCause2 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			/* transient soap skipped */
			if (soap_flag_Timestamp2 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_time(soap, "wsrfbf:Timestamp", &(a->wsrfbf__BaseFaultType::Timestamp), "xsd:dateTime"))
				{	soap_flag_Timestamp2--;
					continue;
				}
			if (soap_flag_Originator2 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTowsa5__EndpointReferenceType(soap, "wsrfbf:Originator", &(a->wsrfbf__BaseFaultType::Originator), "wsa5:EndpointReferenceType"))
				{	soap_flag_Originator2--;
					continue;
				}
			if (soap_flag_ErrorCode2 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_wsrfbf__BaseFaultType_ErrorCode(soap, "wsrfbf:ErrorCode", &(a->wsrfbf__BaseFaultType::ErrorCode), ""))
				{	soap_flag_ErrorCode2--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTostd__vectorTemplateOf_wsrfbf__BaseFaultType_Description(soap, "wsrfbf:Description", &(a->wsrfbf__BaseFaultType::Description), ""))
					continue;
			if (soap_flag_FaultCause2 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_wsrfbf__BaseFaultType_FaultCause(soap, "wsrfbf:FaultCause", &(a->wsrfbf__BaseFaultType::FaultCause), ""))
				{	soap_flag_FaultCause2--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_std__vectorTemplateOf_XML(soap, "-any", &(a->wsrfbf__BaseFaultType::__any), ""))
					continue;
			if (soap_flag___item3 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_inliteral(soap, "-item", &(a->xsd__anyType::__item)))
				{	soap_flag___item3--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (wsnt__InvalidTopicExpressionFaultType *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_wsnt__InvalidTopicExpressionFaultType, 0, sizeof(wsnt__InvalidTopicExpressionFaultType), 0, soap_copy_wsnt__InvalidTopicExpressionFaultType);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_Timestamp2 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int wsnt__InvalidTopicExpressionFaultType::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	int id = soap_embed(soap, (void*)this, NULL, 0, SOAP_TYPE_wsnt__InvalidTopicExpressionFaultType);
	if (this->soap_out(soap, tag?tag:"wsnt:InvalidTopicExpressionFaultType", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *wsnt__InvalidTopicExpressionFaultType::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_wsnt__InvalidTopicExpressionFaultType(soap, this, tag, type);
}

SOAP_FMAC3 wsnt__InvalidTopicExpressionFaultType * SOAP_FMAC4 soap_get_wsnt__InvalidTopicExpressionFaultType(struct soap *soap, wsnt__InvalidTopicExpressionFaultType *p, const char *tag, const char *type)
{
	if ((p = soap_in_wsnt__InvalidTopicExpressionFaultType(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 wsnt__InvalidTopicExpressionFaultType * SOAP_FMAC2 soap_instantiate_wsnt__InvalidTopicExpressionFaultType(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_wsnt__InvalidTopicExpressionFaultType(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_wsnt__InvalidTopicExpressionFaultType, n, onvifevent_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = SOAP_NEW(wsnt__InvalidTopicExpressionFaultType);
		if (size)
			*size = sizeof(wsnt__InvalidTopicExpressionFaultType);
		((wsnt__InvalidTopicExpressionFaultType*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = SOAP_NEW_ARRAY(wsnt__InvalidTopicExpressionFaultType, n);
		if (size)
			*size = n * sizeof(wsnt__InvalidTopicExpressionFaultType);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((wsnt__InvalidTopicExpressionFaultType*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (wsnt__InvalidTopicExpressionFaultType*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_wsnt__InvalidTopicExpressionFaultType(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying wsnt__InvalidTopicExpressionFaultType %p -> %p\n", q, p));
	*(wsnt__InvalidTopicExpressionFaultType*)p = *(wsnt__InvalidTopicExpressionFaultType*)q;
}

void wsnt__TopicExpressionDialectUnknownFaultType::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->wsrfbf__BaseFaultType::soap_default(soap);
}

void wsnt__TopicExpressionDialectUnknownFaultType::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	this->wsrfbf__BaseFaultType::soap_serialize(soap);
#endif
}

int wsnt__TopicExpressionDialectUnknownFaultType::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_wsnt__TopicExpressionDialectUnknownFaultType(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_wsnt__TopicExpressionDialectUnknownFaultType(struct soap *soap, const char *tag, int id, const wsnt__TopicExpressionDialectUnknownFaultType *a, const char *type)
{
	if (((wsrfbf__BaseFaultType*)a)->__anyAttribute)
		soap_set_attr(soap, "-anyAttribute", ((wsrfbf__BaseFaultType*)a)->__anyAttribute, 1);
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_wsnt__TopicExpressionDialectUnknownFaultType), "wsnt:TopicExpressionDialectUnknownFaultType"))
		return soap->error;
	/* transient soap skipped */
	if (soap_out_std__vectorTemplateOf_XML(soap, "-any", -1, &(a->wsrfbf__BaseFaultType::__any), ""))
		return soap->error;
	if (soap_out_time(soap, "wsrfbf:Timestamp", -1, &(a->wsrfbf__BaseFaultType::Timestamp), ""))
		return soap->error;
	if (soap_out_PointerTowsa5__EndpointReferenceType(soap, "wsrfbf:Originator", -1, &(a->wsrfbf__BaseFaultType::Originator), ""))
		return soap->error;
	if (soap_out_PointerTo_wsrfbf__BaseFaultType_ErrorCode(soap, "wsrfbf:ErrorCode", -1, &(a->wsrfbf__BaseFaultType::ErrorCode), ""))
		return soap->error;
	if (soap_out_PointerTostd__vectorTemplateOf_wsrfbf__BaseFaultType_Description(soap, "wsrfbf:Description", -1, &(a->wsrfbf__BaseFaultType::Description), ""))
		return soap->error;
	if (soap_out_PointerTo_wsrfbf__BaseFaultType_FaultCause(soap, "wsrfbf:FaultCause", -1, &(a->wsrfbf__BaseFaultType::FaultCause), ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *wsnt__TopicExpressionDialectUnknownFaultType::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_wsnt__TopicExpressionDialectUnknownFaultType(soap, tag, this, type);
}

SOAP_FMAC3 wsnt__TopicExpressionDialectUnknownFaultType * SOAP_FMAC4 soap_in_wsnt__TopicExpressionDialectUnknownFaultType(struct soap *soap, const char *tag, wsnt__TopicExpressionDialectUnknownFaultType *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (wsnt__TopicExpressionDialectUnknownFaultType *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_wsnt__TopicExpressionDialectUnknownFaultType, sizeof(wsnt__TopicExpressionDialectUnknownFaultType), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_wsnt__TopicExpressionDialectUnknownFaultType)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (wsnt__TopicExpressionDialectUnknownFaultType *)a->soap_in(soap, tag, type);
		}
	}
	if (soap_s2string(soap, soap_attr_value(soap, "-anyAttribute", 0), &((wsrfbf__BaseFaultType*)a)->__anyAttribute, 0, -1))
		return NULL;
	size_t soap_flag___item3 = 1;
	size_t soap_flag_Timestamp2 = 1;
	size_t soap_flag_Originator2 = 1;
	size_t soap_flag_ErrorCode2 = 1;
	size_t soap_flag_FaultCause2 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			/* transient soap skipped */
			if (soap_flag_Timestamp2 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_time(soap, "wsrfbf:Timestamp", &(a->wsrfbf__BaseFaultType::Timestamp), "xsd:dateTime"))
				{	soap_flag_Timestamp2--;
					continue;
				}
			if (soap_flag_Originator2 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTowsa5__EndpointReferenceType(soap, "wsrfbf:Originator", &(a->wsrfbf__BaseFaultType::Originator), "wsa5:EndpointReferenceType"))
				{	soap_flag_Originator2--;
					continue;
				}
			if (soap_flag_ErrorCode2 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_wsrfbf__BaseFaultType_ErrorCode(soap, "wsrfbf:ErrorCode", &(a->wsrfbf__BaseFaultType::ErrorCode), ""))
				{	soap_flag_ErrorCode2--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTostd__vectorTemplateOf_wsrfbf__BaseFaultType_Description(soap, "wsrfbf:Description", &(a->wsrfbf__BaseFaultType::Description), ""))
					continue;
			if (soap_flag_FaultCause2 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_wsrfbf__BaseFaultType_FaultCause(soap, "wsrfbf:FaultCause", &(a->wsrfbf__BaseFaultType::FaultCause), ""))
				{	soap_flag_FaultCause2--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_std__vectorTemplateOf_XML(soap, "-any", &(a->wsrfbf__BaseFaultType::__any), ""))
					continue;
			if (soap_flag___item3 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_inliteral(soap, "-item", &(a->xsd__anyType::__item)))
				{	soap_flag___item3--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (wsnt__TopicExpressionDialectUnknownFaultType *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_wsnt__TopicExpressionDialectUnknownFaultType, 0, sizeof(wsnt__TopicExpressionDialectUnknownFaultType), 0, soap_copy_wsnt__TopicExpressionDialectUnknownFaultType);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_Timestamp2 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int wsnt__TopicExpressionDialectUnknownFaultType::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	int id = soap_embed(soap, (void*)this, NULL, 0, SOAP_TYPE_wsnt__TopicExpressionDialectUnknownFaultType);
	if (this->soap_out(soap, tag?tag:"wsnt:TopicExpressionDialectUnknownFaultType", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *wsnt__TopicExpressionDialectUnknownFaultType::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_wsnt__TopicExpressionDialectUnknownFaultType(soap, this, tag, type);
}

SOAP_FMAC3 wsnt__TopicExpressionDialectUnknownFaultType * SOAP_FMAC4 soap_get_wsnt__TopicExpressionDialectUnknownFaultType(struct soap *soap, wsnt__TopicExpressionDialectUnknownFaultType *p, const char *tag, const char *type)
{
	if ((p = soap_in_wsnt__TopicExpressionDialectUnknownFaultType(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 wsnt__TopicExpressionDialectUnknownFaultType * SOAP_FMAC2 soap_instantiate_wsnt__TopicExpressionDialectUnknownFaultType(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_wsnt__TopicExpressionDialectUnknownFaultType(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_wsnt__TopicExpressionDialectUnknownFaultType, n, onvifevent_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = SOAP_NEW(wsnt__TopicExpressionDialectUnknownFaultType);
		if (size)
			*size = sizeof(wsnt__TopicExpressionDialectUnknownFaultType);
		((wsnt__TopicExpressionDialectUnknownFaultType*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = SOAP_NEW_ARRAY(wsnt__TopicExpressionDialectUnknownFaultType, n);
		if (size)
			*size = n * sizeof(wsnt__TopicExpressionDialectUnknownFaultType);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((wsnt__TopicExpressionDialectUnknownFaultType*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (wsnt__TopicExpressionDialectUnknownFaultType*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_wsnt__TopicExpressionDialectUnknownFaultType(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying wsnt__TopicExpressionDialectUnknownFaultType %p -> %p\n", q, p));
	*(wsnt__TopicExpressionDialectUnknownFaultType*)p = *(wsnt__TopicExpressionDialectUnknownFaultType*)q;
}

void wsnt__InvalidFilterFaultType::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->wsrfbf__BaseFaultType::soap_default(soap);
	soap_default_std__vectorTemplateOfxsd__QName(soap, &this->wsnt__InvalidFilterFaultType::UnknownFilter);
}

void wsnt__InvalidFilterFaultType::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_std__vectorTemplateOfxsd__QName(soap, &this->wsnt__InvalidFilterFaultType::UnknownFilter);
	this->wsrfbf__BaseFaultType::soap_serialize(soap);
#endif
}

int wsnt__InvalidFilterFaultType::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_wsnt__InvalidFilterFaultType(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_wsnt__InvalidFilterFaultType(struct soap *soap, const char *tag, int id, const wsnt__InvalidFilterFaultType *a, const char *type)
{
	if (((wsrfbf__BaseFaultType*)a)->__anyAttribute)
		soap_set_attr(soap, "-anyAttribute", ((wsrfbf__BaseFaultType*)a)->__anyAttribute, 1);
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_wsnt__InvalidFilterFaultType), "wsnt:InvalidFilterFaultType"))
		return soap->error;
	/* transient soap skipped */
	if (soap_out_std__vectorTemplateOf_XML(soap, "-any", -1, &(a->wsrfbf__BaseFaultType::__any), ""))
		return soap->error;
	if (soap_out_time(soap, "wsrfbf:Timestamp", -1, &(a->wsrfbf__BaseFaultType::Timestamp), ""))
		return soap->error;
	if (soap_out_PointerTowsa5__EndpointReferenceType(soap, "wsrfbf:Originator", -1, &(a->wsrfbf__BaseFaultType::Originator), ""))
		return soap->error;
	if (soap_out_PointerTo_wsrfbf__BaseFaultType_ErrorCode(soap, "wsrfbf:ErrorCode", -1, &(a->wsrfbf__BaseFaultType::ErrorCode), ""))
		return soap->error;
	if (soap_out_PointerTostd__vectorTemplateOf_wsrfbf__BaseFaultType_Description(soap, "wsrfbf:Description", -1, &(a->wsrfbf__BaseFaultType::Description), ""))
		return soap->error;
	if (soap_out_PointerTo_wsrfbf__BaseFaultType_FaultCause(soap, "wsrfbf:FaultCause", -1, &(a->wsrfbf__BaseFaultType::FaultCause), ""))
		return soap->error;
	if (soap_out_std__vectorTemplateOfxsd__QName(soap, "wsnt:UnknownFilter", -1, &(a->wsnt__InvalidFilterFaultType::UnknownFilter), ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *wsnt__InvalidFilterFaultType::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_wsnt__InvalidFilterFaultType(soap, tag, this, type);
}

SOAP_FMAC3 wsnt__InvalidFilterFaultType * SOAP_FMAC4 soap_in_wsnt__InvalidFilterFaultType(struct soap *soap, const char *tag, wsnt__InvalidFilterFaultType *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (wsnt__InvalidFilterFaultType *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_wsnt__InvalidFilterFaultType, sizeof(wsnt__InvalidFilterFaultType), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_wsnt__InvalidFilterFaultType)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (wsnt__InvalidFilterFaultType *)a->soap_in(soap, tag, type);
		}
	}
	if (soap_s2string(soap, soap_attr_value(soap, "-anyAttribute", 0), &((wsrfbf__BaseFaultType*)a)->__anyAttribute, 0, -1))
		return NULL;
	size_t soap_flag___item3 = 1;
	size_t soap_flag_Timestamp2 = 1;
	size_t soap_flag_Originator2 = 1;
	size_t soap_flag_ErrorCode2 = 1;
	size_t soap_flag_FaultCause2 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			/* transient soap skipped */
			if (soap_flag_Timestamp2 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_time(soap, "wsrfbf:Timestamp", &(a->wsrfbf__BaseFaultType::Timestamp), "xsd:dateTime"))
				{	soap_flag_Timestamp2--;
					continue;
				}
			if (soap_flag_Originator2 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTowsa5__EndpointReferenceType(soap, "wsrfbf:Originator", &(a->wsrfbf__BaseFaultType::Originator), "wsa5:EndpointReferenceType"))
				{	soap_flag_Originator2--;
					continue;
				}
			if (soap_flag_ErrorCode2 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_wsrfbf__BaseFaultType_ErrorCode(soap, "wsrfbf:ErrorCode", &(a->wsrfbf__BaseFaultType::ErrorCode), ""))
				{	soap_flag_ErrorCode2--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTostd__vectorTemplateOf_wsrfbf__BaseFaultType_Description(soap, "wsrfbf:Description", &(a->wsrfbf__BaseFaultType::Description), ""))
					continue;
			if (soap_flag_FaultCause2 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_wsrfbf__BaseFaultType_FaultCause(soap, "wsrfbf:FaultCause", &(a->wsrfbf__BaseFaultType::FaultCause), ""))
				{	soap_flag_FaultCause2--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_std__vectorTemplateOfxsd__QName(soap, "wsnt:UnknownFilter", &(a->wsnt__InvalidFilterFaultType::UnknownFilter), "xsd:QName"))
					continue;
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_std__vectorTemplateOf_XML(soap, "-any", &(a->wsrfbf__BaseFaultType::__any), ""))
					continue;
			if (soap_flag___item3 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_inliteral(soap, "-item", &(a->xsd__anyType::__item)))
				{	soap_flag___item3--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (wsnt__InvalidFilterFaultType *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_wsnt__InvalidFilterFaultType, 0, sizeof(wsnt__InvalidFilterFaultType), 0, soap_copy_wsnt__InvalidFilterFaultType);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_Timestamp2 > 0 || a->wsnt__InvalidFilterFaultType::UnknownFilter.size() < 1))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int wsnt__InvalidFilterFaultType::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	int id = soap_embed(soap, (void*)this, NULL, 0, SOAP_TYPE_wsnt__InvalidFilterFaultType);
	if (this->soap_out(soap, tag?tag:"wsnt:InvalidFilterFaultType", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *wsnt__InvalidFilterFaultType::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_wsnt__InvalidFilterFaultType(soap, this, tag, type);
}

SOAP_FMAC3 wsnt__InvalidFilterFaultType * SOAP_FMAC4 soap_get_wsnt__InvalidFilterFaultType(struct soap *soap, wsnt__InvalidFilterFaultType *p, const char *tag, const char *type)
{
	if ((p = soap_in_wsnt__InvalidFilterFaultType(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 wsnt__InvalidFilterFaultType * SOAP_FMAC2 soap_instantiate_wsnt__InvalidFilterFaultType(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_wsnt__InvalidFilterFaultType(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_wsnt__InvalidFilterFaultType, n, onvifevent_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = SOAP_NEW(wsnt__InvalidFilterFaultType);
		if (size)
			*size = sizeof(wsnt__InvalidFilterFaultType);
		((wsnt__InvalidFilterFaultType*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = SOAP_NEW_ARRAY(wsnt__InvalidFilterFaultType, n);
		if (size)
			*size = n * sizeof(wsnt__InvalidFilterFaultType);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((wsnt__InvalidFilterFaultType*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (wsnt__InvalidFilterFaultType*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_wsnt__InvalidFilterFaultType(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying wsnt__InvalidFilterFaultType %p -> %p\n", q, p));
	*(wsnt__InvalidFilterFaultType*)p = *(wsnt__InvalidFilterFaultType*)q;
}

void wsnt__SubscribeCreationFailedFaultType::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->wsrfbf__BaseFaultType::soap_default(soap);
}

void wsnt__SubscribeCreationFailedFaultType::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	this->wsrfbf__BaseFaultType::soap_serialize(soap);
#endif
}

int wsnt__SubscribeCreationFailedFaultType::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_wsnt__SubscribeCreationFailedFaultType(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_wsnt__SubscribeCreationFailedFaultType(struct soap *soap, const char *tag, int id, const wsnt__SubscribeCreationFailedFaultType *a, const char *type)
{
	if (((wsrfbf__BaseFaultType*)a)->__anyAttribute)
		soap_set_attr(soap, "-anyAttribute", ((wsrfbf__BaseFaultType*)a)->__anyAttribute, 1);
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_wsnt__SubscribeCreationFailedFaultType), "wsnt:SubscribeCreationFailedFaultType"))
		return soap->error;
	/* transient soap skipped */
	if (soap_out_std__vectorTemplateOf_XML(soap, "-any", -1, &(a->wsrfbf__BaseFaultType::__any), ""))
		return soap->error;
	if (soap_out_time(soap, "wsrfbf:Timestamp", -1, &(a->wsrfbf__BaseFaultType::Timestamp), ""))
		return soap->error;
	if (soap_out_PointerTowsa5__EndpointReferenceType(soap, "wsrfbf:Originator", -1, &(a->wsrfbf__BaseFaultType::Originator), ""))
		return soap->error;
	if (soap_out_PointerTo_wsrfbf__BaseFaultType_ErrorCode(soap, "wsrfbf:ErrorCode", -1, &(a->wsrfbf__BaseFaultType::ErrorCode), ""))
		return soap->error;
	if (soap_out_PointerTostd__vectorTemplateOf_wsrfbf__BaseFaultType_Description(soap, "wsrfbf:Description", -1, &(a->wsrfbf__BaseFaultType::Description), ""))
		return soap->error;
	if (soap_out_PointerTo_wsrfbf__BaseFaultType_FaultCause(soap, "wsrfbf:FaultCause", -1, &(a->wsrfbf__BaseFaultType::FaultCause), ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *wsnt__SubscribeCreationFailedFaultType::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_wsnt__SubscribeCreationFailedFaultType(soap, tag, this, type);
}

SOAP_FMAC3 wsnt__SubscribeCreationFailedFaultType * SOAP_FMAC4 soap_in_wsnt__SubscribeCreationFailedFaultType(struct soap *soap, const char *tag, wsnt__SubscribeCreationFailedFaultType *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (wsnt__SubscribeCreationFailedFaultType *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_wsnt__SubscribeCreationFailedFaultType, sizeof(wsnt__SubscribeCreationFailedFaultType), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_wsnt__SubscribeCreationFailedFaultType)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (wsnt__SubscribeCreationFailedFaultType *)a->soap_in(soap, tag, type);
		}
	}
	if (soap_s2string(soap, soap_attr_value(soap, "-anyAttribute", 0), &((wsrfbf__BaseFaultType*)a)->__anyAttribute, 0, -1))
		return NULL;
	size_t soap_flag___item3 = 1;
	size_t soap_flag_Timestamp2 = 1;
	size_t soap_flag_Originator2 = 1;
	size_t soap_flag_ErrorCode2 = 1;
	size_t soap_flag_FaultCause2 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			/* transient soap skipped */
			if (soap_flag_Timestamp2 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_time(soap, "wsrfbf:Timestamp", &(a->wsrfbf__BaseFaultType::Timestamp), "xsd:dateTime"))
				{	soap_flag_Timestamp2--;
					continue;
				}
			if (soap_flag_Originator2 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTowsa5__EndpointReferenceType(soap, "wsrfbf:Originator", &(a->wsrfbf__BaseFaultType::Originator), "wsa5:EndpointReferenceType"))
				{	soap_flag_Originator2--;
					continue;
				}
			if (soap_flag_ErrorCode2 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_wsrfbf__BaseFaultType_ErrorCode(soap, "wsrfbf:ErrorCode", &(a->wsrfbf__BaseFaultType::ErrorCode), ""))
				{	soap_flag_ErrorCode2--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTostd__vectorTemplateOf_wsrfbf__BaseFaultType_Description(soap, "wsrfbf:Description", &(a->wsrfbf__BaseFaultType::Description), ""))
					continue;
			if (soap_flag_FaultCause2 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_wsrfbf__BaseFaultType_FaultCause(soap, "wsrfbf:FaultCause", &(a->wsrfbf__BaseFaultType::FaultCause), ""))
				{	soap_flag_FaultCause2--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_std__vectorTemplateOf_XML(soap, "-any", &(a->wsrfbf__BaseFaultType::__any), ""))
					continue;
			if (soap_flag___item3 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_inliteral(soap, "-item", &(a->xsd__anyType::__item)))
				{	soap_flag___item3--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (wsnt__SubscribeCreationFailedFaultType *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_wsnt__SubscribeCreationFailedFaultType, 0, sizeof(wsnt__SubscribeCreationFailedFaultType), 0, soap_copy_wsnt__SubscribeCreationFailedFaultType);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_Timestamp2 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int wsnt__SubscribeCreationFailedFaultType::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	int id = soap_embed(soap, (void*)this, NULL, 0, SOAP_TYPE_wsnt__SubscribeCreationFailedFaultType);
	if (this->soap_out(soap, tag?tag:"wsnt:SubscribeCreationFailedFaultType", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *wsnt__SubscribeCreationFailedFaultType::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_wsnt__SubscribeCreationFailedFaultType(soap, this, tag, type);
}

SOAP_FMAC3 wsnt__SubscribeCreationFailedFaultType * SOAP_FMAC4 soap_get_wsnt__SubscribeCreationFailedFaultType(struct soap *soap, wsnt__SubscribeCreationFailedFaultType *p, const char *tag, const char *type)
{
	if ((p = soap_in_wsnt__SubscribeCreationFailedFaultType(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 wsnt__SubscribeCreationFailedFaultType * SOAP_FMAC2 soap_instantiate_wsnt__SubscribeCreationFailedFaultType(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_wsnt__SubscribeCreationFailedFaultType(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_wsnt__SubscribeCreationFailedFaultType, n, onvifevent_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = SOAP_NEW(wsnt__SubscribeCreationFailedFaultType);
		if (size)
			*size = sizeof(wsnt__SubscribeCreationFailedFaultType);
		((wsnt__SubscribeCreationFailedFaultType*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = SOAP_NEW_ARRAY(wsnt__SubscribeCreationFailedFaultType, n);
		if (size)
			*size = n * sizeof(wsnt__SubscribeCreationFailedFaultType);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((wsnt__SubscribeCreationFailedFaultType*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (wsnt__SubscribeCreationFailedFaultType*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_wsnt__SubscribeCreationFailedFaultType(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying wsnt__SubscribeCreationFailedFaultType %p -> %p\n", q, p));
	*(wsnt__SubscribeCreationFailedFaultType*)p = *(wsnt__SubscribeCreationFailedFaultType*)q;
}

void wsnt__NotificationMessageHolderType::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->xsd__anyType::soap_default(soap);
	this->wsnt__NotificationMessageHolderType::SubscriptionReference = NULL;
	this->wsnt__NotificationMessageHolderType::Topic = NULL;
	this->wsnt__NotificationMessageHolderType::ProducerReference = NULL;
	this->wsnt__NotificationMessageHolderType::Message._wsnt__NotificationMessageHolderType_Message::soap_default(soap);
}

void wsnt__NotificationMessageHolderType::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTowsa5__EndpointReferenceType(soap, &this->wsnt__NotificationMessageHolderType::SubscriptionReference);
	soap_serialize_PointerTowsnt__TopicExpressionType(soap, &this->wsnt__NotificationMessageHolderType::Topic);
	soap_serialize_PointerTowsa5__EndpointReferenceType(soap, &this->wsnt__NotificationMessageHolderType::ProducerReference);
	this->wsnt__NotificationMessageHolderType::Message.soap_serialize(soap);
	this->xsd__anyType::soap_serialize(soap);
#endif
}

int wsnt__NotificationMessageHolderType::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_wsnt__NotificationMessageHolderType(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_wsnt__NotificationMessageHolderType(struct soap *soap, const char *tag, int id, const wsnt__NotificationMessageHolderType *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_wsnt__NotificationMessageHolderType), "wsnt:NotificationMessageHolderType"))
		return soap->error;
	/* transient soap skipped */
	if (soap_out_PointerTowsa5__EndpointReferenceType(soap, "wsnt:SubscriptionReference", -1, &(a->wsnt__NotificationMessageHolderType::SubscriptionReference), ""))
		return soap->error;
	if (soap_out_PointerTowsnt__TopicExpressionType(soap, "wsnt:Topic", -1, &(a->wsnt__NotificationMessageHolderType::Topic), ""))
		return soap->error;
	if (soap_out_PointerTowsa5__EndpointReferenceType(soap, "wsnt:ProducerReference", -1, &(a->wsnt__NotificationMessageHolderType::ProducerReference), ""))
		return soap->error;
	if ((a->wsnt__NotificationMessageHolderType::Message).soap_out(soap, "wsnt:Message", -1, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *wsnt__NotificationMessageHolderType::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_wsnt__NotificationMessageHolderType(soap, tag, this, type);
}

SOAP_FMAC3 wsnt__NotificationMessageHolderType * SOAP_FMAC4 soap_in_wsnt__NotificationMessageHolderType(struct soap *soap, const char *tag, wsnt__NotificationMessageHolderType *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (wsnt__NotificationMessageHolderType *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_wsnt__NotificationMessageHolderType, sizeof(wsnt__NotificationMessageHolderType), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_wsnt__NotificationMessageHolderType)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (wsnt__NotificationMessageHolderType *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag___item2 = 1;
	size_t soap_flag_SubscriptionReference1 = 1;
	size_t soap_flag_Topic1 = 1;
	size_t soap_flag_ProducerReference1 = 1;
	size_t soap_flag_Message1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			/* transient soap skipped */
			if (soap_flag_SubscriptionReference1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTowsa5__EndpointReferenceType(soap, "wsnt:SubscriptionReference", &(a->wsnt__NotificationMessageHolderType::SubscriptionReference), "wsa5:EndpointReferenceType"))
				{	soap_flag_SubscriptionReference1--;
					continue;
				}
			if (soap_flag_Topic1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTowsnt__TopicExpressionType(soap, "wsnt:Topic", &(a->wsnt__NotificationMessageHolderType::Topic), "wsnt:TopicExpressionType"))
				{	soap_flag_Topic1--;
					continue;
				}
			if (soap_flag_ProducerReference1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTowsa5__EndpointReferenceType(soap, "wsnt:ProducerReference", &(a->wsnt__NotificationMessageHolderType::ProducerReference), "wsa5:EndpointReferenceType"))
				{	soap_flag_ProducerReference1--;
					continue;
				}
			if (soap_flag_Message1 && soap->error == SOAP_TAG_MISMATCH)
				if ((a->wsnt__NotificationMessageHolderType::Message).soap_in(soap, "wsnt:Message", ""))
				{	soap_flag_Message1--;
					continue;
				}
			if (soap_flag___item2 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_inliteral(soap, "-item", &(a->xsd__anyType::__item)))
				{	soap_flag___item2--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (wsnt__NotificationMessageHolderType *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_wsnt__NotificationMessageHolderType, 0, sizeof(wsnt__NotificationMessageHolderType), 0, soap_copy_wsnt__NotificationMessageHolderType);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_Message1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int wsnt__NotificationMessageHolderType::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	int id = soap_embed(soap, (void*)this, NULL, 0, SOAP_TYPE_wsnt__NotificationMessageHolderType);
	if (this->soap_out(soap, tag?tag:"wsnt:NotificationMessageHolderType", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *wsnt__NotificationMessageHolderType::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_wsnt__NotificationMessageHolderType(soap, this, tag, type);
}

SOAP_FMAC3 wsnt__NotificationMessageHolderType * SOAP_FMAC4 soap_get_wsnt__NotificationMessageHolderType(struct soap *soap, wsnt__NotificationMessageHolderType *p, const char *tag, const char *type)
{
	if ((p = soap_in_wsnt__NotificationMessageHolderType(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 wsnt__NotificationMessageHolderType * SOAP_FMAC2 soap_instantiate_wsnt__NotificationMessageHolderType(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_wsnt__NotificationMessageHolderType(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_wsnt__NotificationMessageHolderType, n, onvifevent_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = SOAP_NEW(wsnt__NotificationMessageHolderType);
		if (size)
			*size = sizeof(wsnt__NotificationMessageHolderType);
		((wsnt__NotificationMessageHolderType*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = SOAP_NEW_ARRAY(wsnt__NotificationMessageHolderType, n);
		if (size)
			*size = n * sizeof(wsnt__NotificationMessageHolderType);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((wsnt__NotificationMessageHolderType*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (wsnt__NotificationMessageHolderType*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_wsnt__NotificationMessageHolderType(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying wsnt__NotificationMessageHolderType %p -> %p\n", q, p));
	*(wsnt__NotificationMessageHolderType*)p = *(wsnt__NotificationMessageHolderType*)q;
}

void wsnt__SubscriptionPolicyType::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->xsd__anyType::soap_default(soap);
	soap_default_std__vectorTemplateOf_XML(soap, &this->wsnt__SubscriptionPolicyType::__any);
}

void wsnt__SubscriptionPolicyType::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_std__vectorTemplateOf_XML(soap, &this->wsnt__SubscriptionPolicyType::__any);
	this->xsd__anyType::soap_serialize(soap);
#endif
}

int wsnt__SubscriptionPolicyType::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_wsnt__SubscriptionPolicyType(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_wsnt__SubscriptionPolicyType(struct soap *soap, const char *tag, int id, const wsnt__SubscriptionPolicyType *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_wsnt__SubscriptionPolicyType), "wsnt:SubscriptionPolicyType"))
		return soap->error;
	/* transient soap skipped */
	if (soap_out_std__vectorTemplateOf_XML(soap, "-any", -1, &(a->wsnt__SubscriptionPolicyType::__any), ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *wsnt__SubscriptionPolicyType::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_wsnt__SubscriptionPolicyType(soap, tag, this, type);
}

SOAP_FMAC3 wsnt__SubscriptionPolicyType * SOAP_FMAC4 soap_in_wsnt__SubscriptionPolicyType(struct soap *soap, const char *tag, wsnt__SubscriptionPolicyType *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (wsnt__SubscriptionPolicyType *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_wsnt__SubscriptionPolicyType, sizeof(wsnt__SubscriptionPolicyType), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_wsnt__SubscriptionPolicyType)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (wsnt__SubscriptionPolicyType *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag___item2 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_std__vectorTemplateOf_XML(soap, "-any", &(a->wsnt__SubscriptionPolicyType::__any), ""))
					continue;
			if (soap_flag___item2 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_inliteral(soap, "-item", &(a->xsd__anyType::__item)))
				{	soap_flag___item2--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (wsnt__SubscriptionPolicyType *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_wsnt__SubscriptionPolicyType, 0, sizeof(wsnt__SubscriptionPolicyType), 0, soap_copy_wsnt__SubscriptionPolicyType);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int wsnt__SubscriptionPolicyType::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	int id = soap_embed(soap, (void*)this, NULL, 0, SOAP_TYPE_wsnt__SubscriptionPolicyType);
	if (this->soap_out(soap, tag?tag:"wsnt:SubscriptionPolicyType", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *wsnt__SubscriptionPolicyType::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_wsnt__SubscriptionPolicyType(soap, this, tag, type);
}

SOAP_FMAC3 wsnt__SubscriptionPolicyType * SOAP_FMAC4 soap_get_wsnt__SubscriptionPolicyType(struct soap *soap, wsnt__SubscriptionPolicyType *p, const char *tag, const char *type)
{
	if ((p = soap_in_wsnt__SubscriptionPolicyType(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 wsnt__SubscriptionPolicyType * SOAP_FMAC2 soap_instantiate_wsnt__SubscriptionPolicyType(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_wsnt__SubscriptionPolicyType(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_wsnt__SubscriptionPolicyType, n, onvifevent_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = SOAP_NEW(wsnt__SubscriptionPolicyType);
		if (size)
			*size = sizeof(wsnt__SubscriptionPolicyType);
		((wsnt__SubscriptionPolicyType*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = SOAP_NEW_ARRAY(wsnt__SubscriptionPolicyType, n);
		if (size)
			*size = n * sizeof(wsnt__SubscriptionPolicyType);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((wsnt__SubscriptionPolicyType*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (wsnt__SubscriptionPolicyType*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_wsnt__SubscriptionPolicyType(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying wsnt__SubscriptionPolicyType %p -> %p\n", q, p));
	*(wsnt__SubscriptionPolicyType*)p = *(wsnt__SubscriptionPolicyType*)q;
}

void wsnt__FilterType::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->xsd__anyType::soap_default(soap);
	soap_default_std__vectorTemplateOf_XML(soap, &this->wsnt__FilterType::__any);
}

void wsnt__FilterType::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_std__vectorTemplateOf_XML(soap, &this->wsnt__FilterType::__any);
	this->xsd__anyType::soap_serialize(soap);
#endif
}

int wsnt__FilterType::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_wsnt__FilterType(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_wsnt__FilterType(struct soap *soap, const char *tag, int id, const wsnt__FilterType *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_wsnt__FilterType), "wsnt:FilterType"))
		return soap->error;
	/* transient soap skipped */
	if (soap_out_std__vectorTemplateOf_XML(soap, "-any", -1, &(a->wsnt__FilterType::__any), ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *wsnt__FilterType::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_wsnt__FilterType(soap, tag, this, type);
}

SOAP_FMAC3 wsnt__FilterType * SOAP_FMAC4 soap_in_wsnt__FilterType(struct soap *soap, const char *tag, wsnt__FilterType *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (wsnt__FilterType *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_wsnt__FilterType, sizeof(wsnt__FilterType), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_wsnt__FilterType)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (wsnt__FilterType *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag___item2 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_std__vectorTemplateOf_XML(soap, "-any", &(a->wsnt__FilterType::__any), ""))
					continue;
			if (soap_flag___item2 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_inliteral(soap, "-item", &(a->xsd__anyType::__item)))
				{	soap_flag___item2--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (wsnt__FilterType *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_wsnt__FilterType, 0, sizeof(wsnt__FilterType), 0, soap_copy_wsnt__FilterType);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int wsnt__FilterType::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	int id = soap_embed(soap, (void*)this, NULL, 0, SOAP_TYPE_wsnt__FilterType);
	if (this->soap_out(soap, tag?tag:"wsnt:FilterType", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *wsnt__FilterType::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_wsnt__FilterType(soap, this, tag, type);
}

SOAP_FMAC3 wsnt__FilterType * SOAP_FMAC4 soap_get_wsnt__FilterType(struct soap *soap, wsnt__FilterType *p, const char *tag, const char *type)
{
	if ((p = soap_in_wsnt__FilterType(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 wsnt__FilterType * SOAP_FMAC2 soap_instantiate_wsnt__FilterType(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_wsnt__FilterType(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_wsnt__FilterType, n, onvifevent_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = SOAP_NEW(wsnt__FilterType);
		if (size)
			*size = sizeof(wsnt__FilterType);
		((wsnt__FilterType*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = SOAP_NEW_ARRAY(wsnt__FilterType, n);
		if (size)
			*size = n * sizeof(wsnt__FilterType);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((wsnt__FilterType*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (wsnt__FilterType*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_wsnt__FilterType(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying wsnt__FilterType %p -> %p\n", q, p));
	*(wsnt__FilterType*)p = *(wsnt__FilterType*)q;
}

void wsnt__TopicExpressionType::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->xsd__anyType::soap_default(soap);
	this->wsnt__TopicExpressionType::__any = NULL;
	soap_default_xsd__anyURI(soap, &this->wsnt__TopicExpressionType::Dialect);
	this->wsnt__TopicExpressionType::__anyAttribute = NULL;
	this->wsnt__TopicExpressionType::__mixed = NULL;
}

void wsnt__TopicExpressionType::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	this->xsd__anyType::soap_serialize(soap);
#endif
}

int wsnt__TopicExpressionType::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_wsnt__TopicExpressionType(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_wsnt__TopicExpressionType(struct soap *soap, const char *tag, int id, const wsnt__TopicExpressionType *a, const char *type)
{
	soap_set_attr(soap, "Dialect", ((wsnt__TopicExpressionType*)a)->Dialect.c_str(), 1);
	if (((wsnt__TopicExpressionType*)a)->__anyAttribute)
		soap_set_attr(soap, "-anyAttribute", ((wsnt__TopicExpressionType*)a)->__anyAttribute, 1);
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_wsnt__TopicExpressionType), "wsnt:TopicExpressionType"))
		return soap->error;
	/* transient soap skipped */
	soap_outliteral(soap, "-any", &(a->wsnt__TopicExpressionType::__any), NULL);
	soap_outliteral(soap, "-mixed", &(a->wsnt__TopicExpressionType::__mixed), NULL);
	return soap_element_end_out(soap, tag);
}

void *wsnt__TopicExpressionType::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_wsnt__TopicExpressionType(soap, tag, this, type);
}

SOAP_FMAC3 wsnt__TopicExpressionType * SOAP_FMAC4 soap_in_wsnt__TopicExpressionType(struct soap *soap, const char *tag, wsnt__TopicExpressionType *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (wsnt__TopicExpressionType *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_wsnt__TopicExpressionType, sizeof(wsnt__TopicExpressionType), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_wsnt__TopicExpressionType)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (wsnt__TopicExpressionType *)a->soap_in(soap, tag, type);
		}
	}
	{	const char *t = soap_attr_value(soap, "Dialect", 1);
		if (t)
		{	char *s;
			if (soap_s2string(soap, t, &s, 0, -1))
				return NULL;
			((wsnt__TopicExpressionType*)a)->Dialect.assign(s);
		}
		else if (soap->error)
			return NULL;
	}
	if (soap_s2string(soap, soap_attr_value(soap, "-anyAttribute", 0), &((wsnt__TopicExpressionType*)a)->__anyAttribute, 0, -1))
		return NULL;
	size_t soap_flag___item2 = 1;
	size_t soap_flag___any1 = 1;
	size_t soap_flag___mixed1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			/* transient soap skipped */
			if (soap_flag___any1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_inliteral(soap, "-any", &(a->wsnt__TopicExpressionType::__any)))
				{	soap_flag___any1--;
					continue;
				}
			if (soap_flag___mixed1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_inliteral(soap, "-mixed", &(a->wsnt__TopicExpressionType::__mixed)))
				{	soap_flag___mixed1--;
					continue;
				}
			if (soap_flag___item2 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_inliteral(soap, "-item", &(a->xsd__anyType::__item)))
				{	soap_flag___item2--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (wsnt__TopicExpressionType *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_wsnt__TopicExpressionType, 0, sizeof(wsnt__TopicExpressionType), 0, soap_copy_wsnt__TopicExpressionType);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int wsnt__TopicExpressionType::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	int id = soap_embed(soap, (void*)this, NULL, 0, SOAP_TYPE_wsnt__TopicExpressionType);
	if (this->soap_out(soap, tag?tag:"wsnt:TopicExpressionType", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *wsnt__TopicExpressionType::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_wsnt__TopicExpressionType(soap, this, tag, type);
}

SOAP_FMAC3 wsnt__TopicExpressionType * SOAP_FMAC4 soap_get_wsnt__TopicExpressionType(struct soap *soap, wsnt__TopicExpressionType *p, const char *tag, const char *type)
{
	if ((p = soap_in_wsnt__TopicExpressionType(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 wsnt__TopicExpressionType * SOAP_FMAC2 soap_instantiate_wsnt__TopicExpressionType(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_wsnt__TopicExpressionType(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_wsnt__TopicExpressionType, n, onvifevent_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = SOAP_NEW(wsnt__TopicExpressionType);
		if (size)
			*size = sizeof(wsnt__TopicExpressionType);
		((wsnt__TopicExpressionType*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = SOAP_NEW_ARRAY(wsnt__TopicExpressionType, n);
		if (size)
			*size = n * sizeof(wsnt__TopicExpressionType);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((wsnt__TopicExpressionType*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (wsnt__TopicExpressionType*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_wsnt__TopicExpressionType(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying wsnt__TopicExpressionType %p -> %p\n", q, p));
	*(wsnt__TopicExpressionType*)p = *(wsnt__TopicExpressionType*)q;
}

void wsnt__QueryExpressionType::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->xsd__anyType::soap_default(soap);
	this->wsnt__QueryExpressionType::__any = NULL;
	soap_default_xsd__anyURI(soap, &this->wsnt__QueryExpressionType::Dialect);
	this->wsnt__QueryExpressionType::__mixed = NULL;
}

void wsnt__QueryExpressionType::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	this->xsd__anyType::soap_serialize(soap);
#endif
}

int wsnt__QueryExpressionType::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_wsnt__QueryExpressionType(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_wsnt__QueryExpressionType(struct soap *soap, const char *tag, int id, const wsnt__QueryExpressionType *a, const char *type)
{
	soap_set_attr(soap, "Dialect", ((wsnt__QueryExpressionType*)a)->Dialect.c_str(), 1);
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_wsnt__QueryExpressionType), "wsnt:QueryExpressionType"))
		return soap->error;
	/* transient soap skipped */
	soap_outliteral(soap, "-any", &(a->wsnt__QueryExpressionType::__any), NULL);
	soap_outliteral(soap, "-mixed", &(a->wsnt__QueryExpressionType::__mixed), NULL);
	return soap_element_end_out(soap, tag);
}

void *wsnt__QueryExpressionType::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_wsnt__QueryExpressionType(soap, tag, this, type);
}

SOAP_FMAC3 wsnt__QueryExpressionType * SOAP_FMAC4 soap_in_wsnt__QueryExpressionType(struct soap *soap, const char *tag, wsnt__QueryExpressionType *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (wsnt__QueryExpressionType *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_wsnt__QueryExpressionType, sizeof(wsnt__QueryExpressionType), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_wsnt__QueryExpressionType)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (wsnt__QueryExpressionType *)a->soap_in(soap, tag, type);
		}
	}
	{	const char *t = soap_attr_value(soap, "Dialect", 1);
		if (t)
		{	char *s;
			if (soap_s2string(soap, t, &s, 0, -1))
				return NULL;
			((wsnt__QueryExpressionType*)a)->Dialect.assign(s);
		}
		else if (soap->error)
			return NULL;
	}
	size_t soap_flag___item2 = 1;
	size_t soap_flag___any1 = 1;
	size_t soap_flag___mixed1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			/* transient soap skipped */
			if (soap_flag___any1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_inliteral(soap, "-any", &(a->wsnt__QueryExpressionType::__any)))
				{	soap_flag___any1--;
					continue;
				}
			if (soap_flag___mixed1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_inliteral(soap, "-mixed", &(a->wsnt__QueryExpressionType::__mixed)))
				{	soap_flag___mixed1--;
					continue;
				}
			if (soap_flag___item2 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_inliteral(soap, "-item", &(a->xsd__anyType::__item)))
				{	soap_flag___item2--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (wsnt__QueryExpressionType *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_wsnt__QueryExpressionType, 0, sizeof(wsnt__QueryExpressionType), 0, soap_copy_wsnt__QueryExpressionType);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int wsnt__QueryExpressionType::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	int id = soap_embed(soap, (void*)this, NULL, 0, SOAP_TYPE_wsnt__QueryExpressionType);
	if (this->soap_out(soap, tag?tag:"wsnt:QueryExpressionType", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *wsnt__QueryExpressionType::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_wsnt__QueryExpressionType(soap, this, tag, type);
}

SOAP_FMAC3 wsnt__QueryExpressionType * SOAP_FMAC4 soap_get_wsnt__QueryExpressionType(struct soap *soap, wsnt__QueryExpressionType *p, const char *tag, const char *type)
{
	if ((p = soap_in_wsnt__QueryExpressionType(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 wsnt__QueryExpressionType * SOAP_FMAC2 soap_instantiate_wsnt__QueryExpressionType(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_wsnt__QueryExpressionType(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_wsnt__QueryExpressionType, n, onvifevent_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = SOAP_NEW(wsnt__QueryExpressionType);
		if (size)
			*size = sizeof(wsnt__QueryExpressionType);
		((wsnt__QueryExpressionType*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = SOAP_NEW_ARRAY(wsnt__QueryExpressionType, n);
		if (size)
			*size = n * sizeof(wsnt__QueryExpressionType);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((wsnt__QueryExpressionType*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (wsnt__QueryExpressionType*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_wsnt__QueryExpressionType(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying wsnt__QueryExpressionType %p -> %p\n", q, p));
	*(wsnt__QueryExpressionType*)p = *(wsnt__QueryExpressionType*)q;
}

void wsrfbf__BaseFaultType::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->xsd__anyType::soap_default(soap);
	soap_default_std__vectorTemplateOf_XML(soap, &this->wsrfbf__BaseFaultType::__any);
	soap_default_time(soap, &this->wsrfbf__BaseFaultType::Timestamp);
	this->wsrfbf__BaseFaultType::Originator = NULL;
	this->wsrfbf__BaseFaultType::ErrorCode = NULL;
	this->wsrfbf__BaseFaultType::Description = NULL;
	this->wsrfbf__BaseFaultType::FaultCause = NULL;
	this->wsrfbf__BaseFaultType::__anyAttribute = NULL;
}

void wsrfbf__BaseFaultType::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_std__vectorTemplateOf_XML(soap, &this->wsrfbf__BaseFaultType::__any);
	soap_embedded(soap, &this->wsrfbf__BaseFaultType::Timestamp, SOAP_TYPE_time);
	soap_serialize_PointerTowsa5__EndpointReferenceType(soap, &this->wsrfbf__BaseFaultType::Originator);
	soap_serialize_PointerTo_wsrfbf__BaseFaultType_ErrorCode(soap, &this->wsrfbf__BaseFaultType::ErrorCode);
	soap_serialize_PointerTostd__vectorTemplateOf_wsrfbf__BaseFaultType_Description(soap, &this->wsrfbf__BaseFaultType::Description);
	soap_serialize_PointerTo_wsrfbf__BaseFaultType_FaultCause(soap, &this->wsrfbf__BaseFaultType::FaultCause);
	this->xsd__anyType::soap_serialize(soap);
#endif
}

int wsrfbf__BaseFaultType::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_wsrfbf__BaseFaultType(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_wsrfbf__BaseFaultType(struct soap *soap, const char *tag, int id, const wsrfbf__BaseFaultType *a, const char *type)
{
	if (((wsrfbf__BaseFaultType*)a)->__anyAttribute)
		soap_set_attr(soap, "-anyAttribute", ((wsrfbf__BaseFaultType*)a)->__anyAttribute, 1);
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_wsrfbf__BaseFaultType), "wsrfbf:BaseFaultType"))
		return soap->error;
	/* transient soap skipped */
	if (soap_out_std__vectorTemplateOf_XML(soap, "-any", -1, &(a->wsrfbf__BaseFaultType::__any), ""))
		return soap->error;
	if (soap_out_time(soap, "wsrfbf:Timestamp", -1, &(a->wsrfbf__BaseFaultType::Timestamp), ""))
		return soap->error;
	if (soap_out_PointerTowsa5__EndpointReferenceType(soap, "wsrfbf:Originator", -1, &(a->wsrfbf__BaseFaultType::Originator), ""))
		return soap->error;
	if (soap_out_PointerTo_wsrfbf__BaseFaultType_ErrorCode(soap, "wsrfbf:ErrorCode", -1, &(a->wsrfbf__BaseFaultType::ErrorCode), ""))
		return soap->error;
	if (soap_out_PointerTostd__vectorTemplateOf_wsrfbf__BaseFaultType_Description(soap, "wsrfbf:Description", -1, &(a->wsrfbf__BaseFaultType::Description), ""))
		return soap->error;
	if (soap_out_PointerTo_wsrfbf__BaseFaultType_FaultCause(soap, "wsrfbf:FaultCause", -1, &(a->wsrfbf__BaseFaultType::FaultCause), ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *wsrfbf__BaseFaultType::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_wsrfbf__BaseFaultType(soap, tag, this, type);
}

SOAP_FMAC3 wsrfbf__BaseFaultType * SOAP_FMAC4 soap_in_wsrfbf__BaseFaultType(struct soap *soap, const char *tag, wsrfbf__BaseFaultType *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (wsrfbf__BaseFaultType *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_wsrfbf__BaseFaultType, sizeof(wsrfbf__BaseFaultType), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_wsrfbf__BaseFaultType)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (wsrfbf__BaseFaultType *)a->soap_in(soap, tag, type);
		}
	}
	if (soap_s2string(soap, soap_attr_value(soap, "-anyAttribute", 0), &((wsrfbf__BaseFaultType*)a)->__anyAttribute, 0, -1))
		return NULL;
	size_t soap_flag___item2 = 1;
	size_t soap_flag_Timestamp1 = 1;
	size_t soap_flag_Originator1 = 1;
	size_t soap_flag_ErrorCode1 = 1;
	size_t soap_flag_FaultCause1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			/* transient soap skipped */
			if (soap_flag_Timestamp1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_time(soap, "wsrfbf:Timestamp", &(a->wsrfbf__BaseFaultType::Timestamp), "xsd:dateTime"))
				{	soap_flag_Timestamp1--;
					continue;
				}
			if (soap_flag_Originator1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTowsa5__EndpointReferenceType(soap, "wsrfbf:Originator", &(a->wsrfbf__BaseFaultType::Originator), "wsa5:EndpointReferenceType"))
				{	soap_flag_Originator1--;
					continue;
				}
			if (soap_flag_ErrorCode1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_wsrfbf__BaseFaultType_ErrorCode(soap, "wsrfbf:ErrorCode", &(a->wsrfbf__BaseFaultType::ErrorCode), ""))
				{	soap_flag_ErrorCode1--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTostd__vectorTemplateOf_wsrfbf__BaseFaultType_Description(soap, "wsrfbf:Description", &(a->wsrfbf__BaseFaultType::Description), ""))
					continue;
			if (soap_flag_FaultCause1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_wsrfbf__BaseFaultType_FaultCause(soap, "wsrfbf:FaultCause", &(a->wsrfbf__BaseFaultType::FaultCause), ""))
				{	soap_flag_FaultCause1--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_std__vectorTemplateOf_XML(soap, "-any", &(a->wsrfbf__BaseFaultType::__any), ""))
					continue;
			if (soap_flag___item2 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_inliteral(soap, "-item", &(a->xsd__anyType::__item)))
				{	soap_flag___item2--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (wsrfbf__BaseFaultType *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_wsrfbf__BaseFaultType, 0, sizeof(wsrfbf__BaseFaultType), 0, soap_copy_wsrfbf__BaseFaultType);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_Timestamp1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int wsrfbf__BaseFaultType::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	int id = soap_embed(soap, (void*)this, NULL, 0, SOAP_TYPE_wsrfbf__BaseFaultType);
	if (this->soap_out(soap, tag?tag:"wsrfbf:BaseFaultType", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *wsrfbf__BaseFaultType::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_wsrfbf__BaseFaultType(soap, this, tag, type);
}

SOAP_FMAC3 wsrfbf__BaseFaultType * SOAP_FMAC4 soap_get_wsrfbf__BaseFaultType(struct soap *soap, wsrfbf__BaseFaultType *p, const char *tag, const char *type)
{
	if ((p = soap_in_wsrfbf__BaseFaultType(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 wsrfbf__BaseFaultType * SOAP_FMAC2 soap_instantiate_wsrfbf__BaseFaultType(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_wsrfbf__BaseFaultType(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_wsrfbf__BaseFaultType, n, onvifevent_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (type && !soap_match_tag(soap, type, "wsrfr:ResourceUnknownFaultType"))
	{	cp->type = SOAP_TYPE_wsrfr__ResourceUnknownFaultType;
		if (n < 0)
		{	cp->ptr = SOAP_NEW(wsrfr__ResourceUnknownFaultType);
			if (size)
				*size = sizeof(wsrfr__ResourceUnknownFaultType);
			((wsrfr__ResourceUnknownFaultType*)cp->ptr)->soap = soap;
		}
		else
		{	cp->ptr = SOAP_NEW_ARRAY(wsrfr__ResourceUnknownFaultType, n);
			if (size)
				*size = n * sizeof(wsrfr__ResourceUnknownFaultType);
			if (cp->ptr)
				for (int i = 0; i < n; i++)
					((wsrfr__ResourceUnknownFaultType*)cp->ptr)[i].soap = soap;
		}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
		if (!cp->ptr)
			soap->error = SOAP_EOM;
		return (wsrfr__ResourceUnknownFaultType*)cp->ptr;
	}
	if (type && !soap_match_tag(soap, type, "wsrfr:ResourceUnavailableFaultType"))
	{	cp->type = SOAP_TYPE_wsrfr__ResourceUnavailableFaultType;
		if (n < 0)
		{	cp->ptr = SOAP_NEW(wsrfr__ResourceUnavailableFaultType);
			if (size)
				*size = sizeof(wsrfr__ResourceUnavailableFaultType);
			((wsrfr__ResourceUnavailableFaultType*)cp->ptr)->soap = soap;
		}
		else
		{	cp->ptr = SOAP_NEW_ARRAY(wsrfr__ResourceUnavailableFaultType, n);
			if (size)
				*size = n * sizeof(wsrfr__ResourceUnavailableFaultType);
			if (cp->ptr)
				for (int i = 0; i < n; i++)
					((wsrfr__ResourceUnavailableFaultType*)cp->ptr)[i].soap = soap;
		}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
		if (!cp->ptr)
			soap->error = SOAP_EOM;
		return (wsrfr__ResourceUnavailableFaultType*)cp->ptr;
	}
	if (type && !soap_match_tag(soap, type, "wsnt:SubscribeCreationFailedFaultType"))
	{	cp->type = SOAP_TYPE_wsnt__SubscribeCreationFailedFaultType;
		if (n < 0)
		{	cp->ptr = SOAP_NEW(wsnt__SubscribeCreationFailedFaultType);
			if (size)
				*size = sizeof(wsnt__SubscribeCreationFailedFaultType);
			((wsnt__SubscribeCreationFailedFaultType*)cp->ptr)->soap = soap;
		}
		else
		{	cp->ptr = SOAP_NEW_ARRAY(wsnt__SubscribeCreationFailedFaultType, n);
			if (size)
				*size = n * sizeof(wsnt__SubscribeCreationFailedFaultType);
			if (cp->ptr)
				for (int i = 0; i < n; i++)
					((wsnt__SubscribeCreationFailedFaultType*)cp->ptr)[i].soap = soap;
		}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
		if (!cp->ptr)
			soap->error = SOAP_EOM;
		return (wsnt__SubscribeCreationFailedFaultType*)cp->ptr;
	}
	if (type && !soap_match_tag(soap, type, "wsnt:InvalidFilterFaultType"))
	{	cp->type = SOAP_TYPE_wsnt__InvalidFilterFaultType;
		if (n < 0)
		{	cp->ptr = SOAP_NEW(wsnt__InvalidFilterFaultType);
			if (size)
				*size = sizeof(wsnt__InvalidFilterFaultType);
			((wsnt__InvalidFilterFaultType*)cp->ptr)->soap = soap;
		}
		else
		{	cp->ptr = SOAP_NEW_ARRAY(wsnt__InvalidFilterFaultType, n);
			if (size)
				*size = n * sizeof(wsnt__InvalidFilterFaultType);
			if (cp->ptr)
				for (int i = 0; i < n; i++)
					((wsnt__InvalidFilterFaultType*)cp->ptr)[i].soap = soap;
		}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
		if (!cp->ptr)
			soap->error = SOAP_EOM;
		return (wsnt__InvalidFilterFaultType*)cp->ptr;
	}
	if (type && !soap_match_tag(soap, type, "wsnt:TopicExpressionDialectUnknownFaultType"))
	{	cp->type = SOAP_TYPE_wsnt__TopicExpressionDialectUnknownFaultType;
		if (n < 0)
		{	cp->ptr = SOAP_NEW(wsnt__TopicExpressionDialectUnknownFaultType);
			if (size)
				*size = sizeof(wsnt__TopicExpressionDialectUnknownFaultType);
			((wsnt__TopicExpressionDialectUnknownFaultType*)cp->ptr)->soap = soap;
		}
		else
		{	cp->ptr = SOAP_NEW_ARRAY(wsnt__TopicExpressionDialectUnknownFaultType, n);
			if (size)
				*size = n * sizeof(wsnt__TopicExpressionDialectUnknownFaultType);
			if (cp->ptr)
				for (int i = 0; i < n; i++)
					((wsnt__TopicExpressionDialectUnknownFaultType*)cp->ptr)[i].soap = soap;
		}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
		if (!cp->ptr)
			soap->error = SOAP_EOM;
		return (wsnt__TopicExpressionDialectUnknownFaultType*)cp->ptr;
	}
	if (type && !soap_match_tag(soap, type, "wsnt:InvalidTopicExpressionFaultType"))
	{	cp->type = SOAP_TYPE_wsnt__InvalidTopicExpressionFaultType;
		if (n < 0)
		{	cp->ptr = SOAP_NEW(wsnt__InvalidTopicExpressionFaultType);
			if (size)
				*size = sizeof(wsnt__InvalidTopicExpressionFaultType);
			((wsnt__InvalidTopicExpressionFaultType*)cp->ptr)->soap = soap;
		}
		else
		{	cp->ptr = SOAP_NEW_ARRAY(wsnt__InvalidTopicExpressionFaultType, n);
			if (size)
				*size = n * sizeof(wsnt__InvalidTopicExpressionFaultType);
			if (cp->ptr)
				for (int i = 0; i < n; i++)
					((wsnt__InvalidTopicExpressionFaultType*)cp->ptr)[i].soap = soap;
		}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
		if (!cp->ptr)
			soap->error = SOAP_EOM;
		return (wsnt__InvalidTopicExpressionFaultType*)cp->ptr;
	}
	if (type && !soap_match_tag(soap, type, "wsnt:TopicNotSupportedFaultType"))
	{	cp->type = SOAP_TYPE_wsnt__TopicNotSupportedFaultType;
		if (n < 0)
		{	cp->ptr = SOAP_NEW(wsnt__TopicNotSupportedFaultType);
			if (size)
				*size = sizeof(wsnt__TopicNotSupportedFaultType);
			((wsnt__TopicNotSupportedFaultType*)cp->ptr)->soap = soap;
		}
		else
		{	cp->ptr = SOAP_NEW_ARRAY(wsnt__TopicNotSupportedFaultType, n);
			if (size)
				*size = n * sizeof(wsnt__TopicNotSupportedFaultType);
			if (cp->ptr)
				for (int i = 0; i < n; i++)
					((wsnt__TopicNotSupportedFaultType*)cp->ptr)[i].soap = soap;
		}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
		if (!cp->ptr)
			soap->error = SOAP_EOM;
		return (wsnt__TopicNotSupportedFaultType*)cp->ptr;
	}
	if (type && !soap_match_tag(soap, type, "wsnt:MultipleTopicsSpecifiedFaultType"))
	{	cp->type = SOAP_TYPE_wsnt__MultipleTopicsSpecifiedFaultType;
		if (n < 0)
		{	cp->ptr = SOAP_NEW(wsnt__MultipleTopicsSpecifiedFaultType);
			if (size)
				*size = sizeof(wsnt__MultipleTopicsSpecifiedFaultType);
			((wsnt__MultipleTopicsSpecifiedFaultType*)cp->ptr)->soap = soap;
		}
		else
		{	cp->ptr = SOAP_NEW_ARRAY(wsnt__MultipleTopicsSpecifiedFaultType, n);
			if (size)
				*size = n * sizeof(wsnt__MultipleTopicsSpecifiedFaultType);
			if (cp->ptr)
				for (int i = 0; i < n; i++)
					((wsnt__MultipleTopicsSpecifiedFaultType*)cp->ptr)[i].soap = soap;
		}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
		if (!cp->ptr)
			soap->error = SOAP_EOM;
		return (wsnt__MultipleTopicsSpecifiedFaultType*)cp->ptr;
	}
	if (type && !soap_match_tag(soap, type, "wsnt:InvalidProducerPropertiesExpressionFaultType"))
	{	cp->type = SOAP_TYPE_wsnt__InvalidProducerPropertiesExpressionFaultType;
		if (n < 0)
		{	cp->ptr = SOAP_NEW(wsnt__InvalidProducerPropertiesExpressionFaultType);
			if (size)
				*size = sizeof(wsnt__InvalidProducerPropertiesExpressionFaultType);
			((wsnt__InvalidProducerPropertiesExpressionFaultType*)cp->ptr)->soap = soap;
		}
		else
		{	cp->ptr = SOAP_NEW_ARRAY(wsnt__InvalidProducerPropertiesExpressionFaultType, n);
			if (size)
				*size = n * sizeof(wsnt__InvalidProducerPropertiesExpressionFaultType);
			if (cp->ptr)
				for (int i = 0; i < n; i++)
					((wsnt__InvalidProducerPropertiesExpressionFaultType*)cp->ptr)[i].soap = soap;
		}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
		if (!cp->ptr)
			soap->error = SOAP_EOM;
		return (wsnt__InvalidProducerPropertiesExpressionFaultType*)cp->ptr;
	}
	if (type && !soap_match_tag(soap, type, "wsnt:InvalidMessageContentExpressionFaultType"))
	{	cp->type = SOAP_TYPE_wsnt__InvalidMessageContentExpressionFaultType;
		if (n < 0)
		{	cp->ptr = SOAP_NEW(wsnt__InvalidMessageContentExpressionFaultType);
			if (size)
				*size = sizeof(wsnt__InvalidMessageContentExpressionFaultType);
			((wsnt__InvalidMessageContentExpressionFaultType*)cp->ptr)->soap = soap;
		}
		else
		{	cp->ptr = SOAP_NEW_ARRAY(wsnt__InvalidMessageContentExpressionFaultType, n);
			if (size)
				*size = n * sizeof(wsnt__InvalidMessageContentExpressionFaultType);
			if (cp->ptr)
				for (int i = 0; i < n; i++)
					((wsnt__InvalidMessageContentExpressionFaultType*)cp->ptr)[i].soap = soap;
		}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
		if (!cp->ptr)
			soap->error = SOAP_EOM;
		return (wsnt__InvalidMessageContentExpressionFaultType*)cp->ptr;
	}
	if (type && !soap_match_tag(soap, type, "wsnt:UnrecognizedPolicyRequestFaultType"))
	{	cp->type = SOAP_TYPE_wsnt__UnrecognizedPolicyRequestFaultType;
		if (n < 0)
		{	cp->ptr = SOAP_NEW(wsnt__UnrecognizedPolicyRequestFaultType);
			if (size)
				*size = sizeof(wsnt__UnrecognizedPolicyRequestFaultType);
			((wsnt__UnrecognizedPolicyRequestFaultType*)cp->ptr)->soap = soap;
		}
		else
		{	cp->ptr = SOAP_NEW_ARRAY(wsnt__UnrecognizedPolicyRequestFaultType, n);
			if (size)
				*size = n * sizeof(wsnt__UnrecognizedPolicyRequestFaultType);
			if (cp->ptr)
				for (int i = 0; i < n; i++)
					((wsnt__UnrecognizedPolicyRequestFaultType*)cp->ptr)[i].soap = soap;
		}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
		if (!cp->ptr)
			soap->error = SOAP_EOM;
		return (wsnt__UnrecognizedPolicyRequestFaultType*)cp->ptr;
	}
	if (type && !soap_match_tag(soap, type, "wsnt:UnsupportedPolicyRequestFaultType"))
	{	cp->type = SOAP_TYPE_wsnt__UnsupportedPolicyRequestFaultType;
		if (n < 0)
		{	cp->ptr = SOAP_NEW(wsnt__UnsupportedPolicyRequestFaultType);
			if (size)
				*size = sizeof(wsnt__UnsupportedPolicyRequestFaultType);
			((wsnt__UnsupportedPolicyRequestFaultType*)cp->ptr)->soap = soap;
		}
		else
		{	cp->ptr = SOAP_NEW_ARRAY(wsnt__UnsupportedPolicyRequestFaultType, n);
			if (size)
				*size = n * sizeof(wsnt__UnsupportedPolicyRequestFaultType);
			if (cp->ptr)
				for (int i = 0; i < n; i++)
					((wsnt__UnsupportedPolicyRequestFaultType*)cp->ptr)[i].soap = soap;
		}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
		if (!cp->ptr)
			soap->error = SOAP_EOM;
		return (wsnt__UnsupportedPolicyRequestFaultType*)cp->ptr;
	}
	if (type && !soap_match_tag(soap, type, "wsnt:NotifyMessageNotSupportedFaultType"))
	{	cp->type = SOAP_TYPE_wsnt__NotifyMessageNotSupportedFaultType;
		if (n < 0)
		{	cp->ptr = SOAP_NEW(wsnt__NotifyMessageNotSupportedFaultType);
			if (size)
				*size = sizeof(wsnt__NotifyMessageNotSupportedFaultType);
			((wsnt__NotifyMessageNotSupportedFaultType*)cp->ptr)->soap = soap;
		}
		else
		{	cp->ptr = SOAP_NEW_ARRAY(wsnt__NotifyMessageNotSupportedFaultType, n);
			if (size)
				*size = n * sizeof(wsnt__NotifyMessageNotSupportedFaultType);
			if (cp->ptr)
				for (int i = 0; i < n; i++)
					((wsnt__NotifyMessageNotSupportedFaultType*)cp->ptr)[i].soap = soap;
		}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
		if (!cp->ptr)
			soap->error = SOAP_EOM;
		return (wsnt__NotifyMessageNotSupportedFaultType*)cp->ptr;
	}
	if (type && !soap_match_tag(soap, type, "wsnt:UnacceptableInitialTerminationTimeFaultType"))
	{	cp->type = SOAP_TYPE_wsnt__UnacceptableInitialTerminationTimeFaultType;
		if (n < 0)
		{	cp->ptr = SOAP_NEW(wsnt__UnacceptableInitialTerminationTimeFaultType);
			if (size)
				*size = sizeof(wsnt__UnacceptableInitialTerminationTimeFaultType);
			((wsnt__UnacceptableInitialTerminationTimeFaultType*)cp->ptr)->soap = soap;
		}
		else
		{	cp->ptr = SOAP_NEW_ARRAY(wsnt__UnacceptableInitialTerminationTimeFaultType, n);
			if (size)
				*size = n * sizeof(wsnt__UnacceptableInitialTerminationTimeFaultType);
			if (cp->ptr)
				for (int i = 0; i < n; i++)
					((wsnt__UnacceptableInitialTerminationTimeFaultType*)cp->ptr)[i].soap = soap;
		}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
		if (!cp->ptr)
			soap->error = SOAP_EOM;
		return (wsnt__UnacceptableInitialTerminationTimeFaultType*)cp->ptr;
	}
	if (type && !soap_match_tag(soap, type, "wsnt:NoCurrentMessageOnTopicFaultType"))
	{	cp->type = SOAP_TYPE_wsnt__NoCurrentMessageOnTopicFaultType;
		if (n < 0)
		{	cp->ptr = SOAP_NEW(wsnt__NoCurrentMessageOnTopicFaultType);
			if (size)
				*size = sizeof(wsnt__NoCurrentMessageOnTopicFaultType);
			((wsnt__NoCurrentMessageOnTopicFaultType*)cp->ptr)->soap = soap;
		}
		else
		{	cp->ptr = SOAP_NEW_ARRAY(wsnt__NoCurrentMessageOnTopicFaultType, n);
			if (size)
				*size = n * sizeof(wsnt__NoCurrentMessageOnTopicFaultType);
			if (cp->ptr)
				for (int i = 0; i < n; i++)
					((wsnt__NoCurrentMessageOnTopicFaultType*)cp->ptr)[i].soap = soap;
		}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
		if (!cp->ptr)
			soap->error = SOAP_EOM;
		return (wsnt__NoCurrentMessageOnTopicFaultType*)cp->ptr;
	}
	if (type && !soap_match_tag(soap, type, "wsnt:UnableToGetMessagesFaultType"))
	{	cp->type = SOAP_TYPE_wsnt__UnableToGetMessagesFaultType;
		if (n < 0)
		{	cp->ptr = SOAP_NEW(wsnt__UnableToGetMessagesFaultType);
			if (size)
				*size = sizeof(wsnt__UnableToGetMessagesFaultType);
			((wsnt__UnableToGetMessagesFaultType*)cp->ptr)->soap = soap;
		}
		else
		{	cp->ptr = SOAP_NEW_ARRAY(wsnt__UnableToGetMessagesFaultType, n);
			if (size)
				*size = n * sizeof(wsnt__UnableToGetMessagesFaultType);
			if (cp->ptr)
				for (int i = 0; i < n; i++)
					((wsnt__UnableToGetMessagesFaultType*)cp->ptr)[i].soap = soap;
		}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
		if (!cp->ptr)
			soap->error = SOAP_EOM;
		return (wsnt__UnableToGetMessagesFaultType*)cp->ptr;
	}
	if (type && !soap_match_tag(soap, type, "wsnt:UnableToDestroyPullPointFaultType"))
	{	cp->type = SOAP_TYPE_wsnt__UnableToDestroyPullPointFaultType;
		if (n < 0)
		{	cp->ptr = SOAP_NEW(wsnt__UnableToDestroyPullPointFaultType);
			if (size)
				*size = sizeof(wsnt__UnableToDestroyPullPointFaultType);
			((wsnt__UnableToDestroyPullPointFaultType*)cp->ptr)->soap = soap;
		}
		else
		{	cp->ptr = SOAP_NEW_ARRAY(wsnt__UnableToDestroyPullPointFaultType, n);
			if (size)
				*size = n * sizeof(wsnt__UnableToDestroyPullPointFaultType);
			if (cp->ptr)
				for (int i = 0; i < n; i++)
					((wsnt__UnableToDestroyPullPointFaultType*)cp->ptr)[i].soap = soap;
		}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
		if (!cp->ptr)
			soap->error = SOAP_EOM;
		return (wsnt__UnableToDestroyPullPointFaultType*)cp->ptr;
	}
	if (type && !soap_match_tag(soap, type, "wsnt:UnableToCreatePullPointFaultType"))
	{	cp->type = SOAP_TYPE_wsnt__UnableToCreatePullPointFaultType;
		if (n < 0)
		{	cp->ptr = SOAP_NEW(wsnt__UnableToCreatePullPointFaultType);
			if (size)
				*size = sizeof(wsnt__UnableToCreatePullPointFaultType);
			((wsnt__UnableToCreatePullPointFaultType*)cp->ptr)->soap = soap;
		}
		else
		{	cp->ptr = SOAP_NEW_ARRAY(wsnt__UnableToCreatePullPointFaultType, n);
			if (size)
				*size = n * sizeof(wsnt__UnableToCreatePullPointFaultType);
			if (cp->ptr)
				for (int i = 0; i < n; i++)
					((wsnt__UnableToCreatePullPointFaultType*)cp->ptr)[i].soap = soap;
		}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
		if (!cp->ptr)
			soap->error = SOAP_EOM;
		return (wsnt__UnableToCreatePullPointFaultType*)cp->ptr;
	}
	if (type && !soap_match_tag(soap, type, "wsnt:UnacceptableTerminationTimeFaultType"))
	{	cp->type = SOAP_TYPE_wsnt__UnacceptableTerminationTimeFaultType;
		if (n < 0)
		{	cp->ptr = SOAP_NEW(wsnt__UnacceptableTerminationTimeFaultType);
			if (size)
				*size = sizeof(wsnt__UnacceptableTerminationTimeFaultType);
			((wsnt__UnacceptableTerminationTimeFaultType*)cp->ptr)->soap = soap;
		}
		else
		{	cp->ptr = SOAP_NEW_ARRAY(wsnt__UnacceptableTerminationTimeFaultType, n);
			if (size)
				*size = n * sizeof(wsnt__UnacceptableTerminationTimeFaultType);
			if (cp->ptr)
				for (int i = 0; i < n; i++)
					((wsnt__UnacceptableTerminationTimeFaultType*)cp->ptr)[i].soap = soap;
		}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
		if (!cp->ptr)
			soap->error = SOAP_EOM;
		return (wsnt__UnacceptableTerminationTimeFaultType*)cp->ptr;
	}
	if (type && !soap_match_tag(soap, type, "wsnt:UnableToDestroySubscriptionFaultType"))
	{	cp->type = SOAP_TYPE_wsnt__UnableToDestroySubscriptionFaultType;
		if (n < 0)
		{	cp->ptr = SOAP_NEW(wsnt__UnableToDestroySubscriptionFaultType);
			if (size)
				*size = sizeof(wsnt__UnableToDestroySubscriptionFaultType);
			((wsnt__UnableToDestroySubscriptionFaultType*)cp->ptr)->soap = soap;
		}
		else
		{	cp->ptr = SOAP_NEW_ARRAY(wsnt__UnableToDestroySubscriptionFaultType, n);
			if (size)
				*size = n * sizeof(wsnt__UnableToDestroySubscriptionFaultType);
			if (cp->ptr)
				for (int i = 0; i < n; i++)
					((wsnt__UnableToDestroySubscriptionFaultType*)cp->ptr)[i].soap = soap;
		}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
		if (!cp->ptr)
			soap->error = SOAP_EOM;
		return (wsnt__UnableToDestroySubscriptionFaultType*)cp->ptr;
	}
	if (type && !soap_match_tag(soap, type, "wsnt:PauseFailedFaultType"))
	{	cp->type = SOAP_TYPE_wsnt__PauseFailedFaultType;
		if (n < 0)
		{	cp->ptr = SOAP_NEW(wsnt__PauseFailedFaultType);
			if (size)
				*size = sizeof(wsnt__PauseFailedFaultType);
			((wsnt__PauseFailedFaultType*)cp->ptr)->soap = soap;
		}
		else
		{	cp->ptr = SOAP_NEW_ARRAY(wsnt__PauseFailedFaultType, n);
			if (size)
				*size = n * sizeof(wsnt__PauseFailedFaultType);
			if (cp->ptr)
				for (int i = 0; i < n; i++)
					((wsnt__PauseFailedFaultType*)cp->ptr)[i].soap = soap;
		}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
		if (!cp->ptr)
			soap->error = SOAP_EOM;
		return (wsnt__PauseFailedFaultType*)cp->ptr;
	}
	if (type && !soap_match_tag(soap, type, "wsnt:ResumeFailedFaultType"))
	{	cp->type = SOAP_TYPE_wsnt__ResumeFailedFaultType;
		if (n < 0)
		{	cp->ptr = SOAP_NEW(wsnt__ResumeFailedFaultType);
			if (size)
				*size = sizeof(wsnt__ResumeFailedFaultType);
			((wsnt__ResumeFailedFaultType*)cp->ptr)->soap = soap;
		}
		else
		{	cp->ptr = SOAP_NEW_ARRAY(wsnt__ResumeFailedFaultType, n);
			if (size)
				*size = n * sizeof(wsnt__ResumeFailedFaultType);
			if (cp->ptr)
				for (int i = 0; i < n; i++)
					((wsnt__ResumeFailedFaultType*)cp->ptr)[i].soap = soap;
		}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
		if (!cp->ptr)
			soap->error = SOAP_EOM;
		return (wsnt__ResumeFailedFaultType*)cp->ptr;
	}
	if (n < 0)
	{	cp->ptr = SOAP_NEW(wsrfbf__BaseFaultType);
		if (size)
			*size = sizeof(wsrfbf__BaseFaultType);
		((wsrfbf__BaseFaultType*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = SOAP_NEW_ARRAY(wsrfbf__BaseFaultType, n);
		if (size)
			*size = n * sizeof(wsrfbf__BaseFaultType);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((wsrfbf__BaseFaultType*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (wsrfbf__BaseFaultType*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_wsrfbf__BaseFaultType(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying wsrfbf__BaseFaultType %p -> %p\n", q, p));
	*(wsrfbf__BaseFaultType*)p = *(wsrfbf__BaseFaultType*)q;
}

void wsrfr__ResourceUnavailableFaultType::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->wsrfbf__BaseFaultType::soap_default(soap);
}

void wsrfr__ResourceUnavailableFaultType::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	this->wsrfbf__BaseFaultType::soap_serialize(soap);
#endif
}

int wsrfr__ResourceUnavailableFaultType::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_wsrfr__ResourceUnavailableFaultType(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_wsrfr__ResourceUnavailableFaultType(struct soap *soap, const char *tag, int id, const wsrfr__ResourceUnavailableFaultType *a, const char *type)
{
	if (((wsrfbf__BaseFaultType*)a)->__anyAttribute)
		soap_set_attr(soap, "-anyAttribute", ((wsrfbf__BaseFaultType*)a)->__anyAttribute, 1);
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_wsrfr__ResourceUnavailableFaultType), "wsrfr:ResourceUnavailableFaultType"))
		return soap->error;
	/* transient soap skipped */
	if (soap_out_std__vectorTemplateOf_XML(soap, "-any", -1, &(a->wsrfbf__BaseFaultType::__any), ""))
		return soap->error;
	if (soap_out_time(soap, "wsrfbf:Timestamp", -1, &(a->wsrfbf__BaseFaultType::Timestamp), ""))
		return soap->error;
	if (soap_out_PointerTowsa5__EndpointReferenceType(soap, "wsrfbf:Originator", -1, &(a->wsrfbf__BaseFaultType::Originator), ""))
		return soap->error;
	if (soap_out_PointerTo_wsrfbf__BaseFaultType_ErrorCode(soap, "wsrfbf:ErrorCode", -1, &(a->wsrfbf__BaseFaultType::ErrorCode), ""))
		return soap->error;
	if (soap_out_PointerTostd__vectorTemplateOf_wsrfbf__BaseFaultType_Description(soap, "wsrfbf:Description", -1, &(a->wsrfbf__BaseFaultType::Description), ""))
		return soap->error;
	if (soap_out_PointerTo_wsrfbf__BaseFaultType_FaultCause(soap, "wsrfbf:FaultCause", -1, &(a->wsrfbf__BaseFaultType::FaultCause), ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *wsrfr__ResourceUnavailableFaultType::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_wsrfr__ResourceUnavailableFaultType(soap, tag, this, type);
}

SOAP_FMAC3 wsrfr__ResourceUnavailableFaultType * SOAP_FMAC4 soap_in_wsrfr__ResourceUnavailableFaultType(struct soap *soap, const char *tag, wsrfr__ResourceUnavailableFaultType *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (wsrfr__ResourceUnavailableFaultType *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_wsrfr__ResourceUnavailableFaultType, sizeof(wsrfr__ResourceUnavailableFaultType), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_wsrfr__ResourceUnavailableFaultType)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (wsrfr__ResourceUnavailableFaultType *)a->soap_in(soap, tag, type);
		}
	}
	if (soap_s2string(soap, soap_attr_value(soap, "-anyAttribute", 0), &((wsrfbf__BaseFaultType*)a)->__anyAttribute, 0, -1))
		return NULL;
	size_t soap_flag___item3 = 1;
	size_t soap_flag_Timestamp2 = 1;
	size_t soap_flag_Originator2 = 1;
	size_t soap_flag_ErrorCode2 = 1;
	size_t soap_flag_FaultCause2 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			/* transient soap skipped */
			if (soap_flag_Timestamp2 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_time(soap, "wsrfbf:Timestamp", &(a->wsrfbf__BaseFaultType::Timestamp), "xsd:dateTime"))
				{	soap_flag_Timestamp2--;
					continue;
				}
			if (soap_flag_Originator2 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTowsa5__EndpointReferenceType(soap, "wsrfbf:Originator", &(a->wsrfbf__BaseFaultType::Originator), "wsa5:EndpointReferenceType"))
				{	soap_flag_Originator2--;
					continue;
				}
			if (soap_flag_ErrorCode2 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_wsrfbf__BaseFaultType_ErrorCode(soap, "wsrfbf:ErrorCode", &(a->wsrfbf__BaseFaultType::ErrorCode), ""))
				{	soap_flag_ErrorCode2--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTostd__vectorTemplateOf_wsrfbf__BaseFaultType_Description(soap, "wsrfbf:Description", &(a->wsrfbf__BaseFaultType::Description), ""))
					continue;
			if (soap_flag_FaultCause2 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_wsrfbf__BaseFaultType_FaultCause(soap, "wsrfbf:FaultCause", &(a->wsrfbf__BaseFaultType::FaultCause), ""))
				{	soap_flag_FaultCause2--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_std__vectorTemplateOf_XML(soap, "-any", &(a->wsrfbf__BaseFaultType::__any), ""))
					continue;
			if (soap_flag___item3 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_inliteral(soap, "-item", &(a->xsd__anyType::__item)))
				{	soap_flag___item3--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (wsrfr__ResourceUnavailableFaultType *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_wsrfr__ResourceUnavailableFaultType, 0, sizeof(wsrfr__ResourceUnavailableFaultType), 0, soap_copy_wsrfr__ResourceUnavailableFaultType);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_Timestamp2 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int wsrfr__ResourceUnavailableFaultType::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	int id = soap_embed(soap, (void*)this, NULL, 0, SOAP_TYPE_wsrfr__ResourceUnavailableFaultType);
	if (this->soap_out(soap, tag?tag:"wsrfr:ResourceUnavailableFaultType", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *wsrfr__ResourceUnavailableFaultType::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_wsrfr__ResourceUnavailableFaultType(soap, this, tag, type);
}

SOAP_FMAC3 wsrfr__ResourceUnavailableFaultType * SOAP_FMAC4 soap_get_wsrfr__ResourceUnavailableFaultType(struct soap *soap, wsrfr__ResourceUnavailableFaultType *p, const char *tag, const char *type)
{
	if ((p = soap_in_wsrfr__ResourceUnavailableFaultType(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 wsrfr__ResourceUnavailableFaultType * SOAP_FMAC2 soap_instantiate_wsrfr__ResourceUnavailableFaultType(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_wsrfr__ResourceUnavailableFaultType(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_wsrfr__ResourceUnavailableFaultType, n, onvifevent_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = SOAP_NEW(wsrfr__ResourceUnavailableFaultType);
		if (size)
			*size = sizeof(wsrfr__ResourceUnavailableFaultType);
		((wsrfr__ResourceUnavailableFaultType*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = SOAP_NEW_ARRAY(wsrfr__ResourceUnavailableFaultType, n);
		if (size)
			*size = n * sizeof(wsrfr__ResourceUnavailableFaultType);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((wsrfr__ResourceUnavailableFaultType*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (wsrfr__ResourceUnavailableFaultType*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_wsrfr__ResourceUnavailableFaultType(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying wsrfr__ResourceUnavailableFaultType %p -> %p\n", q, p));
	*(wsrfr__ResourceUnavailableFaultType*)p = *(wsrfr__ResourceUnavailableFaultType*)q;
}

void wsrfr__ResourceUnknownFaultType::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->wsrfbf__BaseFaultType::soap_default(soap);
}

void wsrfr__ResourceUnknownFaultType::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	this->wsrfbf__BaseFaultType::soap_serialize(soap);
#endif
}

int wsrfr__ResourceUnknownFaultType::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_wsrfr__ResourceUnknownFaultType(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_wsrfr__ResourceUnknownFaultType(struct soap *soap, const char *tag, int id, const wsrfr__ResourceUnknownFaultType *a, const char *type)
{
	if (((wsrfbf__BaseFaultType*)a)->__anyAttribute)
		soap_set_attr(soap, "-anyAttribute", ((wsrfbf__BaseFaultType*)a)->__anyAttribute, 1);
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_wsrfr__ResourceUnknownFaultType), "wsrfr:ResourceUnknownFaultType"))
		return soap->error;
	/* transient soap skipped */
	if (soap_out_std__vectorTemplateOf_XML(soap, "-any", -1, &(a->wsrfbf__BaseFaultType::__any), ""))
		return soap->error;
	if (soap_out_time(soap, "wsrfbf:Timestamp", -1, &(a->wsrfbf__BaseFaultType::Timestamp), ""))
		return soap->error;
	if (soap_out_PointerTowsa5__EndpointReferenceType(soap, "wsrfbf:Originator", -1, &(a->wsrfbf__BaseFaultType::Originator), ""))
		return soap->error;
	if (soap_out_PointerTo_wsrfbf__BaseFaultType_ErrorCode(soap, "wsrfbf:ErrorCode", -1, &(a->wsrfbf__BaseFaultType::ErrorCode), ""))
		return soap->error;
	if (soap_out_PointerTostd__vectorTemplateOf_wsrfbf__BaseFaultType_Description(soap, "wsrfbf:Description", -1, &(a->wsrfbf__BaseFaultType::Description), ""))
		return soap->error;
	if (soap_out_PointerTo_wsrfbf__BaseFaultType_FaultCause(soap, "wsrfbf:FaultCause", -1, &(a->wsrfbf__BaseFaultType::FaultCause), ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *wsrfr__ResourceUnknownFaultType::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_wsrfr__ResourceUnknownFaultType(soap, tag, this, type);
}

SOAP_FMAC3 wsrfr__ResourceUnknownFaultType * SOAP_FMAC4 soap_in_wsrfr__ResourceUnknownFaultType(struct soap *soap, const char *tag, wsrfr__ResourceUnknownFaultType *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (wsrfr__ResourceUnknownFaultType *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_wsrfr__ResourceUnknownFaultType, sizeof(wsrfr__ResourceUnknownFaultType), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_wsrfr__ResourceUnknownFaultType)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (wsrfr__ResourceUnknownFaultType *)a->soap_in(soap, tag, type);
		}
	}
	if (soap_s2string(soap, soap_attr_value(soap, "-anyAttribute", 0), &((wsrfbf__BaseFaultType*)a)->__anyAttribute, 0, -1))
		return NULL;
	size_t soap_flag___item3 = 1;
	size_t soap_flag_Timestamp2 = 1;
	size_t soap_flag_Originator2 = 1;
	size_t soap_flag_ErrorCode2 = 1;
	size_t soap_flag_FaultCause2 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			/* transient soap skipped */
			if (soap_flag_Timestamp2 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_time(soap, "wsrfbf:Timestamp", &(a->wsrfbf__BaseFaultType::Timestamp), "xsd:dateTime"))
				{	soap_flag_Timestamp2--;
					continue;
				}
			if (soap_flag_Originator2 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTowsa5__EndpointReferenceType(soap, "wsrfbf:Originator", &(a->wsrfbf__BaseFaultType::Originator), "wsa5:EndpointReferenceType"))
				{	soap_flag_Originator2--;
					continue;
				}
			if (soap_flag_ErrorCode2 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_wsrfbf__BaseFaultType_ErrorCode(soap, "wsrfbf:ErrorCode", &(a->wsrfbf__BaseFaultType::ErrorCode), ""))
				{	soap_flag_ErrorCode2--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTostd__vectorTemplateOf_wsrfbf__BaseFaultType_Description(soap, "wsrfbf:Description", &(a->wsrfbf__BaseFaultType::Description), ""))
					continue;
			if (soap_flag_FaultCause2 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_wsrfbf__BaseFaultType_FaultCause(soap, "wsrfbf:FaultCause", &(a->wsrfbf__BaseFaultType::FaultCause), ""))
				{	soap_flag_FaultCause2--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_std__vectorTemplateOf_XML(soap, "-any", &(a->wsrfbf__BaseFaultType::__any), ""))
					continue;
			if (soap_flag___item3 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_inliteral(soap, "-item", &(a->xsd__anyType::__item)))
				{	soap_flag___item3--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (wsrfr__ResourceUnknownFaultType *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_wsrfr__ResourceUnknownFaultType, 0, sizeof(wsrfr__ResourceUnknownFaultType), 0, soap_copy_wsrfr__ResourceUnknownFaultType);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_Timestamp2 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int wsrfr__ResourceUnknownFaultType::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	int id = soap_embed(soap, (void*)this, NULL, 0, SOAP_TYPE_wsrfr__ResourceUnknownFaultType);
	if (this->soap_out(soap, tag?tag:"wsrfr:ResourceUnknownFaultType", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *wsrfr__ResourceUnknownFaultType::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_wsrfr__ResourceUnknownFaultType(soap, this, tag, type);
}

SOAP_FMAC3 wsrfr__ResourceUnknownFaultType * SOAP_FMAC4 soap_get_wsrfr__ResourceUnknownFaultType(struct soap *soap, wsrfr__ResourceUnknownFaultType *p, const char *tag, const char *type)
{
	if ((p = soap_in_wsrfr__ResourceUnknownFaultType(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 wsrfr__ResourceUnknownFaultType * SOAP_FMAC2 soap_instantiate_wsrfr__ResourceUnknownFaultType(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_wsrfr__ResourceUnknownFaultType(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_wsrfr__ResourceUnknownFaultType, n, onvifevent_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = SOAP_NEW(wsrfr__ResourceUnknownFaultType);
		if (size)
			*size = sizeof(wsrfr__ResourceUnknownFaultType);
		((wsrfr__ResourceUnknownFaultType*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = SOAP_NEW_ARRAY(wsrfr__ResourceUnknownFaultType, n);
		if (size)
			*size = n * sizeof(wsrfr__ResourceUnknownFaultType);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((wsrfr__ResourceUnknownFaultType*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (wsrfr__ResourceUnknownFaultType*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_wsrfr__ResourceUnknownFaultType(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying wsrfr__ResourceUnknownFaultType %p -> %p\n", q, p));
	*(wsrfr__ResourceUnknownFaultType*)p = *(wsrfr__ResourceUnknownFaultType*)q;
}

void _eventws__GetEventPropertiesResponse::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_std__vectorTemplateOfxsd__anyURI(soap, &this->_eventws__GetEventPropertiesResponse::TopicNamespaceLocation);
	soap_default_bool(soap, &this->_eventws__GetEventPropertiesResponse::wsnt__FixedTopicSet);
	this->_eventws__GetEventPropertiesResponse::wstop__TopicSet = NULL;
	soap_default_std__vectorTemplateOfxsd__anyURI(soap, &this->_eventws__GetEventPropertiesResponse::wsnt__TopicExpressionDialect);
	soap_default_std__vectorTemplateOfxsd__anyURI(soap, &this->_eventws__GetEventPropertiesResponse::MessageContentFilterDialect);
	soap_default_std__vectorTemplateOfxsd__anyURI(soap, &this->_eventws__GetEventPropertiesResponse::ProducerPropertiesFilterDialect);
	soap_default_std__vectorTemplateOfxsd__anyURI(soap, &this->_eventws__GetEventPropertiesResponse::MessageContentSchemaLocation);
	soap_default_std__vectorTemplateOf_XML(soap, &this->_eventws__GetEventPropertiesResponse::__any);
	/* transient soap skipped */
}

void _eventws__GetEventPropertiesResponse::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_std__vectorTemplateOfxsd__anyURI(soap, &this->_eventws__GetEventPropertiesResponse::TopicNamespaceLocation);
	soap_embedded(soap, &this->_eventws__GetEventPropertiesResponse::wsnt__FixedTopicSet, SOAP_TYPE_bool);
	soap_serialize_PointerTowstop__TopicSetType(soap, &this->_eventws__GetEventPropertiesResponse::wstop__TopicSet);
	soap_serialize_std__vectorTemplateOfxsd__anyURI(soap, &this->_eventws__GetEventPropertiesResponse::wsnt__TopicExpressionDialect);
	soap_serialize_std__vectorTemplateOfxsd__anyURI(soap, &this->_eventws__GetEventPropertiesResponse::MessageContentFilterDialect);
	soap_serialize_std__vectorTemplateOfxsd__anyURI(soap, &this->_eventws__GetEventPropertiesResponse::ProducerPropertiesFilterDialect);
	soap_serialize_std__vectorTemplateOfxsd__anyURI(soap, &this->_eventws__GetEventPropertiesResponse::MessageContentSchemaLocation);
	soap_serialize_std__vectorTemplateOf_XML(soap, &this->_eventws__GetEventPropertiesResponse::__any);
	/* transient soap skipped */
#endif
}

int _eventws__GetEventPropertiesResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__eventws__GetEventPropertiesResponse(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__eventws__GetEventPropertiesResponse(struct soap *soap, const char *tag, int id, const _eventws__GetEventPropertiesResponse *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__eventws__GetEventPropertiesResponse), type))
		return soap->error;
	soap_element_result(soap, "eventws:TopicNamespaceLocation");
	if (soap_out_std__vectorTemplateOfxsd__anyURI(soap, "eventws:TopicNamespaceLocation", -1, &(a->_eventws__GetEventPropertiesResponse::TopicNamespaceLocation), ""))
		return soap->error;
	if (soap_out_bool(soap, "wsnt:FixedTopicSet", -1, &(a->_eventws__GetEventPropertiesResponse::wsnt__FixedTopicSet), ""))
		return soap->error;
	if (a->_eventws__GetEventPropertiesResponse::wstop__TopicSet)
	{	if (soap_out_PointerTowstop__TopicSetType(soap, "wstop:TopicSet", -1, &a->_eventws__GetEventPropertiesResponse::wstop__TopicSet, ""))
			return soap->error;
	}
	else if (soap_element_nil(soap, "wstop:TopicSet"))
		return soap->error;
	if (soap_out_std__vectorTemplateOfxsd__anyURI(soap, "wsnt:TopicExpressionDialect", -1, &(a->_eventws__GetEventPropertiesResponse::wsnt__TopicExpressionDialect), ""))
		return soap->error;
	if (soap_out_std__vectorTemplateOfxsd__anyURI(soap, "eventws:MessageContentFilterDialect", -1, &(a->_eventws__GetEventPropertiesResponse::MessageContentFilterDialect), ""))
		return soap->error;
	if (soap_out_std__vectorTemplateOfxsd__anyURI(soap, "eventws:ProducerPropertiesFilterDialect", -1, &(a->_eventws__GetEventPropertiesResponse::ProducerPropertiesFilterDialect), ""))
		return soap->error;
	if (soap_out_std__vectorTemplateOfxsd__anyURI(soap, "eventws:MessageContentSchemaLocation", -1, &(a->_eventws__GetEventPropertiesResponse::MessageContentSchemaLocation), ""))
		return soap->error;
	if (soap_out_std__vectorTemplateOf_XML(soap, "-any", -1, &(a->_eventws__GetEventPropertiesResponse::__any), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_eventws__GetEventPropertiesResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__eventws__GetEventPropertiesResponse(soap, tag, this, type);
}

SOAP_FMAC3 _eventws__GetEventPropertiesResponse * SOAP_FMAC4 soap_in__eventws__GetEventPropertiesResponse(struct soap *soap, const char *tag, _eventws__GetEventPropertiesResponse *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_eventws__GetEventPropertiesResponse *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__eventws__GetEventPropertiesResponse, sizeof(_eventws__GetEventPropertiesResponse), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__eventws__GetEventPropertiesResponse)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_eventws__GetEventPropertiesResponse *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_wsnt__FixedTopicSet1 = 1;
	size_t soap_flag_wstop__TopicSet1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_std__vectorTemplateOfxsd__anyURI(soap, "eventws:TopicNamespaceLocation", &(a->_eventws__GetEventPropertiesResponse::TopicNamespaceLocation), "xsd:anyURI"))
					continue;
			if (soap_flag_wsnt__FixedTopicSet1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_bool(soap, "wsnt:FixedTopicSet", &(a->_eventws__GetEventPropertiesResponse::wsnt__FixedTopicSet), "xsd:boolean"))
				{	soap_flag_wsnt__FixedTopicSet1--;
					continue;
				}
			if (soap_flag_wstop__TopicSet1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTowstop__TopicSetType(soap, "wstop:TopicSet", &(a->_eventws__GetEventPropertiesResponse::wstop__TopicSet), "wstop:TopicSetType"))
				{	soap_flag_wstop__TopicSet1--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_std__vectorTemplateOfxsd__anyURI(soap, "wsnt:TopicExpressionDialect", &(a->_eventws__GetEventPropertiesResponse::wsnt__TopicExpressionDialect), "xsd:anyURI"))
					continue;
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_std__vectorTemplateOfxsd__anyURI(soap, "eventws:MessageContentFilterDialect", &(a->_eventws__GetEventPropertiesResponse::MessageContentFilterDialect), "xsd:anyURI"))
					continue;
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_std__vectorTemplateOfxsd__anyURI(soap, "eventws:ProducerPropertiesFilterDialect", &(a->_eventws__GetEventPropertiesResponse::ProducerPropertiesFilterDialect), "xsd:anyURI"))
					continue;
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_std__vectorTemplateOfxsd__anyURI(soap, "eventws:MessageContentSchemaLocation", &(a->_eventws__GetEventPropertiesResponse::MessageContentSchemaLocation), "xsd:anyURI"))
					continue;
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_std__vectorTemplateOf_XML(soap, "-any", &(a->_eventws__GetEventPropertiesResponse::__any), ""))
					continue;
			soap_check_result(soap, "eventws:TopicNamespaceLocation");
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_eventws__GetEventPropertiesResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__eventws__GetEventPropertiesResponse, 0, sizeof(_eventws__GetEventPropertiesResponse), 0, soap_copy__eventws__GetEventPropertiesResponse);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (a->_eventws__GetEventPropertiesResponse::TopicNamespaceLocation.size() < 1 || soap_flag_wsnt__FixedTopicSet1 > 0 || soap_flag_wstop__TopicSet1 > 0 || a->_eventws__GetEventPropertiesResponse::wsnt__TopicExpressionDialect.size() < 1 || a->_eventws__GetEventPropertiesResponse::MessageContentFilterDialect.size() < 1 || a->_eventws__GetEventPropertiesResponse::MessageContentSchemaLocation.size() < 1))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int _eventws__GetEventPropertiesResponse::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	int id = soap_embed(soap, (void*)this, NULL, 0, SOAP_TYPE__eventws__GetEventPropertiesResponse);
	if (this->soap_out(soap, tag?tag:"eventws:GetEventPropertiesResponse", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_eventws__GetEventPropertiesResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__eventws__GetEventPropertiesResponse(soap, this, tag, type);
}

SOAP_FMAC3 _eventws__GetEventPropertiesResponse * SOAP_FMAC4 soap_get__eventws__GetEventPropertiesResponse(struct soap *soap, _eventws__GetEventPropertiesResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in__eventws__GetEventPropertiesResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _eventws__GetEventPropertiesResponse * SOAP_FMAC2 soap_instantiate__eventws__GetEventPropertiesResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__eventws__GetEventPropertiesResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__eventws__GetEventPropertiesResponse, n, onvifevent_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = SOAP_NEW(_eventws__GetEventPropertiesResponse);
		if (size)
			*size = sizeof(_eventws__GetEventPropertiesResponse);
		((_eventws__GetEventPropertiesResponse*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = SOAP_NEW_ARRAY(_eventws__GetEventPropertiesResponse, n);
		if (size)
			*size = n * sizeof(_eventws__GetEventPropertiesResponse);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((_eventws__GetEventPropertiesResponse*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (_eventws__GetEventPropertiesResponse*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__eventws__GetEventPropertiesResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _eventws__GetEventPropertiesResponse %p -> %p\n", q, p));
	*(_eventws__GetEventPropertiesResponse*)p = *(_eventws__GetEventPropertiesResponse*)q;
}

void _eventws__GetEventProperties::soap_default(struct soap *soap)
{
	this->soap = soap;
	/* transient soap skipped */
}

void _eventws__GetEventProperties::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	/* transient soap skipped */
#endif
}

int _eventws__GetEventProperties::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__eventws__GetEventProperties(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__eventws__GetEventProperties(struct soap *soap, const char *tag, int id, const _eventws__GetEventProperties *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__eventws__GetEventProperties), type))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_eventws__GetEventProperties::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__eventws__GetEventProperties(soap, tag, this, type);
}

SOAP_FMAC3 _eventws__GetEventProperties * SOAP_FMAC4 soap_in__eventws__GetEventProperties(struct soap *soap, const char *tag, _eventws__GetEventProperties *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_eventws__GetEventProperties *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__eventws__GetEventProperties, sizeof(_eventws__GetEventProperties), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__eventws__GetEventProperties)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_eventws__GetEventProperties *)a->soap_in(soap, tag, type);
		}
	}
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_eventws__GetEventProperties *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__eventws__GetEventProperties, 0, sizeof(_eventws__GetEventProperties), 0, soap_copy__eventws__GetEventProperties);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int _eventws__GetEventProperties::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	int id = soap_embed(soap, (void*)this, NULL, 0, SOAP_TYPE__eventws__GetEventProperties);
	if (this->soap_out(soap, tag?tag:"eventws:GetEventProperties", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_eventws__GetEventProperties::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__eventws__GetEventProperties(soap, this, tag, type);
}

SOAP_FMAC3 _eventws__GetEventProperties * SOAP_FMAC4 soap_get__eventws__GetEventProperties(struct soap *soap, _eventws__GetEventProperties *p, const char *tag, const char *type)
{
	if ((p = soap_in__eventws__GetEventProperties(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _eventws__GetEventProperties * SOAP_FMAC2 soap_instantiate__eventws__GetEventProperties(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__eventws__GetEventProperties(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__eventws__GetEventProperties, n, onvifevent_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = SOAP_NEW(_eventws__GetEventProperties);
		if (size)
			*size = sizeof(_eventws__GetEventProperties);
		((_eventws__GetEventProperties*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = SOAP_NEW_ARRAY(_eventws__GetEventProperties, n);
		if (size)
			*size = n * sizeof(_eventws__GetEventProperties);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((_eventws__GetEventProperties*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (_eventws__GetEventProperties*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__eventws__GetEventProperties(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _eventws__GetEventProperties %p -> %p\n", q, p));
	*(_eventws__GetEventProperties*)p = *(_eventws__GetEventProperties*)q;
}

void _eventws__SetSynchronizationPointResponse::soap_default(struct soap *soap)
{
	this->soap = soap;
	/* transient soap skipped */
}

void _eventws__SetSynchronizationPointResponse::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	/* transient soap skipped */
#endif
}

int _eventws__SetSynchronizationPointResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__eventws__SetSynchronizationPointResponse(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__eventws__SetSynchronizationPointResponse(struct soap *soap, const char *tag, int id, const _eventws__SetSynchronizationPointResponse *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__eventws__SetSynchronizationPointResponse), type))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_eventws__SetSynchronizationPointResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__eventws__SetSynchronizationPointResponse(soap, tag, this, type);
}

SOAP_FMAC3 _eventws__SetSynchronizationPointResponse * SOAP_FMAC4 soap_in__eventws__SetSynchronizationPointResponse(struct soap *soap, const char *tag, _eventws__SetSynchronizationPointResponse *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_eventws__SetSynchronizationPointResponse *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__eventws__SetSynchronizationPointResponse, sizeof(_eventws__SetSynchronizationPointResponse), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__eventws__SetSynchronizationPointResponse)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_eventws__SetSynchronizationPointResponse *)a->soap_in(soap, tag, type);
		}
	}
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_eventws__SetSynchronizationPointResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__eventws__SetSynchronizationPointResponse, 0, sizeof(_eventws__SetSynchronizationPointResponse), 0, soap_copy__eventws__SetSynchronizationPointResponse);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int _eventws__SetSynchronizationPointResponse::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	int id = soap_embed(soap, (void*)this, NULL, 0, SOAP_TYPE__eventws__SetSynchronizationPointResponse);
	if (this->soap_out(soap, tag?tag:"eventws:SetSynchronizationPointResponse", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_eventws__SetSynchronizationPointResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__eventws__SetSynchronizationPointResponse(soap, this, tag, type);
}

SOAP_FMAC3 _eventws__SetSynchronizationPointResponse * SOAP_FMAC4 soap_get__eventws__SetSynchronizationPointResponse(struct soap *soap, _eventws__SetSynchronizationPointResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in__eventws__SetSynchronizationPointResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _eventws__SetSynchronizationPointResponse * SOAP_FMAC2 soap_instantiate__eventws__SetSynchronizationPointResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__eventws__SetSynchronizationPointResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__eventws__SetSynchronizationPointResponse, n, onvifevent_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = SOAP_NEW(_eventws__SetSynchronizationPointResponse);
		if (size)
			*size = sizeof(_eventws__SetSynchronizationPointResponse);
		((_eventws__SetSynchronizationPointResponse*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = SOAP_NEW_ARRAY(_eventws__SetSynchronizationPointResponse, n);
		if (size)
			*size = n * sizeof(_eventws__SetSynchronizationPointResponse);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((_eventws__SetSynchronizationPointResponse*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (_eventws__SetSynchronizationPointResponse*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__eventws__SetSynchronizationPointResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _eventws__SetSynchronizationPointResponse %p -> %p\n", q, p));
	*(_eventws__SetSynchronizationPointResponse*)p = *(_eventws__SetSynchronizationPointResponse*)q;
}

void _eventws__SetSynchronizationPoint::soap_default(struct soap *soap)
{
	this->soap = soap;
	/* transient soap skipped */
}

void _eventws__SetSynchronizationPoint::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	/* transient soap skipped */
#endif
}

int _eventws__SetSynchronizationPoint::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__eventws__SetSynchronizationPoint(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__eventws__SetSynchronizationPoint(struct soap *soap, const char *tag, int id, const _eventws__SetSynchronizationPoint *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__eventws__SetSynchronizationPoint), type))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_eventws__SetSynchronizationPoint::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__eventws__SetSynchronizationPoint(soap, tag, this, type);
}

SOAP_FMAC3 _eventws__SetSynchronizationPoint * SOAP_FMAC4 soap_in__eventws__SetSynchronizationPoint(struct soap *soap, const char *tag, _eventws__SetSynchronizationPoint *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_eventws__SetSynchronizationPoint *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__eventws__SetSynchronizationPoint, sizeof(_eventws__SetSynchronizationPoint), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__eventws__SetSynchronizationPoint)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_eventws__SetSynchronizationPoint *)a->soap_in(soap, tag, type);
		}
	}
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_eventws__SetSynchronizationPoint *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__eventws__SetSynchronizationPoint, 0, sizeof(_eventws__SetSynchronizationPoint), 0, soap_copy__eventws__SetSynchronizationPoint);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int _eventws__SetSynchronizationPoint::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	int id = soap_embed(soap, (void*)this, NULL, 0, SOAP_TYPE__eventws__SetSynchronizationPoint);
	if (this->soap_out(soap, tag?tag:"eventws:SetSynchronizationPoint", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_eventws__SetSynchronizationPoint::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__eventws__SetSynchronizationPoint(soap, this, tag, type);
}

SOAP_FMAC3 _eventws__SetSynchronizationPoint * SOAP_FMAC4 soap_get__eventws__SetSynchronizationPoint(struct soap *soap, _eventws__SetSynchronizationPoint *p, const char *tag, const char *type)
{
	if ((p = soap_in__eventws__SetSynchronizationPoint(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _eventws__SetSynchronizationPoint * SOAP_FMAC2 soap_instantiate__eventws__SetSynchronizationPoint(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__eventws__SetSynchronizationPoint(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__eventws__SetSynchronizationPoint, n, onvifevent_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = SOAP_NEW(_eventws__SetSynchronizationPoint);
		if (size)
			*size = sizeof(_eventws__SetSynchronizationPoint);
		((_eventws__SetSynchronizationPoint*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = SOAP_NEW_ARRAY(_eventws__SetSynchronizationPoint, n);
		if (size)
			*size = n * sizeof(_eventws__SetSynchronizationPoint);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((_eventws__SetSynchronizationPoint*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (_eventws__SetSynchronizationPoint*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__eventws__SetSynchronizationPoint(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _eventws__SetSynchronizationPoint %p -> %p\n", q, p));
	*(_eventws__SetSynchronizationPoint*)p = *(_eventws__SetSynchronizationPoint*)q;
}

void _eventws__SeekResponse::soap_default(struct soap *soap)
{
	this->soap = soap;
	/* transient soap skipped */
}

void _eventws__SeekResponse::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	/* transient soap skipped */
#endif
}

int _eventws__SeekResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__eventws__SeekResponse(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__eventws__SeekResponse(struct soap *soap, const char *tag, int id, const _eventws__SeekResponse *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__eventws__SeekResponse), type))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_eventws__SeekResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__eventws__SeekResponse(soap, tag, this, type);
}

SOAP_FMAC3 _eventws__SeekResponse * SOAP_FMAC4 soap_in__eventws__SeekResponse(struct soap *soap, const char *tag, _eventws__SeekResponse *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_eventws__SeekResponse *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__eventws__SeekResponse, sizeof(_eventws__SeekResponse), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__eventws__SeekResponse)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_eventws__SeekResponse *)a->soap_in(soap, tag, type);
		}
	}
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_eventws__SeekResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__eventws__SeekResponse, 0, sizeof(_eventws__SeekResponse), 0, soap_copy__eventws__SeekResponse);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int _eventws__SeekResponse::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	int id = soap_embed(soap, (void*)this, NULL, 0, SOAP_TYPE__eventws__SeekResponse);
	if (this->soap_out(soap, tag?tag:"eventws:SeekResponse", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_eventws__SeekResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__eventws__SeekResponse(soap, this, tag, type);
}

SOAP_FMAC3 _eventws__SeekResponse * SOAP_FMAC4 soap_get__eventws__SeekResponse(struct soap *soap, _eventws__SeekResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in__eventws__SeekResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _eventws__SeekResponse * SOAP_FMAC2 soap_instantiate__eventws__SeekResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__eventws__SeekResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__eventws__SeekResponse, n, onvifevent_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = SOAP_NEW(_eventws__SeekResponse);
		if (size)
			*size = sizeof(_eventws__SeekResponse);
		((_eventws__SeekResponse*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = SOAP_NEW_ARRAY(_eventws__SeekResponse, n);
		if (size)
			*size = n * sizeof(_eventws__SeekResponse);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((_eventws__SeekResponse*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (_eventws__SeekResponse*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__eventws__SeekResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _eventws__SeekResponse %p -> %p\n", q, p));
	*(_eventws__SeekResponse*)p = *(_eventws__SeekResponse*)q;
}

void _eventws__Seek::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_time(soap, &this->_eventws__Seek::UtcTime);
	this->_eventws__Seek::Reverse = NULL;
	soap_default_std__vectorTemplateOf_XML(soap, &this->_eventws__Seek::__any);
	/* transient soap skipped */
}

void _eventws__Seek::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_embedded(soap, &this->_eventws__Seek::UtcTime, SOAP_TYPE_time);
	soap_serialize_PointerTobool(soap, &this->_eventws__Seek::Reverse);
	soap_serialize_std__vectorTemplateOf_XML(soap, &this->_eventws__Seek::__any);
	/* transient soap skipped */
#endif
}

int _eventws__Seek::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__eventws__Seek(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__eventws__Seek(struct soap *soap, const char *tag, int id, const _eventws__Seek *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__eventws__Seek), type))
		return soap->error;
	if (soap_out_time(soap, "eventws:UtcTime", -1, &(a->_eventws__Seek::UtcTime), ""))
		return soap->error;
	if (soap_out_PointerTobool(soap, "eventws:Reverse", -1, &(a->_eventws__Seek::Reverse), ""))
		return soap->error;
	if (soap_out_std__vectorTemplateOf_XML(soap, "-any", -1, &(a->_eventws__Seek::__any), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_eventws__Seek::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__eventws__Seek(soap, tag, this, type);
}

SOAP_FMAC3 _eventws__Seek * SOAP_FMAC4 soap_in__eventws__Seek(struct soap *soap, const char *tag, _eventws__Seek *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_eventws__Seek *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__eventws__Seek, sizeof(_eventws__Seek), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__eventws__Seek)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_eventws__Seek *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_UtcTime1 = 1;
	size_t soap_flag_Reverse1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_UtcTime1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_time(soap, "eventws:UtcTime", &(a->_eventws__Seek::UtcTime), "xsd:dateTime"))
				{	soap_flag_UtcTime1--;
					continue;
				}
			if (soap_flag_Reverse1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTobool(soap, "eventws:Reverse", &(a->_eventws__Seek::Reverse), "xsd:boolean"))
				{	soap_flag_Reverse1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_std__vectorTemplateOf_XML(soap, "-any", &(a->_eventws__Seek::__any), ""))
					continue;
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_eventws__Seek *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__eventws__Seek, 0, sizeof(_eventws__Seek), 0, soap_copy__eventws__Seek);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_UtcTime1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int _eventws__Seek::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	int id = soap_embed(soap, (void*)this, NULL, 0, SOAP_TYPE__eventws__Seek);
	if (this->soap_out(soap, tag?tag:"eventws:Seek", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_eventws__Seek::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__eventws__Seek(soap, this, tag, type);
}

SOAP_FMAC3 _eventws__Seek * SOAP_FMAC4 soap_get__eventws__Seek(struct soap *soap, _eventws__Seek *p, const char *tag, const char *type)
{
	if ((p = soap_in__eventws__Seek(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _eventws__Seek * SOAP_FMAC2 soap_instantiate__eventws__Seek(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__eventws__Seek(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__eventws__Seek, n, onvifevent_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = SOAP_NEW(_eventws__Seek);
		if (size)
			*size = sizeof(_eventws__Seek);
		((_eventws__Seek*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = SOAP_NEW_ARRAY(_eventws__Seek, n);
		if (size)
			*size = n * sizeof(_eventws__Seek);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((_eventws__Seek*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (_eventws__Seek*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__eventws__Seek(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _eventws__Seek %p -> %p\n", q, p));
	*(_eventws__Seek*)p = *(_eventws__Seek*)q;
}

void _eventws__PullMessagesFaultResponse::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_xsd__duration(soap, &this->_eventws__PullMessagesFaultResponse::MaxTimeout);
	soap_default_int(soap, &this->_eventws__PullMessagesFaultResponse::MaxMessageLimit);
	soap_default_std__vectorTemplateOf_XML(soap, &this->_eventws__PullMessagesFaultResponse::__any);
	/* transient soap skipped */
}

void _eventws__PullMessagesFaultResponse::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_embedded(soap, &this->_eventws__PullMessagesFaultResponse::MaxMessageLimit, SOAP_TYPE_int);
	soap_serialize_std__vectorTemplateOf_XML(soap, &this->_eventws__PullMessagesFaultResponse::__any);
	/* transient soap skipped */
#endif
}

int _eventws__PullMessagesFaultResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__eventws__PullMessagesFaultResponse(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__eventws__PullMessagesFaultResponse(struct soap *soap, const char *tag, int id, const _eventws__PullMessagesFaultResponse *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__eventws__PullMessagesFaultResponse), type))
		return soap->error;
	if (soap_out_xsd__duration(soap, "eventws:MaxTimeout", -1, &(a->_eventws__PullMessagesFaultResponse::MaxTimeout), ""))
		return soap->error;
	if (soap_out_int(soap, "eventws:MaxMessageLimit", -1, &(a->_eventws__PullMessagesFaultResponse::MaxMessageLimit), ""))
		return soap->error;
	if (soap_out_std__vectorTemplateOf_XML(soap, "-any", -1, &(a->_eventws__PullMessagesFaultResponse::__any), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_eventws__PullMessagesFaultResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__eventws__PullMessagesFaultResponse(soap, tag, this, type);
}

SOAP_FMAC3 _eventws__PullMessagesFaultResponse * SOAP_FMAC4 soap_in__eventws__PullMessagesFaultResponse(struct soap *soap, const char *tag, _eventws__PullMessagesFaultResponse *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_eventws__PullMessagesFaultResponse *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__eventws__PullMessagesFaultResponse, sizeof(_eventws__PullMessagesFaultResponse), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__eventws__PullMessagesFaultResponse)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_eventws__PullMessagesFaultResponse *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_MaxTimeout1 = 1;
	size_t soap_flag_MaxMessageLimit1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_MaxTimeout1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_xsd__duration(soap, "eventws:MaxTimeout", &(a->_eventws__PullMessagesFaultResponse::MaxTimeout), "xsd:duration"))
				{	soap_flag_MaxTimeout1--;
					continue;
				}
			if (soap_flag_MaxMessageLimit1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "eventws:MaxMessageLimit", &(a->_eventws__PullMessagesFaultResponse::MaxMessageLimit), "xsd:int"))
				{	soap_flag_MaxMessageLimit1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_std__vectorTemplateOf_XML(soap, "-any", &(a->_eventws__PullMessagesFaultResponse::__any), ""))
					continue;
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_eventws__PullMessagesFaultResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__eventws__PullMessagesFaultResponse, 0, sizeof(_eventws__PullMessagesFaultResponse), 0, soap_copy__eventws__PullMessagesFaultResponse);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_MaxTimeout1 > 0 || soap_flag_MaxMessageLimit1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int _eventws__PullMessagesFaultResponse::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	int id = soap_embed(soap, (void*)this, NULL, 0, SOAP_TYPE__eventws__PullMessagesFaultResponse);
	if (this->soap_out(soap, tag?tag:"eventws:PullMessagesFaultResponse", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_eventws__PullMessagesFaultResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__eventws__PullMessagesFaultResponse(soap, this, tag, type);
}

SOAP_FMAC3 _eventws__PullMessagesFaultResponse * SOAP_FMAC4 soap_get__eventws__PullMessagesFaultResponse(struct soap *soap, _eventws__PullMessagesFaultResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in__eventws__PullMessagesFaultResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _eventws__PullMessagesFaultResponse * SOAP_FMAC2 soap_instantiate__eventws__PullMessagesFaultResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__eventws__PullMessagesFaultResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__eventws__PullMessagesFaultResponse, n, onvifevent_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = SOAP_NEW(_eventws__PullMessagesFaultResponse);
		if (size)
			*size = sizeof(_eventws__PullMessagesFaultResponse);
		((_eventws__PullMessagesFaultResponse*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = SOAP_NEW_ARRAY(_eventws__PullMessagesFaultResponse, n);
		if (size)
			*size = n * sizeof(_eventws__PullMessagesFaultResponse);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((_eventws__PullMessagesFaultResponse*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (_eventws__PullMessagesFaultResponse*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__eventws__PullMessagesFaultResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _eventws__PullMessagesFaultResponse %p -> %p\n", q, p));
	*(_eventws__PullMessagesFaultResponse*)p = *(_eventws__PullMessagesFaultResponse*)q;
}

void _eventws__PullMessagesResponse::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_time(soap, &this->_eventws__PullMessagesResponse::CurrentTime);
	soap_default_time(soap, &this->_eventws__PullMessagesResponse::TerminationTime);
	soap_default_std__vectorTemplateOfPointerTowsnt__NotificationMessageHolderType(soap, &this->_eventws__PullMessagesResponse::wsnt__NotificationMessage);
	/* transient soap skipped */
}

void _eventws__PullMessagesResponse::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_embedded(soap, &this->_eventws__PullMessagesResponse::CurrentTime, SOAP_TYPE_time);
	soap_embedded(soap, &this->_eventws__PullMessagesResponse::TerminationTime, SOAP_TYPE_time);
	soap_serialize_std__vectorTemplateOfPointerTowsnt__NotificationMessageHolderType(soap, &this->_eventws__PullMessagesResponse::wsnt__NotificationMessage);
	/* transient soap skipped */
#endif
}

int _eventws__PullMessagesResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__eventws__PullMessagesResponse(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__eventws__PullMessagesResponse(struct soap *soap, const char *tag, int id, const _eventws__PullMessagesResponse *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__eventws__PullMessagesResponse), type))
		return soap->error;
	soap_element_result(soap, "eventws:CurrentTime");
	if (soap_out_time(soap, "eventws:CurrentTime", -1, &(a->_eventws__PullMessagesResponse::CurrentTime), ""))
		return soap->error;
	if (soap_out_time(soap, "eventws:TerminationTime", -1, &(a->_eventws__PullMessagesResponse::TerminationTime), ""))
		return soap->error;
	if (soap_out_std__vectorTemplateOfPointerTowsnt__NotificationMessageHolderType(soap, "wsnt:NotificationMessage", -1, &(a->_eventws__PullMessagesResponse::wsnt__NotificationMessage), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_eventws__PullMessagesResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__eventws__PullMessagesResponse(soap, tag, this, type);
}

SOAP_FMAC3 _eventws__PullMessagesResponse * SOAP_FMAC4 soap_in__eventws__PullMessagesResponse(struct soap *soap, const char *tag, _eventws__PullMessagesResponse *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_eventws__PullMessagesResponse *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__eventws__PullMessagesResponse, sizeof(_eventws__PullMessagesResponse), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__eventws__PullMessagesResponse)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_eventws__PullMessagesResponse *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_CurrentTime1 = 1;
	size_t soap_flag_TerminationTime1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_CurrentTime1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_time(soap, "eventws:CurrentTime", &(a->_eventws__PullMessagesResponse::CurrentTime), "xsd:dateTime"))
				{	soap_flag_CurrentTime1--;
					continue;
				}
			if (soap_flag_TerminationTime1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_time(soap, "eventws:TerminationTime", &(a->_eventws__PullMessagesResponse::TerminationTime), "xsd:dateTime"))
				{	soap_flag_TerminationTime1--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_std__vectorTemplateOfPointerTowsnt__NotificationMessageHolderType(soap, "wsnt:NotificationMessage", &(a->_eventws__PullMessagesResponse::wsnt__NotificationMessage), "wsnt:NotificationMessageHolderType"))
					continue;
			/* transient soap skipped */
			soap_check_result(soap, "eventws:CurrentTime");
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_eventws__PullMessagesResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__eventws__PullMessagesResponse, 0, sizeof(_eventws__PullMessagesResponse), 0, soap_copy__eventws__PullMessagesResponse);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_CurrentTime1 > 0 || soap_flag_TerminationTime1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int _eventws__PullMessagesResponse::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	int id = soap_embed(soap, (void*)this, NULL, 0, SOAP_TYPE__eventws__PullMessagesResponse);
	if (this->soap_out(soap, tag?tag:"eventws:PullMessagesResponse", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_eventws__PullMessagesResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__eventws__PullMessagesResponse(soap, this, tag, type);
}

SOAP_FMAC3 _eventws__PullMessagesResponse * SOAP_FMAC4 soap_get__eventws__PullMessagesResponse(struct soap *soap, _eventws__PullMessagesResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in__eventws__PullMessagesResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _eventws__PullMessagesResponse * SOAP_FMAC2 soap_instantiate__eventws__PullMessagesResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__eventws__PullMessagesResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__eventws__PullMessagesResponse, n, onvifevent_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = SOAP_NEW(_eventws__PullMessagesResponse);
		if (size)
			*size = sizeof(_eventws__PullMessagesResponse);
		((_eventws__PullMessagesResponse*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = SOAP_NEW_ARRAY(_eventws__PullMessagesResponse, n);
		if (size)
			*size = n * sizeof(_eventws__PullMessagesResponse);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((_eventws__PullMessagesResponse*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (_eventws__PullMessagesResponse*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__eventws__PullMessagesResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _eventws__PullMessagesResponse %p -> %p\n", q, p));
	*(_eventws__PullMessagesResponse*)p = *(_eventws__PullMessagesResponse*)q;
}

void _eventws__PullMessages::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_xsd__duration(soap, &this->_eventws__PullMessages::Timeout);
	soap_default_int(soap, &this->_eventws__PullMessages::MessageLimit);
	soap_default_std__vectorTemplateOf_XML(soap, &this->_eventws__PullMessages::__any);
	/* transient soap skipped */
}

void _eventws__PullMessages::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_embedded(soap, &this->_eventws__PullMessages::MessageLimit, SOAP_TYPE_int);
	soap_serialize_std__vectorTemplateOf_XML(soap, &this->_eventws__PullMessages::__any);
	/* transient soap skipped */
#endif
}

int _eventws__PullMessages::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__eventws__PullMessages(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__eventws__PullMessages(struct soap *soap, const char *tag, int id, const _eventws__PullMessages *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__eventws__PullMessages), type))
		return soap->error;
	if (soap_out_xsd__duration(soap, "eventws:Timeout", -1, &(a->_eventws__PullMessages::Timeout), ""))
		return soap->error;
	if (soap_out_int(soap, "eventws:MessageLimit", -1, &(a->_eventws__PullMessages::MessageLimit), ""))
		return soap->error;
	if (soap_out_std__vectorTemplateOf_XML(soap, "-any", -1, &(a->_eventws__PullMessages::__any), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_eventws__PullMessages::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__eventws__PullMessages(soap, tag, this, type);
}

SOAP_FMAC3 _eventws__PullMessages * SOAP_FMAC4 soap_in__eventws__PullMessages(struct soap *soap, const char *tag, _eventws__PullMessages *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_eventws__PullMessages *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__eventws__PullMessages, sizeof(_eventws__PullMessages), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__eventws__PullMessages)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_eventws__PullMessages *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_Timeout1 = 1;
	size_t soap_flag_MessageLimit1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_Timeout1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_xsd__duration(soap, "eventws:Timeout", &(a->_eventws__PullMessages::Timeout), "xsd:duration"))
				{	soap_flag_Timeout1--;
					continue;
				}
			if (soap_flag_MessageLimit1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "eventws:MessageLimit", &(a->_eventws__PullMessages::MessageLimit), "xsd:int"))
				{	soap_flag_MessageLimit1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_std__vectorTemplateOf_XML(soap, "-any", &(a->_eventws__PullMessages::__any), ""))
					continue;
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_eventws__PullMessages *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__eventws__PullMessages, 0, sizeof(_eventws__PullMessages), 0, soap_copy__eventws__PullMessages);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_Timeout1 > 0 || soap_flag_MessageLimit1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int _eventws__PullMessages::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	int id = soap_embed(soap, (void*)this, NULL, 0, SOAP_TYPE__eventws__PullMessages);
	if (this->soap_out(soap, tag?tag:"eventws:PullMessages", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_eventws__PullMessages::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__eventws__PullMessages(soap, this, tag, type);
}

SOAP_FMAC3 _eventws__PullMessages * SOAP_FMAC4 soap_get__eventws__PullMessages(struct soap *soap, _eventws__PullMessages *p, const char *tag, const char *type)
{
	if ((p = soap_in__eventws__PullMessages(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _eventws__PullMessages * SOAP_FMAC2 soap_instantiate__eventws__PullMessages(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__eventws__PullMessages(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__eventws__PullMessages, n, onvifevent_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = SOAP_NEW(_eventws__PullMessages);
		if (size)
			*size = sizeof(_eventws__PullMessages);
		((_eventws__PullMessages*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = SOAP_NEW_ARRAY(_eventws__PullMessages, n);
		if (size)
			*size = n * sizeof(_eventws__PullMessages);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((_eventws__PullMessages*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (_eventws__PullMessages*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__eventws__PullMessages(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _eventws__PullMessages %p -> %p\n", q, p));
	*(_eventws__PullMessages*)p = *(_eventws__PullMessages*)q;
}

void _eventws__CreatePullPointSubscriptionResponse::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_wsa5__EndpointReferenceType(soap, &this->_eventws__CreatePullPointSubscriptionResponse::SubscriptionReference);
	soap_default_time(soap, &this->_eventws__CreatePullPointSubscriptionResponse::wsnt__CurrentTime);
	soap_default_time(soap, &this->_eventws__CreatePullPointSubscriptionResponse::wsnt__TerminationTime);
	soap_default_std__vectorTemplateOf_XML(soap, &this->_eventws__CreatePullPointSubscriptionResponse::__any);
	/* transient soap skipped */
}

void _eventws__CreatePullPointSubscriptionResponse::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_embedded(soap, &this->_eventws__CreatePullPointSubscriptionResponse::SubscriptionReference, SOAP_TYPE_wsa5__EndpointReferenceType);
	soap_serialize_wsa5__EndpointReferenceType(soap, &this->_eventws__CreatePullPointSubscriptionResponse::SubscriptionReference);
	soap_embedded(soap, &this->_eventws__CreatePullPointSubscriptionResponse::wsnt__CurrentTime, SOAP_TYPE_time);
	soap_embedded(soap, &this->_eventws__CreatePullPointSubscriptionResponse::wsnt__TerminationTime, SOAP_TYPE_time);
	soap_serialize_std__vectorTemplateOf_XML(soap, &this->_eventws__CreatePullPointSubscriptionResponse::__any);
	/* transient soap skipped */
#endif
}

int _eventws__CreatePullPointSubscriptionResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__eventws__CreatePullPointSubscriptionResponse(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__eventws__CreatePullPointSubscriptionResponse(struct soap *soap, const char *tag, int id, const _eventws__CreatePullPointSubscriptionResponse *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__eventws__CreatePullPointSubscriptionResponse), type))
		return soap->error;
	soap_element_result(soap, "eventws:SubscriptionReference");
	if (soap_out_wsa5__EndpointReferenceType(soap, "eventws:SubscriptionReference", -1, &(a->_eventws__CreatePullPointSubscriptionResponse::SubscriptionReference), ""))
		return soap->error;
	if (soap_out_time(soap, "wsnt:CurrentTime", -1, &(a->_eventws__CreatePullPointSubscriptionResponse::wsnt__CurrentTime), ""))
		return soap->error;
	if (soap_out_time(soap, "wsnt:TerminationTime", -1, &(a->_eventws__CreatePullPointSubscriptionResponse::wsnt__TerminationTime), ""))
		return soap->error;
	if (soap_out_std__vectorTemplateOf_XML(soap, "-any", -1, &(a->_eventws__CreatePullPointSubscriptionResponse::__any), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_eventws__CreatePullPointSubscriptionResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__eventws__CreatePullPointSubscriptionResponse(soap, tag, this, type);
}

SOAP_FMAC3 _eventws__CreatePullPointSubscriptionResponse * SOAP_FMAC4 soap_in__eventws__CreatePullPointSubscriptionResponse(struct soap *soap, const char *tag, _eventws__CreatePullPointSubscriptionResponse *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_eventws__CreatePullPointSubscriptionResponse *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__eventws__CreatePullPointSubscriptionResponse, sizeof(_eventws__CreatePullPointSubscriptionResponse), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__eventws__CreatePullPointSubscriptionResponse)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_eventws__CreatePullPointSubscriptionResponse *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_SubscriptionReference1 = 1;
	size_t soap_flag_wsnt__CurrentTime1 = 1;
	size_t soap_flag_wsnt__TerminationTime1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_SubscriptionReference1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_wsa5__EndpointReferenceType(soap, "eventws:SubscriptionReference", &(a->_eventws__CreatePullPointSubscriptionResponse::SubscriptionReference), "wsa5:EndpointReferenceType"))
				{	soap_flag_SubscriptionReference1--;
					continue;
				}
			if (soap_flag_wsnt__CurrentTime1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_time(soap, "wsnt:CurrentTime", &(a->_eventws__CreatePullPointSubscriptionResponse::wsnt__CurrentTime), "xsd:dateTime"))
				{	soap_flag_wsnt__CurrentTime1--;
					continue;
				}
			if (soap_flag_wsnt__TerminationTime1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_time(soap, "wsnt:TerminationTime", &(a->_eventws__CreatePullPointSubscriptionResponse::wsnt__TerminationTime), "xsd:dateTime"))
				{	soap_flag_wsnt__TerminationTime1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_std__vectorTemplateOf_XML(soap, "-any", &(a->_eventws__CreatePullPointSubscriptionResponse::__any), ""))
					continue;
			soap_check_result(soap, "eventws:SubscriptionReference");
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_eventws__CreatePullPointSubscriptionResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__eventws__CreatePullPointSubscriptionResponse, 0, sizeof(_eventws__CreatePullPointSubscriptionResponse), 0, soap_copy__eventws__CreatePullPointSubscriptionResponse);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_SubscriptionReference1 > 0 || soap_flag_wsnt__CurrentTime1 > 0 || soap_flag_wsnt__TerminationTime1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int _eventws__CreatePullPointSubscriptionResponse::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	int id = soap_embed(soap, (void*)this, NULL, 0, SOAP_TYPE__eventws__CreatePullPointSubscriptionResponse);
	if (this->soap_out(soap, tag?tag:"eventws:CreatePullPointSubscriptionResponse", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_eventws__CreatePullPointSubscriptionResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__eventws__CreatePullPointSubscriptionResponse(soap, this, tag, type);
}

SOAP_FMAC3 _eventws__CreatePullPointSubscriptionResponse * SOAP_FMAC4 soap_get__eventws__CreatePullPointSubscriptionResponse(struct soap *soap, _eventws__CreatePullPointSubscriptionResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in__eventws__CreatePullPointSubscriptionResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _eventws__CreatePullPointSubscriptionResponse * SOAP_FMAC2 soap_instantiate__eventws__CreatePullPointSubscriptionResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__eventws__CreatePullPointSubscriptionResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__eventws__CreatePullPointSubscriptionResponse, n, onvifevent_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = SOAP_NEW(_eventws__CreatePullPointSubscriptionResponse);
		if (size)
			*size = sizeof(_eventws__CreatePullPointSubscriptionResponse);
		((_eventws__CreatePullPointSubscriptionResponse*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = SOAP_NEW_ARRAY(_eventws__CreatePullPointSubscriptionResponse, n);
		if (size)
			*size = n * sizeof(_eventws__CreatePullPointSubscriptionResponse);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((_eventws__CreatePullPointSubscriptionResponse*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (_eventws__CreatePullPointSubscriptionResponse*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__eventws__CreatePullPointSubscriptionResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _eventws__CreatePullPointSubscriptionResponse %p -> %p\n", q, p));
	*(_eventws__CreatePullPointSubscriptionResponse*)p = *(_eventws__CreatePullPointSubscriptionResponse*)q;
}

void _eventws__CreatePullPointSubscription::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->_eventws__CreatePullPointSubscription::Filter = NULL;
	this->_eventws__CreatePullPointSubscription::InitialTerminationTime = NULL;
	this->_eventws__CreatePullPointSubscription::SubscriptionPolicy = NULL;
	soap_default_std__vectorTemplateOf_XML(soap, &this->_eventws__CreatePullPointSubscription::__any);
	/* transient soap skipped */
}

void _eventws__CreatePullPointSubscription::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTowsnt__FilterType(soap, &this->_eventws__CreatePullPointSubscription::Filter);
	soap_serialize_PointerTowsnt__AbsoluteOrRelativeTimeType(soap, &this->_eventws__CreatePullPointSubscription::InitialTerminationTime);
	soap_serialize_PointerTo_eventws__CreatePullPointSubscription_SubscriptionPolicy(soap, &this->_eventws__CreatePullPointSubscription::SubscriptionPolicy);
	soap_serialize_std__vectorTemplateOf_XML(soap, &this->_eventws__CreatePullPointSubscription::__any);
	/* transient soap skipped */
#endif
}

int _eventws__CreatePullPointSubscription::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__eventws__CreatePullPointSubscription(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__eventws__CreatePullPointSubscription(struct soap *soap, const char *tag, int id, const _eventws__CreatePullPointSubscription *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__eventws__CreatePullPointSubscription), type))
		return soap->error;
	if (soap_out_PointerTowsnt__FilterType(soap, "eventws:Filter", -1, &(a->_eventws__CreatePullPointSubscription::Filter), ""))
		return soap->error;
	if (soap_out_PointerTowsnt__AbsoluteOrRelativeTimeType(soap, "eventws:InitialTerminationTime", -1, &(a->_eventws__CreatePullPointSubscription::InitialTerminationTime), ""))
		return soap->error;
	if (soap_out_PointerTo_eventws__CreatePullPointSubscription_SubscriptionPolicy(soap, "eventws:SubscriptionPolicy", -1, &(a->_eventws__CreatePullPointSubscription::SubscriptionPolicy), ""))
		return soap->error;
	if (soap_out_std__vectorTemplateOf_XML(soap, "-any", -1, &(a->_eventws__CreatePullPointSubscription::__any), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_eventws__CreatePullPointSubscription::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__eventws__CreatePullPointSubscription(soap, tag, this, type);
}

SOAP_FMAC3 _eventws__CreatePullPointSubscription * SOAP_FMAC4 soap_in__eventws__CreatePullPointSubscription(struct soap *soap, const char *tag, _eventws__CreatePullPointSubscription *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_eventws__CreatePullPointSubscription *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__eventws__CreatePullPointSubscription, sizeof(_eventws__CreatePullPointSubscription), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__eventws__CreatePullPointSubscription)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_eventws__CreatePullPointSubscription *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_Filter1 = 1;
	size_t soap_flag_InitialTerminationTime1 = 1;
	size_t soap_flag_SubscriptionPolicy1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_Filter1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTowsnt__FilterType(soap, "eventws:Filter", &(a->_eventws__CreatePullPointSubscription::Filter), "wsnt:FilterType"))
				{	soap_flag_Filter1--;
					continue;
				}
			if (soap_flag_InitialTerminationTime1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTowsnt__AbsoluteOrRelativeTimeType(soap, "eventws:InitialTerminationTime", &(a->_eventws__CreatePullPointSubscription::InitialTerminationTime), "wsnt:AbsoluteOrRelativeTimeType"))
				{	soap_flag_InitialTerminationTime1--;
					continue;
				}
			if (soap_flag_SubscriptionPolicy1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_eventws__CreatePullPointSubscription_SubscriptionPolicy(soap, "eventws:SubscriptionPolicy", &(a->_eventws__CreatePullPointSubscription::SubscriptionPolicy), ""))
				{	soap_flag_SubscriptionPolicy1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_std__vectorTemplateOf_XML(soap, "-any", &(a->_eventws__CreatePullPointSubscription::__any), ""))
					continue;
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_eventws__CreatePullPointSubscription *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__eventws__CreatePullPointSubscription, 0, sizeof(_eventws__CreatePullPointSubscription), 0, soap_copy__eventws__CreatePullPointSubscription);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int _eventws__CreatePullPointSubscription::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	int id = soap_embed(soap, (void*)this, NULL, 0, SOAP_TYPE__eventws__CreatePullPointSubscription);
	if (this->soap_out(soap, tag?tag:"eventws:CreatePullPointSubscription", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_eventws__CreatePullPointSubscription::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__eventws__CreatePullPointSubscription(soap, this, tag, type);
}

SOAP_FMAC3 _eventws__CreatePullPointSubscription * SOAP_FMAC4 soap_get__eventws__CreatePullPointSubscription(struct soap *soap, _eventws__CreatePullPointSubscription *p, const char *tag, const char *type)
{
	if ((p = soap_in__eventws__CreatePullPointSubscription(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _eventws__CreatePullPointSubscription * SOAP_FMAC2 soap_instantiate__eventws__CreatePullPointSubscription(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__eventws__CreatePullPointSubscription(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__eventws__CreatePullPointSubscription, n, onvifevent_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = SOAP_NEW(_eventws__CreatePullPointSubscription);
		if (size)
			*size = sizeof(_eventws__CreatePullPointSubscription);
		((_eventws__CreatePullPointSubscription*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = SOAP_NEW_ARRAY(_eventws__CreatePullPointSubscription, n);
		if (size)
			*size = n * sizeof(_eventws__CreatePullPointSubscription);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((_eventws__CreatePullPointSubscription*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (_eventws__CreatePullPointSubscription*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__eventws__CreatePullPointSubscription(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _eventws__CreatePullPointSubscription %p -> %p\n", q, p));
	*(_eventws__CreatePullPointSubscription*)p = *(_eventws__CreatePullPointSubscription*)q;
}

void _eventws__GetServiceCapabilitiesResponse::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->_eventws__GetServiceCapabilitiesResponse::Capabilities = NULL;
	/* transient soap skipped */
}

void _eventws__GetServiceCapabilitiesResponse::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerToeventws__Capabilities(soap, &this->_eventws__GetServiceCapabilitiesResponse::Capabilities);
	/* transient soap skipped */
#endif
}

int _eventws__GetServiceCapabilitiesResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__eventws__GetServiceCapabilitiesResponse(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__eventws__GetServiceCapabilitiesResponse(struct soap *soap, const char *tag, int id, const _eventws__GetServiceCapabilitiesResponse *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__eventws__GetServiceCapabilitiesResponse), type))
		return soap->error;
	if (a->Capabilities)
		soap_element_result(soap, "eventws:Capabilities");
	if (a->_eventws__GetServiceCapabilitiesResponse::Capabilities)
	{	if (soap_out_PointerToeventws__Capabilities(soap, "eventws:Capabilities", -1, &a->_eventws__GetServiceCapabilitiesResponse::Capabilities, ""))
			return soap->error;
	}
	else if (soap_element_nil(soap, "eventws:Capabilities"))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_eventws__GetServiceCapabilitiesResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__eventws__GetServiceCapabilitiesResponse(soap, tag, this, type);
}

SOAP_FMAC3 _eventws__GetServiceCapabilitiesResponse * SOAP_FMAC4 soap_in__eventws__GetServiceCapabilitiesResponse(struct soap *soap, const char *tag, _eventws__GetServiceCapabilitiesResponse *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_eventws__GetServiceCapabilitiesResponse *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__eventws__GetServiceCapabilitiesResponse, sizeof(_eventws__GetServiceCapabilitiesResponse), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__eventws__GetServiceCapabilitiesResponse)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_eventws__GetServiceCapabilitiesResponse *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_Capabilities1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_Capabilities1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToeventws__Capabilities(soap, "eventws:Capabilities", &(a->_eventws__GetServiceCapabilitiesResponse::Capabilities), "eventws:Capabilities"))
				{	soap_flag_Capabilities1--;
					continue;
				}
			/* transient soap skipped */
			soap_check_result(soap, "eventws:Capabilities");
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_eventws__GetServiceCapabilitiesResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__eventws__GetServiceCapabilitiesResponse, 0, sizeof(_eventws__GetServiceCapabilitiesResponse), 0, soap_copy__eventws__GetServiceCapabilitiesResponse);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_Capabilities1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int _eventws__GetServiceCapabilitiesResponse::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	int id = soap_embed(soap, (void*)this, NULL, 0, SOAP_TYPE__eventws__GetServiceCapabilitiesResponse);
	if (this->soap_out(soap, tag?tag:"eventws:GetServiceCapabilitiesResponse", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_eventws__GetServiceCapabilitiesResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__eventws__GetServiceCapabilitiesResponse(soap, this, tag, type);
}

SOAP_FMAC3 _eventws__GetServiceCapabilitiesResponse * SOAP_FMAC4 soap_get__eventws__GetServiceCapabilitiesResponse(struct soap *soap, _eventws__GetServiceCapabilitiesResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in__eventws__GetServiceCapabilitiesResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _eventws__GetServiceCapabilitiesResponse * SOAP_FMAC2 soap_instantiate__eventws__GetServiceCapabilitiesResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__eventws__GetServiceCapabilitiesResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__eventws__GetServiceCapabilitiesResponse, n, onvifevent_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = SOAP_NEW(_eventws__GetServiceCapabilitiesResponse);
		if (size)
			*size = sizeof(_eventws__GetServiceCapabilitiesResponse);
		((_eventws__GetServiceCapabilitiesResponse*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = SOAP_NEW_ARRAY(_eventws__GetServiceCapabilitiesResponse, n);
		if (size)
			*size = n * sizeof(_eventws__GetServiceCapabilitiesResponse);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((_eventws__GetServiceCapabilitiesResponse*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (_eventws__GetServiceCapabilitiesResponse*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__eventws__GetServiceCapabilitiesResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _eventws__GetServiceCapabilitiesResponse %p -> %p\n", q, p));
	*(_eventws__GetServiceCapabilitiesResponse*)p = *(_eventws__GetServiceCapabilitiesResponse*)q;
}

void _eventws__GetServiceCapabilities::soap_default(struct soap *soap)
{
	this->soap = soap;
	/* transient soap skipped */
}

void _eventws__GetServiceCapabilities::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	/* transient soap skipped */
#endif
}

int _eventws__GetServiceCapabilities::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__eventws__GetServiceCapabilities(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__eventws__GetServiceCapabilities(struct soap *soap, const char *tag, int id, const _eventws__GetServiceCapabilities *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__eventws__GetServiceCapabilities), type))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_eventws__GetServiceCapabilities::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__eventws__GetServiceCapabilities(soap, tag, this, type);
}

SOAP_FMAC3 _eventws__GetServiceCapabilities * SOAP_FMAC4 soap_in__eventws__GetServiceCapabilities(struct soap *soap, const char *tag, _eventws__GetServiceCapabilities *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_eventws__GetServiceCapabilities *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__eventws__GetServiceCapabilities, sizeof(_eventws__GetServiceCapabilities), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__eventws__GetServiceCapabilities)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_eventws__GetServiceCapabilities *)a->soap_in(soap, tag, type);
		}
	}
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_eventws__GetServiceCapabilities *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__eventws__GetServiceCapabilities, 0, sizeof(_eventws__GetServiceCapabilities), 0, soap_copy__eventws__GetServiceCapabilities);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int _eventws__GetServiceCapabilities::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	int id = soap_embed(soap, (void*)this, NULL, 0, SOAP_TYPE__eventws__GetServiceCapabilities);
	if (this->soap_out(soap, tag?tag:"eventws:GetServiceCapabilities", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_eventws__GetServiceCapabilities::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__eventws__GetServiceCapabilities(soap, this, tag, type);
}

SOAP_FMAC3 _eventws__GetServiceCapabilities * SOAP_FMAC4 soap_get__eventws__GetServiceCapabilities(struct soap *soap, _eventws__GetServiceCapabilities *p, const char *tag, const char *type)
{
	if ((p = soap_in__eventws__GetServiceCapabilities(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _eventws__GetServiceCapabilities * SOAP_FMAC2 soap_instantiate__eventws__GetServiceCapabilities(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__eventws__GetServiceCapabilities(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__eventws__GetServiceCapabilities, n, onvifevent_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = SOAP_NEW(_eventws__GetServiceCapabilities);
		if (size)
			*size = sizeof(_eventws__GetServiceCapabilities);
		((_eventws__GetServiceCapabilities*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = SOAP_NEW_ARRAY(_eventws__GetServiceCapabilities, n);
		if (size)
			*size = n * sizeof(_eventws__GetServiceCapabilities);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((_eventws__GetServiceCapabilities*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (_eventws__GetServiceCapabilities*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__eventws__GetServiceCapabilities(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _eventws__GetServiceCapabilities %p -> %p\n", q, p));
	*(_eventws__GetServiceCapabilities*)p = *(_eventws__GetServiceCapabilities*)q;
}

void eventws__SubscriptionPolicy::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->xsd__anyType::soap_default(soap);
	soap_default_std__vectorTemplateOf_XML(soap, &this->eventws__SubscriptionPolicy::__any);
	this->eventws__SubscriptionPolicy::ChangedOnly = NULL;
	this->eventws__SubscriptionPolicy::__anyAttribute = NULL;
}

void eventws__SubscriptionPolicy::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_std__vectorTemplateOf_XML(soap, &this->eventws__SubscriptionPolicy::__any);
	this->xsd__anyType::soap_serialize(soap);
#endif
}

int eventws__SubscriptionPolicy::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_eventws__SubscriptionPolicy(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_eventws__SubscriptionPolicy(struct soap *soap, const char *tag, int id, const eventws__SubscriptionPolicy *a, const char *type)
{
	if (((eventws__SubscriptionPolicy*)a)->ChangedOnly)
		soap_set_attr(soap, "ChangedOnly", soap_bool2s(soap, *((eventws__SubscriptionPolicy*)a)->ChangedOnly), 1);
	if (((eventws__SubscriptionPolicy*)a)->__anyAttribute)
		soap_set_attr(soap, "-anyAttribute", ((eventws__SubscriptionPolicy*)a)->__anyAttribute, 1);
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_eventws__SubscriptionPolicy), "eventws:SubscriptionPolicy"))
		return soap->error;
	/* transient soap skipped */
	if (soap_out_std__vectorTemplateOf_XML(soap, "-any", -1, &(a->eventws__SubscriptionPolicy::__any), ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *eventws__SubscriptionPolicy::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_eventws__SubscriptionPolicy(soap, tag, this, type);
}

SOAP_FMAC3 eventws__SubscriptionPolicy * SOAP_FMAC4 soap_in_eventws__SubscriptionPolicy(struct soap *soap, const char *tag, eventws__SubscriptionPolicy *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (eventws__SubscriptionPolicy *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_eventws__SubscriptionPolicy, sizeof(eventws__SubscriptionPolicy), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_eventws__SubscriptionPolicy)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (eventws__SubscriptionPolicy *)a->soap_in(soap, tag, type);
		}
	}
	{	const char *t = soap_attr_value(soap, "ChangedOnly", 0);
		if (t)
		{
			if (!(((eventws__SubscriptionPolicy*)a)->ChangedOnly = (bool *)soap_malloc(soap, sizeof(bool))))
			{	soap->error = SOAP_EOM;
				return NULL;
			}
			if (soap_s2bool(soap, t, ((eventws__SubscriptionPolicy*)a)->ChangedOnly))
			return NULL;
		}
		else if (soap->error)
			return NULL;
	}
	if (soap_s2string(soap, soap_attr_value(soap, "-anyAttribute", 0), &((eventws__SubscriptionPolicy*)a)->__anyAttribute, 0, -1))
		return NULL;
	size_t soap_flag___item2 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_std__vectorTemplateOf_XML(soap, "-any", &(a->eventws__SubscriptionPolicy::__any), ""))
					continue;
			if (soap_flag___item2 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_inliteral(soap, "-item", &(a->xsd__anyType::__item)))
				{	soap_flag___item2--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (eventws__SubscriptionPolicy *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_eventws__SubscriptionPolicy, 0, sizeof(eventws__SubscriptionPolicy), 0, soap_copy_eventws__SubscriptionPolicy);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int eventws__SubscriptionPolicy::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	int id = soap_embed(soap, (void*)this, NULL, 0, SOAP_TYPE_eventws__SubscriptionPolicy);
	if (this->soap_out(soap, tag?tag:"eventws:SubscriptionPolicy", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *eventws__SubscriptionPolicy::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_eventws__SubscriptionPolicy(soap, this, tag, type);
}

SOAP_FMAC3 eventws__SubscriptionPolicy * SOAP_FMAC4 soap_get_eventws__SubscriptionPolicy(struct soap *soap, eventws__SubscriptionPolicy *p, const char *tag, const char *type)
{
	if ((p = soap_in_eventws__SubscriptionPolicy(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 eventws__SubscriptionPolicy * SOAP_FMAC2 soap_instantiate_eventws__SubscriptionPolicy(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_eventws__SubscriptionPolicy(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_eventws__SubscriptionPolicy, n, onvifevent_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = SOAP_NEW(eventws__SubscriptionPolicy);
		if (size)
			*size = sizeof(eventws__SubscriptionPolicy);
		((eventws__SubscriptionPolicy*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = SOAP_NEW_ARRAY(eventws__SubscriptionPolicy, n);
		if (size)
			*size = n * sizeof(eventws__SubscriptionPolicy);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((eventws__SubscriptionPolicy*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (eventws__SubscriptionPolicy*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_eventws__SubscriptionPolicy(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying eventws__SubscriptionPolicy %p -> %p\n", q, p));
	*(eventws__SubscriptionPolicy*)p = *(eventws__SubscriptionPolicy*)q;
}

void eventws__Capabilities::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->xsd__anyType::soap_default(soap);
	soap_default_std__vectorTemplateOf_XML(soap, &this->eventws__Capabilities::__any);
	this->eventws__Capabilities::WSSubscriptionPolicySupport = NULL;
	this->eventws__Capabilities::WSPullPointSupport = NULL;
	this->eventws__Capabilities::WSPausableSubscriptionManagerInterfaceSupport = NULL;
	this->eventws__Capabilities::MaxNotificationProducers = NULL;
	this->eventws__Capabilities::MaxPullPoints = NULL;
	this->eventws__Capabilities::PersistentNotificationStorage = NULL;
	this->eventws__Capabilities::__anyAttribute = NULL;
}

void eventws__Capabilities::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_std__vectorTemplateOf_XML(soap, &this->eventws__Capabilities::__any);
	this->xsd__anyType::soap_serialize(soap);
#endif
}

int eventws__Capabilities::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_eventws__Capabilities(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_eventws__Capabilities(struct soap *soap, const char *tag, int id, const eventws__Capabilities *a, const char *type)
{
	if (((eventws__Capabilities*)a)->WSSubscriptionPolicySupport)
		soap_set_attr(soap, "WSSubscriptionPolicySupport", soap_bool2s(soap, *((eventws__Capabilities*)a)->WSSubscriptionPolicySupport), 1);
	if (((eventws__Capabilities*)a)->WSPullPointSupport)
		soap_set_attr(soap, "WSPullPointSupport", soap_bool2s(soap, *((eventws__Capabilities*)a)->WSPullPointSupport), 1);
	if (((eventws__Capabilities*)a)->WSPausableSubscriptionManagerInterfaceSupport)
		soap_set_attr(soap, "WSPausableSubscriptionManagerInterfaceSupport", soap_bool2s(soap, *((eventws__Capabilities*)a)->WSPausableSubscriptionManagerInterfaceSupport), 1);
	if (((eventws__Capabilities*)a)->MaxNotificationProducers)
		soap_set_attr(soap, "MaxNotificationProducers", soap_int2s(soap, *((eventws__Capabilities*)a)->MaxNotificationProducers), 1);
	if (((eventws__Capabilities*)a)->MaxPullPoints)
		soap_set_attr(soap, "MaxPullPoints", soap_int2s(soap, *((eventws__Capabilities*)a)->MaxPullPoints), 1);
	if (((eventws__Capabilities*)a)->PersistentNotificationStorage)
		soap_set_attr(soap, "PersistentNotificationStorage", soap_bool2s(soap, *((eventws__Capabilities*)a)->PersistentNotificationStorage), 1);
	if (((eventws__Capabilities*)a)->__anyAttribute)
		soap_set_attr(soap, "-anyAttribute", ((eventws__Capabilities*)a)->__anyAttribute, 1);
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_eventws__Capabilities), "eventws:Capabilities"))
		return soap->error;
	/* transient soap skipped */
	if (soap_out_std__vectorTemplateOf_XML(soap, "-any", -1, &(a->eventws__Capabilities::__any), ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *eventws__Capabilities::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_eventws__Capabilities(soap, tag, this, type);
}

SOAP_FMAC3 eventws__Capabilities * SOAP_FMAC4 soap_in_eventws__Capabilities(struct soap *soap, const char *tag, eventws__Capabilities *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (eventws__Capabilities *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_eventws__Capabilities, sizeof(eventws__Capabilities), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_eventws__Capabilities)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (eventws__Capabilities *)a->soap_in(soap, tag, type);
		}
	}
	{	const char *t = soap_attr_value(soap, "WSSubscriptionPolicySupport", 0);
		if (t)
		{
			if (!(((eventws__Capabilities*)a)->WSSubscriptionPolicySupport = (bool *)soap_malloc(soap, sizeof(bool))))
			{	soap->error = SOAP_EOM;
				return NULL;
			}
			if (soap_s2bool(soap, t, ((eventws__Capabilities*)a)->WSSubscriptionPolicySupport))
			return NULL;
		}
		else if (soap->error)
			return NULL;
	}
	{	const char *t = soap_attr_value(soap, "WSPullPointSupport", 0);
		if (t)
		{
			if (!(((eventws__Capabilities*)a)->WSPullPointSupport = (bool *)soap_malloc(soap, sizeof(bool))))
			{	soap->error = SOAP_EOM;
				return NULL;
			}
			if (soap_s2bool(soap, t, ((eventws__Capabilities*)a)->WSPullPointSupport))
			return NULL;
		}
		else if (soap->error)
			return NULL;
	}
	{	const char *t = soap_attr_value(soap, "WSPausableSubscriptionManagerInterfaceSupport", 0);
		if (t)
		{
			if (!(((eventws__Capabilities*)a)->WSPausableSubscriptionManagerInterfaceSupport = (bool *)soap_malloc(soap, sizeof(bool))))
			{	soap->error = SOAP_EOM;
				return NULL;
			}
			if (soap_s2bool(soap, t, ((eventws__Capabilities*)a)->WSPausableSubscriptionManagerInterfaceSupport))
			return NULL;
		}
		else if (soap->error)
			return NULL;
	}
	{	const char *t = soap_attr_value(soap, "MaxNotificationProducers", 0);
		if (t)
		{
			if (!(((eventws__Capabilities*)a)->MaxNotificationProducers = (int *)soap_malloc(soap, sizeof(int))))
			{	soap->error = SOAP_EOM;
				return NULL;
			}
			if (soap_s2int(soap, t, ((eventws__Capabilities*)a)->MaxNotificationProducers))
				return NULL;
		}
		else if (soap->error)
			return NULL;
	}
	{	const char *t = soap_attr_value(soap, "MaxPullPoints", 0);
		if (t)
		{
			if (!(((eventws__Capabilities*)a)->MaxPullPoints = (int *)soap_malloc(soap, sizeof(int))))
			{	soap->error = SOAP_EOM;
				return NULL;
			}
			if (soap_s2int(soap, t, ((eventws__Capabilities*)a)->MaxPullPoints))
				return NULL;
		}
		else if (soap->error)
			return NULL;
	}
	{	const char *t = soap_attr_value(soap, "PersistentNotificationStorage", 0);
		if (t)
		{
			if (!(((eventws__Capabilities*)a)->PersistentNotificationStorage = (bool *)soap_malloc(soap, sizeof(bool))))
			{	soap->error = SOAP_EOM;
				return NULL;
			}
			if (soap_s2bool(soap, t, ((eventws__Capabilities*)a)->PersistentNotificationStorage))
			return NULL;
		}
		else if (soap->error)
			return NULL;
	}
	if (soap_s2string(soap, soap_attr_value(soap, "-anyAttribute", 0), &((eventws__Capabilities*)a)->__anyAttribute, 0, -1))
		return NULL;
	size_t soap_flag___item2 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_std__vectorTemplateOf_XML(soap, "-any", &(a->eventws__Capabilities::__any), ""))
					continue;
			if (soap_flag___item2 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_inliteral(soap, "-item", &(a->xsd__anyType::__item)))
				{	soap_flag___item2--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (eventws__Capabilities *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_eventws__Capabilities, 0, sizeof(eventws__Capabilities), 0, soap_copy_eventws__Capabilities);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int eventws__Capabilities::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	int id = soap_embed(soap, (void*)this, NULL, 0, SOAP_TYPE_eventws__Capabilities);
	if (this->soap_out(soap, tag?tag:"eventws:Capabilities", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *eventws__Capabilities::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_eventws__Capabilities(soap, this, tag, type);
}

SOAP_FMAC3 eventws__Capabilities * SOAP_FMAC4 soap_get_eventws__Capabilities(struct soap *soap, eventws__Capabilities *p, const char *tag, const char *type)
{
	if ((p = soap_in_eventws__Capabilities(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 eventws__Capabilities * SOAP_FMAC2 soap_instantiate_eventws__Capabilities(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_eventws__Capabilities(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_eventws__Capabilities, n, onvifevent_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = SOAP_NEW(eventws__Capabilities);
		if (size)
			*size = sizeof(eventws__Capabilities);
		((eventws__Capabilities*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = SOAP_NEW_ARRAY(eventws__Capabilities, n);
		if (size)
			*size = n * sizeof(eventws__Capabilities);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((eventws__Capabilities*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (eventws__Capabilities*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_eventws__Capabilities(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying eventws__Capabilities %p -> %p\n", q, p));
	*(eventws__Capabilities*)p = *(eventws__Capabilities*)q;
}

void xsd__token_::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->xsd__anyType::soap_default(soap);
	soap_default_xsd__token(soap, &this->xsd__token_::__item);
}

void xsd__token_::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_xsd__token(soap, &this->xsd__token_::__item);
	this->xsd__anyType::soap_serialize(soap);
#endif
}

int xsd__token_::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_xsd__token_(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__token_(struct soap *soap, const char *tag, int id, const xsd__token_ *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	return soap_out_xsd__token(soap, tag, id, &(a->xsd__token_::__item), "xsd:token");
}

void *xsd__token_::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_xsd__token_(soap, tag, this, type);
}

SOAP_FMAC3 xsd__token_ * SOAP_FMAC4 soap_in_xsd__token_(struct soap *soap, const char *tag, xsd__token_ *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!(a = (xsd__token_ *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_xsd__token_, sizeof(xsd__token_), soap->type, soap->arrayType)))
	{	soap->error = SOAP_TAG_MISMATCH;
		return NULL;
	}
	soap_revert(soap);
	*soap->id = '\0';
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_xsd__token_)
			return (xsd__token_ *)a->soap_in(soap, tag, type);
	}
	if (!soap_in_xsd__token(soap, tag, &(a->xsd__token_::__item), "xsd:token"))
		return NULL;
	return a;
}

int xsd__token_::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	int id = soap_embed(soap, (void*)this, NULL, 0, SOAP_TYPE_xsd__token_);
	if (this->soap_out(soap, tag?tag:"xsd:token", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *xsd__token_::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_xsd__token_(soap, this, tag, type);
}

SOAP_FMAC3 xsd__token_ * SOAP_FMAC4 soap_get_xsd__token_(struct soap *soap, xsd__token_ *p, const char *tag, const char *type)
{
	if ((p = soap_in_xsd__token_(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 xsd__token_ * SOAP_FMAC2 soap_instantiate_xsd__token_(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_xsd__token_(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_xsd__token_, n, onvifevent_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = SOAP_NEW(xsd__token_);
		if (size)
			*size = sizeof(xsd__token_);
		((xsd__token_*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = SOAP_NEW_ARRAY(xsd__token_, n);
		if (size)
			*size = n * sizeof(xsd__token_);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((xsd__token_*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (xsd__token_*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_xsd__token_(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying xsd__token_ %p -> %p\n", q, p));
	*(xsd__token_*)p = *(xsd__token_*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_xsd__token(struct soap *soap, const std::string *a)
{	(void)soap; (void)a; /* appease -Wall -Werror */
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__token(struct soap *soap, const char *tag, int id, const std::string *s, const char *type)
{
	if ((soap->mode & SOAP_C_NILSTRING) && s->empty())
		return soap_element_null(soap, tag, id, type);
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, s, SOAP_TYPE_xsd__token), type) || soap_string_out(soap, s->c_str(), 0) || soap_element_end_out(soap, tag))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_xsd__token(struct soap *soap, const char *tag, std::string *s, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!s)
		s = soap_new_std__string(soap, -1);
	if (soap->null)
		if (s)
			s->erase();
	if (soap->body && !*soap->href)
	{	char *t;
		s = (std::string*)soap_class_id_enter(soap, soap->id, s, SOAP_TYPE_xsd__token, sizeof(std::string), soap->type, soap->arrayType);
		if (s)
		{	if (!(t = soap_string_in(soap, 1, 0, -1, NULL)))
				return NULL;
			s->assign(t);
		}
	}
	else
		s = (std::string*)soap_id_forward(soap, soap->href, soap_class_id_enter(soap, soap->id, s, SOAP_TYPE_xsd__token, sizeof(std::string), soap->type, soap->arrayType), 0, SOAP_TYPE_xsd__token, 0, sizeof(std::string), 0, soap_copy_xsd__token);
	if (soap->body && soap_element_end_in(soap, tag))
		return NULL;
	return s;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_xsd__token(struct soap *soap, const std::string *a, const char *tag, const char *type)
{
	int id = soap_embed(soap, (void*)a, NULL, 0, SOAP_TYPE_xsd__token);
	if (soap_out_xsd__token(soap, tag?tag:"xsd:token", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_xsd__token(struct soap *soap, std::string *p, const char *tag, const char *type)
{
	if ((p = soap_in_xsd__token(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void xsd__string::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->xsd__anyType::soap_default(soap);
	soap_default_std__string(soap, &this->xsd__string::__item);
}

void xsd__string::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_std__string(soap, &this->xsd__string::__item);
	this->xsd__anyType::soap_serialize(soap);
#endif
}

int xsd__string::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_xsd__string(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__string(struct soap *soap, const char *tag, int id, const xsd__string *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	return soap_out_std__string(soap, tag, id, &(a->xsd__string::__item), "xsd:string");
}

void *xsd__string::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_xsd__string(soap, tag, this, type);
}

SOAP_FMAC3 xsd__string * SOAP_FMAC4 soap_in_xsd__string(struct soap *soap, const char *tag, xsd__string *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!(a = (xsd__string *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_xsd__string, sizeof(xsd__string), soap->type, soap->arrayType)))
	{	soap->error = SOAP_TAG_MISMATCH;
		return NULL;
	}
	soap_revert(soap);
	*soap->id = '\0';
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_xsd__string)
			return (xsd__string *)a->soap_in(soap, tag, type);
	}
	if (!soap_in_std__string(soap, tag, &(a->xsd__string::__item), "xsd:string"))
		return NULL;
	return a;
}

int xsd__string::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	int id = soap_embed(soap, (void*)this, NULL, 0, SOAP_TYPE_xsd__string);
	if (this->soap_out(soap, tag?tag:"xsd:string", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *xsd__string::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_xsd__string(soap, this, tag, type);
}

SOAP_FMAC3 xsd__string * SOAP_FMAC4 soap_get_xsd__string(struct soap *soap, xsd__string *p, const char *tag, const char *type)
{
	if ((p = soap_in_xsd__string(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 xsd__string * SOAP_FMAC2 soap_instantiate_xsd__string(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_xsd__string(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_xsd__string, n, onvifevent_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = SOAP_NEW(xsd__string);
		if (size)
			*size = sizeof(xsd__string);
		((xsd__string*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = SOAP_NEW_ARRAY(xsd__string, n);
		if (size)
			*size = n * sizeof(xsd__string);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((xsd__string*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (xsd__string*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_xsd__string(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying xsd__string %p -> %p\n", q, p));
	*(xsd__string*)p = *(xsd__string*)q;
}

void xsd__nonNegativeInteger_::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->xsd__anyType::soap_default(soap);
	soap_default_xsd__nonNegativeInteger(soap, &this->xsd__nonNegativeInteger_::__item);
}

void xsd__nonNegativeInteger_::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_embedded(soap, &this->xsd__nonNegativeInteger_::__item, SOAP_TYPE_xsd__nonNegativeInteger);
	soap_serialize_xsd__nonNegativeInteger(soap, &this->xsd__nonNegativeInteger_::__item);
	this->xsd__anyType::soap_serialize(soap);
#endif
}

int xsd__nonNegativeInteger_::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_xsd__nonNegativeInteger_(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__nonNegativeInteger_(struct soap *soap, const char *tag, int id, const xsd__nonNegativeInteger_ *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	return soap_out_xsd__nonNegativeInteger(soap, tag, id, &(a->xsd__nonNegativeInteger_::__item), "xsd:nonNegativeInteger");
}

void *xsd__nonNegativeInteger_::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_xsd__nonNegativeInteger_(soap, tag, this, type);
}

SOAP_FMAC3 xsd__nonNegativeInteger_ * SOAP_FMAC4 soap_in_xsd__nonNegativeInteger_(struct soap *soap, const char *tag, xsd__nonNegativeInteger_ *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!(a = (xsd__nonNegativeInteger_ *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_xsd__nonNegativeInteger_, sizeof(xsd__nonNegativeInteger_), soap->type, soap->arrayType)))
	{	soap->error = SOAP_TAG_MISMATCH;
		return NULL;
	}
	soap_revert(soap);
	*soap->id = '\0';
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_xsd__nonNegativeInteger_)
			return (xsd__nonNegativeInteger_ *)a->soap_in(soap, tag, type);
	}
	if (!soap_in_xsd__nonNegativeInteger(soap, tag, &(a->xsd__nonNegativeInteger_::__item), "xsd:nonNegativeInteger"))
		return NULL;
	return a;
}

int xsd__nonNegativeInteger_::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	int id = soap_embed(soap, (void*)this, NULL, 0, SOAP_TYPE_xsd__nonNegativeInteger_);
	if (this->soap_out(soap, tag?tag:"xsd:nonNegativeInteger", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *xsd__nonNegativeInteger_::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_xsd__nonNegativeInteger_(soap, this, tag, type);
}

SOAP_FMAC3 xsd__nonNegativeInteger_ * SOAP_FMAC4 soap_get_xsd__nonNegativeInteger_(struct soap *soap, xsd__nonNegativeInteger_ *p, const char *tag, const char *type)
{
	if ((p = soap_in_xsd__nonNegativeInteger_(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 xsd__nonNegativeInteger_ * SOAP_FMAC2 soap_instantiate_xsd__nonNegativeInteger_(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_xsd__nonNegativeInteger_(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_xsd__nonNegativeInteger_, n, onvifevent_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = SOAP_NEW(xsd__nonNegativeInteger_);
		if (size)
			*size = sizeof(xsd__nonNegativeInteger_);
		((xsd__nonNegativeInteger_*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = SOAP_NEW_ARRAY(xsd__nonNegativeInteger_, n);
		if (size)
			*size = n * sizeof(xsd__nonNegativeInteger_);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((xsd__nonNegativeInteger_*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (xsd__nonNegativeInteger_*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_xsd__nonNegativeInteger_(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying xsd__nonNegativeInteger_ %p -> %p\n", q, p));
	*(xsd__nonNegativeInteger_*)p = *(xsd__nonNegativeInteger_*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_xsd__nonNegativeInteger(struct soap *soap, const std::string *a)
{	(void)soap; (void)a; /* appease -Wall -Werror */
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__nonNegativeInteger(struct soap *soap, const char *tag, int id, const std::string *s, const char *type)
{
	if ((soap->mode & SOAP_C_NILSTRING) && s->empty())
		return soap_element_null(soap, tag, id, type);
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, s, SOAP_TYPE_xsd__nonNegativeInteger), type) || soap_string_out(soap, s->c_str(), 0) || soap_element_end_out(soap, tag))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_xsd__nonNegativeInteger(struct soap *soap, const char *tag, std::string *s, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!s)
		s = soap_new_std__string(soap, -1);
	if (soap->null)
		if (s)
			s->erase();
	if (soap->body && !*soap->href)
	{	char *t;
		s = (std::string*)soap_class_id_enter(soap, soap->id, s, SOAP_TYPE_xsd__nonNegativeInteger, sizeof(std::string), soap->type, soap->arrayType);
		if (s)
		{	if (!(t = soap_string_in(soap, 1, 0, -1, NULL)))
				return NULL;
			s->assign(t);
		}
	}
	else
		s = (std::string*)soap_id_forward(soap, soap->href, soap_class_id_enter(soap, soap->id, s, SOAP_TYPE_xsd__nonNegativeInteger, sizeof(std::string), soap->type, soap->arrayType), 0, SOAP_TYPE_xsd__nonNegativeInteger, 0, sizeof(std::string), 0, soap_copy_xsd__nonNegativeInteger);
	if (soap->body && soap_element_end_in(soap, tag))
		return NULL;
	return s;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_xsd__nonNegativeInteger(struct soap *soap, const std::string *a, const char *tag, const char *type)
{
	int id = soap_embed(soap, (void*)a, NULL, 0, SOAP_TYPE_xsd__nonNegativeInteger);
	if (soap_out_xsd__nonNegativeInteger(soap, tag?tag:"xsd:nonNegativeInteger", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_xsd__nonNegativeInteger(struct soap *soap, std::string *p, const char *tag, const char *type)
{
	if ((p = soap_in_xsd__nonNegativeInteger(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void xsd__int::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->xsd__anyType::soap_default(soap);
	soap_default_int(soap, &this->xsd__int::__item);
}

void xsd__int::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_embedded(soap, &this->xsd__int::__item, SOAP_TYPE_int);
	this->xsd__anyType::soap_serialize(soap);
#endif
}

int xsd__int::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_xsd__int(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__int(struct soap *soap, const char *tag, int id, const xsd__int *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	return soap_out_int(soap, tag, id, &(a->xsd__int::__item), "xsd:int");
}

void *xsd__int::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_xsd__int(soap, tag, this, type);
}

SOAP_FMAC3 xsd__int * SOAP_FMAC4 soap_in_xsd__int(struct soap *soap, const char *tag, xsd__int *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!(a = (xsd__int *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_xsd__int, sizeof(xsd__int), soap->type, soap->arrayType)))
	{	soap->error = SOAP_TAG_MISMATCH;
		return NULL;
	}
	soap_revert(soap);
	*soap->id = '\0';
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_xsd__int)
			return (xsd__int *)a->soap_in(soap, tag, type);
	}
	if (!soap_in_int(soap, tag, &(a->xsd__int::__item), "xsd:int"))
		return NULL;
	return a;
}

int xsd__int::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	int id = soap_embed(soap, (void*)this, NULL, 0, SOAP_TYPE_xsd__int);
	if (this->soap_out(soap, tag?tag:"xsd:int", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *xsd__int::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_xsd__int(soap, this, tag, type);
}

SOAP_FMAC3 xsd__int * SOAP_FMAC4 soap_get_xsd__int(struct soap *soap, xsd__int *p, const char *tag, const char *type)
{
	if ((p = soap_in_xsd__int(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 xsd__int * SOAP_FMAC2 soap_instantiate_xsd__int(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_xsd__int(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_xsd__int, n, onvifevent_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = SOAP_NEW(xsd__int);
		if (size)
			*size = sizeof(xsd__int);
		((xsd__int*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = SOAP_NEW_ARRAY(xsd__int, n);
		if (size)
			*size = n * sizeof(xsd__int);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((xsd__int*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (xsd__int*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_xsd__int(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying xsd__int %p -> %p\n", q, p));
	*(xsd__int*)p = *(xsd__int*)q;
}

void xsd__duration_::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->xsd__anyType::soap_default(soap);
	soap_default_xsd__duration(soap, &this->xsd__duration_::__item);
}

void xsd__duration_::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	this->xsd__anyType::soap_serialize(soap);
#endif
}

int xsd__duration_::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_xsd__duration_(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__duration_(struct soap *soap, const char *tag, int id, const xsd__duration_ *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	return soap_out_xsd__duration(soap, tag, id, &(a->xsd__duration_::__item), "xsd:duration");
}

void *xsd__duration_::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_xsd__duration_(soap, tag, this, type);
}

SOAP_FMAC3 xsd__duration_ * SOAP_FMAC4 soap_in_xsd__duration_(struct soap *soap, const char *tag, xsd__duration_ *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!(a = (xsd__duration_ *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_xsd__duration_, sizeof(xsd__duration_), soap->type, soap->arrayType)))
	{	soap->error = SOAP_TAG_MISMATCH;
		return NULL;
	}
	soap_revert(soap);
	*soap->id = '\0';
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_xsd__duration_)
			return (xsd__duration_ *)a->soap_in(soap, tag, type);
	}
	if (!soap_in_xsd__duration(soap, tag, &(a->xsd__duration_::__item), "xsd:duration"))
		return NULL;
	return a;
}

int xsd__duration_::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	int id = soap_embed(soap, (void*)this, NULL, 0, SOAP_TYPE_xsd__duration_);
	if (this->soap_out(soap, tag?tag:"xsd:duration", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *xsd__duration_::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_xsd__duration_(soap, this, tag, type);
}

SOAP_FMAC3 xsd__duration_ * SOAP_FMAC4 soap_get_xsd__duration_(struct soap *soap, xsd__duration_ *p, const char *tag, const char *type)
{
	if ((p = soap_in_xsd__duration_(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 xsd__duration_ * SOAP_FMAC2 soap_instantiate_xsd__duration_(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_xsd__duration_(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_xsd__duration_, n, onvifevent_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = SOAP_NEW(xsd__duration_);
		if (size)
			*size = sizeof(xsd__duration_);
		((xsd__duration_*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = SOAP_NEW_ARRAY(xsd__duration_, n);
		if (size)
			*size = n * sizeof(xsd__duration_);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((xsd__duration_*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (xsd__duration_*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_xsd__duration_(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying xsd__duration_ %p -> %p\n", q, p));
	*(xsd__duration_*)p = *(xsd__duration_*)q;
}

void xsd__dateTime::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->xsd__anyType::soap_default(soap);
	soap_default_time(soap, &this->xsd__dateTime::__item);
}

void xsd__dateTime::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_embedded(soap, &this->xsd__dateTime::__item, SOAP_TYPE_time);
	this->xsd__anyType::soap_serialize(soap);
#endif
}

int xsd__dateTime::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_xsd__dateTime(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__dateTime(struct soap *soap, const char *tag, int id, const xsd__dateTime *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	return soap_out_time(soap, tag, id, &(a->xsd__dateTime::__item), "xsd:dateTime");
}

void *xsd__dateTime::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_xsd__dateTime(soap, tag, this, type);
}

SOAP_FMAC3 xsd__dateTime * SOAP_FMAC4 soap_in_xsd__dateTime(struct soap *soap, const char *tag, xsd__dateTime *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!(a = (xsd__dateTime *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_xsd__dateTime, sizeof(xsd__dateTime), soap->type, soap->arrayType)))
	{	soap->error = SOAP_TAG_MISMATCH;
		return NULL;
	}
	soap_revert(soap);
	*soap->id = '\0';
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_xsd__dateTime)
			return (xsd__dateTime *)a->soap_in(soap, tag, type);
	}
	if (!soap_in_time(soap, tag, &(a->xsd__dateTime::__item), "xsd:dateTime"))
		return NULL;
	return a;
}

int xsd__dateTime::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	int id = soap_embed(soap, (void*)this, NULL, 0, SOAP_TYPE_xsd__dateTime);
	if (this->soap_out(soap, tag?tag:"xsd:dateTime", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *xsd__dateTime::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_xsd__dateTime(soap, this, tag, type);
}

SOAP_FMAC3 xsd__dateTime * SOAP_FMAC4 soap_get_xsd__dateTime(struct soap *soap, xsd__dateTime *p, const char *tag, const char *type)
{
	if ((p = soap_in_xsd__dateTime(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 xsd__dateTime * SOAP_FMAC2 soap_instantiate_xsd__dateTime(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_xsd__dateTime(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_xsd__dateTime, n, onvifevent_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = SOAP_NEW(xsd__dateTime);
		if (size)
			*size = sizeof(xsd__dateTime);
		((xsd__dateTime*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = SOAP_NEW_ARRAY(xsd__dateTime, n);
		if (size)
			*size = n * sizeof(xsd__dateTime);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((xsd__dateTime*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (xsd__dateTime*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_xsd__dateTime(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying xsd__dateTime %p -> %p\n", q, p));
	*(xsd__dateTime*)p = *(xsd__dateTime*)q;
}

void xsd__boolean::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->xsd__anyType::soap_default(soap);
	soap_default_bool(soap, &this->xsd__boolean::__item);
}

void xsd__boolean::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_embedded(soap, &this->xsd__boolean::__item, SOAP_TYPE_bool);
	this->xsd__anyType::soap_serialize(soap);
#endif
}

int xsd__boolean::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_xsd__boolean(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__boolean(struct soap *soap, const char *tag, int id, const xsd__boolean *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	return soap_out_bool(soap, tag, id, &(a->xsd__boolean::__item), "xsd:boolean");
}

void *xsd__boolean::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_xsd__boolean(soap, tag, this, type);
}

SOAP_FMAC3 xsd__boolean * SOAP_FMAC4 soap_in_xsd__boolean(struct soap *soap, const char *tag, xsd__boolean *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!(a = (xsd__boolean *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_xsd__boolean, sizeof(xsd__boolean), soap->type, soap->arrayType)))
	{	soap->error = SOAP_TAG_MISMATCH;
		return NULL;
	}
	soap_revert(soap);
	*soap->id = '\0';
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_xsd__boolean)
			return (xsd__boolean *)a->soap_in(soap, tag, type);
	}
	if (!soap_in_bool(soap, tag, &(a->xsd__boolean::__item), "xsd:boolean"))
		return NULL;
	return a;
}

int xsd__boolean::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	int id = soap_embed(soap, (void*)this, NULL, 0, SOAP_TYPE_xsd__boolean);
	if (this->soap_out(soap, tag?tag:"xsd:boolean", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *xsd__boolean::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_xsd__boolean(soap, this, tag, type);
}

SOAP_FMAC3 xsd__boolean * SOAP_FMAC4 soap_get_xsd__boolean(struct soap *soap, xsd__boolean *p, const char *tag, const char *type)
{
	if ((p = soap_in_xsd__boolean(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 xsd__boolean * SOAP_FMAC2 soap_instantiate_xsd__boolean(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_xsd__boolean(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_xsd__boolean, n, onvifevent_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = SOAP_NEW(xsd__boolean);
		if (size)
			*size = sizeof(xsd__boolean);
		((xsd__boolean*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = SOAP_NEW_ARRAY(xsd__boolean, n);
		if (size)
			*size = n * sizeof(xsd__boolean);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((xsd__boolean*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (xsd__boolean*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_xsd__boolean(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying xsd__boolean %p -> %p\n", q, p));
	*(xsd__boolean*)p = *(xsd__boolean*)q;
}

void xsd__anyURI_::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->xsd__anyType::soap_default(soap);
	soap_default_xsd__anyURI(soap, &this->xsd__anyURI_::__item);
}

void xsd__anyURI_::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_xsd__anyURI(soap, &this->xsd__anyURI_::__item);
	this->xsd__anyType::soap_serialize(soap);
#endif
}

int xsd__anyURI_::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_xsd__anyURI_(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__anyURI_(struct soap *soap, const char *tag, int id, const xsd__anyURI_ *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	return soap_out_xsd__anyURI(soap, tag, id, &(a->xsd__anyURI_::__item), "xsd:anyURI");
}

void *xsd__anyURI_::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_xsd__anyURI_(soap, tag, this, type);
}

SOAP_FMAC3 xsd__anyURI_ * SOAP_FMAC4 soap_in_xsd__anyURI_(struct soap *soap, const char *tag, xsd__anyURI_ *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!(a = (xsd__anyURI_ *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_xsd__anyURI_, sizeof(xsd__anyURI_), soap->type, soap->arrayType)))
	{	soap->error = SOAP_TAG_MISMATCH;
		return NULL;
	}
	soap_revert(soap);
	*soap->id = '\0';
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_xsd__anyURI_)
			return (xsd__anyURI_ *)a->soap_in(soap, tag, type);
	}
	if (!soap_in_xsd__anyURI(soap, tag, &(a->xsd__anyURI_::__item), "xsd:anyURI"))
		return NULL;
	return a;
}

int xsd__anyURI_::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	int id = soap_embed(soap, (void*)this, NULL, 0, SOAP_TYPE_xsd__anyURI_);
	if (this->soap_out(soap, tag?tag:"xsd:anyURI", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *xsd__anyURI_::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_xsd__anyURI_(soap, this, tag, type);
}

SOAP_FMAC3 xsd__anyURI_ * SOAP_FMAC4 soap_get_xsd__anyURI_(struct soap *soap, xsd__anyURI_ *p, const char *tag, const char *type)
{
	if ((p = soap_in_xsd__anyURI_(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 xsd__anyURI_ * SOAP_FMAC2 soap_instantiate_xsd__anyURI_(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_xsd__anyURI_(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_xsd__anyURI_, n, onvifevent_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = SOAP_NEW(xsd__anyURI_);
		if (size)
			*size = sizeof(xsd__anyURI_);
		((xsd__anyURI_*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = SOAP_NEW_ARRAY(xsd__anyURI_, n);
		if (size)
			*size = n * sizeof(xsd__anyURI_);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((xsd__anyURI_*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (xsd__anyURI_*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_xsd__anyURI_(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying xsd__anyURI_ %p -> %p\n", q, p));
	*(xsd__anyURI_*)p = *(xsd__anyURI_*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_xsd__anyURI(struct soap *soap, const std::string *a)
{	(void)soap; (void)a; /* appease -Wall -Werror */
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__anyURI(struct soap *soap, const char *tag, int id, const std::string *s, const char *type)
{
	if ((soap->mode & SOAP_C_NILSTRING) && s->empty())
		return soap_element_null(soap, tag, id, type);
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, s, SOAP_TYPE_xsd__anyURI), type) || soap_string_out(soap, s->c_str(), 0) || soap_element_end_out(soap, tag))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_xsd__anyURI(struct soap *soap, const char *tag, std::string *s, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!s)
		s = soap_new_std__string(soap, -1);
	if (soap->null)
		if (s)
			s->erase();
	if (soap->body && !*soap->href)
	{	char *t;
		s = (std::string*)soap_class_id_enter(soap, soap->id, s, SOAP_TYPE_xsd__anyURI, sizeof(std::string), soap->type, soap->arrayType);
		if (s)
		{	if (!(t = soap_string_in(soap, 1, 0, -1, NULL)))
				return NULL;
			s->assign(t);
		}
	}
	else
		s = (std::string*)soap_id_forward(soap, soap->href, soap_class_id_enter(soap, soap->id, s, SOAP_TYPE_xsd__anyURI, sizeof(std::string), soap->type, soap->arrayType), 0, SOAP_TYPE_xsd__anyURI, 0, sizeof(std::string), 0, soap_copy_xsd__anyURI);
	if (soap->body && soap_element_end_in(soap, tag))
		return NULL;
	return s;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_xsd__anyURI(struct soap *soap, const std::string *a, const char *tag, const char *type)
{
	int id = soap_embed(soap, (void*)a, NULL, 0, SOAP_TYPE_xsd__anyURI);
	if (soap_out_xsd__anyURI(soap, tag?tag:"xsd:anyURI", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_xsd__anyURI(struct soap *soap, std::string *p, const char *tag, const char *type)
{
	if ((p = soap_in_xsd__anyURI(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void xsd__QName_::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->xsd__anyType::soap_default(soap);
	soap_default_xsd__QName(soap, &this->xsd__QName_::__item);
}

void xsd__QName_::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_embedded(soap, &this->xsd__QName_::__item, SOAP_TYPE_xsd__QName);
	soap_serialize_xsd__QName(soap, &this->xsd__QName_::__item);
	this->xsd__anyType::soap_serialize(soap);
#endif
}

int xsd__QName_::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_xsd__QName_(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__QName_(struct soap *soap, const char *tag, int id, const xsd__QName_ *a, const char *type)
{
	std::string soap_tmp___item(soap_QName2s(soap, a->__item.c_str()));
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	return soap_out_xsd__QName(soap, tag, id, &soap_tmp___item, "xsd:QName");
}

void *xsd__QName_::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_xsd__QName_(soap, tag, this, type);
}

SOAP_FMAC3 xsd__QName_ * SOAP_FMAC4 soap_in_xsd__QName_(struct soap *soap, const char *tag, xsd__QName_ *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!(a = (xsd__QName_ *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_xsd__QName_, sizeof(xsd__QName_), soap->type, soap->arrayType)))
	{	soap->error = SOAP_TAG_MISMATCH;
		return NULL;
	}
	soap_revert(soap);
	*soap->id = '\0';
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_xsd__QName_)
			return (xsd__QName_ *)a->soap_in(soap, tag, type);
	}
	if (!soap_in_xsd__QName(soap, tag, &(a->xsd__QName_::__item), "xsd:QName"))
		return NULL;
	return a;
}

int xsd__QName_::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	int id = soap_embed(soap, (void*)this, NULL, 0, SOAP_TYPE_xsd__QName_);
	if (this->soap_out(soap, tag?tag:"xsd:QName", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *xsd__QName_::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_xsd__QName_(soap, this, tag, type);
}

SOAP_FMAC3 xsd__QName_ * SOAP_FMAC4 soap_get_xsd__QName_(struct soap *soap, xsd__QName_ *p, const char *tag, const char *type)
{
	if ((p = soap_in_xsd__QName_(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 xsd__QName_ * SOAP_FMAC2 soap_instantiate_xsd__QName_(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_xsd__QName_(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_xsd__QName_, n, onvifevent_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = SOAP_NEW(xsd__QName_);
		if (size)
			*size = sizeof(xsd__QName_);
		((xsd__QName_*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = SOAP_NEW_ARRAY(xsd__QName_, n);
		if (size)
			*size = n * sizeof(xsd__QName_);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((xsd__QName_*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (xsd__QName_*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_xsd__QName_(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying xsd__QName_ %p -> %p\n", q, p));
	*(xsd__QName_*)p = *(xsd__QName_*)q;
}

void xsd__NCName_::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->xsd__anyType::soap_default(soap);
	soap_default_xsd__NCName(soap, &this->xsd__NCName_::__item);
}

void xsd__NCName_::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_embedded(soap, &this->xsd__NCName_::__item, SOAP_TYPE_xsd__NCName);
	soap_serialize_xsd__NCName(soap, &this->xsd__NCName_::__item);
	this->xsd__anyType::soap_serialize(soap);
#endif
}

int xsd__NCName_::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_xsd__NCName_(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__NCName_(struct soap *soap, const char *tag, int id, const xsd__NCName_ *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	return soap_out_xsd__NCName(soap, tag, id, &(a->xsd__NCName_::__item), "xsd:NCName");
}

void *xsd__NCName_::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_xsd__NCName_(soap, tag, this, type);
}

SOAP_FMAC3 xsd__NCName_ * SOAP_FMAC4 soap_in_xsd__NCName_(struct soap *soap, const char *tag, xsd__NCName_ *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!(a = (xsd__NCName_ *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_xsd__NCName_, sizeof(xsd__NCName_), soap->type, soap->arrayType)))
	{	soap->error = SOAP_TAG_MISMATCH;
		return NULL;
	}
	soap_revert(soap);
	*soap->id = '\0';
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_xsd__NCName_)
			return (xsd__NCName_ *)a->soap_in(soap, tag, type);
	}
	if (!soap_in_xsd__NCName(soap, tag, &(a->xsd__NCName_::__item), "xsd:NCName"))
		return NULL;
	return a;
}

int xsd__NCName_::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	int id = soap_embed(soap, (void*)this, NULL, 0, SOAP_TYPE_xsd__NCName_);
	if (this->soap_out(soap, tag?tag:"xsd:NCName", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *xsd__NCName_::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_xsd__NCName_(soap, this, tag, type);
}

SOAP_FMAC3 xsd__NCName_ * SOAP_FMAC4 soap_get_xsd__NCName_(struct soap *soap, xsd__NCName_ *p, const char *tag, const char *type)
{
	if ((p = soap_in_xsd__NCName_(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 xsd__NCName_ * SOAP_FMAC2 soap_instantiate_xsd__NCName_(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_xsd__NCName_(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_xsd__NCName_, n, onvifevent_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = SOAP_NEW(xsd__NCName_);
		if (size)
			*size = sizeof(xsd__NCName_);
		((xsd__NCName_*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = SOAP_NEW_ARRAY(xsd__NCName_, n);
		if (size)
			*size = n * sizeof(xsd__NCName_);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((xsd__NCName_*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (xsd__NCName_*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_xsd__NCName_(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying xsd__NCName_ %p -> %p\n", q, p));
	*(xsd__NCName_*)p = *(xsd__NCName_*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_xsd__NCName(struct soap *soap, const std::string *a)
{	(void)soap; (void)a; /* appease -Wall -Werror */
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__NCName(struct soap *soap, const char *tag, int id, const std::string *s, const char *type)
{
	if ((soap->mode & SOAP_C_NILSTRING) && s->empty())
		return soap_element_null(soap, tag, id, type);
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, s, SOAP_TYPE_xsd__NCName), type) || soap_string_out(soap, s->c_str(), 0) || soap_element_end_out(soap, tag))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_xsd__NCName(struct soap *soap, const char *tag, std::string *s, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!s)
		s = soap_new_std__string(soap, -1);
	if (soap->null)
		if (s)
			s->erase();
	if (soap->body && !*soap->href)
	{	char *t;
		s = (std::string*)soap_class_id_enter(soap, soap->id, s, SOAP_TYPE_xsd__NCName, sizeof(std::string), soap->type, soap->arrayType);
		if (s)
		{	if (!(t = soap_string_in(soap, 1, 0, -1, NULL)))
				return NULL;
			s->assign(t);
		}
	}
	else
		s = (std::string*)soap_id_forward(soap, soap->href, soap_class_id_enter(soap, soap->id, s, SOAP_TYPE_xsd__NCName, sizeof(std::string), soap->type, soap->arrayType), 0, SOAP_TYPE_xsd__NCName, 0, sizeof(std::string), 0, soap_copy_xsd__NCName);
	if (soap->body && soap_element_end_in(soap, tag))
		return NULL;
	return s;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_xsd__NCName(struct soap *soap, const std::string *a, const char *tag, const char *type)
{
	int id = soap_embed(soap, (void*)a, NULL, 0, SOAP_TYPE_xsd__NCName);
	if (soap_out_xsd__NCName(soap, tag?tag:"xsd:NCName", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_xsd__NCName(struct soap *soap, std::string *p, const char *tag, const char *type)
{
	if ((p = soap_in_xsd__NCName(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_xsd__QName(struct soap *soap, std::string *p)
{
	(void)soap; /* appease -Wall -Werror */
	p->erase();
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_xsd__QName(struct soap *soap, const std::string *a)
{	(void)soap; (void)a; /* appease -Wall -Werror */
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__QName(struct soap *soap, const char *tag, int id, const std::string *s, const char *type)
{
	if ((soap->mode & SOAP_C_NILSTRING) && s->empty())
		return soap_element_null(soap, tag, id, type);
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, s, SOAP_TYPE_xsd__QName), type) || soap_string_out(soap, s->c_str(), 0) || soap_element_end_out(soap, tag))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC1 std::string * SOAP_FMAC2 soap_in_xsd__QName(struct soap *soap, const char *tag, std::string *s, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, type))
		return NULL;
	if (!s)
		s = soap_new_std__string(soap, -1);
	if (soap->null)
		if (s)
			s->erase();
	if (soap->body && !*soap->href)
	{	char *t;
		s = (std::string*)soap_class_id_enter(soap, soap->id, s, SOAP_TYPE_xsd__QName, sizeof(std::string), soap->type, soap->arrayType);
		if (s)
		{	if (!(t = soap_string_in(soap, 2, 0, -1, NULL)))
				return NULL;
			s->assign(t);
		}
	}
	else
		s = (std::string*)soap_id_forward(soap, soap->href, soap_class_id_enter(soap, soap->id, s, SOAP_TYPE_xsd__QName, sizeof(std::string), soap->type, soap->arrayType), 0, SOAP_TYPE_xsd__QName, 0, sizeof(std::string), 0, soap_copy_xsd__QName);
	if (soap->body && soap_element_end_in(soap, tag))
		return NULL;
	return s;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_xsd__QName(struct soap *soap, const std::string *a, const char *tag, const char *type)
{
	int id = soap_embed(soap, (void*)a, NULL, 0, SOAP_TYPE_xsd__QName);
	if (soap_out_xsd__QName(soap, tag?tag:"xsd:QName", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_xsd__QName(struct soap *soap, std::string *p, const char *tag, const char *type)
{
	if ((p = soap_in_xsd__QName(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 std::string * SOAP_FMAC2 soap_instantiate_xsd__QName(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_xsd__QName(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_xsd__QName, n, onvifevent_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = SOAP_NEW(std::string);
		if (size)
			*size = sizeof(std::string);
	}
	else
	{	cp->ptr = SOAP_NEW_ARRAY(std::string, n);
		if (size)
			*size = n * sizeof(std::string);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (std::string*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_xsd__QName(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying std::string %p -> %p\n", q, p));
	*(std::string*)p = *(std::string*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__string(struct soap *soap, std::string *p)
{
	(void)soap; /* appease -Wall -Werror */
	p->erase();
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__string(struct soap *soap, const std::string *a)
{	(void)soap; (void)a; /* appease -Wall -Werror */
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__string(struct soap *soap, const char *tag, int id, const std::string *s, const char *type)
{
	if ((soap->mode & SOAP_C_NILSTRING) && s->empty())
		return soap_element_null(soap, tag, id, type);
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, s, SOAP_TYPE_std__string), type) || soap_string_out(soap, s->c_str(), 0) || soap_element_end_out(soap, tag))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_std__string(struct soap *soap, const char *tag, std::string *s, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!s)
		s = soap_new_std__string(soap, -1);
	if (soap->null)
		if (s)
			s->erase();
	if (soap->body && !*soap->href)
	{	char *t;
		s = (std::string*)soap_class_id_enter(soap, soap->id, s, SOAP_TYPE_std__string, sizeof(std::string), soap->type, soap->arrayType);
		if (s)
		{	if (!(t = soap_string_in(soap, 1, 0, -1, NULL)))
				return NULL;
			s->assign(t);
		}
	}
	else
		s = (std::string*)soap_id_forward(soap, soap->href, soap_class_id_enter(soap, soap->id, s, SOAP_TYPE_std__string, sizeof(std::string), soap->type, soap->arrayType), 0, SOAP_TYPE_std__string, 0, sizeof(std::string), 0, soap_copy_std__string);
	if (soap->body && soap_element_end_in(soap, tag))
		return NULL;
	return s;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_std__string(struct soap *soap, const std::string *a, const char *tag, const char *type)
{
	int id = soap_embed(soap, (void*)a, NULL, 0, SOAP_TYPE_std__string);
	if (soap_out_std__string(soap, tag?tag:"string", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_std__string(struct soap *soap, std::string *p, const char *tag, const char *type)
{
	if ((p = soap_in_std__string(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 std::string * SOAP_FMAC2 soap_instantiate_std__string(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_std__string(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_std__string, n, onvifevent_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = SOAP_NEW(std::string);
		if (size)
			*size = sizeof(std::string);
	}
	else
	{	cp->ptr = SOAP_NEW_ARRAY(std::string, n);
		if (size)
			*size = n * sizeof(std::string);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (std::string*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__string(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying std::string %p -> %p\n", q, p));
	*(std::string*)p = *(std::string*)q;
}

void xsd__anyType::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->xsd__anyType::__item = NULL;
	/* transient soap skipped */
}

void xsd__anyType::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	/* transient soap skipped */
#endif
}

int xsd__anyType::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_xsd__anyType(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__anyType(struct soap *soap, const char *tag, int id, const xsd__anyType *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	return soap_outliteral(soap, tag, &(a->xsd__anyType::__item), NULL);
}

void *xsd__anyType::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_xsd__anyType(soap, tag, this, type);
}

SOAP_FMAC3 xsd__anyType * SOAP_FMAC4 soap_in_xsd__anyType(struct soap *soap, const char *tag, xsd__anyType *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!(a = (xsd__anyType *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_xsd__anyType, sizeof(xsd__anyType), soap->type, soap->arrayType)))
	{	soap->error = SOAP_TAG_MISMATCH;
		return NULL;
	}
	soap_revert(soap);
	*soap->id = '\0';
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_xsd__anyType)
			return (xsd__anyType *)a->soap_in(soap, tag, type);
	}
	if (!soap_inliteral(soap, tag, &(a->xsd__anyType::__item)))
		return NULL;
	return a;
}

int xsd__anyType::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	int id = soap_embed(soap, (void*)this, NULL, 0, SOAP_TYPE_xsd__anyType);
	if (this->soap_out(soap, tag?tag:"xsd:anyType", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *xsd__anyType::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_xsd__anyType(soap, this, tag, type);
}

SOAP_FMAC3 xsd__anyType * SOAP_FMAC4 soap_get_xsd__anyType(struct soap *soap, xsd__anyType *p, const char *tag, const char *type)
{
	if ((p = soap_in_xsd__anyType(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 xsd__anyType * SOAP_FMAC2 soap_instantiate_xsd__anyType(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_xsd__anyType(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_xsd__anyType, n, onvifevent_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (type && !soap_match_tag(soap, type, "xsd:NCName"))
	{	cp->type = SOAP_TYPE_xsd__NCName_;
		if (n < 0)
		{	cp->ptr = SOAP_NEW(xsd__NCName_);
			if (size)
				*size = sizeof(xsd__NCName_);
			((xsd__NCName_*)cp->ptr)->soap = soap;
		}
		else
		{	cp->ptr = SOAP_NEW_ARRAY(xsd__NCName_, n);
			if (size)
				*size = n * sizeof(xsd__NCName_);
			if (cp->ptr)
				for (int i = 0; i < n; i++)
					((xsd__NCName_*)cp->ptr)[i].soap = soap;
		}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
		if (!cp->ptr)
			soap->error = SOAP_EOM;
		return (xsd__NCName_*)cp->ptr;
	}
	if (type && !soap_match_tag(soap, type, "xsd:QName"))
	{	cp->type = SOAP_TYPE_xsd__QName_;
		if (n < 0)
		{	cp->ptr = SOAP_NEW(xsd__QName_);
			if (size)
				*size = sizeof(xsd__QName_);
			((xsd__QName_*)cp->ptr)->soap = soap;
		}
		else
		{	cp->ptr = SOAP_NEW_ARRAY(xsd__QName_, n);
			if (size)
				*size = n * sizeof(xsd__QName_);
			if (cp->ptr)
				for (int i = 0; i < n; i++)
					((xsd__QName_*)cp->ptr)[i].soap = soap;
		}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
		if (!cp->ptr)
			soap->error = SOAP_EOM;
		return (xsd__QName_*)cp->ptr;
	}
	if (type && !soap_match_tag(soap, type, "xsd:anyURI"))
	{	cp->type = SOAP_TYPE_xsd__anyURI_;
		if (n < 0)
		{	cp->ptr = SOAP_NEW(xsd__anyURI_);
			if (size)
				*size = sizeof(xsd__anyURI_);
			((xsd__anyURI_*)cp->ptr)->soap = soap;
		}
		else
		{	cp->ptr = SOAP_NEW_ARRAY(xsd__anyURI_, n);
			if (size)
				*size = n * sizeof(xsd__anyURI_);
			if (cp->ptr)
				for (int i = 0; i < n; i++)
					((xsd__anyURI_*)cp->ptr)[i].soap = soap;
		}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
		if (!cp->ptr)
			soap->error = SOAP_EOM;
		return (xsd__anyURI_*)cp->ptr;
	}
	if (type && !soap_match_tag(soap, type, "xsd:boolean"))
	{	cp->type = SOAP_TYPE_xsd__boolean;
		if (n < 0)
		{	cp->ptr = SOAP_NEW(xsd__boolean);
			if (size)
				*size = sizeof(xsd__boolean);
			((xsd__boolean*)cp->ptr)->soap = soap;
		}
		else
		{	cp->ptr = SOAP_NEW_ARRAY(xsd__boolean, n);
			if (size)
				*size = n * sizeof(xsd__boolean);
			if (cp->ptr)
				for (int i = 0; i < n; i++)
					((xsd__boolean*)cp->ptr)[i].soap = soap;
		}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
		if (!cp->ptr)
			soap->error = SOAP_EOM;
		return (xsd__boolean*)cp->ptr;
	}
	if (type && !soap_match_tag(soap, type, "xsd:dateTime"))
	{	cp->type = SOAP_TYPE_xsd__dateTime;
		if (n < 0)
		{	cp->ptr = SOAP_NEW(xsd__dateTime);
			if (size)
				*size = sizeof(xsd__dateTime);
			((xsd__dateTime*)cp->ptr)->soap = soap;
		}
		else
		{	cp->ptr = SOAP_NEW_ARRAY(xsd__dateTime, n);
			if (size)
				*size = n * sizeof(xsd__dateTime);
			if (cp->ptr)
				for (int i = 0; i < n; i++)
					((xsd__dateTime*)cp->ptr)[i].soap = soap;
		}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
		if (!cp->ptr)
			soap->error = SOAP_EOM;
		return (xsd__dateTime*)cp->ptr;
	}
	if (type && !soap_match_tag(soap, type, "xsd:duration"))
	{	cp->type = SOAP_TYPE_xsd__duration_;
		if (n < 0)
		{	cp->ptr = SOAP_NEW(xsd__duration_);
			if (size)
				*size = sizeof(xsd__duration_);
			((xsd__duration_*)cp->ptr)->soap = soap;
		}
		else
		{	cp->ptr = SOAP_NEW_ARRAY(xsd__duration_, n);
			if (size)
				*size = n * sizeof(xsd__duration_);
			if (cp->ptr)
				for (int i = 0; i < n; i++)
					((xsd__duration_*)cp->ptr)[i].soap = soap;
		}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
		if (!cp->ptr)
			soap->error = SOAP_EOM;
		return (xsd__duration_*)cp->ptr;
	}
	if (type && !soap_match_tag(soap, type, "xsd:int"))
	{	cp->type = SOAP_TYPE_xsd__int;
		if (n < 0)
		{	cp->ptr = SOAP_NEW(xsd__int);
			if (size)
				*size = sizeof(xsd__int);
			((xsd__int*)cp->ptr)->soap = soap;
		}
		else
		{	cp->ptr = SOAP_NEW_ARRAY(xsd__int, n);
			if (size)
				*size = n * sizeof(xsd__int);
			if (cp->ptr)
				for (int i = 0; i < n; i++)
					((xsd__int*)cp->ptr)[i].soap = soap;
		}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
		if (!cp->ptr)
			soap->error = SOAP_EOM;
		return (xsd__int*)cp->ptr;
	}
	if (type && !soap_match_tag(soap, type, "xsd:nonNegativeInteger"))
	{	cp->type = SOAP_TYPE_xsd__nonNegativeInteger_;
		if (n < 0)
		{	cp->ptr = SOAP_NEW(xsd__nonNegativeInteger_);
			if (size)
				*size = sizeof(xsd__nonNegativeInteger_);
			((xsd__nonNegativeInteger_*)cp->ptr)->soap = soap;
		}
		else
		{	cp->ptr = SOAP_NEW_ARRAY(xsd__nonNegativeInteger_, n);
			if (size)
				*size = n * sizeof(xsd__nonNegativeInteger_);
			if (cp->ptr)
				for (int i = 0; i < n; i++)
					((xsd__nonNegativeInteger_*)cp->ptr)[i].soap = soap;
		}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
		if (!cp->ptr)
			soap->error = SOAP_EOM;
		return (xsd__nonNegativeInteger_*)cp->ptr;
	}
	if (type && !soap_match_tag(soap, type, "xsd:string"))
	{	cp->type = SOAP_TYPE_xsd__string;
		if (n < 0)
		{	cp->ptr = SOAP_NEW(xsd__string);
			if (size)
				*size = sizeof(xsd__string);
			((xsd__string*)cp->ptr)->soap = soap;
		}
		else
		{	cp->ptr = SOAP_NEW_ARRAY(xsd__string, n);
			if (size)
				*size = n * sizeof(xsd__string);
			if (cp->ptr)
				for (int i = 0; i < n; i++)
					((xsd__string*)cp->ptr)[i].soap = soap;
		}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
		if (!cp->ptr)
			soap->error = SOAP_EOM;
		return (xsd__string*)cp->ptr;
	}
	if (type && !soap_match_tag(soap, type, "xsd:token"))
	{	cp->type = SOAP_TYPE_xsd__token_;
		if (n < 0)
		{	cp->ptr = SOAP_NEW(xsd__token_);
			if (size)
				*size = sizeof(xsd__token_);
			((xsd__token_*)cp->ptr)->soap = soap;
		}
		else
		{	cp->ptr = SOAP_NEW_ARRAY(xsd__token_, n);
			if (size)
				*size = n * sizeof(xsd__token_);
			if (cp->ptr)
				for (int i = 0; i < n; i++)
					((xsd__token_*)cp->ptr)[i].soap = soap;
		}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
		if (!cp->ptr)
			soap->error = SOAP_EOM;
		return (xsd__token_*)cp->ptr;
	}
	if (type && !soap_match_tag(soap, type, "wstop:FullTopicExpression"))
	{	cp->type = SOAP_TYPE_wstop__FullTopicExpression__;
		if (n < 0)
		{	cp->ptr = SOAP_NEW(wstop__FullTopicExpression__);
			if (size)
				*size = sizeof(wstop__FullTopicExpression__);
			((wstop__FullTopicExpression__*)cp->ptr)->soap = soap;
		}
		else
		{	cp->ptr = SOAP_NEW_ARRAY(wstop__FullTopicExpression__, n);
			if (size)
				*size = n * sizeof(wstop__FullTopicExpression__);
			if (cp->ptr)
				for (int i = 0; i < n; i++)
					((wstop__FullTopicExpression__*)cp->ptr)[i].soap = soap;
		}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
		if (!cp->ptr)
			soap->error = SOAP_EOM;
		return (wstop__FullTopicExpression__*)cp->ptr;
	}
	if (type && !soap_match_tag(soap, type, "wstop:ConcreteTopicExpression"))
	{	cp->type = SOAP_TYPE_wstop__ConcreteTopicExpression__;
		if (n < 0)
		{	cp->ptr = SOAP_NEW(wstop__ConcreteTopicExpression__);
			if (size)
				*size = sizeof(wstop__ConcreteTopicExpression__);
			((wstop__ConcreteTopicExpression__*)cp->ptr)->soap = soap;
		}
		else
		{	cp->ptr = SOAP_NEW_ARRAY(wstop__ConcreteTopicExpression__, n);
			if (size)
				*size = n * sizeof(wstop__ConcreteTopicExpression__);
			if (cp->ptr)
				for (int i = 0; i < n; i++)
					((wstop__ConcreteTopicExpression__*)cp->ptr)[i].soap = soap;
		}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
		if (!cp->ptr)
			soap->error = SOAP_EOM;
		return (wstop__ConcreteTopicExpression__*)cp->ptr;
	}
	if (type && !soap_match_tag(soap, type, "wstop:SimpleTopicExpression"))
	{	cp->type = SOAP_TYPE_wstop__SimpleTopicExpression__;
		if (n < 0)
		{	cp->ptr = SOAP_NEW(wstop__SimpleTopicExpression__);
			if (size)
				*size = sizeof(wstop__SimpleTopicExpression__);
			((wstop__SimpleTopicExpression__*)cp->ptr)->soap = soap;
		}
		else
		{	cp->ptr = SOAP_NEW_ARRAY(wstop__SimpleTopicExpression__, n);
			if (size)
				*size = n * sizeof(wstop__SimpleTopicExpression__);
			if (cp->ptr)
				for (int i = 0; i < n; i++)
					((wstop__SimpleTopicExpression__*)cp->ptr)[i].soap = soap;
		}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
		if (!cp->ptr)
			soap->error = SOAP_EOM;
		return (wstop__SimpleTopicExpression__*)cp->ptr;
	}
	if (type && !soap_match_tag(soap, type, "eventws:Capabilities"))
	{	cp->type = SOAP_TYPE_eventws__Capabilities;
		if (n < 0)
		{	cp->ptr = SOAP_NEW(eventws__Capabilities);
			if (size)
				*size = sizeof(eventws__Capabilities);
			((eventws__Capabilities*)cp->ptr)->soap = soap;
		}
		else
		{	cp->ptr = SOAP_NEW_ARRAY(eventws__Capabilities, n);
			if (size)
				*size = n * sizeof(eventws__Capabilities);
			if (cp->ptr)
				for (int i = 0; i < n; i++)
					((eventws__Capabilities*)cp->ptr)[i].soap = soap;
		}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
		if (!cp->ptr)
			soap->error = SOAP_EOM;
		return (eventws__Capabilities*)cp->ptr;
	}
	if (type && !soap_match_tag(soap, type, "eventws:SubscriptionPolicy"))
	{	cp->type = SOAP_TYPE_eventws__SubscriptionPolicy;
		if (n < 0)
		{	cp->ptr = SOAP_NEW(eventws__SubscriptionPolicy);
			if (size)
				*size = sizeof(eventws__SubscriptionPolicy);
			((eventws__SubscriptionPolicy*)cp->ptr)->soap = soap;
		}
		else
		{	cp->ptr = SOAP_NEW_ARRAY(eventws__SubscriptionPolicy, n);
			if (size)
				*size = n * sizeof(eventws__SubscriptionPolicy);
			if (cp->ptr)
				for (int i = 0; i < n; i++)
					((eventws__SubscriptionPolicy*)cp->ptr)[i].soap = soap;
		}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
		if (!cp->ptr)
			soap->error = SOAP_EOM;
		return (eventws__SubscriptionPolicy*)cp->ptr;
	}
	if (type && !soap_match_tag(soap, type, "wsrfbf:BaseFaultType"))
	{	cp->type = SOAP_TYPE_wsrfbf__BaseFaultType;
		if (n < 0)
		{	cp->ptr = SOAP_NEW(wsrfbf__BaseFaultType);
			if (size)
				*size = sizeof(wsrfbf__BaseFaultType);
			((wsrfbf__BaseFaultType*)cp->ptr)->soap = soap;
		}
		else
		{	cp->ptr = SOAP_NEW_ARRAY(wsrfbf__BaseFaultType, n);
			if (size)
				*size = n * sizeof(wsrfbf__BaseFaultType);
			if (cp->ptr)
				for (int i = 0; i < n; i++)
					((wsrfbf__BaseFaultType*)cp->ptr)[i].soap = soap;
		}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
		if (!cp->ptr)
			soap->error = SOAP_EOM;
		return (wsrfbf__BaseFaultType*)cp->ptr;
	}
	if (type && !soap_match_tag(soap, type, "wsnt:QueryExpressionType"))
	{	cp->type = SOAP_TYPE_wsnt__QueryExpressionType;
		if (n < 0)
		{	cp->ptr = SOAP_NEW(wsnt__QueryExpressionType);
			if (size)
				*size = sizeof(wsnt__QueryExpressionType);
			((wsnt__QueryExpressionType*)cp->ptr)->soap = soap;
		}
		else
		{	cp->ptr = SOAP_NEW_ARRAY(wsnt__QueryExpressionType, n);
			if (size)
				*size = n * sizeof(wsnt__QueryExpressionType);
			if (cp->ptr)
				for (int i = 0; i < n; i++)
					((wsnt__QueryExpressionType*)cp->ptr)[i].soap = soap;
		}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
		if (!cp->ptr)
			soap->error = SOAP_EOM;
		return (wsnt__QueryExpressionType*)cp->ptr;
	}
	if (type && !soap_match_tag(soap, type, "wsnt:TopicExpressionType"))
	{	cp->type = SOAP_TYPE_wsnt__TopicExpressionType;
		if (n < 0)
		{	cp->ptr = SOAP_NEW(wsnt__TopicExpressionType);
			if (size)
				*size = sizeof(wsnt__TopicExpressionType);
			((wsnt__TopicExpressionType*)cp->ptr)->soap = soap;
		}
		else
		{	cp->ptr = SOAP_NEW_ARRAY(wsnt__TopicExpressionType, n);
			if (size)
				*size = n * sizeof(wsnt__TopicExpressionType);
			if (cp->ptr)
				for (int i = 0; i < n; i++)
					((wsnt__TopicExpressionType*)cp->ptr)[i].soap = soap;
		}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
		if (!cp->ptr)
			soap->error = SOAP_EOM;
		return (wsnt__TopicExpressionType*)cp->ptr;
	}
	if (type && !soap_match_tag(soap, type, "wsnt:FilterType"))
	{	cp->type = SOAP_TYPE_wsnt__FilterType;
		if (n < 0)
		{	cp->ptr = SOAP_NEW(wsnt__FilterType);
			if (size)
				*size = sizeof(wsnt__FilterType);
			((wsnt__FilterType*)cp->ptr)->soap = soap;
		}
		else
		{	cp->ptr = SOAP_NEW_ARRAY(wsnt__FilterType, n);
			if (size)
				*size = n * sizeof(wsnt__FilterType);
			if (cp->ptr)
				for (int i = 0; i < n; i++)
					((wsnt__FilterType*)cp->ptr)[i].soap = soap;
		}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
		if (!cp->ptr)
			soap->error = SOAP_EOM;
		return (wsnt__FilterType*)cp->ptr;
	}
	if (type && !soap_match_tag(soap, type, "wsnt:SubscriptionPolicyType"))
	{	cp->type = SOAP_TYPE_wsnt__SubscriptionPolicyType;
		if (n < 0)
		{	cp->ptr = SOAP_NEW(wsnt__SubscriptionPolicyType);
			if (size)
				*size = sizeof(wsnt__SubscriptionPolicyType);
			((wsnt__SubscriptionPolicyType*)cp->ptr)->soap = soap;
		}
		else
		{	cp->ptr = SOAP_NEW_ARRAY(wsnt__SubscriptionPolicyType, n);
			if (size)
				*size = n * sizeof(wsnt__SubscriptionPolicyType);
			if (cp->ptr)
				for (int i = 0; i < n; i++)
					((wsnt__SubscriptionPolicyType*)cp->ptr)[i].soap = soap;
		}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
		if (!cp->ptr)
			soap->error = SOAP_EOM;
		return (wsnt__SubscriptionPolicyType*)cp->ptr;
	}
	if (type && !soap_match_tag(soap, type, "wsnt:NotificationMessageHolderType"))
	{	cp->type = SOAP_TYPE_wsnt__NotificationMessageHolderType;
		if (n < 0)
		{	cp->ptr = SOAP_NEW(wsnt__NotificationMessageHolderType);
			if (size)
				*size = sizeof(wsnt__NotificationMessageHolderType);
			((wsnt__NotificationMessageHolderType*)cp->ptr)->soap = soap;
		}
		else
		{	cp->ptr = SOAP_NEW_ARRAY(wsnt__NotificationMessageHolderType, n);
			if (size)
				*size = n * sizeof(wsnt__NotificationMessageHolderType);
			if (cp->ptr)
				for (int i = 0; i < n; i++)
					((wsnt__NotificationMessageHolderType*)cp->ptr)[i].soap = soap;
		}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
		if (!cp->ptr)
			soap->error = SOAP_EOM;
		return (wsnt__NotificationMessageHolderType*)cp->ptr;
	}
	if (type && !soap_match_tag(soap, type, "wstop:Documentation"))
	{	cp->type = SOAP_TYPE_wstop__Documentation;
		if (n < 0)
		{	cp->ptr = SOAP_NEW(wstop__Documentation);
			if (size)
				*size = sizeof(wstop__Documentation);
			((wstop__Documentation*)cp->ptr)->soap = soap;
		}
		else
		{	cp->ptr = SOAP_NEW_ARRAY(wstop__Documentation, n);
			if (size)
				*size = n * sizeof(wstop__Documentation);
			if (cp->ptr)
				for (int i = 0; i < n; i++)
					((wstop__Documentation*)cp->ptr)[i].soap = soap;
		}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
		if (!cp->ptr)
			soap->error = SOAP_EOM;
		return (wstop__Documentation*)cp->ptr;
	}
	if (type && !soap_match_tag(soap, type, "wstop:ExtensibleDocumented"))
	{	cp->type = SOAP_TYPE_wstop__ExtensibleDocumented;
		if (n < 0)
		{	cp->ptr = SOAP_NEW(wstop__ExtensibleDocumented);
			if (size)
				*size = sizeof(wstop__ExtensibleDocumented);
			((wstop__ExtensibleDocumented*)cp->ptr)->soap = soap;
		}
		else
		{	cp->ptr = SOAP_NEW_ARRAY(wstop__ExtensibleDocumented, n);
			if (size)
				*size = n * sizeof(wstop__ExtensibleDocumented);
			if (cp->ptr)
				for (int i = 0; i < n; i++)
					((wstop__ExtensibleDocumented*)cp->ptr)[i].soap = soap;
		}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
		if (!cp->ptr)
			soap->error = SOAP_EOM;
		return (wstop__ExtensibleDocumented*)cp->ptr;
	}
	if (type && !soap_match_tag(soap, type, "wstop:QueryExpressionType"))
	{	cp->type = SOAP_TYPE_wstop__QueryExpressionType;
		if (n < 0)
		{	cp->ptr = SOAP_NEW(wstop__QueryExpressionType);
			if (size)
				*size = sizeof(wstop__QueryExpressionType);
			((wstop__QueryExpressionType*)cp->ptr)->soap = soap;
		}
		else
		{	cp->ptr = SOAP_NEW_ARRAY(wstop__QueryExpressionType, n);
			if (size)
				*size = n * sizeof(wstop__QueryExpressionType);
			if (cp->ptr)
				for (int i = 0; i < n; i++)
					((wstop__QueryExpressionType*)cp->ptr)[i].soap = soap;
		}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
		if (!cp->ptr)
			soap->error = SOAP_EOM;
		return (wstop__QueryExpressionType*)cp->ptr;
	}
	if (type && !soap_match_tag(soap, type, "wsrfr:ResourceUnknownFaultType"))
	{	cp->type = SOAP_TYPE_wsrfr__ResourceUnknownFaultType;
		if (n < 0)
		{	cp->ptr = SOAP_NEW(wsrfr__ResourceUnknownFaultType);
			if (size)
				*size = sizeof(wsrfr__ResourceUnknownFaultType);
			((wsrfr__ResourceUnknownFaultType*)cp->ptr)->soap = soap;
		}
		else
		{	cp->ptr = SOAP_NEW_ARRAY(wsrfr__ResourceUnknownFaultType, n);
			if (size)
				*size = n * sizeof(wsrfr__ResourceUnknownFaultType);
			if (cp->ptr)
				for (int i = 0; i < n; i++)
					((wsrfr__ResourceUnknownFaultType*)cp->ptr)[i].soap = soap;
		}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
		if (!cp->ptr)
			soap->error = SOAP_EOM;
		return (wsrfr__ResourceUnknownFaultType*)cp->ptr;
	}
	if (type && !soap_match_tag(soap, type, "wsrfr:ResourceUnavailableFaultType"))
	{	cp->type = SOAP_TYPE_wsrfr__ResourceUnavailableFaultType;
		if (n < 0)
		{	cp->ptr = SOAP_NEW(wsrfr__ResourceUnavailableFaultType);
			if (size)
				*size = sizeof(wsrfr__ResourceUnavailableFaultType);
			((wsrfr__ResourceUnavailableFaultType*)cp->ptr)->soap = soap;
		}
		else
		{	cp->ptr = SOAP_NEW_ARRAY(wsrfr__ResourceUnavailableFaultType, n);
			if (size)
				*size = n * sizeof(wsrfr__ResourceUnavailableFaultType);
			if (cp->ptr)
				for (int i = 0; i < n; i++)
					((wsrfr__ResourceUnavailableFaultType*)cp->ptr)[i].soap = soap;
		}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
		if (!cp->ptr)
			soap->error = SOAP_EOM;
		return (wsrfr__ResourceUnavailableFaultType*)cp->ptr;
	}
	if (type && !soap_match_tag(soap, type, "wsnt:SubscribeCreationFailedFaultType"))
	{	cp->type = SOAP_TYPE_wsnt__SubscribeCreationFailedFaultType;
		if (n < 0)
		{	cp->ptr = SOAP_NEW(wsnt__SubscribeCreationFailedFaultType);
			if (size)
				*size = sizeof(wsnt__SubscribeCreationFailedFaultType);
			((wsnt__SubscribeCreationFailedFaultType*)cp->ptr)->soap = soap;
		}
		else
		{	cp->ptr = SOAP_NEW_ARRAY(wsnt__SubscribeCreationFailedFaultType, n);
			if (size)
				*size = n * sizeof(wsnt__SubscribeCreationFailedFaultType);
			if (cp->ptr)
				for (int i = 0; i < n; i++)
					((wsnt__SubscribeCreationFailedFaultType*)cp->ptr)[i].soap = soap;
		}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
		if (!cp->ptr)
			soap->error = SOAP_EOM;
		return (wsnt__SubscribeCreationFailedFaultType*)cp->ptr;
	}
	if (type && !soap_match_tag(soap, type, "wsnt:InvalidFilterFaultType"))
	{	cp->type = SOAP_TYPE_wsnt__InvalidFilterFaultType;
		if (n < 0)
		{	cp->ptr = SOAP_NEW(wsnt__InvalidFilterFaultType);
			if (size)
				*size = sizeof(wsnt__InvalidFilterFaultType);
			((wsnt__InvalidFilterFaultType*)cp->ptr)->soap = soap;
		}
		else
		{	cp->ptr = SOAP_NEW_ARRAY(wsnt__InvalidFilterFaultType, n);
			if (size)
				*size = n * sizeof(wsnt__InvalidFilterFaultType);
			if (cp->ptr)
				for (int i = 0; i < n; i++)
					((wsnt__InvalidFilterFaultType*)cp->ptr)[i].soap = soap;
		}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
		if (!cp->ptr)
			soap->error = SOAP_EOM;
		return (wsnt__InvalidFilterFaultType*)cp->ptr;
	}
	if (type && !soap_match_tag(soap, type, "wsnt:TopicExpressionDialectUnknownFaultType"))
	{	cp->type = SOAP_TYPE_wsnt__TopicExpressionDialectUnknownFaultType;
		if (n < 0)
		{	cp->ptr = SOAP_NEW(wsnt__TopicExpressionDialectUnknownFaultType);
			if (size)
				*size = sizeof(wsnt__TopicExpressionDialectUnknownFaultType);
			((wsnt__TopicExpressionDialectUnknownFaultType*)cp->ptr)->soap = soap;
		}
		else
		{	cp->ptr = SOAP_NEW_ARRAY(wsnt__TopicExpressionDialectUnknownFaultType, n);
			if (size)
				*size = n * sizeof(wsnt__TopicExpressionDialectUnknownFaultType);
			if (cp->ptr)
				for (int i = 0; i < n; i++)
					((wsnt__TopicExpressionDialectUnknownFaultType*)cp->ptr)[i].soap = soap;
		}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
		if (!cp->ptr)
			soap->error = SOAP_EOM;
		return (wsnt__TopicExpressionDialectUnknownFaultType*)cp->ptr;
	}
	if (type && !soap_match_tag(soap, type, "wsnt:InvalidTopicExpressionFaultType"))
	{	cp->type = SOAP_TYPE_wsnt__InvalidTopicExpressionFaultType;
		if (n < 0)
		{	cp->ptr = SOAP_NEW(wsnt__InvalidTopicExpressionFaultType);
			if (size)
				*size = sizeof(wsnt__InvalidTopicExpressionFaultType);
			((wsnt__InvalidTopicExpressionFaultType*)cp->ptr)->soap = soap;
		}
		else
		{	cp->ptr = SOAP_NEW_ARRAY(wsnt__InvalidTopicExpressionFaultType, n);
			if (size)
				*size = n * sizeof(wsnt__InvalidTopicExpressionFaultType);
			if (cp->ptr)
				for (int i = 0; i < n; i++)
					((wsnt__InvalidTopicExpressionFaultType*)cp->ptr)[i].soap = soap;
		}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
		if (!cp->ptr)
			soap->error = SOAP_EOM;
		return (wsnt__InvalidTopicExpressionFaultType*)cp->ptr;
	}
	if (type && !soap_match_tag(soap, type, "wsnt:TopicNotSupportedFaultType"))
	{	cp->type = SOAP_TYPE_wsnt__TopicNotSupportedFaultType;
		if (n < 0)
		{	cp->ptr = SOAP_NEW(wsnt__TopicNotSupportedFaultType);
			if (size)
				*size = sizeof(wsnt__TopicNotSupportedFaultType);
			((wsnt__TopicNotSupportedFaultType*)cp->ptr)->soap = soap;
		}
		else
		{	cp->ptr = SOAP_NEW_ARRAY(wsnt__TopicNotSupportedFaultType, n);
			if (size)
				*size = n * sizeof(wsnt__TopicNotSupportedFaultType);
			if (cp->ptr)
				for (int i = 0; i < n; i++)
					((wsnt__TopicNotSupportedFaultType*)cp->ptr)[i].soap = soap;
		}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
		if (!cp->ptr)
			soap->error = SOAP_EOM;
		return (wsnt__TopicNotSupportedFaultType*)cp->ptr;
	}
	if (type && !soap_match_tag(soap, type, "wsnt:MultipleTopicsSpecifiedFaultType"))
	{	cp->type = SOAP_TYPE_wsnt__MultipleTopicsSpecifiedFaultType;
		if (n < 0)
		{	cp->ptr = SOAP_NEW(wsnt__MultipleTopicsSpecifiedFaultType);
			if (size)
				*size = sizeof(wsnt__MultipleTopicsSpecifiedFaultType);
			((wsnt__MultipleTopicsSpecifiedFaultType*)cp->ptr)->soap = soap;
		}
		else
		{	cp->ptr = SOAP_NEW_ARRAY(wsnt__MultipleTopicsSpecifiedFaultType, n);
			if (size)
				*size = n * sizeof(wsnt__MultipleTopicsSpecifiedFaultType);
			if (cp->ptr)
				for (int i = 0; i < n; i++)
					((wsnt__MultipleTopicsSpecifiedFaultType*)cp->ptr)[i].soap = soap;
		}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
		if (!cp->ptr)
			soap->error = SOAP_EOM;
		return (wsnt__MultipleTopicsSpecifiedFaultType*)cp->ptr;
	}
	if (type && !soap_match_tag(soap, type, "wsnt:InvalidProducerPropertiesExpressionFaultType"))
	{	cp->type = SOAP_TYPE_wsnt__InvalidProducerPropertiesExpressionFaultType;
		if (n < 0)
		{	cp->ptr = SOAP_NEW(wsnt__InvalidProducerPropertiesExpressionFaultType);
			if (size)
				*size = sizeof(wsnt__InvalidProducerPropertiesExpressionFaultType);
			((wsnt__InvalidProducerPropertiesExpressionFaultType*)cp->ptr)->soap = soap;
		}
		else
		{	cp->ptr = SOAP_NEW_ARRAY(wsnt__InvalidProducerPropertiesExpressionFaultType, n);
			if (size)
				*size = n * sizeof(wsnt__InvalidProducerPropertiesExpressionFaultType);
			if (cp->ptr)
				for (int i = 0; i < n; i++)
					((wsnt__InvalidProducerPropertiesExpressionFaultType*)cp->ptr)[i].soap = soap;
		}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
		if (!cp->ptr)
			soap->error = SOAP_EOM;
		return (wsnt__InvalidProducerPropertiesExpressionFaultType*)cp->ptr;
	}
	if (type && !soap_match_tag(soap, type, "wsnt:InvalidMessageContentExpressionFaultType"))
	{	cp->type = SOAP_TYPE_wsnt__InvalidMessageContentExpressionFaultType;
		if (n < 0)
		{	cp->ptr = SOAP_NEW(wsnt__InvalidMessageContentExpressionFaultType);
			if (size)
				*size = sizeof(wsnt__InvalidMessageContentExpressionFaultType);
			((wsnt__InvalidMessageContentExpressionFaultType*)cp->ptr)->soap = soap;
		}
		else
		{	cp->ptr = SOAP_NEW_ARRAY(wsnt__InvalidMessageContentExpressionFaultType, n);
			if (size)
				*size = n * sizeof(wsnt__InvalidMessageContentExpressionFaultType);
			if (cp->ptr)
				for (int i = 0; i < n; i++)
					((wsnt__InvalidMessageContentExpressionFaultType*)cp->ptr)[i].soap = soap;
		}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
		if (!cp->ptr)
			soap->error = SOAP_EOM;
		return (wsnt__InvalidMessageContentExpressionFaultType*)cp->ptr;
	}
	if (type && !soap_match_tag(soap, type, "wsnt:UnrecognizedPolicyRequestFaultType"))
	{	cp->type = SOAP_TYPE_wsnt__UnrecognizedPolicyRequestFaultType;
		if (n < 0)
		{	cp->ptr = SOAP_NEW(wsnt__UnrecognizedPolicyRequestFaultType);
			if (size)
				*size = sizeof(wsnt__UnrecognizedPolicyRequestFaultType);
			((wsnt__UnrecognizedPolicyRequestFaultType*)cp->ptr)->soap = soap;
		}
		else
		{	cp->ptr = SOAP_NEW_ARRAY(wsnt__UnrecognizedPolicyRequestFaultType, n);
			if (size)
				*size = n * sizeof(wsnt__UnrecognizedPolicyRequestFaultType);
			if (cp->ptr)
				for (int i = 0; i < n; i++)
					((wsnt__UnrecognizedPolicyRequestFaultType*)cp->ptr)[i].soap = soap;
		}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
		if (!cp->ptr)
			soap->error = SOAP_EOM;
		return (wsnt__UnrecognizedPolicyRequestFaultType*)cp->ptr;
	}
	if (type && !soap_match_tag(soap, type, "wsnt:UnsupportedPolicyRequestFaultType"))
	{	cp->type = SOAP_TYPE_wsnt__UnsupportedPolicyRequestFaultType;
		if (n < 0)
		{	cp->ptr = SOAP_NEW(wsnt__UnsupportedPolicyRequestFaultType);
			if (size)
				*size = sizeof(wsnt__UnsupportedPolicyRequestFaultType);
			((wsnt__UnsupportedPolicyRequestFaultType*)cp->ptr)->soap = soap;
		}
		else
		{	cp->ptr = SOAP_NEW_ARRAY(wsnt__UnsupportedPolicyRequestFaultType, n);
			if (size)
				*size = n * sizeof(wsnt__UnsupportedPolicyRequestFaultType);
			if (cp->ptr)
				for (int i = 0; i < n; i++)
					((wsnt__UnsupportedPolicyRequestFaultType*)cp->ptr)[i].soap = soap;
		}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
		if (!cp->ptr)
			soap->error = SOAP_EOM;
		return (wsnt__UnsupportedPolicyRequestFaultType*)cp->ptr;
	}
	if (type && !soap_match_tag(soap, type, "wsnt:NotifyMessageNotSupportedFaultType"))
	{	cp->type = SOAP_TYPE_wsnt__NotifyMessageNotSupportedFaultType;
		if (n < 0)
		{	cp->ptr = SOAP_NEW(wsnt__NotifyMessageNotSupportedFaultType);
			if (size)
				*size = sizeof(wsnt__NotifyMessageNotSupportedFaultType);
			((wsnt__NotifyMessageNotSupportedFaultType*)cp->ptr)->soap = soap;
		}
		else
		{	cp->ptr = SOAP_NEW_ARRAY(wsnt__NotifyMessageNotSupportedFaultType, n);
			if (size)
				*size = n * sizeof(wsnt__NotifyMessageNotSupportedFaultType);
			if (cp->ptr)
				for (int i = 0; i < n; i++)
					((wsnt__NotifyMessageNotSupportedFaultType*)cp->ptr)[i].soap = soap;
		}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
		if (!cp->ptr)
			soap->error = SOAP_EOM;
		return (wsnt__NotifyMessageNotSupportedFaultType*)cp->ptr;
	}
	if (type && !soap_match_tag(soap, type, "wsnt:UnacceptableInitialTerminationTimeFaultType"))
	{	cp->type = SOAP_TYPE_wsnt__UnacceptableInitialTerminationTimeFaultType;
		if (n < 0)
		{	cp->ptr = SOAP_NEW(wsnt__UnacceptableInitialTerminationTimeFaultType);
			if (size)
				*size = sizeof(wsnt__UnacceptableInitialTerminationTimeFaultType);
			((wsnt__UnacceptableInitialTerminationTimeFaultType*)cp->ptr)->soap = soap;
		}
		else
		{	cp->ptr = SOAP_NEW_ARRAY(wsnt__UnacceptableInitialTerminationTimeFaultType, n);
			if (size)
				*size = n * sizeof(wsnt__UnacceptableInitialTerminationTimeFaultType);
			if (cp->ptr)
				for (int i = 0; i < n; i++)
					((wsnt__UnacceptableInitialTerminationTimeFaultType*)cp->ptr)[i].soap = soap;
		}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
		if (!cp->ptr)
			soap->error = SOAP_EOM;
		return (wsnt__UnacceptableInitialTerminationTimeFaultType*)cp->ptr;
	}
	if (type && !soap_match_tag(soap, type, "wsnt:NoCurrentMessageOnTopicFaultType"))
	{	cp->type = SOAP_TYPE_wsnt__NoCurrentMessageOnTopicFaultType;
		if (n < 0)
		{	cp->ptr = SOAP_NEW(wsnt__NoCurrentMessageOnTopicFaultType);
			if (size)
				*size = sizeof(wsnt__NoCurrentMessageOnTopicFaultType);
			((wsnt__NoCurrentMessageOnTopicFaultType*)cp->ptr)->soap = soap;
		}
		else
		{	cp->ptr = SOAP_NEW_ARRAY(wsnt__NoCurrentMessageOnTopicFaultType, n);
			if (size)
				*size = n * sizeof(wsnt__NoCurrentMessageOnTopicFaultType);
			if (cp->ptr)
				for (int i = 0; i < n; i++)
					((wsnt__NoCurrentMessageOnTopicFaultType*)cp->ptr)[i].soap = soap;
		}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
		if (!cp->ptr)
			soap->error = SOAP_EOM;
		return (wsnt__NoCurrentMessageOnTopicFaultType*)cp->ptr;
	}
	if (type && !soap_match_tag(soap, type, "wsnt:UnableToGetMessagesFaultType"))
	{	cp->type = SOAP_TYPE_wsnt__UnableToGetMessagesFaultType;
		if (n < 0)
		{	cp->ptr = SOAP_NEW(wsnt__UnableToGetMessagesFaultType);
			if (size)
				*size = sizeof(wsnt__UnableToGetMessagesFaultType);
			((wsnt__UnableToGetMessagesFaultType*)cp->ptr)->soap = soap;
		}
		else
		{	cp->ptr = SOAP_NEW_ARRAY(wsnt__UnableToGetMessagesFaultType, n);
			if (size)
				*size = n * sizeof(wsnt__UnableToGetMessagesFaultType);
			if (cp->ptr)
				for (int i = 0; i < n; i++)
					((wsnt__UnableToGetMessagesFaultType*)cp->ptr)[i].soap = soap;
		}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
		if (!cp->ptr)
			soap->error = SOAP_EOM;
		return (wsnt__UnableToGetMessagesFaultType*)cp->ptr;
	}
	if (type && !soap_match_tag(soap, type, "wsnt:UnableToDestroyPullPointFaultType"))
	{	cp->type = SOAP_TYPE_wsnt__UnableToDestroyPullPointFaultType;
		if (n < 0)
		{	cp->ptr = SOAP_NEW(wsnt__UnableToDestroyPullPointFaultType);
			if (size)
				*size = sizeof(wsnt__UnableToDestroyPullPointFaultType);
			((wsnt__UnableToDestroyPullPointFaultType*)cp->ptr)->soap = soap;
		}
		else
		{	cp->ptr = SOAP_NEW_ARRAY(wsnt__UnableToDestroyPullPointFaultType, n);
			if (size)
				*size = n * sizeof(wsnt__UnableToDestroyPullPointFaultType);
			if (cp->ptr)
				for (int i = 0; i < n; i++)
					((wsnt__UnableToDestroyPullPointFaultType*)cp->ptr)[i].soap = soap;
		}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
		if (!cp->ptr)
			soap->error = SOAP_EOM;
		return (wsnt__UnableToDestroyPullPointFaultType*)cp->ptr;
	}
	if (type && !soap_match_tag(soap, type, "wsnt:UnableToCreatePullPointFaultType"))
	{	cp->type = SOAP_TYPE_wsnt__UnableToCreatePullPointFaultType;
		if (n < 0)
		{	cp->ptr = SOAP_NEW(wsnt__UnableToCreatePullPointFaultType);
			if (size)
				*size = sizeof(wsnt__UnableToCreatePullPointFaultType);
			((wsnt__UnableToCreatePullPointFaultType*)cp->ptr)->soap = soap;
		}
		else
		{	cp->ptr = SOAP_NEW_ARRAY(wsnt__UnableToCreatePullPointFaultType, n);
			if (size)
				*size = n * sizeof(wsnt__UnableToCreatePullPointFaultType);
			if (cp->ptr)
				for (int i = 0; i < n; i++)
					((wsnt__UnableToCreatePullPointFaultType*)cp->ptr)[i].soap = soap;
		}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
		if (!cp->ptr)
			soap->error = SOAP_EOM;
		return (wsnt__UnableToCreatePullPointFaultType*)cp->ptr;
	}
	if (type && !soap_match_tag(soap, type, "wsnt:UnacceptableTerminationTimeFaultType"))
	{	cp->type = SOAP_TYPE_wsnt__UnacceptableTerminationTimeFaultType;
		if (n < 0)
		{	cp->ptr = SOAP_NEW(wsnt__UnacceptableTerminationTimeFaultType);
			if (size)
				*size = sizeof(wsnt__UnacceptableTerminationTimeFaultType);
			((wsnt__UnacceptableTerminationTimeFaultType*)cp->ptr)->soap = soap;
		}
		else
		{	cp->ptr = SOAP_NEW_ARRAY(wsnt__UnacceptableTerminationTimeFaultType, n);
			if (size)
				*size = n * sizeof(wsnt__UnacceptableTerminationTimeFaultType);
			if (cp->ptr)
				for (int i = 0; i < n; i++)
					((wsnt__UnacceptableTerminationTimeFaultType*)cp->ptr)[i].soap = soap;
		}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
		if (!cp->ptr)
			soap->error = SOAP_EOM;
		return (wsnt__UnacceptableTerminationTimeFaultType*)cp->ptr;
	}
	if (type && !soap_match_tag(soap, type, "wsnt:UnableToDestroySubscriptionFaultType"))
	{	cp->type = SOAP_TYPE_wsnt__UnableToDestroySubscriptionFaultType;
		if (n < 0)
		{	cp->ptr = SOAP_NEW(wsnt__UnableToDestroySubscriptionFaultType);
			if (size)
				*size = sizeof(wsnt__UnableToDestroySubscriptionFaultType);
			((wsnt__UnableToDestroySubscriptionFaultType*)cp->ptr)->soap = soap;
		}
		else
		{	cp->ptr = SOAP_NEW_ARRAY(wsnt__UnableToDestroySubscriptionFaultType, n);
			if (size)
				*size = n * sizeof(wsnt__UnableToDestroySubscriptionFaultType);
			if (cp->ptr)
				for (int i = 0; i < n; i++)
					((wsnt__UnableToDestroySubscriptionFaultType*)cp->ptr)[i].soap = soap;
		}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
		if (!cp->ptr)
			soap->error = SOAP_EOM;
		return (wsnt__UnableToDestroySubscriptionFaultType*)cp->ptr;
	}
	if (type && !soap_match_tag(soap, type, "wsnt:PauseFailedFaultType"))
	{	cp->type = SOAP_TYPE_wsnt__PauseFailedFaultType;
		if (n < 0)
		{	cp->ptr = SOAP_NEW(wsnt__PauseFailedFaultType);
			if (size)
				*size = sizeof(wsnt__PauseFailedFaultType);
			((wsnt__PauseFailedFaultType*)cp->ptr)->soap = soap;
		}
		else
		{	cp->ptr = SOAP_NEW_ARRAY(wsnt__PauseFailedFaultType, n);
			if (size)
				*size = n * sizeof(wsnt__PauseFailedFaultType);
			if (cp->ptr)
				for (int i = 0; i < n; i++)
					((wsnt__PauseFailedFaultType*)cp->ptr)[i].soap = soap;
		}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
		if (!cp->ptr)
			soap->error = SOAP_EOM;
		return (wsnt__PauseFailedFaultType*)cp->ptr;
	}
	if (type && !soap_match_tag(soap, type, "wsnt:ResumeFailedFaultType"))
	{	cp->type = SOAP_TYPE_wsnt__ResumeFailedFaultType;
		if (n < 0)
		{	cp->ptr = SOAP_NEW(wsnt__ResumeFailedFaultType);
			if (size)
				*size = sizeof(wsnt__ResumeFailedFaultType);
			((wsnt__ResumeFailedFaultType*)cp->ptr)->soap = soap;
		}
		else
		{	cp->ptr = SOAP_NEW_ARRAY(wsnt__ResumeFailedFaultType, n);
			if (size)
				*size = n * sizeof(wsnt__ResumeFailedFaultType);
			if (cp->ptr)
				for (int i = 0; i < n; i++)
					((wsnt__ResumeFailedFaultType*)cp->ptr)[i].soap = soap;
		}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
		if (!cp->ptr)
			soap->error = SOAP_EOM;
		return (wsnt__ResumeFailedFaultType*)cp->ptr;
	}
	if (type && !soap_match_tag(soap, type, "wstop:TopicNamespaceType"))
	{	cp->type = SOAP_TYPE_wstop__TopicNamespaceType;
		if (n < 0)
		{	cp->ptr = SOAP_NEW(wstop__TopicNamespaceType);
			if (size)
				*size = sizeof(wstop__TopicNamespaceType);
			((wstop__TopicNamespaceType*)cp->ptr)->soap = soap;
		}
		else
		{	cp->ptr = SOAP_NEW_ARRAY(wstop__TopicNamespaceType, n);
			if (size)
				*size = n * sizeof(wstop__TopicNamespaceType);
			if (cp->ptr)
				for (int i = 0; i < n; i++)
					((wstop__TopicNamespaceType*)cp->ptr)[i].soap = soap;
		}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
		if (!cp->ptr)
			soap->error = SOAP_EOM;
		return (wstop__TopicNamespaceType*)cp->ptr;
	}
	if (type && !soap_match_tag(soap, type, "wstop:TopicType"))
	{	cp->type = SOAP_TYPE_wstop__TopicType;
		if (n < 0)
		{	cp->ptr = SOAP_NEW(wstop__TopicType);
			if (size)
				*size = sizeof(wstop__TopicType);
			((wstop__TopicType*)cp->ptr)->soap = soap;
		}
		else
		{	cp->ptr = SOAP_NEW_ARRAY(wstop__TopicType, n);
			if (size)
				*size = n * sizeof(wstop__TopicType);
			if (cp->ptr)
				for (int i = 0; i < n; i++)
					((wstop__TopicType*)cp->ptr)[i].soap = soap;
		}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
		if (!cp->ptr)
			soap->error = SOAP_EOM;
		return (wstop__TopicType*)cp->ptr;
	}
	if (type && !soap_match_tag(soap, type, "wstop:TopicSetType"))
	{	cp->type = SOAP_TYPE_wstop__TopicSetType;
		if (n < 0)
		{	cp->ptr = SOAP_NEW(wstop__TopicSetType);
			if (size)
				*size = sizeof(wstop__TopicSetType);
			((wstop__TopicSetType*)cp->ptr)->soap = soap;
		}
		else
		{	cp->ptr = SOAP_NEW_ARRAY(wstop__TopicSetType, n);
			if (size)
				*size = n * sizeof(wstop__TopicSetType);
			if (cp->ptr)
				for (int i = 0; i < n; i++)
					((wstop__TopicSetType*)cp->ptr)[i].soap = soap;
		}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
		if (!cp->ptr)
			soap->error = SOAP_EOM;
		return (wstop__TopicSetType*)cp->ptr;
	}
	if (n < 0)
	{	cp->ptr = SOAP_NEW(xsd__anyType);
		if (size)
			*size = sizeof(xsd__anyType);
		((xsd__anyType*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = SOAP_NEW_ARRAY(xsd__anyType, n);
		if (size)
			*size = n * sizeof(xsd__anyType);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((xsd__anyType*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (xsd__anyType*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_xsd__anyType(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying xsd__anyType %p -> %p\n", q, p));
	*(xsd__anyType*)p = *(xsd__anyType*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___eventws__ResumeSubscription(struct soap *soap, struct __eventws__ResumeSubscription *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->wsnt__ResumeSubscription = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___eventws__ResumeSubscription(struct soap *soap, const struct __eventws__ResumeSubscription *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTo_wsnt__ResumeSubscription(soap, &a->wsnt__ResumeSubscription);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___eventws__ResumeSubscription(struct soap *soap, const char *tag, int id, const struct __eventws__ResumeSubscription *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_out_PointerTo_wsnt__ResumeSubscription(soap, "wsnt:ResumeSubscription", -1, &a->wsnt__ResumeSubscription, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __eventws__ResumeSubscription * SOAP_FMAC4 soap_in___eventws__ResumeSubscription(struct soap *soap, const char *tag, struct __eventws__ResumeSubscription *a, const char *type)
{
	size_t soap_flag_wsnt__ResumeSubscription = 1;
	short soap_flag;
	(void)tag; (void)type; /* appease -Wall -Werror */
	a = (struct __eventws__ResumeSubscription *)soap_id_enter(soap, "", a, SOAP_TYPE___eventws__ResumeSubscription, sizeof(struct __eventws__ResumeSubscription), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___eventws__ResumeSubscription(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_wsnt__ResumeSubscription && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_wsnt__ResumeSubscription(soap, "wsnt:ResumeSubscription", &a->wsnt__ResumeSubscription, ""))
				{	soap_flag_wsnt__ResumeSubscription--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___eventws__ResumeSubscription(struct soap *soap, const struct __eventws__ResumeSubscription *a, const char *tag, const char *type)
{
	int id = 0;
	if (soap_out___eventws__ResumeSubscription(soap, tag?tag:"-eventws:ResumeSubscription", id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __eventws__ResumeSubscription * SOAP_FMAC4 soap_get___eventws__ResumeSubscription(struct soap *soap, struct __eventws__ResumeSubscription *p, const char *tag, const char *type)
{
	if ((p = soap_in___eventws__ResumeSubscription(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct __eventws__ResumeSubscription * SOAP_FMAC2 soap_instantiate___eventws__ResumeSubscription(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___eventws__ResumeSubscription(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___eventws__ResumeSubscription, n, onvifevent_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = SOAP_NEW(struct __eventws__ResumeSubscription);
		if (size)
			*size = sizeof(struct __eventws__ResumeSubscription);
	}
	else
	{	cp->ptr = SOAP_NEW_ARRAY(struct __eventws__ResumeSubscription, n);
		if (size)
			*size = n * sizeof(struct __eventws__ResumeSubscription);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct __eventws__ResumeSubscription*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___eventws__ResumeSubscription(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __eventws__ResumeSubscription %p -> %p\n", q, p));
	*(struct __eventws__ResumeSubscription*)p = *(struct __eventws__ResumeSubscription*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___eventws__PauseSubscription(struct soap *soap, struct __eventws__PauseSubscription *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->wsnt__PauseSubscription = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___eventws__PauseSubscription(struct soap *soap, const struct __eventws__PauseSubscription *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTo_wsnt__PauseSubscription(soap, &a->wsnt__PauseSubscription);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___eventws__PauseSubscription(struct soap *soap, const char *tag, int id, const struct __eventws__PauseSubscription *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_out_PointerTo_wsnt__PauseSubscription(soap, "wsnt:PauseSubscription", -1, &a->wsnt__PauseSubscription, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __eventws__PauseSubscription * SOAP_FMAC4 soap_in___eventws__PauseSubscription(struct soap *soap, const char *tag, struct __eventws__PauseSubscription *a, const char *type)
{
	size_t soap_flag_wsnt__PauseSubscription = 1;
	short soap_flag;
	(void)tag; (void)type; /* appease -Wall -Werror */
	a = (struct __eventws__PauseSubscription *)soap_id_enter(soap, "", a, SOAP_TYPE___eventws__PauseSubscription, sizeof(struct __eventws__PauseSubscription), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___eventws__PauseSubscription(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_wsnt__PauseSubscription && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_wsnt__PauseSubscription(soap, "wsnt:PauseSubscription", &a->wsnt__PauseSubscription, ""))
				{	soap_flag_wsnt__PauseSubscription--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___eventws__PauseSubscription(struct soap *soap, const struct __eventws__PauseSubscription *a, const char *tag, const char *type)
{
	int id = 0;
	if (soap_out___eventws__PauseSubscription(soap, tag?tag:"-eventws:PauseSubscription", id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __eventws__PauseSubscription * SOAP_FMAC4 soap_get___eventws__PauseSubscription(struct soap *soap, struct __eventws__PauseSubscription *p, const char *tag, const char *type)
{
	if ((p = soap_in___eventws__PauseSubscription(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct __eventws__PauseSubscription * SOAP_FMAC2 soap_instantiate___eventws__PauseSubscription(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___eventws__PauseSubscription(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___eventws__PauseSubscription, n, onvifevent_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = SOAP_NEW(struct __eventws__PauseSubscription);
		if (size)
			*size = sizeof(struct __eventws__PauseSubscription);
	}
	else
	{	cp->ptr = SOAP_NEW_ARRAY(struct __eventws__PauseSubscription, n);
		if (size)
			*size = n * sizeof(struct __eventws__PauseSubscription);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct __eventws__PauseSubscription*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___eventws__PauseSubscription(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __eventws__PauseSubscription %p -> %p\n", q, p));
	*(struct __eventws__PauseSubscription*)p = *(struct __eventws__PauseSubscription*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___eventws__Unsubscribe_(struct soap *soap, struct __eventws__Unsubscribe_ *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->wsnt__Unsubscribe = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___eventws__Unsubscribe_(struct soap *soap, const struct __eventws__Unsubscribe_ *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTo_wsnt__Unsubscribe(soap, &a->wsnt__Unsubscribe);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___eventws__Unsubscribe_(struct soap *soap, const char *tag, int id, const struct __eventws__Unsubscribe_ *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_out_PointerTo_wsnt__Unsubscribe(soap, "wsnt:Unsubscribe", -1, &a->wsnt__Unsubscribe, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __eventws__Unsubscribe_ * SOAP_FMAC4 soap_in___eventws__Unsubscribe_(struct soap *soap, const char *tag, struct __eventws__Unsubscribe_ *a, const char *type)
{
	size_t soap_flag_wsnt__Unsubscribe = 1;
	short soap_flag;
	(void)tag; (void)type; /* appease -Wall -Werror */
	a = (struct __eventws__Unsubscribe_ *)soap_id_enter(soap, "", a, SOAP_TYPE___eventws__Unsubscribe_, sizeof(struct __eventws__Unsubscribe_), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___eventws__Unsubscribe_(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_wsnt__Unsubscribe && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_wsnt__Unsubscribe(soap, "wsnt:Unsubscribe", &a->wsnt__Unsubscribe, ""))
				{	soap_flag_wsnt__Unsubscribe--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___eventws__Unsubscribe_(struct soap *soap, const struct __eventws__Unsubscribe_ *a, const char *tag, const char *type)
{
	int id = 0;
	if (soap_out___eventws__Unsubscribe_(soap, tag?tag:"-eventws:Unsubscribe", id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __eventws__Unsubscribe_ * SOAP_FMAC4 soap_get___eventws__Unsubscribe_(struct soap *soap, struct __eventws__Unsubscribe_ *p, const char *tag, const char *type)
{
	if ((p = soap_in___eventws__Unsubscribe_(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct __eventws__Unsubscribe_ * SOAP_FMAC2 soap_instantiate___eventws__Unsubscribe_(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___eventws__Unsubscribe_(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___eventws__Unsubscribe_, n, onvifevent_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = SOAP_NEW(struct __eventws__Unsubscribe_);
		if (size)
			*size = sizeof(struct __eventws__Unsubscribe_);
	}
	else
	{	cp->ptr = SOAP_NEW_ARRAY(struct __eventws__Unsubscribe_, n);
		if (size)
			*size = n * sizeof(struct __eventws__Unsubscribe_);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct __eventws__Unsubscribe_*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___eventws__Unsubscribe_(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __eventws__Unsubscribe_ %p -> %p\n", q, p));
	*(struct __eventws__Unsubscribe_*)p = *(struct __eventws__Unsubscribe_*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___eventws__Renew_(struct soap *soap, struct __eventws__Renew_ *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->wsnt__Renew = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___eventws__Renew_(struct soap *soap, const struct __eventws__Renew_ *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTo_wsnt__Renew(soap, &a->wsnt__Renew);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___eventws__Renew_(struct soap *soap, const char *tag, int id, const struct __eventws__Renew_ *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_out_PointerTo_wsnt__Renew(soap, "wsnt:Renew", -1, &a->wsnt__Renew, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __eventws__Renew_ * SOAP_FMAC4 soap_in___eventws__Renew_(struct soap *soap, const char *tag, struct __eventws__Renew_ *a, const char *type)
{
	size_t soap_flag_wsnt__Renew = 1;
	short soap_flag;
	(void)tag; (void)type; /* appease -Wall -Werror */
	a = (struct __eventws__Renew_ *)soap_id_enter(soap, "", a, SOAP_TYPE___eventws__Renew_, sizeof(struct __eventws__Renew_), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___eventws__Renew_(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_wsnt__Renew && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_wsnt__Renew(soap, "wsnt:Renew", &a->wsnt__Renew, ""))
				{	soap_flag_wsnt__Renew--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___eventws__Renew_(struct soap *soap, const struct __eventws__Renew_ *a, const char *tag, const char *type)
{
	int id = 0;
	if (soap_out___eventws__Renew_(soap, tag?tag:"-eventws:Renew", id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __eventws__Renew_ * SOAP_FMAC4 soap_get___eventws__Renew_(struct soap *soap, struct __eventws__Renew_ *p, const char *tag, const char *type)
{
	if ((p = soap_in___eventws__Renew_(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct __eventws__Renew_ * SOAP_FMAC2 soap_instantiate___eventws__Renew_(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___eventws__Renew_(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___eventws__Renew_, n, onvifevent_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = SOAP_NEW(struct __eventws__Renew_);
		if (size)
			*size = sizeof(struct __eventws__Renew_);
	}
	else
	{	cp->ptr = SOAP_NEW_ARRAY(struct __eventws__Renew_, n);
		if (size)
			*size = n * sizeof(struct __eventws__Renew_);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct __eventws__Renew_*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___eventws__Renew_(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __eventws__Renew_ %p -> %p\n", q, p));
	*(struct __eventws__Renew_*)p = *(struct __eventws__Renew_*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___eventws__CreatePullPoint(struct soap *soap, struct __eventws__CreatePullPoint *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->wsnt__CreatePullPoint = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___eventws__CreatePullPoint(struct soap *soap, const struct __eventws__CreatePullPoint *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTo_wsnt__CreatePullPoint(soap, &a->wsnt__CreatePullPoint);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___eventws__CreatePullPoint(struct soap *soap, const char *tag, int id, const struct __eventws__CreatePullPoint *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_out_PointerTo_wsnt__CreatePullPoint(soap, "wsnt:CreatePullPoint", -1, &a->wsnt__CreatePullPoint, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __eventws__CreatePullPoint * SOAP_FMAC4 soap_in___eventws__CreatePullPoint(struct soap *soap, const char *tag, struct __eventws__CreatePullPoint *a, const char *type)
{
	size_t soap_flag_wsnt__CreatePullPoint = 1;
	short soap_flag;
	(void)tag; (void)type; /* appease -Wall -Werror */
	a = (struct __eventws__CreatePullPoint *)soap_id_enter(soap, "", a, SOAP_TYPE___eventws__CreatePullPoint, sizeof(struct __eventws__CreatePullPoint), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___eventws__CreatePullPoint(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_wsnt__CreatePullPoint && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_wsnt__CreatePullPoint(soap, "wsnt:CreatePullPoint", &a->wsnt__CreatePullPoint, ""))
				{	soap_flag_wsnt__CreatePullPoint--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___eventws__CreatePullPoint(struct soap *soap, const struct __eventws__CreatePullPoint *a, const char *tag, const char *type)
{
	int id = 0;
	if (soap_out___eventws__CreatePullPoint(soap, tag?tag:"-eventws:CreatePullPoint", id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __eventws__CreatePullPoint * SOAP_FMAC4 soap_get___eventws__CreatePullPoint(struct soap *soap, struct __eventws__CreatePullPoint *p, const char *tag, const char *type)
{
	if ((p = soap_in___eventws__CreatePullPoint(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct __eventws__CreatePullPoint * SOAP_FMAC2 soap_instantiate___eventws__CreatePullPoint(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___eventws__CreatePullPoint(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___eventws__CreatePullPoint, n, onvifevent_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = SOAP_NEW(struct __eventws__CreatePullPoint);
		if (size)
			*size = sizeof(struct __eventws__CreatePullPoint);
	}
	else
	{	cp->ptr = SOAP_NEW_ARRAY(struct __eventws__CreatePullPoint, n);
		if (size)
			*size = n * sizeof(struct __eventws__CreatePullPoint);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct __eventws__CreatePullPoint*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___eventws__CreatePullPoint(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __eventws__CreatePullPoint %p -> %p\n", q, p));
	*(struct __eventws__CreatePullPoint*)p = *(struct __eventws__CreatePullPoint*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___eventws__Notify_(struct soap *soap, struct __eventws__Notify_ *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->wsnt__Notify = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___eventws__Notify_(struct soap *soap, const struct __eventws__Notify_ *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTo_wsnt__Notify(soap, &a->wsnt__Notify);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___eventws__Notify_(struct soap *soap, const char *tag, int id, const struct __eventws__Notify_ *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_out_PointerTo_wsnt__Notify(soap, "wsnt:Notify", -1, &a->wsnt__Notify, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __eventws__Notify_ * SOAP_FMAC4 soap_in___eventws__Notify_(struct soap *soap, const char *tag, struct __eventws__Notify_ *a, const char *type)
{
	size_t soap_flag_wsnt__Notify = 1;
	short soap_flag;
	(void)tag; (void)type; /* appease -Wall -Werror */
	a = (struct __eventws__Notify_ *)soap_id_enter(soap, "", a, SOAP_TYPE___eventws__Notify_, sizeof(struct __eventws__Notify_), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___eventws__Notify_(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_wsnt__Notify && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_wsnt__Notify(soap, "wsnt:Notify", &a->wsnt__Notify, ""))
				{	soap_flag_wsnt__Notify--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___eventws__Notify_(struct soap *soap, const struct __eventws__Notify_ *a, const char *tag, const char *type)
{
	int id = 0;
	if (soap_out___eventws__Notify_(soap, tag?tag:"-eventws:Notify", id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __eventws__Notify_ * SOAP_FMAC4 soap_get___eventws__Notify_(struct soap *soap, struct __eventws__Notify_ *p, const char *tag, const char *type)
{
	if ((p = soap_in___eventws__Notify_(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct __eventws__Notify_ * SOAP_FMAC2 soap_instantiate___eventws__Notify_(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___eventws__Notify_(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___eventws__Notify_, n, onvifevent_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = SOAP_NEW(struct __eventws__Notify_);
		if (size)
			*size = sizeof(struct __eventws__Notify_);
	}
	else
	{	cp->ptr = SOAP_NEW_ARRAY(struct __eventws__Notify_, n);
		if (size)
			*size = n * sizeof(struct __eventws__Notify_);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct __eventws__Notify_*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___eventws__Notify_(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __eventws__Notify_ %p -> %p\n", q, p));
	*(struct __eventws__Notify_*)p = *(struct __eventws__Notify_*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___eventws__DestroyPullPoint(struct soap *soap, struct __eventws__DestroyPullPoint *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->wsnt__DestroyPullPoint = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___eventws__DestroyPullPoint(struct soap *soap, const struct __eventws__DestroyPullPoint *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTo_wsnt__DestroyPullPoint(soap, &a->wsnt__DestroyPullPoint);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___eventws__DestroyPullPoint(struct soap *soap, const char *tag, int id, const struct __eventws__DestroyPullPoint *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_out_PointerTo_wsnt__DestroyPullPoint(soap, "wsnt:DestroyPullPoint", -1, &a->wsnt__DestroyPullPoint, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __eventws__DestroyPullPoint * SOAP_FMAC4 soap_in___eventws__DestroyPullPoint(struct soap *soap, const char *tag, struct __eventws__DestroyPullPoint *a, const char *type)
{
	size_t soap_flag_wsnt__DestroyPullPoint = 1;
	short soap_flag;
	(void)tag; (void)type; /* appease -Wall -Werror */
	a = (struct __eventws__DestroyPullPoint *)soap_id_enter(soap, "", a, SOAP_TYPE___eventws__DestroyPullPoint, sizeof(struct __eventws__DestroyPullPoint), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___eventws__DestroyPullPoint(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_wsnt__DestroyPullPoint && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_wsnt__DestroyPullPoint(soap, "wsnt:DestroyPullPoint", &a->wsnt__DestroyPullPoint, ""))
				{	soap_flag_wsnt__DestroyPullPoint--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___eventws__DestroyPullPoint(struct soap *soap, const struct __eventws__DestroyPullPoint *a, const char *tag, const char *type)
{
	int id = 0;
	if (soap_out___eventws__DestroyPullPoint(soap, tag?tag:"-eventws:DestroyPullPoint", id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __eventws__DestroyPullPoint * SOAP_FMAC4 soap_get___eventws__DestroyPullPoint(struct soap *soap, struct __eventws__DestroyPullPoint *p, const char *tag, const char *type)
{
	if ((p = soap_in___eventws__DestroyPullPoint(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct __eventws__DestroyPullPoint * SOAP_FMAC2 soap_instantiate___eventws__DestroyPullPoint(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___eventws__DestroyPullPoint(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___eventws__DestroyPullPoint, n, onvifevent_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = SOAP_NEW(struct __eventws__DestroyPullPoint);
		if (size)
			*size = sizeof(struct __eventws__DestroyPullPoint);
	}
	else
	{	cp->ptr = SOAP_NEW_ARRAY(struct __eventws__DestroyPullPoint, n);
		if (size)
			*size = n * sizeof(struct __eventws__DestroyPullPoint);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct __eventws__DestroyPullPoint*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___eventws__DestroyPullPoint(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __eventws__DestroyPullPoint %p -> %p\n", q, p));
	*(struct __eventws__DestroyPullPoint*)p = *(struct __eventws__DestroyPullPoint*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___eventws__GetMessages(struct soap *soap, struct __eventws__GetMessages *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->wsnt__GetMessages = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___eventws__GetMessages(struct soap *soap, const struct __eventws__GetMessages *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTo_wsnt__GetMessages(soap, &a->wsnt__GetMessages);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___eventws__GetMessages(struct soap *soap, const char *tag, int id, const struct __eventws__GetMessages *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_out_PointerTo_wsnt__GetMessages(soap, "wsnt:GetMessages", -1, &a->wsnt__GetMessages, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __eventws__GetMessages * SOAP_FMAC4 soap_in___eventws__GetMessages(struct soap *soap, const char *tag, struct __eventws__GetMessages *a, const char *type)
{
	size_t soap_flag_wsnt__GetMessages = 1;
	short soap_flag;
	(void)tag; (void)type; /* appease -Wall -Werror */
	a = (struct __eventws__GetMessages *)soap_id_enter(soap, "", a, SOAP_TYPE___eventws__GetMessages, sizeof(struct __eventws__GetMessages), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___eventws__GetMessages(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_wsnt__GetMessages && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_wsnt__GetMessages(soap, "wsnt:GetMessages", &a->wsnt__GetMessages, ""))
				{	soap_flag_wsnt__GetMessages--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___eventws__GetMessages(struct soap *soap, const struct __eventws__GetMessages *a, const char *tag, const char *type)
{
	int id = 0;
	if (soap_out___eventws__GetMessages(soap, tag?tag:"-eventws:GetMessages", id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __eventws__GetMessages * SOAP_FMAC4 soap_get___eventws__GetMessages(struct soap *soap, struct __eventws__GetMessages *p, const char *tag, const char *type)
{
	if ((p = soap_in___eventws__GetMessages(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct __eventws__GetMessages * SOAP_FMAC2 soap_instantiate___eventws__GetMessages(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___eventws__GetMessages(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___eventws__GetMessages, n, onvifevent_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = SOAP_NEW(struct __eventws__GetMessages);
		if (size)
			*size = sizeof(struct __eventws__GetMessages);
	}
	else
	{	cp->ptr = SOAP_NEW_ARRAY(struct __eventws__GetMessages, n);
		if (size)
			*size = n * sizeof(struct __eventws__GetMessages);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct __eventws__GetMessages*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___eventws__GetMessages(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __eventws__GetMessages %p -> %p\n", q, p));
	*(struct __eventws__GetMessages*)p = *(struct __eventws__GetMessages*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___eventws__Notify(struct soap *soap, struct __eventws__Notify *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->wsnt__Notify = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___eventws__Notify(struct soap *soap, const struct __eventws__Notify *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTo_wsnt__Notify(soap, &a->wsnt__Notify);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___eventws__Notify(struct soap *soap, const char *tag, int id, const struct __eventws__Notify *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_out_PointerTo_wsnt__Notify(soap, "wsnt:Notify", -1, &a->wsnt__Notify, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __eventws__Notify * SOAP_FMAC4 soap_in___eventws__Notify(struct soap *soap, const char *tag, struct __eventws__Notify *a, const char *type)
{
	size_t soap_flag_wsnt__Notify = 1;
	short soap_flag;
	(void)tag; (void)type; /* appease -Wall -Werror */
	a = (struct __eventws__Notify *)soap_id_enter(soap, "", a, SOAP_TYPE___eventws__Notify, sizeof(struct __eventws__Notify), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___eventws__Notify(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_wsnt__Notify && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_wsnt__Notify(soap, "wsnt:Notify", &a->wsnt__Notify, ""))
				{	soap_flag_wsnt__Notify--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___eventws__Notify(struct soap *soap, const struct __eventws__Notify *a, const char *tag, const char *type)
{
	int id = 0;
	if (soap_out___eventws__Notify(soap, tag?tag:"-eventws:Notify", id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __eventws__Notify * SOAP_FMAC4 soap_get___eventws__Notify(struct soap *soap, struct __eventws__Notify *p, const char *tag, const char *type)
{
	if ((p = soap_in___eventws__Notify(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct __eventws__Notify * SOAP_FMAC2 soap_instantiate___eventws__Notify(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___eventws__Notify(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___eventws__Notify, n, onvifevent_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = SOAP_NEW(struct __eventws__Notify);
		if (size)
			*size = sizeof(struct __eventws__Notify);
	}
	else
	{	cp->ptr = SOAP_NEW_ARRAY(struct __eventws__Notify, n);
		if (size)
			*size = n * sizeof(struct __eventws__Notify);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct __eventws__Notify*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___eventws__Notify(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __eventws__Notify %p -> %p\n", q, p));
	*(struct __eventws__Notify*)p = *(struct __eventws__Notify*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___eventws__GetCurrentMessage(struct soap *soap, struct __eventws__GetCurrentMessage *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->wsnt__GetCurrentMessage = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___eventws__GetCurrentMessage(struct soap *soap, const struct __eventws__GetCurrentMessage *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTo_wsnt__GetCurrentMessage(soap, &a->wsnt__GetCurrentMessage);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___eventws__GetCurrentMessage(struct soap *soap, const char *tag, int id, const struct __eventws__GetCurrentMessage *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_out_PointerTo_wsnt__GetCurrentMessage(soap, "wsnt:GetCurrentMessage", -1, &a->wsnt__GetCurrentMessage, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __eventws__GetCurrentMessage * SOAP_FMAC4 soap_in___eventws__GetCurrentMessage(struct soap *soap, const char *tag, struct __eventws__GetCurrentMessage *a, const char *type)
{
	size_t soap_flag_wsnt__GetCurrentMessage = 1;
	short soap_flag;
	(void)tag; (void)type; /* appease -Wall -Werror */
	a = (struct __eventws__GetCurrentMessage *)soap_id_enter(soap, "", a, SOAP_TYPE___eventws__GetCurrentMessage, sizeof(struct __eventws__GetCurrentMessage), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___eventws__GetCurrentMessage(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_wsnt__GetCurrentMessage && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_wsnt__GetCurrentMessage(soap, "wsnt:GetCurrentMessage", &a->wsnt__GetCurrentMessage, ""))
				{	soap_flag_wsnt__GetCurrentMessage--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___eventws__GetCurrentMessage(struct soap *soap, const struct __eventws__GetCurrentMessage *a, const char *tag, const char *type)
{
	int id = 0;
	if (soap_out___eventws__GetCurrentMessage(soap, tag?tag:"-eventws:GetCurrentMessage", id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __eventws__GetCurrentMessage * SOAP_FMAC4 soap_get___eventws__GetCurrentMessage(struct soap *soap, struct __eventws__GetCurrentMessage *p, const char *tag, const char *type)
{
	if ((p = soap_in___eventws__GetCurrentMessage(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct __eventws__GetCurrentMessage * SOAP_FMAC2 soap_instantiate___eventws__GetCurrentMessage(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___eventws__GetCurrentMessage(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___eventws__GetCurrentMessage, n, onvifevent_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = SOAP_NEW(struct __eventws__GetCurrentMessage);
		if (size)
			*size = sizeof(struct __eventws__GetCurrentMessage);
	}
	else
	{	cp->ptr = SOAP_NEW_ARRAY(struct __eventws__GetCurrentMessage, n);
		if (size)
			*size = n * sizeof(struct __eventws__GetCurrentMessage);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct __eventws__GetCurrentMessage*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___eventws__GetCurrentMessage(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __eventws__GetCurrentMessage %p -> %p\n", q, p));
	*(struct __eventws__GetCurrentMessage*)p = *(struct __eventws__GetCurrentMessage*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___eventws__Subscribe(struct soap *soap, struct __eventws__Subscribe *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->wsnt__Subscribe = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___eventws__Subscribe(struct soap *soap, const struct __eventws__Subscribe *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTo_wsnt__Subscribe(soap, &a->wsnt__Subscribe);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___eventws__Subscribe(struct soap *soap, const char *tag, int id, const struct __eventws__Subscribe *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_out_PointerTo_wsnt__Subscribe(soap, "wsnt:Subscribe", -1, &a->wsnt__Subscribe, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __eventws__Subscribe * SOAP_FMAC4 soap_in___eventws__Subscribe(struct soap *soap, const char *tag, struct __eventws__Subscribe *a, const char *type)
{
	size_t soap_flag_wsnt__Subscribe = 1;
	short soap_flag;
	(void)tag; (void)type; /* appease -Wall -Werror */
	a = (struct __eventws__Subscribe *)soap_id_enter(soap, "", a, SOAP_TYPE___eventws__Subscribe, sizeof(struct __eventws__Subscribe), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___eventws__Subscribe(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_wsnt__Subscribe && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_wsnt__Subscribe(soap, "wsnt:Subscribe", &a->wsnt__Subscribe, ""))
				{	soap_flag_wsnt__Subscribe--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___eventws__Subscribe(struct soap *soap, const struct __eventws__Subscribe *a, const char *tag, const char *type)
{
	int id = 0;
	if (soap_out___eventws__Subscribe(soap, tag?tag:"-eventws:Subscribe", id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __eventws__Subscribe * SOAP_FMAC4 soap_get___eventws__Subscribe(struct soap *soap, struct __eventws__Subscribe *p, const char *tag, const char *type)
{
	if ((p = soap_in___eventws__Subscribe(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct __eventws__Subscribe * SOAP_FMAC2 soap_instantiate___eventws__Subscribe(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___eventws__Subscribe(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___eventws__Subscribe, n, onvifevent_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = SOAP_NEW(struct __eventws__Subscribe);
		if (size)
			*size = sizeof(struct __eventws__Subscribe);
	}
	else
	{	cp->ptr = SOAP_NEW_ARRAY(struct __eventws__Subscribe, n);
		if (size)
			*size = n * sizeof(struct __eventws__Subscribe);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct __eventws__Subscribe*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___eventws__Subscribe(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __eventws__Subscribe %p -> %p\n", q, p));
	*(struct __eventws__Subscribe*)p = *(struct __eventws__Subscribe*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___eventws__Unsubscribe(struct soap *soap, struct __eventws__Unsubscribe *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->wsnt__Unsubscribe = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___eventws__Unsubscribe(struct soap *soap, const struct __eventws__Unsubscribe *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTo_wsnt__Unsubscribe(soap, &a->wsnt__Unsubscribe);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___eventws__Unsubscribe(struct soap *soap, const char *tag, int id, const struct __eventws__Unsubscribe *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_out_PointerTo_wsnt__Unsubscribe(soap, "wsnt:Unsubscribe", -1, &a->wsnt__Unsubscribe, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __eventws__Unsubscribe * SOAP_FMAC4 soap_in___eventws__Unsubscribe(struct soap *soap, const char *tag, struct __eventws__Unsubscribe *a, const char *type)
{
	size_t soap_flag_wsnt__Unsubscribe = 1;
	short soap_flag;
	(void)tag; (void)type; /* appease -Wall -Werror */
	a = (struct __eventws__Unsubscribe *)soap_id_enter(soap, "", a, SOAP_TYPE___eventws__Unsubscribe, sizeof(struct __eventws__Unsubscribe), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___eventws__Unsubscribe(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_wsnt__Unsubscribe && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_wsnt__Unsubscribe(soap, "wsnt:Unsubscribe", &a->wsnt__Unsubscribe, ""))
				{	soap_flag_wsnt__Unsubscribe--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___eventws__Unsubscribe(struct soap *soap, const struct __eventws__Unsubscribe *a, const char *tag, const char *type)
{
	int id = 0;
	if (soap_out___eventws__Unsubscribe(soap, tag?tag:"-eventws:Unsubscribe", id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __eventws__Unsubscribe * SOAP_FMAC4 soap_get___eventws__Unsubscribe(struct soap *soap, struct __eventws__Unsubscribe *p, const char *tag, const char *type)
{
	if ((p = soap_in___eventws__Unsubscribe(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct __eventws__Unsubscribe * SOAP_FMAC2 soap_instantiate___eventws__Unsubscribe(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___eventws__Unsubscribe(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___eventws__Unsubscribe, n, onvifevent_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = SOAP_NEW(struct __eventws__Unsubscribe);
		if (size)
			*size = sizeof(struct __eventws__Unsubscribe);
	}
	else
	{	cp->ptr = SOAP_NEW_ARRAY(struct __eventws__Unsubscribe, n);
		if (size)
			*size = n * sizeof(struct __eventws__Unsubscribe);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct __eventws__Unsubscribe*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___eventws__Unsubscribe(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __eventws__Unsubscribe %p -> %p\n", q, p));
	*(struct __eventws__Unsubscribe*)p = *(struct __eventws__Unsubscribe*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___eventws__Renew(struct soap *soap, struct __eventws__Renew *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->wsnt__Renew = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___eventws__Renew(struct soap *soap, const struct __eventws__Renew *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTo_wsnt__Renew(soap, &a->wsnt__Renew);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___eventws__Renew(struct soap *soap, const char *tag, int id, const struct __eventws__Renew *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_out_PointerTo_wsnt__Renew(soap, "wsnt:Renew", -1, &a->wsnt__Renew, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __eventws__Renew * SOAP_FMAC4 soap_in___eventws__Renew(struct soap *soap, const char *tag, struct __eventws__Renew *a, const char *type)
{
	size_t soap_flag_wsnt__Renew = 1;
	short soap_flag;
	(void)tag; (void)type; /* appease -Wall -Werror */
	a = (struct __eventws__Renew *)soap_id_enter(soap, "", a, SOAP_TYPE___eventws__Renew, sizeof(struct __eventws__Renew), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___eventws__Renew(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_wsnt__Renew && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_wsnt__Renew(soap, "wsnt:Renew", &a->wsnt__Renew, ""))
				{	soap_flag_wsnt__Renew--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___eventws__Renew(struct soap *soap, const struct __eventws__Renew *a, const char *tag, const char *type)
{
	int id = 0;
	if (soap_out___eventws__Renew(soap, tag?tag:"-eventws:Renew", id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __eventws__Renew * SOAP_FMAC4 soap_get___eventws__Renew(struct soap *soap, struct __eventws__Renew *p, const char *tag, const char *type)
{
	if ((p = soap_in___eventws__Renew(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct __eventws__Renew * SOAP_FMAC2 soap_instantiate___eventws__Renew(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___eventws__Renew(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___eventws__Renew, n, onvifevent_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = SOAP_NEW(struct __eventws__Renew);
		if (size)
			*size = sizeof(struct __eventws__Renew);
	}
	else
	{	cp->ptr = SOAP_NEW_ARRAY(struct __eventws__Renew, n);
		if (size)
			*size = n * sizeof(struct __eventws__Renew);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct __eventws__Renew*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___eventws__Renew(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __eventws__Renew %p -> %p\n", q, p));
	*(struct __eventws__Renew*)p = *(struct __eventws__Renew*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___eventws__GetEventProperties(struct soap *soap, struct __eventws__GetEventProperties *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->eventws__GetEventProperties = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___eventws__GetEventProperties(struct soap *soap, const struct __eventws__GetEventProperties *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTo_eventws__GetEventProperties(soap, &a->eventws__GetEventProperties);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___eventws__GetEventProperties(struct soap *soap, const char *tag, int id, const struct __eventws__GetEventProperties *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_out_PointerTo_eventws__GetEventProperties(soap, "eventws:GetEventProperties", -1, &a->eventws__GetEventProperties, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __eventws__GetEventProperties * SOAP_FMAC4 soap_in___eventws__GetEventProperties(struct soap *soap, const char *tag, struct __eventws__GetEventProperties *a, const char *type)
{
	size_t soap_flag_eventws__GetEventProperties = 1;
	short soap_flag;
	(void)tag; (void)type; /* appease -Wall -Werror */
	a = (struct __eventws__GetEventProperties *)soap_id_enter(soap, "", a, SOAP_TYPE___eventws__GetEventProperties, sizeof(struct __eventws__GetEventProperties), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___eventws__GetEventProperties(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_eventws__GetEventProperties && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_eventws__GetEventProperties(soap, "eventws:GetEventProperties", &a->eventws__GetEventProperties, ""))
				{	soap_flag_eventws__GetEventProperties--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___eventws__GetEventProperties(struct soap *soap, const struct __eventws__GetEventProperties *a, const char *tag, const char *type)
{
	int id = 0;
	if (soap_out___eventws__GetEventProperties(soap, tag?tag:"-eventws:GetEventProperties", id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __eventws__GetEventProperties * SOAP_FMAC4 soap_get___eventws__GetEventProperties(struct soap *soap, struct __eventws__GetEventProperties *p, const char *tag, const char *type)
{
	if ((p = soap_in___eventws__GetEventProperties(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct __eventws__GetEventProperties * SOAP_FMAC2 soap_instantiate___eventws__GetEventProperties(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___eventws__GetEventProperties(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___eventws__GetEventProperties, n, onvifevent_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = SOAP_NEW(struct __eventws__GetEventProperties);
		if (size)
			*size = sizeof(struct __eventws__GetEventProperties);
	}
	else
	{	cp->ptr = SOAP_NEW_ARRAY(struct __eventws__GetEventProperties, n);
		if (size)
			*size = n * sizeof(struct __eventws__GetEventProperties);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct __eventws__GetEventProperties*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___eventws__GetEventProperties(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __eventws__GetEventProperties %p -> %p\n", q, p));
	*(struct __eventws__GetEventProperties*)p = *(struct __eventws__GetEventProperties*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___eventws__CreatePullPointSubscription(struct soap *soap, struct __eventws__CreatePullPointSubscription *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->eventws__CreatePullPointSubscription = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___eventws__CreatePullPointSubscription(struct soap *soap, const struct __eventws__CreatePullPointSubscription *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTo_eventws__CreatePullPointSubscription(soap, &a->eventws__CreatePullPointSubscription);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___eventws__CreatePullPointSubscription(struct soap *soap, const char *tag, int id, const struct __eventws__CreatePullPointSubscription *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_out_PointerTo_eventws__CreatePullPointSubscription(soap, "eventws:CreatePullPointSubscription", -1, &a->eventws__CreatePullPointSubscription, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __eventws__CreatePullPointSubscription * SOAP_FMAC4 soap_in___eventws__CreatePullPointSubscription(struct soap *soap, const char *tag, struct __eventws__CreatePullPointSubscription *a, const char *type)
{
	size_t soap_flag_eventws__CreatePullPointSubscription = 1;
	short soap_flag;
	(void)tag; (void)type; /* appease -Wall -Werror */
	a = (struct __eventws__CreatePullPointSubscription *)soap_id_enter(soap, "", a, SOAP_TYPE___eventws__CreatePullPointSubscription, sizeof(struct __eventws__CreatePullPointSubscription), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___eventws__CreatePullPointSubscription(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_eventws__CreatePullPointSubscription && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_eventws__CreatePullPointSubscription(soap, "eventws:CreatePullPointSubscription", &a->eventws__CreatePullPointSubscription, ""))
				{	soap_flag_eventws__CreatePullPointSubscription--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___eventws__CreatePullPointSubscription(struct soap *soap, const struct __eventws__CreatePullPointSubscription *a, const char *tag, const char *type)
{
	int id = 0;
	if (soap_out___eventws__CreatePullPointSubscription(soap, tag?tag:"-eventws:CreatePullPointSubscription", id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __eventws__CreatePullPointSubscription * SOAP_FMAC4 soap_get___eventws__CreatePullPointSubscription(struct soap *soap, struct __eventws__CreatePullPointSubscription *p, const char *tag, const char *type)
{
	if ((p = soap_in___eventws__CreatePullPointSubscription(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct __eventws__CreatePullPointSubscription * SOAP_FMAC2 soap_instantiate___eventws__CreatePullPointSubscription(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___eventws__CreatePullPointSubscription(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___eventws__CreatePullPointSubscription, n, onvifevent_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = SOAP_NEW(struct __eventws__CreatePullPointSubscription);
		if (size)
			*size = sizeof(struct __eventws__CreatePullPointSubscription);
	}
	else
	{	cp->ptr = SOAP_NEW_ARRAY(struct __eventws__CreatePullPointSubscription, n);
		if (size)
			*size = n * sizeof(struct __eventws__CreatePullPointSubscription);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct __eventws__CreatePullPointSubscription*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___eventws__CreatePullPointSubscription(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __eventws__CreatePullPointSubscription %p -> %p\n", q, p));
	*(struct __eventws__CreatePullPointSubscription*)p = *(struct __eventws__CreatePullPointSubscription*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___eventws__GetServiceCapabilities(struct soap *soap, struct __eventws__GetServiceCapabilities *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->eventws__GetServiceCapabilities = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___eventws__GetServiceCapabilities(struct soap *soap, const struct __eventws__GetServiceCapabilities *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTo_eventws__GetServiceCapabilities(soap, &a->eventws__GetServiceCapabilities);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___eventws__GetServiceCapabilities(struct soap *soap, const char *tag, int id, const struct __eventws__GetServiceCapabilities *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_out_PointerTo_eventws__GetServiceCapabilities(soap, "eventws:GetServiceCapabilities", -1, &a->eventws__GetServiceCapabilities, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __eventws__GetServiceCapabilities * SOAP_FMAC4 soap_in___eventws__GetServiceCapabilities(struct soap *soap, const char *tag, struct __eventws__GetServiceCapabilities *a, const char *type)
{
	size_t soap_flag_eventws__GetServiceCapabilities = 1;
	short soap_flag;
	(void)tag; (void)type; /* appease -Wall -Werror */
	a = (struct __eventws__GetServiceCapabilities *)soap_id_enter(soap, "", a, SOAP_TYPE___eventws__GetServiceCapabilities, sizeof(struct __eventws__GetServiceCapabilities), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___eventws__GetServiceCapabilities(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_eventws__GetServiceCapabilities && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_eventws__GetServiceCapabilities(soap, "eventws:GetServiceCapabilities", &a->eventws__GetServiceCapabilities, ""))
				{	soap_flag_eventws__GetServiceCapabilities--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___eventws__GetServiceCapabilities(struct soap *soap, const struct __eventws__GetServiceCapabilities *a, const char *tag, const char *type)
{
	int id = 0;
	if (soap_out___eventws__GetServiceCapabilities(soap, tag?tag:"-eventws:GetServiceCapabilities", id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __eventws__GetServiceCapabilities * SOAP_FMAC4 soap_get___eventws__GetServiceCapabilities(struct soap *soap, struct __eventws__GetServiceCapabilities *p, const char *tag, const char *type)
{
	if ((p = soap_in___eventws__GetServiceCapabilities(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct __eventws__GetServiceCapabilities * SOAP_FMAC2 soap_instantiate___eventws__GetServiceCapabilities(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___eventws__GetServiceCapabilities(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___eventws__GetServiceCapabilities, n, onvifevent_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = SOAP_NEW(struct __eventws__GetServiceCapabilities);
		if (size)
			*size = sizeof(struct __eventws__GetServiceCapabilities);
	}
	else
	{	cp->ptr = SOAP_NEW_ARRAY(struct __eventws__GetServiceCapabilities, n);
		if (size)
			*size = n * sizeof(struct __eventws__GetServiceCapabilities);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct __eventws__GetServiceCapabilities*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___eventws__GetServiceCapabilities(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __eventws__GetServiceCapabilities %p -> %p\n", q, p));
	*(struct __eventws__GetServiceCapabilities*)p = *(struct __eventws__GetServiceCapabilities*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___eventws__SetSynchronizationPoint(struct soap *soap, struct __eventws__SetSynchronizationPoint *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->eventws__SetSynchronizationPoint = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___eventws__SetSynchronizationPoint(struct soap *soap, const struct __eventws__SetSynchronizationPoint *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTo_eventws__SetSynchronizationPoint(soap, &a->eventws__SetSynchronizationPoint);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___eventws__SetSynchronizationPoint(struct soap *soap, const char *tag, int id, const struct __eventws__SetSynchronizationPoint *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_out_PointerTo_eventws__SetSynchronizationPoint(soap, "eventws:SetSynchronizationPoint", -1, &a->eventws__SetSynchronizationPoint, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __eventws__SetSynchronizationPoint * SOAP_FMAC4 soap_in___eventws__SetSynchronizationPoint(struct soap *soap, const char *tag, struct __eventws__SetSynchronizationPoint *a, const char *type)
{
	size_t soap_flag_eventws__SetSynchronizationPoint = 1;
	short soap_flag;
	(void)tag; (void)type; /* appease -Wall -Werror */
	a = (struct __eventws__SetSynchronizationPoint *)soap_id_enter(soap, "", a, SOAP_TYPE___eventws__SetSynchronizationPoint, sizeof(struct __eventws__SetSynchronizationPoint), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___eventws__SetSynchronizationPoint(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_eventws__SetSynchronizationPoint && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_eventws__SetSynchronizationPoint(soap, "eventws:SetSynchronizationPoint", &a->eventws__SetSynchronizationPoint, ""))
				{	soap_flag_eventws__SetSynchronizationPoint--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___eventws__SetSynchronizationPoint(struct soap *soap, const struct __eventws__SetSynchronizationPoint *a, const char *tag, const char *type)
{
	int id = 0;
	if (soap_out___eventws__SetSynchronizationPoint(soap, tag?tag:"-eventws:SetSynchronizationPoint", id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __eventws__SetSynchronizationPoint * SOAP_FMAC4 soap_get___eventws__SetSynchronizationPoint(struct soap *soap, struct __eventws__SetSynchronizationPoint *p, const char *tag, const char *type)
{
	if ((p = soap_in___eventws__SetSynchronizationPoint(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct __eventws__SetSynchronizationPoint * SOAP_FMAC2 soap_instantiate___eventws__SetSynchronizationPoint(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___eventws__SetSynchronizationPoint(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___eventws__SetSynchronizationPoint, n, onvifevent_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = SOAP_NEW(struct __eventws__SetSynchronizationPoint);
		if (size)
			*size = sizeof(struct __eventws__SetSynchronizationPoint);
	}
	else
	{	cp->ptr = SOAP_NEW_ARRAY(struct __eventws__SetSynchronizationPoint, n);
		if (size)
			*size = n * sizeof(struct __eventws__SetSynchronizationPoint);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct __eventws__SetSynchronizationPoint*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___eventws__SetSynchronizationPoint(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __eventws__SetSynchronizationPoint %p -> %p\n", q, p));
	*(struct __eventws__SetSynchronizationPoint*)p = *(struct __eventws__SetSynchronizationPoint*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___eventws__Seek(struct soap *soap, struct __eventws__Seek *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->eventws__Seek = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___eventws__Seek(struct soap *soap, const struct __eventws__Seek *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTo_eventws__Seek(soap, &a->eventws__Seek);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___eventws__Seek(struct soap *soap, const char *tag, int id, const struct __eventws__Seek *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_out_PointerTo_eventws__Seek(soap, "eventws:Seek", -1, &a->eventws__Seek, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __eventws__Seek * SOAP_FMAC4 soap_in___eventws__Seek(struct soap *soap, const char *tag, struct __eventws__Seek *a, const char *type)
{
	size_t soap_flag_eventws__Seek = 1;
	short soap_flag;
	(void)tag; (void)type; /* appease -Wall -Werror */
	a = (struct __eventws__Seek *)soap_id_enter(soap, "", a, SOAP_TYPE___eventws__Seek, sizeof(struct __eventws__Seek), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___eventws__Seek(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_eventws__Seek && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_eventws__Seek(soap, "eventws:Seek", &a->eventws__Seek, ""))
				{	soap_flag_eventws__Seek--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___eventws__Seek(struct soap *soap, const struct __eventws__Seek *a, const char *tag, const char *type)
{
	int id = 0;
	if (soap_out___eventws__Seek(soap, tag?tag:"-eventws:Seek", id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __eventws__Seek * SOAP_FMAC4 soap_get___eventws__Seek(struct soap *soap, struct __eventws__Seek *p, const char *tag, const char *type)
{
	if ((p = soap_in___eventws__Seek(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct __eventws__Seek * SOAP_FMAC2 soap_instantiate___eventws__Seek(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___eventws__Seek(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___eventws__Seek, n, onvifevent_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = SOAP_NEW(struct __eventws__Seek);
		if (size)
			*size = sizeof(struct __eventws__Seek);
	}
	else
	{	cp->ptr = SOAP_NEW_ARRAY(struct __eventws__Seek, n);
		if (size)
			*size = n * sizeof(struct __eventws__Seek);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct __eventws__Seek*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___eventws__Seek(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __eventws__Seek %p -> %p\n", q, p));
	*(struct __eventws__Seek*)p = *(struct __eventws__Seek*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___eventws__PullMessages(struct soap *soap, struct __eventws__PullMessages *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->eventws__PullMessages = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___eventws__PullMessages(struct soap *soap, const struct __eventws__PullMessages *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTo_eventws__PullMessages(soap, &a->eventws__PullMessages);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___eventws__PullMessages(struct soap *soap, const char *tag, int id, const struct __eventws__PullMessages *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_out_PointerTo_eventws__PullMessages(soap, "eventws:PullMessages", -1, &a->eventws__PullMessages, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __eventws__PullMessages * SOAP_FMAC4 soap_in___eventws__PullMessages(struct soap *soap, const char *tag, struct __eventws__PullMessages *a, const char *type)
{
	size_t soap_flag_eventws__PullMessages = 1;
	short soap_flag;
	(void)tag; (void)type; /* appease -Wall -Werror */
	a = (struct __eventws__PullMessages *)soap_id_enter(soap, "", a, SOAP_TYPE___eventws__PullMessages, sizeof(struct __eventws__PullMessages), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___eventws__PullMessages(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_eventws__PullMessages && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_eventws__PullMessages(soap, "eventws:PullMessages", &a->eventws__PullMessages, ""))
				{	soap_flag_eventws__PullMessages--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___eventws__PullMessages(struct soap *soap, const struct __eventws__PullMessages *a, const char *tag, const char *type)
{
	int id = 0;
	if (soap_out___eventws__PullMessages(soap, tag?tag:"-eventws:PullMessages", id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __eventws__PullMessages * SOAP_FMAC4 soap_get___eventws__PullMessages(struct soap *soap, struct __eventws__PullMessages *p, const char *tag, const char *type)
{
	if ((p = soap_in___eventws__PullMessages(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct __eventws__PullMessages * SOAP_FMAC2 soap_instantiate___eventws__PullMessages(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___eventws__PullMessages(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___eventws__PullMessages, n, onvifevent_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = SOAP_NEW(struct __eventws__PullMessages);
		if (size)
			*size = sizeof(struct __eventws__PullMessages);
	}
	else
	{	cp->ptr = SOAP_NEW_ARRAY(struct __eventws__PullMessages, n);
		if (size)
			*size = n * sizeof(struct __eventws__PullMessages);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct __eventws__PullMessages*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___eventws__PullMessages(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __eventws__PullMessages %p -> %p\n", q, p));
	*(struct __eventws__PullMessages*)p = *(struct __eventws__PullMessages*)q;
}

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Fault(struct soap *soap, struct SOAP_ENV__Fault *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default__QName(soap, &a->faultcode);
	soap_default_string(soap, &a->faultstring);
	soap_default_string(soap, &a->faultactor);
	a->detail = NULL;
	a->SOAP_ENV__Code = NULL;
	a->SOAP_ENV__Reason = NULL;
	soap_default_string(soap, &a->SOAP_ENV__Node);
	soap_default_string(soap, &a->SOAP_ENV__Role);
	a->SOAP_ENV__Detail = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Fault(struct soap *soap, const struct SOAP_ENV__Fault *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize__QName(soap, &a->faultcode);
	soap_serialize_string(soap, &a->faultstring);
	soap_serialize_string(soap, &a->faultactor);
	soap_serialize_PointerToSOAP_ENV__Detail(soap, &a->detail);
	soap_serialize_PointerToSOAP_ENV__Code(soap, &a->SOAP_ENV__Code);
	soap_serialize_PointerToSOAP_ENV__Reason(soap, &a->SOAP_ENV__Reason);
	soap_serialize_string(soap, &a->SOAP_ENV__Node);
	soap_serialize_string(soap, &a->SOAP_ENV__Role);
	soap_serialize_PointerToSOAP_ENV__Detail(soap, &a->SOAP_ENV__Detail);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Fault(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Fault *a, const char *type)
{
	const char *soap_tmp_faultcode = soap_QName2s(soap, a->faultcode);
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SOAP_ENV__Fault), type))
		return soap->error;
	if (soap_out__QName(soap, "faultcode", -1, (char*const*)(void*)&soap_tmp_faultcode, ""))
		return soap->error;
	if (soap_out_string(soap, "faultstring", -1, &a->faultstring, ""))
		return soap->error;
	if (soap_out_string(soap, "faultactor", -1, &a->faultactor, ""))
		return soap->error;
	if (soap_out_PointerToSOAP_ENV__Detail(soap, "detail", -1, &a->detail, ""))
		return soap->error;
	if (soap_out_PointerToSOAP_ENV__Code(soap, "SOAP-ENV:Code", -1, &a->SOAP_ENV__Code, ""))
		return soap->error;
	if (soap_out_PointerToSOAP_ENV__Reason(soap, "SOAP-ENV:Reason", -1, &a->SOAP_ENV__Reason, ""))
		return soap->error;
	if (soap_out_string(soap, "SOAP-ENV:Node", -1, &a->SOAP_ENV__Node, ""))
		return soap->error;
	if (soap_out_string(soap, "SOAP-ENV:Role", -1, &a->SOAP_ENV__Role, ""))
		return soap->error;
	if (soap_out_PointerToSOAP_ENV__Detail(soap, "SOAP-ENV:Detail", -1, &a->SOAP_ENV__Detail, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SOAP_ENV__Fault * SOAP_FMAC4 soap_in_SOAP_ENV__Fault(struct soap *soap, const char *tag, struct SOAP_ENV__Fault *a, const char *type)
{
	size_t soap_flag_faultcode = 1;
	size_t soap_flag_faultstring = 1;
	size_t soap_flag_faultactor = 1;
	size_t soap_flag_detail = 1;
	size_t soap_flag_SOAP_ENV__Code = 1;
	size_t soap_flag_SOAP_ENV__Reason = 1;
	size_t soap_flag_SOAP_ENV__Node = 1;
	size_t soap_flag_SOAP_ENV__Role = 1;
	size_t soap_flag_SOAP_ENV__Detail = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct SOAP_ENV__Fault *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SOAP_ENV__Fault, sizeof(struct SOAP_ENV__Fault), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Fault(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_faultcode && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in__QName(soap, "faultcode", &a->faultcode, ""))
				{	soap_flag_faultcode--;
					continue;
				}
			if (soap_flag_faultstring && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "faultstring", &a->faultstring, "xsd:string"))
				{	soap_flag_faultstring--;
					continue;
				}
			if (soap_flag_faultactor && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "faultactor", &a->faultactor, "xsd:string"))
				{	soap_flag_faultactor--;
					continue;
				}
			if (soap_flag_detail && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToSOAP_ENV__Detail(soap, "detail", &a->detail, ""))
				{	soap_flag_detail--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Code && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToSOAP_ENV__Code(soap, "SOAP-ENV:Code", &a->SOAP_ENV__Code, ""))
				{	soap_flag_SOAP_ENV__Code--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Reason && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToSOAP_ENV__Reason(soap, "SOAP-ENV:Reason", &a->SOAP_ENV__Reason, ""))
				{	soap_flag_SOAP_ENV__Reason--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Node && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "SOAP-ENV:Node", &a->SOAP_ENV__Node, "xsd:string"))
				{	soap_flag_SOAP_ENV__Node--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Role && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "SOAP-ENV:Role", &a->SOAP_ENV__Role, "xsd:string"))
				{	soap_flag_SOAP_ENV__Role--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Detail && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToSOAP_ENV__Detail(soap, "SOAP-ENV:Detail", &a->SOAP_ENV__Detail, ""))
				{	soap_flag_SOAP_ENV__Detail--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Fault *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_SOAP_ENV__Fault, 0, sizeof(struct SOAP_ENV__Fault), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Fault(struct soap *soap, const struct SOAP_ENV__Fault *a, const char *tag, const char *type)
{
	int id = soap_embed(soap, (void*)a, NULL, 0, SOAP_TYPE_SOAP_ENV__Fault);
	if (soap_out_SOAP_ENV__Fault(soap, tag?tag:"SOAP-ENV:Fault", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Fault * SOAP_FMAC4 soap_get_SOAP_ENV__Fault(struct soap *soap, struct SOAP_ENV__Fault *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Fault(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct SOAP_ENV__Fault * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Fault(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SOAP_ENV__Fault(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_SOAP_ENV__Fault, n, onvifevent_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = SOAP_NEW(struct SOAP_ENV__Fault);
		if (size)
			*size = sizeof(struct SOAP_ENV__Fault);
	}
	else
	{	cp->ptr = SOAP_NEW_ARRAY(struct SOAP_ENV__Fault, n);
		if (size)
			*size = n * sizeof(struct SOAP_ENV__Fault);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct SOAP_ENV__Fault*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Fault(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct SOAP_ENV__Fault %p -> %p\n", q, p));
	*(struct SOAP_ENV__Fault*)p = *(struct SOAP_ENV__Fault*)q;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_string(soap, &a->SOAP_ENV__Text);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Reason(struct soap *soap, const struct SOAP_ENV__Reason *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_string(soap, &a->SOAP_ENV__Text);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Reason(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Reason *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SOAP_ENV__Reason), type))
		return soap->error;
	if (soap->lang)
		soap_set_attr(soap, "xml:lang", soap->lang, 1);
	if (soap_out_string(soap, "SOAP-ENV:Text", -1, &a->SOAP_ENV__Text, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SOAP_ENV__Reason * SOAP_FMAC4 soap_in_SOAP_ENV__Reason(struct soap *soap, const char *tag, struct SOAP_ENV__Reason *a, const char *type)
{
	size_t soap_flag_SOAP_ENV__Text = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct SOAP_ENV__Reason *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SOAP_ENV__Reason, sizeof(struct SOAP_ENV__Reason), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Reason(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_SOAP_ENV__Text && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "SOAP-ENV:Text", &a->SOAP_ENV__Text, "xsd:string"))
				{	soap_flag_SOAP_ENV__Text--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Reason *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_SOAP_ENV__Reason, 0, sizeof(struct SOAP_ENV__Reason), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Reason(struct soap *soap, const struct SOAP_ENV__Reason *a, const char *tag, const char *type)
{
	int id = soap_embed(soap, (void*)a, NULL, 0, SOAP_TYPE_SOAP_ENV__Reason);
	if (soap_out_SOAP_ENV__Reason(soap, tag?tag:"SOAP-ENV:Reason", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Reason * SOAP_FMAC4 soap_get_SOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Reason(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct SOAP_ENV__Reason * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Reason(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SOAP_ENV__Reason(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_SOAP_ENV__Reason, n, onvifevent_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = SOAP_NEW(struct SOAP_ENV__Reason);
		if (size)
			*size = sizeof(struct SOAP_ENV__Reason);
	}
	else
	{	cp->ptr = SOAP_NEW_ARRAY(struct SOAP_ENV__Reason, n);
		if (size)
			*size = n * sizeof(struct SOAP_ENV__Reason);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct SOAP_ENV__Reason*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Reason(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct SOAP_ENV__Reason %p -> %p\n", q, p));
	*(struct SOAP_ENV__Reason*)p = *(struct SOAP_ENV__Reason*)q;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default__QName(soap, &a->SOAP_ENV__Value);
	a->SOAP_ENV__Subcode = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Code(struct soap *soap, const struct SOAP_ENV__Code *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize__QName(soap, &a->SOAP_ENV__Value);
	soap_serialize_PointerToSOAP_ENV__Code(soap, &a->SOAP_ENV__Subcode);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Code(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Code *a, const char *type)
{
	const char *soap_tmp_SOAP_ENV__Value = soap_QName2s(soap, a->SOAP_ENV__Value);
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SOAP_ENV__Code), type))
		return soap->error;
	if (soap_out__QName(soap, "SOAP-ENV:Value", -1, (char*const*)(void*)&soap_tmp_SOAP_ENV__Value, ""))
		return soap->error;
	if (soap_out_PointerToSOAP_ENV__Code(soap, "SOAP-ENV:Subcode", -1, &a->SOAP_ENV__Subcode, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SOAP_ENV__Code * SOAP_FMAC4 soap_in_SOAP_ENV__Code(struct soap *soap, const char *tag, struct SOAP_ENV__Code *a, const char *type)
{
	size_t soap_flag_SOAP_ENV__Value = 1;
	size_t soap_flag_SOAP_ENV__Subcode = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct SOAP_ENV__Code *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SOAP_ENV__Code, sizeof(struct SOAP_ENV__Code), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Code(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_SOAP_ENV__Value && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in__QName(soap, "SOAP-ENV:Value", &a->SOAP_ENV__Value, ""))
				{	soap_flag_SOAP_ENV__Value--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Subcode && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToSOAP_ENV__Code(soap, "SOAP-ENV:Subcode", &a->SOAP_ENV__Subcode, ""))
				{	soap_flag_SOAP_ENV__Subcode--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Code *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_SOAP_ENV__Code, 0, sizeof(struct SOAP_ENV__Code), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Code(struct soap *soap, const struct SOAP_ENV__Code *a, const char *tag, const char *type)
{
	int id = soap_embed(soap, (void*)a, NULL, 0, SOAP_TYPE_SOAP_ENV__Code);
	if (soap_out_SOAP_ENV__Code(soap, tag?tag:"SOAP-ENV:Code", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Code * SOAP_FMAC4 soap_get_SOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Code(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct SOAP_ENV__Code * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Code(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SOAP_ENV__Code(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_SOAP_ENV__Code, n, onvifevent_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = SOAP_NEW(struct SOAP_ENV__Code);
		if (size)
			*size = sizeof(struct SOAP_ENV__Code);
	}
	else
	{	cp->ptr = SOAP_NEW_ARRAY(struct SOAP_ENV__Code, n);
		if (size)
			*size = n * sizeof(struct SOAP_ENV__Code);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct SOAP_ENV__Code*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Code(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct SOAP_ENV__Code %p -> %p\n", q, p));
	*(struct SOAP_ENV__Code*)p = *(struct SOAP_ENV__Code*)q;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->wsnt__InvalidFilterFault = NULL;
	a->wsnt__InvalidMessageContentExpressionFault = NULL;
	a->wsnt__InvalidProducerPropertiesExpressionFault = NULL;
	a->wsnt__InvalidTopicExpressionFault = NULL;
	a->wsnt__MultipleTopicsSpecifiedFault = NULL;
	a->wsnt__NoCurrentMessageOnTopicFault = NULL;
	a->wsnt__NotifyMessageNotSupportedFault = NULL;
	a->wsnt__PauseFailedFault = NULL;
	a->eventws__PullMessagesFaultResponse = NULL;
	a->wsrfr__ResourceUnknownFault = NULL;
	a->wsnt__ResumeFailedFault = NULL;
	a->wsnt__SubscribeCreationFailedFault = NULL;
	a->wsnt__TopicExpressionDialectUnknownFault = NULL;
	a->wsnt__TopicNotSupportedFault = NULL;
	a->wsnt__UnableToCreatePullPointFault = NULL;
	a->wsnt__UnableToDestroyPullPointFault = NULL;
	a->wsnt__UnableToDestroySubscriptionFault = NULL;
	a->wsnt__UnableToGetMessagesFault = NULL;
	a->wsnt__UnacceptableInitialTerminationTimeFault = NULL;
	a->wsnt__UnacceptableTerminationTimeFault = NULL;
	a->wsnt__UnrecognizedPolicyRequestFault = NULL;
	a->wsnt__UnsupportedPolicyRequestFault = NULL;
	a->__type = 0;
	a->fault = NULL;
	a->__any = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Detail(struct soap *soap, const struct SOAP_ENV__Detail *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTowsnt__InvalidFilterFaultType(soap, &a->wsnt__InvalidFilterFault);
	soap_serialize_PointerTowsnt__InvalidMessageContentExpressionFaultType(soap, &a->wsnt__InvalidMessageContentExpressionFault);
	soap_serialize_PointerTowsnt__InvalidProducerPropertiesExpressionFaultType(soap, &a->wsnt__InvalidProducerPropertiesExpressionFault);
	soap_serialize_PointerTowsnt__InvalidTopicExpressionFaultType(soap, &a->wsnt__InvalidTopicExpressionFault);
	soap_serialize_PointerTowsnt__MultipleTopicsSpecifiedFaultType(soap, &a->wsnt__MultipleTopicsSpecifiedFault);
	soap_serialize_PointerTowsnt__NoCurrentMessageOnTopicFaultType(soap, &a->wsnt__NoCurrentMessageOnTopicFault);
	soap_serialize_PointerTowsnt__NotifyMessageNotSupportedFaultType(soap, &a->wsnt__NotifyMessageNotSupportedFault);
	soap_serialize_PointerTowsnt__PauseFailedFaultType(soap, &a->wsnt__PauseFailedFault);
	soap_serialize_PointerTo_eventws__PullMessagesFaultResponse(soap, &a->eventws__PullMessagesFaultResponse);
	soap_serialize_PointerTowsrfr__ResourceUnknownFaultType(soap, &a->wsrfr__ResourceUnknownFault);
	soap_serialize_PointerTowsnt__ResumeFailedFaultType(soap, &a->wsnt__ResumeFailedFault);
	soap_serialize_PointerTowsnt__SubscribeCreationFailedFaultType(soap, &a->wsnt__SubscribeCreationFailedFault);
	soap_serialize_PointerTowsnt__TopicExpressionDialectUnknownFaultType(soap, &a->wsnt__TopicExpressionDialectUnknownFault);
	soap_serialize_PointerTowsnt__TopicNotSupportedFaultType(soap, &a->wsnt__TopicNotSupportedFault);
	soap_serialize_PointerTowsnt__UnableToCreatePullPointFaultType(soap, &a->wsnt__UnableToCreatePullPointFault);
	soap_serialize_PointerTowsnt__UnableToDestroyPullPointFaultType(soap, &a->wsnt__UnableToDestroyPullPointFault);
	soap_serialize_PointerTowsnt__UnableToDestroySubscriptionFaultType(soap, &a->wsnt__UnableToDestroySubscriptionFault);
	soap_serialize_PointerTowsnt__UnableToGetMessagesFaultType(soap, &a->wsnt__UnableToGetMessagesFault);
	soap_serialize_PointerTowsnt__UnacceptableInitialTerminationTimeFaultType(soap, &a->wsnt__UnacceptableInitialTerminationTimeFault);
	soap_serialize_PointerTowsnt__UnacceptableTerminationTimeFaultType(soap, &a->wsnt__UnacceptableTerminationTimeFault);
	soap_serialize_PointerTowsnt__UnrecognizedPolicyRequestFaultType(soap, &a->wsnt__UnrecognizedPolicyRequestFault);
	soap_serialize_PointerTowsnt__UnsupportedPolicyRequestFaultType(soap, &a->wsnt__UnsupportedPolicyRequestFault);
	soap_markelement(soap, a->fault, a->__type);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Detail(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Detail *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SOAP_ENV__Detail), type))
		return soap->error;
	if (soap_out_PointerTowsnt__InvalidFilterFaultType(soap, "wsnt:InvalidFilterFault", -1, &a->wsnt__InvalidFilterFault, ""))
		return soap->error;
	if (soap_out_PointerTowsnt__InvalidMessageContentExpressionFaultType(soap, "wsnt:InvalidMessageContentExpressionFault", -1, &a->wsnt__InvalidMessageContentExpressionFault, ""))
		return soap->error;
	if (soap_out_PointerTowsnt__InvalidProducerPropertiesExpressionFaultType(soap, "wsnt:InvalidProducerPropertiesExpressionFault", -1, &a->wsnt__InvalidProducerPropertiesExpressionFault, ""))
		return soap->error;
	if (soap_out_PointerTowsnt__InvalidTopicExpressionFaultType(soap, "wsnt:InvalidTopicExpressionFault", -1, &a->wsnt__InvalidTopicExpressionFault, ""))
		return soap->error;
	if (soap_out_PointerTowsnt__MultipleTopicsSpecifiedFaultType(soap, "wsnt:MultipleTopicsSpecifiedFault", -1, &a->wsnt__MultipleTopicsSpecifiedFault, ""))
		return soap->error;
	if (soap_out_PointerTowsnt__NoCurrentMessageOnTopicFaultType(soap, "wsnt:NoCurrentMessageOnTopicFault", -1, &a->wsnt__NoCurrentMessageOnTopicFault, ""))
		return soap->error;
	if (soap_out_PointerTowsnt__NotifyMessageNotSupportedFaultType(soap, "wsnt:NotifyMessageNotSupportedFault", -1, &a->wsnt__NotifyMessageNotSupportedFault, ""))
		return soap->error;
	if (soap_out_PointerTowsnt__PauseFailedFaultType(soap, "wsnt:PauseFailedFault", -1, &a->wsnt__PauseFailedFault, ""))
		return soap->error;
	if (soap_out_PointerTo_eventws__PullMessagesFaultResponse(soap, "eventws:PullMessagesFaultResponse", -1, &a->eventws__PullMessagesFaultResponse, ""))
		return soap->error;
	if (soap_out_PointerTowsrfr__ResourceUnknownFaultType(soap, "wsrfr:ResourceUnknownFault", -1, &a->wsrfr__ResourceUnknownFault, ""))
		return soap->error;
	if (soap_out_PointerTowsnt__ResumeFailedFaultType(soap, "wsnt:ResumeFailedFault", -1, &a->wsnt__ResumeFailedFault, ""))
		return soap->error;
	if (soap_out_PointerTowsnt__SubscribeCreationFailedFaultType(soap, "wsnt:SubscribeCreationFailedFault", -1, &a->wsnt__SubscribeCreationFailedFault, ""))
		return soap->error;
	if (soap_out_PointerTowsnt__TopicExpressionDialectUnknownFaultType(soap, "wsnt:TopicExpressionDialectUnknownFault", -1, &a->wsnt__TopicExpressionDialectUnknownFault, ""))
		return soap->error;
	if (soap_out_PointerTowsnt__TopicNotSupportedFaultType(soap, "wsnt:TopicNotSupportedFault", -1, &a->wsnt__TopicNotSupportedFault, ""))
		return soap->error;
	if (soap_out_PointerTowsnt__UnableToCreatePullPointFaultType(soap, "wsnt:UnableToCreatePullPointFault", -1, &a->wsnt__UnableToCreatePullPointFault, ""))
		return soap->error;
	if (soap_out_PointerTowsnt__UnableToDestroyPullPointFaultType(soap, "wsnt:UnableToDestroyPullPointFault", -1, &a->wsnt__UnableToDestroyPullPointFault, ""))
		return soap->error;
	if (soap_out_PointerTowsnt__UnableToDestroySubscriptionFaultType(soap, "wsnt:UnableToDestroySubscriptionFault", -1, &a->wsnt__UnableToDestroySubscriptionFault, ""))
		return soap->error;
	if (soap_out_PointerTowsnt__UnableToGetMessagesFaultType(soap, "wsnt:UnableToGetMessagesFault", -1, &a->wsnt__UnableToGetMessagesFault, ""))
		return soap->error;
	if (soap_out_PointerTowsnt__UnacceptableInitialTerminationTimeFaultType(soap, "wsnt:UnacceptableInitialTerminationTimeFault", -1, &a->wsnt__UnacceptableInitialTerminationTimeFault, ""))
		return soap->error;
	if (soap_out_PointerTowsnt__UnacceptableTerminationTimeFaultType(soap, "wsnt:UnacceptableTerminationTimeFault", -1, &a->wsnt__UnacceptableTerminationTimeFault, ""))
		return soap->error;
	if (soap_out_PointerTowsnt__UnrecognizedPolicyRequestFaultType(soap, "wsnt:UnrecognizedPolicyRequestFault", -1, &a->wsnt__UnrecognizedPolicyRequestFault, ""))
		return soap->error;
	if (soap_out_PointerTowsnt__UnsupportedPolicyRequestFaultType(soap, "wsnt:UnsupportedPolicyRequestFault", -1, &a->wsnt__UnsupportedPolicyRequestFault, ""))
		return soap->error;
	if (soap_putelement(soap, a->fault, "fault", -1, a->__type))
		return soap->error;
	soap_outliteral(soap, "-any", &a->__any, NULL);
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SOAP_ENV__Detail * SOAP_FMAC4 soap_in_SOAP_ENV__Detail(struct soap *soap, const char *tag, struct SOAP_ENV__Detail *a, const char *type)
{
	size_t soap_flag_wsnt__InvalidFilterFault = 1;
	size_t soap_flag_wsnt__InvalidMessageContentExpressionFault = 1;
	size_t soap_flag_wsnt__InvalidProducerPropertiesExpressionFault = 1;
	size_t soap_flag_wsnt__InvalidTopicExpressionFault = 1;
	size_t soap_flag_wsnt__MultipleTopicsSpecifiedFault = 1;
	size_t soap_flag_wsnt__NoCurrentMessageOnTopicFault = 1;
	size_t soap_flag_wsnt__NotifyMessageNotSupportedFault = 1;
	size_t soap_flag_wsnt__PauseFailedFault = 1;
	size_t soap_flag_eventws__PullMessagesFaultResponse = 1;
	size_t soap_flag_wsrfr__ResourceUnknownFault = 1;
	size_t soap_flag_wsnt__ResumeFailedFault = 1;
	size_t soap_flag_wsnt__SubscribeCreationFailedFault = 1;
	size_t soap_flag_wsnt__TopicExpressionDialectUnknownFault = 1;
	size_t soap_flag_wsnt__TopicNotSupportedFault = 1;
	size_t soap_flag_wsnt__UnableToCreatePullPointFault = 1;
	size_t soap_flag_wsnt__UnableToDestroyPullPointFault = 1;
	size_t soap_flag_wsnt__UnableToDestroySubscriptionFault = 1;
	size_t soap_flag_wsnt__UnableToGetMessagesFault = 1;
	size_t soap_flag_wsnt__UnacceptableInitialTerminationTimeFault = 1;
	size_t soap_flag_wsnt__UnacceptableTerminationTimeFault = 1;
	size_t soap_flag_wsnt__UnrecognizedPolicyRequestFault = 1;
	size_t soap_flag_wsnt__UnsupportedPolicyRequestFault = 1;
	size_t soap_flag_fault = 1;
	size_t soap_flag___any = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct SOAP_ENV__Detail *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SOAP_ENV__Detail, sizeof(struct SOAP_ENV__Detail), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Detail(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_wsnt__InvalidFilterFault && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTowsnt__InvalidFilterFaultType(soap, "wsnt:InvalidFilterFault", &a->wsnt__InvalidFilterFault, "wsnt:InvalidFilterFaultType"))
				{	soap_flag_wsnt__InvalidFilterFault--;
					continue;
				}
			if (soap_flag_wsnt__InvalidMessageContentExpressionFault && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTowsnt__InvalidMessageContentExpressionFaultType(soap, "wsnt:InvalidMessageContentExpressionFault", &a->wsnt__InvalidMessageContentExpressionFault, "wsnt:InvalidMessageContentExpressionFaultType"))
				{	soap_flag_wsnt__InvalidMessageContentExpressionFault--;
					continue;
				}
			if (soap_flag_wsnt__InvalidProducerPropertiesExpressionFault && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTowsnt__InvalidProducerPropertiesExpressionFaultType(soap, "wsnt:InvalidProducerPropertiesExpressionFault", &a->wsnt__InvalidProducerPropertiesExpressionFault, "wsnt:InvalidProducerPropertiesExpressionFaultType"))
				{	soap_flag_wsnt__InvalidProducerPropertiesExpressionFault--;
					continue;
				}
			if (soap_flag_wsnt__InvalidTopicExpressionFault && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTowsnt__InvalidTopicExpressionFaultType(soap, "wsnt:InvalidTopicExpressionFault", &a->wsnt__InvalidTopicExpressionFault, "wsnt:InvalidTopicExpressionFaultType"))
				{	soap_flag_wsnt__InvalidTopicExpressionFault--;
					continue;
				}
			if (soap_flag_wsnt__MultipleTopicsSpecifiedFault && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTowsnt__MultipleTopicsSpecifiedFaultType(soap, "wsnt:MultipleTopicsSpecifiedFault", &a->wsnt__MultipleTopicsSpecifiedFault, "wsnt:MultipleTopicsSpecifiedFaultType"))
				{	soap_flag_wsnt__MultipleTopicsSpecifiedFault--;
					continue;
				}
			if (soap_flag_wsnt__NoCurrentMessageOnTopicFault && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTowsnt__NoCurrentMessageOnTopicFaultType(soap, "wsnt:NoCurrentMessageOnTopicFault", &a->wsnt__NoCurrentMessageOnTopicFault, "wsnt:NoCurrentMessageOnTopicFaultType"))
				{	soap_flag_wsnt__NoCurrentMessageOnTopicFault--;
					continue;
				}
			if (soap_flag_wsnt__NotifyMessageNotSupportedFault && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTowsnt__NotifyMessageNotSupportedFaultType(soap, "wsnt:NotifyMessageNotSupportedFault", &a->wsnt__NotifyMessageNotSupportedFault, "wsnt:NotifyMessageNotSupportedFaultType"))
				{	soap_flag_wsnt__NotifyMessageNotSupportedFault--;
					continue;
				}
			if (soap_flag_wsnt__PauseFailedFault && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTowsnt__PauseFailedFaultType(soap, "wsnt:PauseFailedFault", &a->wsnt__PauseFailedFault, "wsnt:PauseFailedFaultType"))
				{	soap_flag_wsnt__PauseFailedFault--;
					continue;
				}
			if (soap_flag_eventws__PullMessagesFaultResponse && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_eventws__PullMessagesFaultResponse(soap, "eventws:PullMessagesFaultResponse", &a->eventws__PullMessagesFaultResponse, ""))
				{	soap_flag_eventws__PullMessagesFaultResponse--;
					continue;
				}
			if (soap_flag_wsrfr__ResourceUnknownFault && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTowsrfr__ResourceUnknownFaultType(soap, "wsrfr:ResourceUnknownFault", &a->wsrfr__ResourceUnknownFault, "wsrfr:ResourceUnknownFaultType"))
				{	soap_flag_wsrfr__ResourceUnknownFault--;
					continue;
				}
			if (soap_flag_wsnt__ResumeFailedFault && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTowsnt__ResumeFailedFaultType(soap, "wsnt:ResumeFailedFault", &a->wsnt__ResumeFailedFault, "wsnt:ResumeFailedFaultType"))
				{	soap_flag_wsnt__ResumeFailedFault--;
					continue;
				}
			if (soap_flag_wsnt__SubscribeCreationFailedFault && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTowsnt__SubscribeCreationFailedFaultType(soap, "wsnt:SubscribeCreationFailedFault", &a->wsnt__SubscribeCreationFailedFault, "wsnt:SubscribeCreationFailedFaultType"))
				{	soap_flag_wsnt__SubscribeCreationFailedFault--;
					continue;
				}
			if (soap_flag_wsnt__TopicExpressionDialectUnknownFault && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTowsnt__TopicExpressionDialectUnknownFaultType(soap, "wsnt:TopicExpressionDialectUnknownFault", &a->wsnt__TopicExpressionDialectUnknownFault, "wsnt:TopicExpressionDialectUnknownFaultType"))
				{	soap_flag_wsnt__TopicExpressionDialectUnknownFault--;
					continue;
				}
			if (soap_flag_wsnt__TopicNotSupportedFault && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTowsnt__TopicNotSupportedFaultType(soap, "wsnt:TopicNotSupportedFault", &a->wsnt__TopicNotSupportedFault, "wsnt:TopicNotSupportedFaultType"))
				{	soap_flag_wsnt__TopicNotSupportedFault--;
					continue;
				}
			if (soap_flag_wsnt__UnableToCreatePullPointFault && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTowsnt__UnableToCreatePullPointFaultType(soap, "wsnt:UnableToCreatePullPointFault", &a->wsnt__UnableToCreatePullPointFault, "wsnt:UnableToCreatePullPointFaultType"))
				{	soap_flag_wsnt__UnableToCreatePullPointFault--;
					continue;
				}
			if (soap_flag_wsnt__UnableToDestroyPullPointFault && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTowsnt__UnableToDestroyPullPointFaultType(soap, "wsnt:UnableToDestroyPullPointFault", &a->wsnt__UnableToDestroyPullPointFault, "wsnt:UnableToDestroyPullPointFaultType"))
				{	soap_flag_wsnt__UnableToDestroyPullPointFault--;
					continue;
				}
			if (soap_flag_wsnt__UnableToDestroySubscriptionFault && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTowsnt__UnableToDestroySubscriptionFaultType(soap, "wsnt:UnableToDestroySubscriptionFault", &a->wsnt__UnableToDestroySubscriptionFault, "wsnt:UnableToDestroySubscriptionFaultType"))
				{	soap_flag_wsnt__UnableToDestroySubscriptionFault--;
					continue;
				}
			if (soap_flag_wsnt__UnableToGetMessagesFault && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTowsnt__UnableToGetMessagesFaultType(soap, "wsnt:UnableToGetMessagesFault", &a->wsnt__UnableToGetMessagesFault, "wsnt:UnableToGetMessagesFaultType"))
				{	soap_flag_wsnt__UnableToGetMessagesFault--;
					continue;
				}
			if (soap_flag_wsnt__UnacceptableInitialTerminationTimeFault && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTowsnt__UnacceptableInitialTerminationTimeFaultType(soap, "wsnt:UnacceptableInitialTerminationTimeFault", &a->wsnt__UnacceptableInitialTerminationTimeFault, "wsnt:UnacceptableInitialTerminationTimeFaultType"))
				{	soap_flag_wsnt__UnacceptableInitialTerminationTimeFault--;
					continue;
				}
			if (soap_flag_wsnt__UnacceptableTerminationTimeFault && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTowsnt__UnacceptableTerminationTimeFaultType(soap, "wsnt:UnacceptableTerminationTimeFault", &a->wsnt__UnacceptableTerminationTimeFault, "wsnt:UnacceptableTerminationTimeFaultType"))
				{	soap_flag_wsnt__UnacceptableTerminationTimeFault--;
					continue;
				}
			if (soap_flag_wsnt__UnrecognizedPolicyRequestFault && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTowsnt__UnrecognizedPolicyRequestFaultType(soap, "wsnt:UnrecognizedPolicyRequestFault", &a->wsnt__UnrecognizedPolicyRequestFault, "wsnt:UnrecognizedPolicyRequestFaultType"))
				{	soap_flag_wsnt__UnrecognizedPolicyRequestFault--;
					continue;
				}
			if (soap_flag_wsnt__UnsupportedPolicyRequestFault && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTowsnt__UnsupportedPolicyRequestFaultType(soap, "wsnt:UnsupportedPolicyRequestFault", &a->wsnt__UnsupportedPolicyRequestFault, "wsnt:UnsupportedPolicyRequestFaultType"))
				{	soap_flag_wsnt__UnsupportedPolicyRequestFault--;
					continue;
				}
			if (soap_flag_fault && soap->error == SOAP_TAG_MISMATCH)
				if ((a->fault = soap_getelement(soap, &a->__type)))
				{	soap_flag_fault = 0;
					continue;
				}
			if (soap_flag___any && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_inliteral(soap, "-any", &a->__any))
				{	soap_flag___any--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Detail *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_SOAP_ENV__Detail, 0, sizeof(struct SOAP_ENV__Detail), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_fault > 1))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Detail(struct soap *soap, const struct SOAP_ENV__Detail *a, const char *tag, const char *type)
{
	int id = soap_embed(soap, (void*)a, NULL, 0, SOAP_TYPE_SOAP_ENV__Detail);
	if (soap_out_SOAP_ENV__Detail(soap, tag?tag:"SOAP-ENV:Detail", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Detail * SOAP_FMAC4 soap_get_SOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Detail(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct SOAP_ENV__Detail * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Detail(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SOAP_ENV__Detail(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_SOAP_ENV__Detail, n, onvifevent_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = SOAP_NEW(struct SOAP_ENV__Detail);
		if (size)
			*size = sizeof(struct SOAP_ENV__Detail);
	}
	else
	{	cp->ptr = SOAP_NEW_ARRAY(struct SOAP_ENV__Detail, n);
		if (size)
			*size = n * sizeof(struct SOAP_ENV__Detail);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct SOAP_ENV__Detail*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Detail(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct SOAP_ENV__Detail %p -> %p\n", q, p));
	*(struct SOAP_ENV__Detail*)p = *(struct SOAP_ENV__Detail*)q;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Header(struct soap *soap, struct SOAP_ENV__Header *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default__wsa5__MessageID(soap, &a->wsa5__MessageID);
	a->wsa5__RelatesTo = NULL;
	a->wsa5__From = NULL;
	a->wsa5__ReplyTo = NULL;
	a->wsa5__FaultTo = NULL;
	soap_default__wsa5__To(soap, &a->wsa5__To);
	soap_default__wsa5__Action(soap, &a->wsa5__Action);
	a->chan__ChannelInstance = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Header(struct soap *soap, const struct SOAP_ENV__Header *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize__wsa5__MessageID(soap, &a->wsa5__MessageID);
	soap_serialize_PointerTo_wsa5__RelatesTo(soap, &a->wsa5__RelatesTo);
	soap_serialize_PointerTo_wsa5__From(soap, &a->wsa5__From);
	soap_serialize_PointerTo_wsa5__ReplyTo(soap, &a->wsa5__ReplyTo);
	soap_serialize_PointerTo_wsa5__FaultTo(soap, &a->wsa5__FaultTo);
	soap_serialize__wsa5__To(soap, &a->wsa5__To);
	soap_serialize__wsa5__Action(soap, &a->wsa5__Action);
	soap_serialize_PointerTochan__ChannelInstanceType(soap, &a->chan__ChannelInstance);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Header(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Header *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SOAP_ENV__Header), type))
		return soap->error;
	if (soap_out__wsa5__MessageID(soap, "wsa5:MessageID", -1, &a->wsa5__MessageID, ""))
		return soap->error;
	if (soap_out_PointerTo_wsa5__RelatesTo(soap, "wsa5:RelatesTo", -1, &a->wsa5__RelatesTo, ""))
		return soap->error;
	if (soap_out_PointerTo_wsa5__From(soap, "wsa5:From", -1, &a->wsa5__From, ""))
		return soap->error;
	soap->mustUnderstand = 1;
	if (soap_out_PointerTo_wsa5__ReplyTo(soap, "wsa5:ReplyTo", -1, &a->wsa5__ReplyTo, ""))
		return soap->error;
	soap->mustUnderstand = 1;
	if (soap_out_PointerTo_wsa5__FaultTo(soap, "wsa5:FaultTo", -1, &a->wsa5__FaultTo, ""))
		return soap->error;
	soap->mustUnderstand = 1;
	if (soap_out__wsa5__To(soap, "wsa5:To", -1, &a->wsa5__To, ""))
		return soap->error;
	soap->mustUnderstand = 1;
	if (soap_out__wsa5__Action(soap, "wsa5:Action", -1, &a->wsa5__Action, ""))
		return soap->error;
	if (soap_out_PointerTochan__ChannelInstanceType(soap, "chan:ChannelInstance", -1, &a->chan__ChannelInstance, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SOAP_ENV__Header * SOAP_FMAC4 soap_in_SOAP_ENV__Header(struct soap *soap, const char *tag, struct SOAP_ENV__Header *a, const char *type)
{
	size_t soap_flag_wsa5__MessageID = 1;
	size_t soap_flag_wsa5__RelatesTo = 1;
	size_t soap_flag_wsa5__From = 1;
	size_t soap_flag_wsa5__ReplyTo = 1;
	size_t soap_flag_wsa5__FaultTo = 1;
	size_t soap_flag_wsa5__To = 1;
	size_t soap_flag_wsa5__Action = 1;
	size_t soap_flag_chan__ChannelInstance = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct SOAP_ENV__Header *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SOAP_ENV__Header, sizeof(struct SOAP_ENV__Header), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Header(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_wsa5__MessageID && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in__wsa5__MessageID(soap, "wsa5:MessageID", &a->wsa5__MessageID, ""))
				{	soap_flag_wsa5__MessageID--;
					continue;
				}
			if (soap_flag_wsa5__RelatesTo && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_wsa5__RelatesTo(soap, "wsa5:RelatesTo", &a->wsa5__RelatesTo, ""))
				{	soap_flag_wsa5__RelatesTo--;
					continue;
				}
			if (soap_flag_wsa5__From && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_wsa5__From(soap, "wsa5:From", &a->wsa5__From, ""))
				{	soap_flag_wsa5__From--;
					continue;
				}
			if (soap_flag_wsa5__ReplyTo && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_wsa5__ReplyTo(soap, "wsa5:ReplyTo", &a->wsa5__ReplyTo, ""))
				{	soap_flag_wsa5__ReplyTo--;
					continue;
				}
			if (soap_flag_wsa5__FaultTo && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_wsa5__FaultTo(soap, "wsa5:FaultTo", &a->wsa5__FaultTo, ""))
				{	soap_flag_wsa5__FaultTo--;
					continue;
				}
			if (soap_flag_wsa5__To && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in__wsa5__To(soap, "wsa5:To", &a->wsa5__To, ""))
				{	soap_flag_wsa5__To--;
					continue;
				}
			if (soap_flag_wsa5__Action && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in__wsa5__Action(soap, "wsa5:Action", &a->wsa5__Action, ""))
				{	soap_flag_wsa5__Action--;
					continue;
				}
			if (soap_flag_chan__ChannelInstance && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTochan__ChannelInstanceType(soap, "chan:ChannelInstance", &a->chan__ChannelInstance, "chan:ChannelInstanceType"))
				{	soap_flag_chan__ChannelInstance--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Header *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_SOAP_ENV__Header, 0, sizeof(struct SOAP_ENV__Header), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Header(struct soap *soap, const struct SOAP_ENV__Header *a, const char *tag, const char *type)
{
	int id = soap_embed(soap, (void*)a, NULL, 0, SOAP_TYPE_SOAP_ENV__Header);
	if (soap_out_SOAP_ENV__Header(soap, tag?tag:"SOAP-ENV:Header", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Header * SOAP_FMAC4 soap_get_SOAP_ENV__Header(struct soap *soap, struct SOAP_ENV__Header *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Header(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct SOAP_ENV__Header * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Header(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SOAP_ENV__Header(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_SOAP_ENV__Header, n, onvifevent_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = SOAP_NEW(struct SOAP_ENV__Header);
		if (size)
			*size = sizeof(struct SOAP_ENV__Header);
	}
	else
	{	cp->ptr = SOAP_NEW_ARRAY(struct SOAP_ENV__Header, n);
		if (size)
			*size = n * sizeof(struct SOAP_ENV__Header);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct SOAP_ENV__Header*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Header(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct SOAP_ENV__Header %p -> %p\n", q, p));
	*(struct SOAP_ENV__Header*)p = *(struct SOAP_ENV__Header*)q;
}

#endif

SOAP_FMAC3 void SOAP_FMAC4 soap_default_chan__ChannelInstanceType(struct soap *soap, struct chan__ChannelInstanceType *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_int(soap, &a->__item);
	a->wsa5__IsReferenceParameter = (enum _wsa5__IsReferenceParameter)0;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_chan__ChannelInstanceType(struct soap *soap, const struct chan__ChannelInstanceType *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_embedded(soap, &a->__item, SOAP_TYPE_int);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_chan__ChannelInstanceType(struct soap *soap, const char *tag, int id, const struct chan__ChannelInstanceType *a, const char *type)
{
	soap_set_attr(soap, "wsa5:IsReferenceParameter", soap__wsa5__IsReferenceParameter2s(soap, a->wsa5__IsReferenceParameter), 1);
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	return soap_out_int(soap, tag, id, &a->__item, "");
}

SOAP_FMAC3 struct chan__ChannelInstanceType * SOAP_FMAC4 soap_in_chan__ChannelInstanceType(struct soap *soap, const char *tag, struct chan__ChannelInstanceType *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!(a = (struct chan__ChannelInstanceType *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_chan__ChannelInstanceType, sizeof(struct chan__ChannelInstanceType), soap->type, soap->arrayType)))
		return NULL;
	soap_revert(soap);
	*soap->id = '\0';
	soap_default_chan__ChannelInstanceType(soap, a);
	if (soap_s2_wsa5__IsReferenceParameter(soap, soap_attr_value(soap, "wsa5:IsReferenceParameter", 0), &a->wsa5__IsReferenceParameter))
		return NULL;
	if (!soap_in_int(soap, tag, &a->__item, "chan:ChannelInstanceType"))
		return NULL;
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_chan__ChannelInstanceType(struct soap *soap, const struct chan__ChannelInstanceType *a, const char *tag, const char *type)
{
	int id = soap_embed(soap, (void*)a, NULL, 0, SOAP_TYPE_chan__ChannelInstanceType);
	if (soap_out_chan__ChannelInstanceType(soap, tag?tag:"chan:ChannelInstanceType", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct chan__ChannelInstanceType * SOAP_FMAC4 soap_get_chan__ChannelInstanceType(struct soap *soap, struct chan__ChannelInstanceType *p, const char *tag, const char *type)
{
	if ((p = soap_in_chan__ChannelInstanceType(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct chan__ChannelInstanceType * SOAP_FMAC2 soap_instantiate_chan__ChannelInstanceType(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_chan__ChannelInstanceType(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_chan__ChannelInstanceType, n, onvifevent_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = SOAP_NEW(struct chan__ChannelInstanceType);
		if (size)
			*size = sizeof(struct chan__ChannelInstanceType);
	}
	else
	{	cp->ptr = SOAP_NEW_ARRAY(struct chan__ChannelInstanceType, n);
		if (size)
			*size = n * sizeof(struct chan__ChannelInstanceType);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct chan__ChannelInstanceType*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_chan__ChannelInstanceType(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct chan__ChannelInstanceType %p -> %p\n", q, p));
	*(struct chan__ChannelInstanceType*)p = *(struct chan__ChannelInstanceType*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_wsa5__ProblemActionType(struct soap *soap, struct wsa5__ProblemActionType *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_string(soap, &a->Action);
	soap_default_string(soap, &a->SoapAction);
	a->__anyAttribute = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_wsa5__ProblemActionType(struct soap *soap, const struct wsa5__ProblemActionType *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_string(soap, &a->Action);
	soap_serialize_string(soap, &a->SoapAction);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_wsa5__ProblemActionType(struct soap *soap, const char *tag, int id, const struct wsa5__ProblemActionType *a, const char *type)
{
	if (a->__anyAttribute)
		soap_set_attr(soap, "-anyAttribute", a->__anyAttribute, 1);
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_wsa5__ProblemActionType), type))
		return soap->error;
	if (soap_out_string(soap, "wsa5:Action", -1, &a->Action, ""))
		return soap->error;
	if (soap_out_string(soap, "wsa5:SoapAction", -1, &a->SoapAction, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct wsa5__ProblemActionType * SOAP_FMAC4 soap_in_wsa5__ProblemActionType(struct soap *soap, const char *tag, struct wsa5__ProblemActionType *a, const char *type)
{
	size_t soap_flag_Action = 1;
	size_t soap_flag_SoapAction = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct wsa5__ProblemActionType *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_wsa5__ProblemActionType, sizeof(struct wsa5__ProblemActionType), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_wsa5__ProblemActionType(soap, a);
	if (soap_s2string(soap, soap_attr_value(soap, "-anyAttribute", 0), &a->__anyAttribute, 0, -1))
		return NULL;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_Action && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "wsa5:Action", &a->Action, "xsd:string"))
				{	soap_flag_Action--;
					continue;
				}
			if (soap_flag_SoapAction && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "wsa5:SoapAction", &a->SoapAction, "xsd:string"))
				{	soap_flag_SoapAction--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct wsa5__ProblemActionType *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_wsa5__ProblemActionType, 0, sizeof(struct wsa5__ProblemActionType), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_wsa5__ProblemActionType(struct soap *soap, const struct wsa5__ProblemActionType *a, const char *tag, const char *type)
{
	int id = soap_embed(soap, (void*)a, NULL, 0, SOAP_TYPE_wsa5__ProblemActionType);
	if (soap_out_wsa5__ProblemActionType(soap, tag?tag:"wsa5:ProblemActionType", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct wsa5__ProblemActionType * SOAP_FMAC4 soap_get_wsa5__ProblemActionType(struct soap *soap, struct wsa5__ProblemActionType *p, const char *tag, const char *type)
{
	if ((p = soap_in_wsa5__ProblemActionType(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct wsa5__ProblemActionType * SOAP_FMAC2 soap_instantiate_wsa5__ProblemActionType(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_wsa5__ProblemActionType(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_wsa5__ProblemActionType, n, onvifevent_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = SOAP_NEW(struct wsa5__ProblemActionType);
		if (size)
			*size = sizeof(struct wsa5__ProblemActionType);
	}
	else
	{	cp->ptr = SOAP_NEW_ARRAY(struct wsa5__ProblemActionType, n);
		if (size)
			*size = n * sizeof(struct wsa5__ProblemActionType);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct wsa5__ProblemActionType*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_wsa5__ProblemActionType(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct wsa5__ProblemActionType %p -> %p\n", q, p));
	*(struct wsa5__ProblemActionType*)p = *(struct wsa5__ProblemActionType*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_wsa5__RelatesToType(struct soap *soap, struct wsa5__RelatesToType *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_string(soap, &a->__item);
	soap_default_wsa5__RelationshipTypeOpenEnum(soap, &a->RelationshipType);
	a->__anyAttribute = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_wsa5__RelatesToType(struct soap *soap, const struct wsa5__RelatesToType *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_string(soap, &a->__item);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_wsa5__RelatesToType(struct soap *soap, const char *tag, int id, const struct wsa5__RelatesToType *a, const char *type)
{
	if (a->RelationshipType)
		soap_set_attr(soap, "RelationshipType", a->RelationshipType, 1);
	if (a->__anyAttribute)
		soap_set_attr(soap, "-anyAttribute", a->__anyAttribute, 1);
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	return soap_out_string(soap, tag, id, &a->__item, "");
}

SOAP_FMAC3 struct wsa5__RelatesToType * SOAP_FMAC4 soap_in_wsa5__RelatesToType(struct soap *soap, const char *tag, struct wsa5__RelatesToType *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!(a = (struct wsa5__RelatesToType *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_wsa5__RelatesToType, sizeof(struct wsa5__RelatesToType), soap->type, soap->arrayType)))
		return NULL;
	soap_revert(soap);
	*soap->id = '\0';
	soap_default_wsa5__RelatesToType(soap, a);
	if (soap_s2string(soap, soap_attr_value(soap, "RelationshipType", 0), &a->RelationshipType, 0, -1))
		return NULL;
	if (soap_s2string(soap, soap_attr_value(soap, "-anyAttribute", 0), &a->__anyAttribute, 0, -1))
		return NULL;
	if (!soap_in_string(soap, tag, &a->__item, "wsa5:RelatesToType"))
		return NULL;
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_wsa5__RelatesToType(struct soap *soap, const struct wsa5__RelatesToType *a, const char *tag, const char *type)
{
	int id = soap_embed(soap, (void*)a, NULL, 0, SOAP_TYPE_wsa5__RelatesToType);
	if (soap_out_wsa5__RelatesToType(soap, tag?tag:"wsa5:RelatesToType", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct wsa5__RelatesToType * SOAP_FMAC4 soap_get_wsa5__RelatesToType(struct soap *soap, struct wsa5__RelatesToType *p, const char *tag, const char *type)
{
	if ((p = soap_in_wsa5__RelatesToType(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct wsa5__RelatesToType * SOAP_FMAC2 soap_instantiate_wsa5__RelatesToType(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_wsa5__RelatesToType(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_wsa5__RelatesToType, n, onvifevent_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = SOAP_NEW(struct wsa5__RelatesToType);
		if (size)
			*size = sizeof(struct wsa5__RelatesToType);
	}
	else
	{	cp->ptr = SOAP_NEW_ARRAY(struct wsa5__RelatesToType, n);
		if (size)
			*size = n * sizeof(struct wsa5__RelatesToType);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct wsa5__RelatesToType*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_wsa5__RelatesToType(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct wsa5__RelatesToType %p -> %p\n", q, p));
	*(struct wsa5__RelatesToType*)p = *(struct wsa5__RelatesToType*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_wsa5__MetadataType(struct soap *soap, struct wsa5__MetadataType *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->__size = 0;
	a->__any = NULL;
	a->__anyAttribute = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_wsa5__MetadataType(struct soap *soap, const struct wsa5__MetadataType *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_wsa5__MetadataType(struct soap *soap, const char *tag, int id, const struct wsa5__MetadataType *a, const char *type)
{
	if (a->__anyAttribute)
		soap_set_attr(soap, "-anyAttribute", a->__anyAttribute, 1);
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_wsa5__MetadataType), type))
		return soap->error;
	if (a->__any)
	{	int i;
		for (i = 0; i < a->__size; i++)
			soap_outliteral(soap, "-any", a->__any + i, NULL);
	}
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct wsa5__MetadataType * SOAP_FMAC4 soap_in_wsa5__MetadataType(struct soap *soap, const char *tag, struct wsa5__MetadataType *a, const char *type)
{
	struct soap_blist *soap_blist___any = NULL;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct wsa5__MetadataType *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_wsa5__MetadataType, sizeof(struct wsa5__MetadataType), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_wsa5__MetadataType(soap, a);
	if (soap_s2string(soap, soap_attr_value(soap, "-anyAttribute", 0), &a->__anyAttribute, 0, -1))
		return NULL;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap->error == SOAP_TAG_MISMATCH && !soap_peek_element(soap))
			{	if (a->__any == NULL)
				{	if (soap_blist___any == NULL)
						soap_blist___any = soap_new_block(soap);
					a->__any = (char **)soap_push_block(soap, soap_blist___any, sizeof(char *));
					if (a->__any == NULL)
						return NULL;
					*a->__any = NULL;
				}
				if (soap_inliteral(soap, "-any", a->__any))
				{	a->__size++;
					a->__any = NULL;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (a->__any)
			soap_pop_block(soap, soap_blist___any);
		if (a->__size)
			a->__any = (char **)soap_save_block(soap, soap_blist___any, NULL, 1);
		else
		{	a->__any = NULL;
			if (soap_blist___any)
				soap_end_block(soap, soap_blist___any);
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct wsa5__MetadataType *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_wsa5__MetadataType, 0, sizeof(struct wsa5__MetadataType), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_wsa5__MetadataType(struct soap *soap, const struct wsa5__MetadataType *a, const char *tag, const char *type)
{
	int id = soap_embed(soap, (void*)a, NULL, 0, SOAP_TYPE_wsa5__MetadataType);
	if (soap_out_wsa5__MetadataType(soap, tag?tag:"wsa5:MetadataType", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct wsa5__MetadataType * SOAP_FMAC4 soap_get_wsa5__MetadataType(struct soap *soap, struct wsa5__MetadataType *p, const char *tag, const char *type)
{
	if ((p = soap_in_wsa5__MetadataType(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct wsa5__MetadataType * SOAP_FMAC2 soap_instantiate_wsa5__MetadataType(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_wsa5__MetadataType(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_wsa5__MetadataType, n, onvifevent_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = SOAP_NEW(struct wsa5__MetadataType);
		if (size)
			*size = sizeof(struct wsa5__MetadataType);
	}
	else
	{	cp->ptr = SOAP_NEW_ARRAY(struct wsa5__MetadataType, n);
		if (size)
			*size = n * sizeof(struct wsa5__MetadataType);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct wsa5__MetadataType*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_wsa5__MetadataType(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct wsa5__MetadataType %p -> %p\n", q, p));
	*(struct wsa5__MetadataType*)p = *(struct wsa5__MetadataType*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_wsa5__ReferenceParametersType(struct soap *soap, struct wsa5__ReferenceParametersType *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->chan__ChannelInstance = NULL;
	a->__size = 0;
	a->__any = NULL;
	a->__anyAttribute = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_wsa5__ReferenceParametersType(struct soap *soap, const struct wsa5__ReferenceParametersType *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerToint(soap, &a->chan__ChannelInstance);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_wsa5__ReferenceParametersType(struct soap *soap, const char *tag, int id, const struct wsa5__ReferenceParametersType *a, const char *type)
{
	if (a->__anyAttribute)
		soap_set_attr(soap, "-anyAttribute", a->__anyAttribute, 1);
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_wsa5__ReferenceParametersType), type))
		return soap->error;
	if (soap_out_PointerToint(soap, "chan:ChannelInstance", -1, &a->chan__ChannelInstance, ""))
		return soap->error;
	if (a->__any)
	{	int i;
		for (i = 0; i < a->__size; i++)
			soap_outliteral(soap, "-any", a->__any + i, NULL);
	}
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct wsa5__ReferenceParametersType * SOAP_FMAC4 soap_in_wsa5__ReferenceParametersType(struct soap *soap, const char *tag, struct wsa5__ReferenceParametersType *a, const char *type)
{
	size_t soap_flag_chan__ChannelInstance = 1;
	struct soap_blist *soap_blist___any = NULL;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct wsa5__ReferenceParametersType *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_wsa5__ReferenceParametersType, sizeof(struct wsa5__ReferenceParametersType), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_wsa5__ReferenceParametersType(soap, a);
	if (soap_s2string(soap, soap_attr_value(soap, "-anyAttribute", 0), &a->__anyAttribute, 0, -1))
		return NULL;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_chan__ChannelInstance && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToint(soap, "chan:ChannelInstance", &a->chan__ChannelInstance, "xsd:int"))
				{	soap_flag_chan__ChannelInstance--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH && !soap_peek_element(soap))
			{	if (a->__any == NULL)
				{	if (soap_blist___any == NULL)
						soap_blist___any = soap_new_block(soap);
					a->__any = (char **)soap_push_block(soap, soap_blist___any, sizeof(char *));
					if (a->__any == NULL)
						return NULL;
					*a->__any = NULL;
				}
				if (soap_inliteral(soap, "-any", a->__any))
				{	a->__size++;
					a->__any = NULL;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (a->__any)
			soap_pop_block(soap, soap_blist___any);
		if (a->__size)
			a->__any = (char **)soap_save_block(soap, soap_blist___any, NULL, 1);
		else
		{	a->__any = NULL;
			if (soap_blist___any)
				soap_end_block(soap, soap_blist___any);
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct wsa5__ReferenceParametersType *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_wsa5__ReferenceParametersType, 0, sizeof(struct wsa5__ReferenceParametersType), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_wsa5__ReferenceParametersType(struct soap *soap, const struct wsa5__ReferenceParametersType *a, const char *tag, const char *type)
{
	int id = soap_embed(soap, (void*)a, NULL, 0, SOAP_TYPE_wsa5__ReferenceParametersType);
	if (soap_out_wsa5__ReferenceParametersType(soap, tag?tag:"wsa5:ReferenceParametersType", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct wsa5__ReferenceParametersType * SOAP_FMAC4 soap_get_wsa5__ReferenceParametersType(struct soap *soap, struct wsa5__ReferenceParametersType *p, const char *tag, const char *type)
{
	if ((p = soap_in_wsa5__ReferenceParametersType(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct wsa5__ReferenceParametersType * SOAP_FMAC2 soap_instantiate_wsa5__ReferenceParametersType(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_wsa5__ReferenceParametersType(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_wsa5__ReferenceParametersType, n, onvifevent_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = SOAP_NEW(struct wsa5__ReferenceParametersType);
		if (size)
			*size = sizeof(struct wsa5__ReferenceParametersType);
	}
	else
	{	cp->ptr = SOAP_NEW_ARRAY(struct wsa5__ReferenceParametersType, n);
		if (size)
			*size = n * sizeof(struct wsa5__ReferenceParametersType);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct wsa5__ReferenceParametersType*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_wsa5__ReferenceParametersType(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct wsa5__ReferenceParametersType %p -> %p\n", q, p));
	*(struct wsa5__ReferenceParametersType*)p = *(struct wsa5__ReferenceParametersType*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_wsa5__EndpointReferenceType(struct soap *soap, struct wsa5__EndpointReferenceType *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_string(soap, &a->Address);
	a->ReferenceParameters = NULL;
	a->Metadata = NULL;
	a->__size = 0;
	a->__any = NULL;
	a->__anyAttribute = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_wsa5__EndpointReferenceType(struct soap *soap, const struct wsa5__EndpointReferenceType *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_string(soap, &a->Address);
	soap_serialize_PointerTowsa5__ReferenceParametersType(soap, &a->ReferenceParameters);
	soap_serialize_PointerTowsa5__MetadataType(soap, &a->Metadata);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_wsa5__EndpointReferenceType(struct soap *soap, const char *tag, int id, const struct wsa5__EndpointReferenceType *a, const char *type)
{
	if (a->__anyAttribute)
		soap_set_attr(soap, "-anyAttribute", a->__anyAttribute, 1);
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_wsa5__EndpointReferenceType), type))
		return soap->error;
	if (a->Address)
	{	if (soap_out_string(soap, "wsa5:Address", -1, &a->Address, ""))
			return soap->error;
	}
	else if (soap_element_nil(soap, "wsa5:Address"))
		return soap->error;
	if (soap_out_PointerTowsa5__ReferenceParametersType(soap, "wsa5:ReferenceParameters", -1, &a->ReferenceParameters, ""))
		return soap->error;
	if (soap_out_PointerTowsa5__MetadataType(soap, "wsa5:Metadata", -1, &a->Metadata, ""))
		return soap->error;
	if (a->__any)
	{	int i;
		for (i = 0; i < a->__size; i++)
			soap_outliteral(soap, "-any", a->__any + i, NULL);
	}
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct wsa5__EndpointReferenceType * SOAP_FMAC4 soap_in_wsa5__EndpointReferenceType(struct soap *soap, const char *tag, struct wsa5__EndpointReferenceType *a, const char *type)
{
	size_t soap_flag_Address = 1;
	size_t soap_flag_ReferenceParameters = 1;
	size_t soap_flag_Metadata = 1;
	struct soap_blist *soap_blist___any = NULL;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct wsa5__EndpointReferenceType *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_wsa5__EndpointReferenceType, sizeof(struct wsa5__EndpointReferenceType), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_wsa5__EndpointReferenceType(soap, a);
	if (soap_s2string(soap, soap_attr_value(soap, "-anyAttribute", 0), &a->__anyAttribute, 0, -1))
		return NULL;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_Address && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "wsa5:Address", &a->Address, "xsd:string"))
				{	soap_flag_Address--;
					continue;
				}
			if (soap_flag_ReferenceParameters && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTowsa5__ReferenceParametersType(soap, "wsa5:ReferenceParameters", &a->ReferenceParameters, "wsa5:ReferenceParametersType"))
				{	soap_flag_ReferenceParameters--;
					continue;
				}
			if (soap_flag_Metadata && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTowsa5__MetadataType(soap, "wsa5:Metadata", &a->Metadata, "wsa5:MetadataType"))
				{	soap_flag_Metadata--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH && !soap_peek_element(soap))
			{	if (a->__any == NULL)
				{	if (soap_blist___any == NULL)
						soap_blist___any = soap_new_block(soap);
					a->__any = (char **)soap_push_block(soap, soap_blist___any, sizeof(char *));
					if (a->__any == NULL)
						return NULL;
					*a->__any = NULL;
				}
				if (soap_inliteral(soap, "-any", a->__any))
				{	a->__size++;
					a->__any = NULL;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (a->__any)
			soap_pop_block(soap, soap_blist___any);
		if (a->__size)
			a->__any = (char **)soap_save_block(soap, soap_blist___any, NULL, 1);
		else
		{	a->__any = NULL;
			if (soap_blist___any)
				soap_end_block(soap, soap_blist___any);
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct wsa5__EndpointReferenceType *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_wsa5__EndpointReferenceType, 0, sizeof(struct wsa5__EndpointReferenceType), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_Address > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_wsa5__EndpointReferenceType(struct soap *soap, const struct wsa5__EndpointReferenceType *a, const char *tag, const char *type)
{
	int id = soap_embed(soap, (void*)a, NULL, 0, SOAP_TYPE_wsa5__EndpointReferenceType);
	if (soap_out_wsa5__EndpointReferenceType(soap, tag?tag:"wsa5:EndpointReferenceType", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct wsa5__EndpointReferenceType * SOAP_FMAC4 soap_get_wsa5__EndpointReferenceType(struct soap *soap, struct wsa5__EndpointReferenceType *p, const char *tag, const char *type)
{
	if ((p = soap_in_wsa5__EndpointReferenceType(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct wsa5__EndpointReferenceType * SOAP_FMAC2 soap_instantiate_wsa5__EndpointReferenceType(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_wsa5__EndpointReferenceType(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_wsa5__EndpointReferenceType, n, onvifevent_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = SOAP_NEW(struct wsa5__EndpointReferenceType);
		if (size)
			*size = sizeof(struct wsa5__EndpointReferenceType);
	}
	else
	{	cp->ptr = SOAP_NEW_ARRAY(struct wsa5__EndpointReferenceType, n);
		if (size)
			*size = n * sizeof(struct wsa5__EndpointReferenceType);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct wsa5__EndpointReferenceType*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_wsa5__EndpointReferenceType(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct wsa5__EndpointReferenceType %p -> %p\n", q, p));
	*(struct wsa5__EndpointReferenceType*)p = *(struct wsa5__EndpointReferenceType*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_wsnt__ResumeSubscription(struct soap *soap, _wsnt__ResumeSubscription *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE__wsnt__ResumeSubscription))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_wsnt__ResumeSubscription(struct soap *soap, const char *tag, int id, _wsnt__ResumeSubscription *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__wsnt__ResumeSubscription);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _wsnt__ResumeSubscription ** SOAP_FMAC4 soap_in_PointerTo_wsnt__ResumeSubscription(struct soap *soap, const char *tag, _wsnt__ResumeSubscription **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_wsnt__ResumeSubscription **)soap_malloc(soap, sizeof(_wsnt__ResumeSubscription *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_wsnt__ResumeSubscription *)soap_instantiate__wsnt__ResumeSubscription(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_wsnt__ResumeSubscription ** p = (_wsnt__ResumeSubscription **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__wsnt__ResumeSubscription, sizeof(_wsnt__ResumeSubscription), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_wsnt__ResumeSubscription(struct soap *soap, _wsnt__ResumeSubscription *const*a, const char *tag, const char *type)
{
	int id = soap_embed(soap, (void*)a, NULL, 0, SOAP_TYPE_PointerTo_wsnt__ResumeSubscription);
	if (soap_out_PointerTo_wsnt__ResumeSubscription(soap, tag?tag:"wsnt:ResumeSubscription", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _wsnt__ResumeSubscription ** SOAP_FMAC4 soap_get_PointerTo_wsnt__ResumeSubscription(struct soap *soap, _wsnt__ResumeSubscription **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_wsnt__ResumeSubscription(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_wsnt__PauseSubscription(struct soap *soap, _wsnt__PauseSubscription *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE__wsnt__PauseSubscription))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_wsnt__PauseSubscription(struct soap *soap, const char *tag, int id, _wsnt__PauseSubscription *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__wsnt__PauseSubscription);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _wsnt__PauseSubscription ** SOAP_FMAC4 soap_in_PointerTo_wsnt__PauseSubscription(struct soap *soap, const char *tag, _wsnt__PauseSubscription **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_wsnt__PauseSubscription **)soap_malloc(soap, sizeof(_wsnt__PauseSubscription *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_wsnt__PauseSubscription *)soap_instantiate__wsnt__PauseSubscription(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_wsnt__PauseSubscription ** p = (_wsnt__PauseSubscription **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__wsnt__PauseSubscription, sizeof(_wsnt__PauseSubscription), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_wsnt__PauseSubscription(struct soap *soap, _wsnt__PauseSubscription *const*a, const char *tag, const char *type)
{
	int id = soap_embed(soap, (void*)a, NULL, 0, SOAP_TYPE_PointerTo_wsnt__PauseSubscription);
	if (soap_out_PointerTo_wsnt__PauseSubscription(soap, tag?tag:"wsnt:PauseSubscription", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _wsnt__PauseSubscription ** SOAP_FMAC4 soap_get_PointerTo_wsnt__PauseSubscription(struct soap *soap, _wsnt__PauseSubscription **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_wsnt__PauseSubscription(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_wsnt__CreatePullPoint(struct soap *soap, _wsnt__CreatePullPoint *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE__wsnt__CreatePullPoint))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_wsnt__CreatePullPoint(struct soap *soap, const char *tag, int id, _wsnt__CreatePullPoint *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__wsnt__CreatePullPoint);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _wsnt__CreatePullPoint ** SOAP_FMAC4 soap_in_PointerTo_wsnt__CreatePullPoint(struct soap *soap, const char *tag, _wsnt__CreatePullPoint **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_wsnt__CreatePullPoint **)soap_malloc(soap, sizeof(_wsnt__CreatePullPoint *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_wsnt__CreatePullPoint *)soap_instantiate__wsnt__CreatePullPoint(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_wsnt__CreatePullPoint ** p = (_wsnt__CreatePullPoint **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__wsnt__CreatePullPoint, sizeof(_wsnt__CreatePullPoint), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_wsnt__CreatePullPoint(struct soap *soap, _wsnt__CreatePullPoint *const*a, const char *tag, const char *type)
{
	int id = soap_embed(soap, (void*)a, NULL, 0, SOAP_TYPE_PointerTo_wsnt__CreatePullPoint);
	if (soap_out_PointerTo_wsnt__CreatePullPoint(soap, tag?tag:"wsnt:CreatePullPoint", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _wsnt__CreatePullPoint ** SOAP_FMAC4 soap_get_PointerTo_wsnt__CreatePullPoint(struct soap *soap, _wsnt__CreatePullPoint **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_wsnt__CreatePullPoint(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_wsnt__DestroyPullPoint(struct soap *soap, _wsnt__DestroyPullPoint *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE__wsnt__DestroyPullPoint))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_wsnt__DestroyPullPoint(struct soap *soap, const char *tag, int id, _wsnt__DestroyPullPoint *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__wsnt__DestroyPullPoint);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _wsnt__DestroyPullPoint ** SOAP_FMAC4 soap_in_PointerTo_wsnt__DestroyPullPoint(struct soap *soap, const char *tag, _wsnt__DestroyPullPoint **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_wsnt__DestroyPullPoint **)soap_malloc(soap, sizeof(_wsnt__DestroyPullPoint *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_wsnt__DestroyPullPoint *)soap_instantiate__wsnt__DestroyPullPoint(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_wsnt__DestroyPullPoint ** p = (_wsnt__DestroyPullPoint **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__wsnt__DestroyPullPoint, sizeof(_wsnt__DestroyPullPoint), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_wsnt__DestroyPullPoint(struct soap *soap, _wsnt__DestroyPullPoint *const*a, const char *tag, const char *type)
{
	int id = soap_embed(soap, (void*)a, NULL, 0, SOAP_TYPE_PointerTo_wsnt__DestroyPullPoint);
	if (soap_out_PointerTo_wsnt__DestroyPullPoint(soap, tag?tag:"wsnt:DestroyPullPoint", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _wsnt__DestroyPullPoint ** SOAP_FMAC4 soap_get_PointerTo_wsnt__DestroyPullPoint(struct soap *soap, _wsnt__DestroyPullPoint **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_wsnt__DestroyPullPoint(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_wsnt__GetMessages(struct soap *soap, _wsnt__GetMessages *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE__wsnt__GetMessages))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_wsnt__GetMessages(struct soap *soap, const char *tag, int id, _wsnt__GetMessages *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__wsnt__GetMessages);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _wsnt__GetMessages ** SOAP_FMAC4 soap_in_PointerTo_wsnt__GetMessages(struct soap *soap, const char *tag, _wsnt__GetMessages **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_wsnt__GetMessages **)soap_malloc(soap, sizeof(_wsnt__GetMessages *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_wsnt__GetMessages *)soap_instantiate__wsnt__GetMessages(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_wsnt__GetMessages ** p = (_wsnt__GetMessages **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__wsnt__GetMessages, sizeof(_wsnt__GetMessages), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_wsnt__GetMessages(struct soap *soap, _wsnt__GetMessages *const*a, const char *tag, const char *type)
{
	int id = soap_embed(soap, (void*)a, NULL, 0, SOAP_TYPE_PointerTo_wsnt__GetMessages);
	if (soap_out_PointerTo_wsnt__GetMessages(soap, tag?tag:"wsnt:GetMessages", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _wsnt__GetMessages ** SOAP_FMAC4 soap_get_PointerTo_wsnt__GetMessages(struct soap *soap, _wsnt__GetMessages **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_wsnt__GetMessages(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_wsnt__Notify(struct soap *soap, _wsnt__Notify *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE__wsnt__Notify))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_wsnt__Notify(struct soap *soap, const char *tag, int id, _wsnt__Notify *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__wsnt__Notify);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _wsnt__Notify ** SOAP_FMAC4 soap_in_PointerTo_wsnt__Notify(struct soap *soap, const char *tag, _wsnt__Notify **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_wsnt__Notify **)soap_malloc(soap, sizeof(_wsnt__Notify *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_wsnt__Notify *)soap_instantiate__wsnt__Notify(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_wsnt__Notify ** p = (_wsnt__Notify **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__wsnt__Notify, sizeof(_wsnt__Notify), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_wsnt__Notify(struct soap *soap, _wsnt__Notify *const*a, const char *tag, const char *type)
{
	int id = soap_embed(soap, (void*)a, NULL, 0, SOAP_TYPE_PointerTo_wsnt__Notify);
	if (soap_out_PointerTo_wsnt__Notify(soap, tag?tag:"wsnt:Notify", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _wsnt__Notify ** SOAP_FMAC4 soap_get_PointerTo_wsnt__Notify(struct soap *soap, _wsnt__Notify **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_wsnt__Notify(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_wsnt__GetCurrentMessage(struct soap *soap, _wsnt__GetCurrentMessage *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE__wsnt__GetCurrentMessage))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_wsnt__GetCurrentMessage(struct soap *soap, const char *tag, int id, _wsnt__GetCurrentMessage *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__wsnt__GetCurrentMessage);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _wsnt__GetCurrentMessage ** SOAP_FMAC4 soap_in_PointerTo_wsnt__GetCurrentMessage(struct soap *soap, const char *tag, _wsnt__GetCurrentMessage **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_wsnt__GetCurrentMessage **)soap_malloc(soap, sizeof(_wsnt__GetCurrentMessage *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_wsnt__GetCurrentMessage *)soap_instantiate__wsnt__GetCurrentMessage(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_wsnt__GetCurrentMessage ** p = (_wsnt__GetCurrentMessage **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__wsnt__GetCurrentMessage, sizeof(_wsnt__GetCurrentMessage), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_wsnt__GetCurrentMessage(struct soap *soap, _wsnt__GetCurrentMessage *const*a, const char *tag, const char *type)
{
	int id = soap_embed(soap, (void*)a, NULL, 0, SOAP_TYPE_PointerTo_wsnt__GetCurrentMessage);
	if (soap_out_PointerTo_wsnt__GetCurrentMessage(soap, tag?tag:"wsnt:GetCurrentMessage", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _wsnt__GetCurrentMessage ** SOAP_FMAC4 soap_get_PointerTo_wsnt__GetCurrentMessage(struct soap *soap, _wsnt__GetCurrentMessage **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_wsnt__GetCurrentMessage(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_wsnt__Subscribe(struct soap *soap, _wsnt__Subscribe *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE__wsnt__Subscribe))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_wsnt__Subscribe(struct soap *soap, const char *tag, int id, _wsnt__Subscribe *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__wsnt__Subscribe);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _wsnt__Subscribe ** SOAP_FMAC4 soap_in_PointerTo_wsnt__Subscribe(struct soap *soap, const char *tag, _wsnt__Subscribe **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_wsnt__Subscribe **)soap_malloc(soap, sizeof(_wsnt__Subscribe *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_wsnt__Subscribe *)soap_instantiate__wsnt__Subscribe(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_wsnt__Subscribe ** p = (_wsnt__Subscribe **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__wsnt__Subscribe, sizeof(_wsnt__Subscribe), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_wsnt__Subscribe(struct soap *soap, _wsnt__Subscribe *const*a, const char *tag, const char *type)
{
	int id = soap_embed(soap, (void*)a, NULL, 0, SOAP_TYPE_PointerTo_wsnt__Subscribe);
	if (soap_out_PointerTo_wsnt__Subscribe(soap, tag?tag:"wsnt:Subscribe", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _wsnt__Subscribe ** SOAP_FMAC4 soap_get_PointerTo_wsnt__Subscribe(struct soap *soap, _wsnt__Subscribe **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_wsnt__Subscribe(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_wsnt__Unsubscribe(struct soap *soap, _wsnt__Unsubscribe *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE__wsnt__Unsubscribe))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_wsnt__Unsubscribe(struct soap *soap, const char *tag, int id, _wsnt__Unsubscribe *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__wsnt__Unsubscribe);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _wsnt__Unsubscribe ** SOAP_FMAC4 soap_in_PointerTo_wsnt__Unsubscribe(struct soap *soap, const char *tag, _wsnt__Unsubscribe **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_wsnt__Unsubscribe **)soap_malloc(soap, sizeof(_wsnt__Unsubscribe *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_wsnt__Unsubscribe *)soap_instantiate__wsnt__Unsubscribe(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_wsnt__Unsubscribe ** p = (_wsnt__Unsubscribe **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__wsnt__Unsubscribe, sizeof(_wsnt__Unsubscribe), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_wsnt__Unsubscribe(struct soap *soap, _wsnt__Unsubscribe *const*a, const char *tag, const char *type)
{
	int id = soap_embed(soap, (void*)a, NULL, 0, SOAP_TYPE_PointerTo_wsnt__Unsubscribe);
	if (soap_out_PointerTo_wsnt__Unsubscribe(soap, tag?tag:"wsnt:Unsubscribe", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _wsnt__Unsubscribe ** SOAP_FMAC4 soap_get_PointerTo_wsnt__Unsubscribe(struct soap *soap, _wsnt__Unsubscribe **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_wsnt__Unsubscribe(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_wsnt__Renew(struct soap *soap, _wsnt__Renew *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE__wsnt__Renew))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_wsnt__Renew(struct soap *soap, const char *tag, int id, _wsnt__Renew *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__wsnt__Renew);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _wsnt__Renew ** SOAP_FMAC4 soap_in_PointerTo_wsnt__Renew(struct soap *soap, const char *tag, _wsnt__Renew **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_wsnt__Renew **)soap_malloc(soap, sizeof(_wsnt__Renew *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_wsnt__Renew *)soap_instantiate__wsnt__Renew(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_wsnt__Renew ** p = (_wsnt__Renew **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__wsnt__Renew, sizeof(_wsnt__Renew), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_wsnt__Renew(struct soap *soap, _wsnt__Renew *const*a, const char *tag, const char *type)
{
	int id = soap_embed(soap, (void*)a, NULL, 0, SOAP_TYPE_PointerTo_wsnt__Renew);
	if (soap_out_PointerTo_wsnt__Renew(soap, tag?tag:"wsnt:Renew", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _wsnt__Renew ** SOAP_FMAC4 soap_get_PointerTo_wsnt__Renew(struct soap *soap, _wsnt__Renew **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_wsnt__Renew(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_eventws__GetEventProperties(struct soap *soap, _eventws__GetEventProperties *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE__eventws__GetEventProperties))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_eventws__GetEventProperties(struct soap *soap, const char *tag, int id, _eventws__GetEventProperties *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__eventws__GetEventProperties);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _eventws__GetEventProperties ** SOAP_FMAC4 soap_in_PointerTo_eventws__GetEventProperties(struct soap *soap, const char *tag, _eventws__GetEventProperties **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_eventws__GetEventProperties **)soap_malloc(soap, sizeof(_eventws__GetEventProperties *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_eventws__GetEventProperties *)soap_instantiate__eventws__GetEventProperties(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_eventws__GetEventProperties ** p = (_eventws__GetEventProperties **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__eventws__GetEventProperties, sizeof(_eventws__GetEventProperties), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_eventws__GetEventProperties(struct soap *soap, _eventws__GetEventProperties *const*a, const char *tag, const char *type)
{
	int id = soap_embed(soap, (void*)a, NULL, 0, SOAP_TYPE_PointerTo_eventws__GetEventProperties);
	if (soap_out_PointerTo_eventws__GetEventProperties(soap, tag?tag:"eventws:GetEventProperties", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _eventws__GetEventProperties ** SOAP_FMAC4 soap_get_PointerTo_eventws__GetEventProperties(struct soap *soap, _eventws__GetEventProperties **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_eventws__GetEventProperties(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_eventws__CreatePullPointSubscription(struct soap *soap, _eventws__CreatePullPointSubscription *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE__eventws__CreatePullPointSubscription))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_eventws__CreatePullPointSubscription(struct soap *soap, const char *tag, int id, _eventws__CreatePullPointSubscription *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__eventws__CreatePullPointSubscription);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _eventws__CreatePullPointSubscription ** SOAP_FMAC4 soap_in_PointerTo_eventws__CreatePullPointSubscription(struct soap *soap, const char *tag, _eventws__CreatePullPointSubscription **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_eventws__CreatePullPointSubscription **)soap_malloc(soap, sizeof(_eventws__CreatePullPointSubscription *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_eventws__CreatePullPointSubscription *)soap_instantiate__eventws__CreatePullPointSubscription(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_eventws__CreatePullPointSubscription ** p = (_eventws__CreatePullPointSubscription **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__eventws__CreatePullPointSubscription, sizeof(_eventws__CreatePullPointSubscription), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_eventws__CreatePullPointSubscription(struct soap *soap, _eventws__CreatePullPointSubscription *const*a, const char *tag, const char *type)
{
	int id = soap_embed(soap, (void*)a, NULL, 0, SOAP_TYPE_PointerTo_eventws__CreatePullPointSubscription);
	if (soap_out_PointerTo_eventws__CreatePullPointSubscription(soap, tag?tag:"eventws:CreatePullPointSubscription", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _eventws__CreatePullPointSubscription ** SOAP_FMAC4 soap_get_PointerTo_eventws__CreatePullPointSubscription(struct soap *soap, _eventws__CreatePullPointSubscription **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_eventws__CreatePullPointSubscription(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_eventws__GetServiceCapabilities(struct soap *soap, _eventws__GetServiceCapabilities *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE__eventws__GetServiceCapabilities))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_eventws__GetServiceCapabilities(struct soap *soap, const char *tag, int id, _eventws__GetServiceCapabilities *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__eventws__GetServiceCapabilities);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _eventws__GetServiceCapabilities ** SOAP_FMAC4 soap_in_PointerTo_eventws__GetServiceCapabilities(struct soap *soap, const char *tag, _eventws__GetServiceCapabilities **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_eventws__GetServiceCapabilities **)soap_malloc(soap, sizeof(_eventws__GetServiceCapabilities *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_eventws__GetServiceCapabilities *)soap_instantiate__eventws__GetServiceCapabilities(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_eventws__GetServiceCapabilities ** p = (_eventws__GetServiceCapabilities **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__eventws__GetServiceCapabilities, sizeof(_eventws__GetServiceCapabilities), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_eventws__GetServiceCapabilities(struct soap *soap, _eventws__GetServiceCapabilities *const*a, const char *tag, const char *type)
{
	int id = soap_embed(soap, (void*)a, NULL, 0, SOAP_TYPE_PointerTo_eventws__GetServiceCapabilities);
	if (soap_out_PointerTo_eventws__GetServiceCapabilities(soap, tag?tag:"eventws:GetServiceCapabilities", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _eventws__GetServiceCapabilities ** SOAP_FMAC4 soap_get_PointerTo_eventws__GetServiceCapabilities(struct soap *soap, _eventws__GetServiceCapabilities **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_eventws__GetServiceCapabilities(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_eventws__SetSynchronizationPoint(struct soap *soap, _eventws__SetSynchronizationPoint *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE__eventws__SetSynchronizationPoint))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_eventws__SetSynchronizationPoint(struct soap *soap, const char *tag, int id, _eventws__SetSynchronizationPoint *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__eventws__SetSynchronizationPoint);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _eventws__SetSynchronizationPoint ** SOAP_FMAC4 soap_in_PointerTo_eventws__SetSynchronizationPoint(struct soap *soap, const char *tag, _eventws__SetSynchronizationPoint **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_eventws__SetSynchronizationPoint **)soap_malloc(soap, sizeof(_eventws__SetSynchronizationPoint *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_eventws__SetSynchronizationPoint *)soap_instantiate__eventws__SetSynchronizationPoint(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_eventws__SetSynchronizationPoint ** p = (_eventws__SetSynchronizationPoint **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__eventws__SetSynchronizationPoint, sizeof(_eventws__SetSynchronizationPoint), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_eventws__SetSynchronizationPoint(struct soap *soap, _eventws__SetSynchronizationPoint *const*a, const char *tag, const char *type)
{
	int id = soap_embed(soap, (void*)a, NULL, 0, SOAP_TYPE_PointerTo_eventws__SetSynchronizationPoint);
	if (soap_out_PointerTo_eventws__SetSynchronizationPoint(soap, tag?tag:"eventws:SetSynchronizationPoint", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _eventws__SetSynchronizationPoint ** SOAP_FMAC4 soap_get_PointerTo_eventws__SetSynchronizationPoint(struct soap *soap, _eventws__SetSynchronizationPoint **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_eventws__SetSynchronizationPoint(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_eventws__Seek(struct soap *soap, _eventws__Seek *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE__eventws__Seek))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_eventws__Seek(struct soap *soap, const char *tag, int id, _eventws__Seek *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__eventws__Seek);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _eventws__Seek ** SOAP_FMAC4 soap_in_PointerTo_eventws__Seek(struct soap *soap, const char *tag, _eventws__Seek **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_eventws__Seek **)soap_malloc(soap, sizeof(_eventws__Seek *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_eventws__Seek *)soap_instantiate__eventws__Seek(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_eventws__Seek ** p = (_eventws__Seek **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__eventws__Seek, sizeof(_eventws__Seek), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_eventws__Seek(struct soap *soap, _eventws__Seek *const*a, const char *tag, const char *type)
{
	int id = soap_embed(soap, (void*)a, NULL, 0, SOAP_TYPE_PointerTo_eventws__Seek);
	if (soap_out_PointerTo_eventws__Seek(soap, tag?tag:"eventws:Seek", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _eventws__Seek ** SOAP_FMAC4 soap_get_PointerTo_eventws__Seek(struct soap *soap, _eventws__Seek **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_eventws__Seek(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_eventws__PullMessages(struct soap *soap, _eventws__PullMessages *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE__eventws__PullMessages))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_eventws__PullMessages(struct soap *soap, const char *tag, int id, _eventws__PullMessages *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__eventws__PullMessages);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _eventws__PullMessages ** SOAP_FMAC4 soap_in_PointerTo_eventws__PullMessages(struct soap *soap, const char *tag, _eventws__PullMessages **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_eventws__PullMessages **)soap_malloc(soap, sizeof(_eventws__PullMessages *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_eventws__PullMessages *)soap_instantiate__eventws__PullMessages(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_eventws__PullMessages ** p = (_eventws__PullMessages **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__eventws__PullMessages, sizeof(_eventws__PullMessages), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_eventws__PullMessages(struct soap *soap, _eventws__PullMessages *const*a, const char *tag, const char *type)
{
	int id = soap_embed(soap, (void*)a, NULL, 0, SOAP_TYPE_PointerTo_eventws__PullMessages);
	if (soap_out_PointerTo_eventws__PullMessages(soap, tag?tag:"eventws:PullMessages", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _eventws__PullMessages ** SOAP_FMAC4 soap_get_PointerTo_eventws__PullMessages(struct soap *soap, _eventws__PullMessages **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_eventws__PullMessages(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTowsnt__UnsupportedPolicyRequestFaultType(struct soap *soap, wsnt__UnsupportedPolicyRequestFaultType *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_wsnt__UnsupportedPolicyRequestFaultType))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTowsnt__UnsupportedPolicyRequestFaultType(struct soap *soap, const char *tag, int id, wsnt__UnsupportedPolicyRequestFaultType *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_wsnt__UnsupportedPolicyRequestFaultType);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 wsnt__UnsupportedPolicyRequestFaultType ** SOAP_FMAC4 soap_in_PointerTowsnt__UnsupportedPolicyRequestFaultType(struct soap *soap, const char *tag, wsnt__UnsupportedPolicyRequestFaultType **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (wsnt__UnsupportedPolicyRequestFaultType **)soap_malloc(soap, sizeof(wsnt__UnsupportedPolicyRequestFaultType *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (wsnt__UnsupportedPolicyRequestFaultType *)soap_instantiate_wsnt__UnsupportedPolicyRequestFaultType(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	wsnt__UnsupportedPolicyRequestFaultType ** p = (wsnt__UnsupportedPolicyRequestFaultType **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_wsnt__UnsupportedPolicyRequestFaultType, sizeof(wsnt__UnsupportedPolicyRequestFaultType), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTowsnt__UnsupportedPolicyRequestFaultType(struct soap *soap, wsnt__UnsupportedPolicyRequestFaultType *const*a, const char *tag, const char *type)
{
	int id = soap_embed(soap, (void*)a, NULL, 0, SOAP_TYPE_PointerTowsnt__UnsupportedPolicyRequestFaultType);
	if (soap_out_PointerTowsnt__UnsupportedPolicyRequestFaultType(soap, tag?tag:"wsnt:UnsupportedPolicyRequestFaultType", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 wsnt__UnsupportedPolicyRequestFaultType ** SOAP_FMAC4 soap_get_PointerTowsnt__UnsupportedPolicyRequestFaultType(struct soap *soap, wsnt__UnsupportedPolicyRequestFaultType **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTowsnt__UnsupportedPolicyRequestFaultType(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTowsnt__UnrecognizedPolicyRequestFaultType(struct soap *soap, wsnt__UnrecognizedPolicyRequestFaultType *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_wsnt__UnrecognizedPolicyRequestFaultType))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTowsnt__UnrecognizedPolicyRequestFaultType(struct soap *soap, const char *tag, int id, wsnt__UnrecognizedPolicyRequestFaultType *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_wsnt__UnrecognizedPolicyRequestFaultType);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 wsnt__UnrecognizedPolicyRequestFaultType ** SOAP_FMAC4 soap_in_PointerTowsnt__UnrecognizedPolicyRequestFaultType(struct soap *soap, const char *tag, wsnt__UnrecognizedPolicyRequestFaultType **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (wsnt__UnrecognizedPolicyRequestFaultType **)soap_malloc(soap, sizeof(wsnt__UnrecognizedPolicyRequestFaultType *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (wsnt__UnrecognizedPolicyRequestFaultType *)soap_instantiate_wsnt__UnrecognizedPolicyRequestFaultType(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	wsnt__UnrecognizedPolicyRequestFaultType ** p = (wsnt__UnrecognizedPolicyRequestFaultType **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_wsnt__UnrecognizedPolicyRequestFaultType, sizeof(wsnt__UnrecognizedPolicyRequestFaultType), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTowsnt__UnrecognizedPolicyRequestFaultType(struct soap *soap, wsnt__UnrecognizedPolicyRequestFaultType *const*a, const char *tag, const char *type)
{
	int id = soap_embed(soap, (void*)a, NULL, 0, SOAP_TYPE_PointerTowsnt__UnrecognizedPolicyRequestFaultType);
	if (soap_out_PointerTowsnt__UnrecognizedPolicyRequestFaultType(soap, tag?tag:"wsnt:UnrecognizedPolicyRequestFaultType", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 wsnt__UnrecognizedPolicyRequestFaultType ** SOAP_FMAC4 soap_get_PointerTowsnt__UnrecognizedPolicyRequestFaultType(struct soap *soap, wsnt__UnrecognizedPolicyRequestFaultType **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTowsnt__UnrecognizedPolicyRequestFaultType(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTowsnt__UnacceptableTerminationTimeFaultType(struct soap *soap, wsnt__UnacceptableTerminationTimeFaultType *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_wsnt__UnacceptableTerminationTimeFaultType))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTowsnt__UnacceptableTerminationTimeFaultType(struct soap *soap, const char *tag, int id, wsnt__UnacceptableTerminationTimeFaultType *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_wsnt__UnacceptableTerminationTimeFaultType);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 wsnt__UnacceptableTerminationTimeFaultType ** SOAP_FMAC4 soap_in_PointerTowsnt__UnacceptableTerminationTimeFaultType(struct soap *soap, const char *tag, wsnt__UnacceptableTerminationTimeFaultType **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (wsnt__UnacceptableTerminationTimeFaultType **)soap_malloc(soap, sizeof(wsnt__UnacceptableTerminationTimeFaultType *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (wsnt__UnacceptableTerminationTimeFaultType *)soap_instantiate_wsnt__UnacceptableTerminationTimeFaultType(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	wsnt__UnacceptableTerminationTimeFaultType ** p = (wsnt__UnacceptableTerminationTimeFaultType **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_wsnt__UnacceptableTerminationTimeFaultType, sizeof(wsnt__UnacceptableTerminationTimeFaultType), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTowsnt__UnacceptableTerminationTimeFaultType(struct soap *soap, wsnt__UnacceptableTerminationTimeFaultType *const*a, const char *tag, const char *type)
{
	int id = soap_embed(soap, (void*)a, NULL, 0, SOAP_TYPE_PointerTowsnt__UnacceptableTerminationTimeFaultType);
	if (soap_out_PointerTowsnt__UnacceptableTerminationTimeFaultType(soap, tag?tag:"wsnt:UnacceptableTerminationTimeFaultType", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 wsnt__UnacceptableTerminationTimeFaultType ** SOAP_FMAC4 soap_get_PointerTowsnt__UnacceptableTerminationTimeFaultType(struct soap *soap, wsnt__UnacceptableTerminationTimeFaultType **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTowsnt__UnacceptableTerminationTimeFaultType(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTowsnt__UnacceptableInitialTerminationTimeFaultType(struct soap *soap, wsnt__UnacceptableInitialTerminationTimeFaultType *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_wsnt__UnacceptableInitialTerminationTimeFaultType))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTowsnt__UnacceptableInitialTerminationTimeFaultType(struct soap *soap, const char *tag, int id, wsnt__UnacceptableInitialTerminationTimeFaultType *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_wsnt__UnacceptableInitialTerminationTimeFaultType);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 wsnt__UnacceptableInitialTerminationTimeFaultType ** SOAP_FMAC4 soap_in_PointerTowsnt__UnacceptableInitialTerminationTimeFaultType(struct soap *soap, const char *tag, wsnt__UnacceptableInitialTerminationTimeFaultType **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (wsnt__UnacceptableInitialTerminationTimeFaultType **)soap_malloc(soap, sizeof(wsnt__UnacceptableInitialTerminationTimeFaultType *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (wsnt__UnacceptableInitialTerminationTimeFaultType *)soap_instantiate_wsnt__UnacceptableInitialTerminationTimeFaultType(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	wsnt__UnacceptableInitialTerminationTimeFaultType ** p = (wsnt__UnacceptableInitialTerminationTimeFaultType **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_wsnt__UnacceptableInitialTerminationTimeFaultType, sizeof(wsnt__UnacceptableInitialTerminationTimeFaultType), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTowsnt__UnacceptableInitialTerminationTimeFaultType(struct soap *soap, wsnt__UnacceptableInitialTerminationTimeFaultType *const*a, const char *tag, const char *type)
{
	int id = soap_embed(soap, (void*)a, NULL, 0, SOAP_TYPE_PointerTowsnt__UnacceptableInitialTerminationTimeFaultType);
	if (soap_out_PointerTowsnt__UnacceptableInitialTerminationTimeFaultType(soap, tag?tag:"wsnt:UnacceptableInitialTerminationTimeFaultType", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 wsnt__UnacceptableInitialTerminationTimeFaultType ** SOAP_FMAC4 soap_get_PointerTowsnt__UnacceptableInitialTerminationTimeFaultType(struct soap *soap, wsnt__UnacceptableInitialTerminationTimeFaultType **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTowsnt__UnacceptableInitialTerminationTimeFaultType(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTowsnt__UnableToGetMessagesFaultType(struct soap *soap, wsnt__UnableToGetMessagesFaultType *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_wsnt__UnableToGetMessagesFaultType))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTowsnt__UnableToGetMessagesFaultType(struct soap *soap, const char *tag, int id, wsnt__UnableToGetMessagesFaultType *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_wsnt__UnableToGetMessagesFaultType);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 wsnt__UnableToGetMessagesFaultType ** SOAP_FMAC4 soap_in_PointerTowsnt__UnableToGetMessagesFaultType(struct soap *soap, const char *tag, wsnt__UnableToGetMessagesFaultType **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (wsnt__UnableToGetMessagesFaultType **)soap_malloc(soap, sizeof(wsnt__UnableToGetMessagesFaultType *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (wsnt__UnableToGetMessagesFaultType *)soap_instantiate_wsnt__UnableToGetMessagesFaultType(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	wsnt__UnableToGetMessagesFaultType ** p = (wsnt__UnableToGetMessagesFaultType **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_wsnt__UnableToGetMessagesFaultType, sizeof(wsnt__UnableToGetMessagesFaultType), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTowsnt__UnableToGetMessagesFaultType(struct soap *soap, wsnt__UnableToGetMessagesFaultType *const*a, const char *tag, const char *type)
{
	int id = soap_embed(soap, (void*)a, NULL, 0, SOAP_TYPE_PointerTowsnt__UnableToGetMessagesFaultType);
	if (soap_out_PointerTowsnt__UnableToGetMessagesFaultType(soap, tag?tag:"wsnt:UnableToGetMessagesFaultType", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 wsnt__UnableToGetMessagesFaultType ** SOAP_FMAC4 soap_get_PointerTowsnt__UnableToGetMessagesFaultType(struct soap *soap, wsnt__UnableToGetMessagesFaultType **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTowsnt__UnableToGetMessagesFaultType(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTowsnt__UnableToDestroySubscriptionFaultType(struct soap *soap, wsnt__UnableToDestroySubscriptionFaultType *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_wsnt__UnableToDestroySubscriptionFaultType))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTowsnt__UnableToDestroySubscriptionFaultType(struct soap *soap, const char *tag, int id, wsnt__UnableToDestroySubscriptionFaultType *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_wsnt__UnableToDestroySubscriptionFaultType);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 wsnt__UnableToDestroySubscriptionFaultType ** SOAP_FMAC4 soap_in_PointerTowsnt__UnableToDestroySubscriptionFaultType(struct soap *soap, const char *tag, wsnt__UnableToDestroySubscriptionFaultType **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (wsnt__UnableToDestroySubscriptionFaultType **)soap_malloc(soap, sizeof(wsnt__UnableToDestroySubscriptionFaultType *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (wsnt__UnableToDestroySubscriptionFaultType *)soap_instantiate_wsnt__UnableToDestroySubscriptionFaultType(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	wsnt__UnableToDestroySubscriptionFaultType ** p = (wsnt__UnableToDestroySubscriptionFaultType **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_wsnt__UnableToDestroySubscriptionFaultType, sizeof(wsnt__UnableToDestroySubscriptionFaultType), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTowsnt__UnableToDestroySubscriptionFaultType(struct soap *soap, wsnt__UnableToDestroySubscriptionFaultType *const*a, const char *tag, const char *type)
{
	int id = soap_embed(soap, (void*)a, NULL, 0, SOAP_TYPE_PointerTowsnt__UnableToDestroySubscriptionFaultType);
	if (soap_out_PointerTowsnt__UnableToDestroySubscriptionFaultType(soap, tag?tag:"wsnt:UnableToDestroySubscriptionFaultType", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 wsnt__UnableToDestroySubscriptionFaultType ** SOAP_FMAC4 soap_get_PointerTowsnt__UnableToDestroySubscriptionFaultType(struct soap *soap, wsnt__UnableToDestroySubscriptionFaultType **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTowsnt__UnableToDestroySubscriptionFaultType(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTowsnt__UnableToDestroyPullPointFaultType(struct soap *soap, wsnt__UnableToDestroyPullPointFaultType *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_wsnt__UnableToDestroyPullPointFaultType))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTowsnt__UnableToDestroyPullPointFaultType(struct soap *soap, const char *tag, int id, wsnt__UnableToDestroyPullPointFaultType *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_wsnt__UnableToDestroyPullPointFaultType);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 wsnt__UnableToDestroyPullPointFaultType ** SOAP_FMAC4 soap_in_PointerTowsnt__UnableToDestroyPullPointFaultType(struct soap *soap, const char *tag, wsnt__UnableToDestroyPullPointFaultType **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (wsnt__UnableToDestroyPullPointFaultType **)soap_malloc(soap, sizeof(wsnt__UnableToDestroyPullPointFaultType *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (wsnt__UnableToDestroyPullPointFaultType *)soap_instantiate_wsnt__UnableToDestroyPullPointFaultType(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	wsnt__UnableToDestroyPullPointFaultType ** p = (wsnt__UnableToDestroyPullPointFaultType **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_wsnt__UnableToDestroyPullPointFaultType, sizeof(wsnt__UnableToDestroyPullPointFaultType), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTowsnt__UnableToDestroyPullPointFaultType(struct soap *soap, wsnt__UnableToDestroyPullPointFaultType *const*a, const char *tag, const char *type)
{
	int id = soap_embed(soap, (void*)a, NULL, 0, SOAP_TYPE_PointerTowsnt__UnableToDestroyPullPointFaultType);
	if (soap_out_PointerTowsnt__UnableToDestroyPullPointFaultType(soap, tag?tag:"wsnt:UnableToDestroyPullPointFaultType", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 wsnt__UnableToDestroyPullPointFaultType ** SOAP_FMAC4 soap_get_PointerTowsnt__UnableToDestroyPullPointFaultType(struct soap *soap, wsnt__UnableToDestroyPullPointFaultType **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTowsnt__UnableToDestroyPullPointFaultType(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTowsnt__UnableToCreatePullPointFaultType(struct soap *soap, wsnt__UnableToCreatePullPointFaultType *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_wsnt__UnableToCreatePullPointFaultType))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTowsnt__UnableToCreatePullPointFaultType(struct soap *soap, const char *tag, int id, wsnt__UnableToCreatePullPointFaultType *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_wsnt__UnableToCreatePullPointFaultType);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 wsnt__UnableToCreatePullPointFaultType ** SOAP_FMAC4 soap_in_PointerTowsnt__UnableToCreatePullPointFaultType(struct soap *soap, const char *tag, wsnt__UnableToCreatePullPointFaultType **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (wsnt__UnableToCreatePullPointFaultType **)soap_malloc(soap, sizeof(wsnt__UnableToCreatePullPointFaultType *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (wsnt__UnableToCreatePullPointFaultType *)soap_instantiate_wsnt__UnableToCreatePullPointFaultType(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	wsnt__UnableToCreatePullPointFaultType ** p = (wsnt__UnableToCreatePullPointFaultType **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_wsnt__UnableToCreatePullPointFaultType, sizeof(wsnt__UnableToCreatePullPointFaultType), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTowsnt__UnableToCreatePullPointFaultType(struct soap *soap, wsnt__UnableToCreatePullPointFaultType *const*a, const char *tag, const char *type)
{
	int id = soap_embed(soap, (void*)a, NULL, 0, SOAP_TYPE_PointerTowsnt__UnableToCreatePullPointFaultType);
	if (soap_out_PointerTowsnt__UnableToCreatePullPointFaultType(soap, tag?tag:"wsnt:UnableToCreatePullPointFaultType", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 wsnt__UnableToCreatePullPointFaultType ** SOAP_FMAC4 soap_get_PointerTowsnt__UnableToCreatePullPointFaultType(struct soap *soap, wsnt__UnableToCreatePullPointFaultType **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTowsnt__UnableToCreatePullPointFaultType(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTowsnt__TopicNotSupportedFaultType(struct soap *soap, wsnt__TopicNotSupportedFaultType *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_wsnt__TopicNotSupportedFaultType))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTowsnt__TopicNotSupportedFaultType(struct soap *soap, const char *tag, int id, wsnt__TopicNotSupportedFaultType *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_wsnt__TopicNotSupportedFaultType);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 wsnt__TopicNotSupportedFaultType ** SOAP_FMAC4 soap_in_PointerTowsnt__TopicNotSupportedFaultType(struct soap *soap, const char *tag, wsnt__TopicNotSupportedFaultType **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (wsnt__TopicNotSupportedFaultType **)soap_malloc(soap, sizeof(wsnt__TopicNotSupportedFaultType *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (wsnt__TopicNotSupportedFaultType *)soap_instantiate_wsnt__TopicNotSupportedFaultType(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	wsnt__TopicNotSupportedFaultType ** p = (wsnt__TopicNotSupportedFaultType **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_wsnt__TopicNotSupportedFaultType, sizeof(wsnt__TopicNotSupportedFaultType), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTowsnt__TopicNotSupportedFaultType(struct soap *soap, wsnt__TopicNotSupportedFaultType *const*a, const char *tag, const char *type)
{
	int id = soap_embed(soap, (void*)a, NULL, 0, SOAP_TYPE_PointerTowsnt__TopicNotSupportedFaultType);
	if (soap_out_PointerTowsnt__TopicNotSupportedFaultType(soap, tag?tag:"wsnt:TopicNotSupportedFaultType", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 wsnt__TopicNotSupportedFaultType ** SOAP_FMAC4 soap_get_PointerTowsnt__TopicNotSupportedFaultType(struct soap *soap, wsnt__TopicNotSupportedFaultType **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTowsnt__TopicNotSupportedFaultType(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTowsnt__TopicExpressionDialectUnknownFaultType(struct soap *soap, wsnt__TopicExpressionDialectUnknownFaultType *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_wsnt__TopicExpressionDialectUnknownFaultType))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTowsnt__TopicExpressionDialectUnknownFaultType(struct soap *soap, const char *tag, int id, wsnt__TopicExpressionDialectUnknownFaultType *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_wsnt__TopicExpressionDialectUnknownFaultType);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 wsnt__TopicExpressionDialectUnknownFaultType ** SOAP_FMAC4 soap_in_PointerTowsnt__TopicExpressionDialectUnknownFaultType(struct soap *soap, const char *tag, wsnt__TopicExpressionDialectUnknownFaultType **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (wsnt__TopicExpressionDialectUnknownFaultType **)soap_malloc(soap, sizeof(wsnt__TopicExpressionDialectUnknownFaultType *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (wsnt__TopicExpressionDialectUnknownFaultType *)soap_instantiate_wsnt__TopicExpressionDialectUnknownFaultType(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	wsnt__TopicExpressionDialectUnknownFaultType ** p = (wsnt__TopicExpressionDialectUnknownFaultType **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_wsnt__TopicExpressionDialectUnknownFaultType, sizeof(wsnt__TopicExpressionDialectUnknownFaultType), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTowsnt__TopicExpressionDialectUnknownFaultType(struct soap *soap, wsnt__TopicExpressionDialectUnknownFaultType *const*a, const char *tag, const char *type)
{
	int id = soap_embed(soap, (void*)a, NULL, 0, SOAP_TYPE_PointerTowsnt__TopicExpressionDialectUnknownFaultType);
	if (soap_out_PointerTowsnt__TopicExpressionDialectUnknownFaultType(soap, tag?tag:"wsnt:TopicExpressionDialectUnknownFaultType", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 wsnt__TopicExpressionDialectUnknownFaultType ** SOAP_FMAC4 soap_get_PointerTowsnt__TopicExpressionDialectUnknownFaultType(struct soap *soap, wsnt__TopicExpressionDialectUnknownFaultType **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTowsnt__TopicExpressionDialectUnknownFaultType(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTowsnt__SubscribeCreationFailedFaultType(struct soap *soap, wsnt__SubscribeCreationFailedFaultType *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_wsnt__SubscribeCreationFailedFaultType))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTowsnt__SubscribeCreationFailedFaultType(struct soap *soap, const char *tag, int id, wsnt__SubscribeCreationFailedFaultType *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_wsnt__SubscribeCreationFailedFaultType);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 wsnt__SubscribeCreationFailedFaultType ** SOAP_FMAC4 soap_in_PointerTowsnt__SubscribeCreationFailedFaultType(struct soap *soap, const char *tag, wsnt__SubscribeCreationFailedFaultType **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (wsnt__SubscribeCreationFailedFaultType **)soap_malloc(soap, sizeof(wsnt__SubscribeCreationFailedFaultType *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (wsnt__SubscribeCreationFailedFaultType *)soap_instantiate_wsnt__SubscribeCreationFailedFaultType(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	wsnt__SubscribeCreationFailedFaultType ** p = (wsnt__SubscribeCreationFailedFaultType **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_wsnt__SubscribeCreationFailedFaultType, sizeof(wsnt__SubscribeCreationFailedFaultType), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTowsnt__SubscribeCreationFailedFaultType(struct soap *soap, wsnt__SubscribeCreationFailedFaultType *const*a, const char *tag, const char *type)
{
	int id = soap_embed(soap, (void*)a, NULL, 0, SOAP_TYPE_PointerTowsnt__SubscribeCreationFailedFaultType);
	if (soap_out_PointerTowsnt__SubscribeCreationFailedFaultType(soap, tag?tag:"wsnt:SubscribeCreationFailedFaultType", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 wsnt__SubscribeCreationFailedFaultType ** SOAP_FMAC4 soap_get_PointerTowsnt__SubscribeCreationFailedFaultType(struct soap *soap, wsnt__SubscribeCreationFailedFaultType **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTowsnt__SubscribeCreationFailedFaultType(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTowsnt__ResumeFailedFaultType(struct soap *soap, wsnt__ResumeFailedFaultType *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_wsnt__ResumeFailedFaultType))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTowsnt__ResumeFailedFaultType(struct soap *soap, const char *tag, int id, wsnt__ResumeFailedFaultType *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_wsnt__ResumeFailedFaultType);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 wsnt__ResumeFailedFaultType ** SOAP_FMAC4 soap_in_PointerTowsnt__ResumeFailedFaultType(struct soap *soap, const char *tag, wsnt__ResumeFailedFaultType **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (wsnt__ResumeFailedFaultType **)soap_malloc(soap, sizeof(wsnt__ResumeFailedFaultType *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (wsnt__ResumeFailedFaultType *)soap_instantiate_wsnt__ResumeFailedFaultType(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	wsnt__ResumeFailedFaultType ** p = (wsnt__ResumeFailedFaultType **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_wsnt__ResumeFailedFaultType, sizeof(wsnt__ResumeFailedFaultType), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTowsnt__ResumeFailedFaultType(struct soap *soap, wsnt__ResumeFailedFaultType *const*a, const char *tag, const char *type)
{
	int id = soap_embed(soap, (void*)a, NULL, 0, SOAP_TYPE_PointerTowsnt__ResumeFailedFaultType);
	if (soap_out_PointerTowsnt__ResumeFailedFaultType(soap, tag?tag:"wsnt:ResumeFailedFaultType", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 wsnt__ResumeFailedFaultType ** SOAP_FMAC4 soap_get_PointerTowsnt__ResumeFailedFaultType(struct soap *soap, wsnt__ResumeFailedFaultType **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTowsnt__ResumeFailedFaultType(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTowsrfr__ResourceUnknownFaultType(struct soap *soap, wsrfr__ResourceUnknownFaultType *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_wsrfr__ResourceUnknownFaultType))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTowsrfr__ResourceUnknownFaultType(struct soap *soap, const char *tag, int id, wsrfr__ResourceUnknownFaultType *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_wsrfr__ResourceUnknownFaultType);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 wsrfr__ResourceUnknownFaultType ** SOAP_FMAC4 soap_in_PointerTowsrfr__ResourceUnknownFaultType(struct soap *soap, const char *tag, wsrfr__ResourceUnknownFaultType **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (wsrfr__ResourceUnknownFaultType **)soap_malloc(soap, sizeof(wsrfr__ResourceUnknownFaultType *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (wsrfr__ResourceUnknownFaultType *)soap_instantiate_wsrfr__ResourceUnknownFaultType(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	wsrfr__ResourceUnknownFaultType ** p = (wsrfr__ResourceUnknownFaultType **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_wsrfr__ResourceUnknownFaultType, sizeof(wsrfr__ResourceUnknownFaultType), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTowsrfr__ResourceUnknownFaultType(struct soap *soap, wsrfr__ResourceUnknownFaultType *const*a, const char *tag, const char *type)
{
	int id = soap_embed(soap, (void*)a, NULL, 0, SOAP_TYPE_PointerTowsrfr__ResourceUnknownFaultType);
	if (soap_out_PointerTowsrfr__ResourceUnknownFaultType(soap, tag?tag:"wsrfr:ResourceUnknownFaultType", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 wsrfr__ResourceUnknownFaultType ** SOAP_FMAC4 soap_get_PointerTowsrfr__ResourceUnknownFaultType(struct soap *soap, wsrfr__ResourceUnknownFaultType **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTowsrfr__ResourceUnknownFaultType(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_eventws__PullMessagesFaultResponse(struct soap *soap, _eventws__PullMessagesFaultResponse *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE__eventws__PullMessagesFaultResponse))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_eventws__PullMessagesFaultResponse(struct soap *soap, const char *tag, int id, _eventws__PullMessagesFaultResponse *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__eventws__PullMessagesFaultResponse);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _eventws__PullMessagesFaultResponse ** SOAP_FMAC4 soap_in_PointerTo_eventws__PullMessagesFaultResponse(struct soap *soap, const char *tag, _eventws__PullMessagesFaultResponse **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_eventws__PullMessagesFaultResponse **)soap_malloc(soap, sizeof(_eventws__PullMessagesFaultResponse *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_eventws__PullMessagesFaultResponse *)soap_instantiate__eventws__PullMessagesFaultResponse(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_eventws__PullMessagesFaultResponse ** p = (_eventws__PullMessagesFaultResponse **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__eventws__PullMessagesFaultResponse, sizeof(_eventws__PullMessagesFaultResponse), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_eventws__PullMessagesFaultResponse(struct soap *soap, _eventws__PullMessagesFaultResponse *const*a, const char *tag, const char *type)
{
	int id = soap_embed(soap, (void*)a, NULL, 0, SOAP_TYPE_PointerTo_eventws__PullMessagesFaultResponse);
	if (soap_out_PointerTo_eventws__PullMessagesFaultResponse(soap, tag?tag:"eventws:PullMessagesFaultResponse", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _eventws__PullMessagesFaultResponse ** SOAP_FMAC4 soap_get_PointerTo_eventws__PullMessagesFaultResponse(struct soap *soap, _eventws__PullMessagesFaultResponse **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_eventws__PullMessagesFaultResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTowsnt__PauseFailedFaultType(struct soap *soap, wsnt__PauseFailedFaultType *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_wsnt__PauseFailedFaultType))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTowsnt__PauseFailedFaultType(struct soap *soap, const char *tag, int id, wsnt__PauseFailedFaultType *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_wsnt__PauseFailedFaultType);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 wsnt__PauseFailedFaultType ** SOAP_FMAC4 soap_in_PointerTowsnt__PauseFailedFaultType(struct soap *soap, const char *tag, wsnt__PauseFailedFaultType **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (wsnt__PauseFailedFaultType **)soap_malloc(soap, sizeof(wsnt__PauseFailedFaultType *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (wsnt__PauseFailedFaultType *)soap_instantiate_wsnt__PauseFailedFaultType(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	wsnt__PauseFailedFaultType ** p = (wsnt__PauseFailedFaultType **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_wsnt__PauseFailedFaultType, sizeof(wsnt__PauseFailedFaultType), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTowsnt__PauseFailedFaultType(struct soap *soap, wsnt__PauseFailedFaultType *const*a, const char *tag, const char *type)
{
	int id = soap_embed(soap, (void*)a, NULL, 0, SOAP_TYPE_PointerTowsnt__PauseFailedFaultType);
	if (soap_out_PointerTowsnt__PauseFailedFaultType(soap, tag?tag:"wsnt:PauseFailedFaultType", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 wsnt__PauseFailedFaultType ** SOAP_FMAC4 soap_get_PointerTowsnt__PauseFailedFaultType(struct soap *soap, wsnt__PauseFailedFaultType **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTowsnt__PauseFailedFaultType(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTowsnt__NotifyMessageNotSupportedFaultType(struct soap *soap, wsnt__NotifyMessageNotSupportedFaultType *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_wsnt__NotifyMessageNotSupportedFaultType))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTowsnt__NotifyMessageNotSupportedFaultType(struct soap *soap, const char *tag, int id, wsnt__NotifyMessageNotSupportedFaultType *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_wsnt__NotifyMessageNotSupportedFaultType);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 wsnt__NotifyMessageNotSupportedFaultType ** SOAP_FMAC4 soap_in_PointerTowsnt__NotifyMessageNotSupportedFaultType(struct soap *soap, const char *tag, wsnt__NotifyMessageNotSupportedFaultType **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (wsnt__NotifyMessageNotSupportedFaultType **)soap_malloc(soap, sizeof(wsnt__NotifyMessageNotSupportedFaultType *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (wsnt__NotifyMessageNotSupportedFaultType *)soap_instantiate_wsnt__NotifyMessageNotSupportedFaultType(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	wsnt__NotifyMessageNotSupportedFaultType ** p = (wsnt__NotifyMessageNotSupportedFaultType **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_wsnt__NotifyMessageNotSupportedFaultType, sizeof(wsnt__NotifyMessageNotSupportedFaultType), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTowsnt__NotifyMessageNotSupportedFaultType(struct soap *soap, wsnt__NotifyMessageNotSupportedFaultType *const*a, const char *tag, const char *type)
{
	int id = soap_embed(soap, (void*)a, NULL, 0, SOAP_TYPE_PointerTowsnt__NotifyMessageNotSupportedFaultType);
	if (soap_out_PointerTowsnt__NotifyMessageNotSupportedFaultType(soap, tag?tag:"wsnt:NotifyMessageNotSupportedFaultType", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 wsnt__NotifyMessageNotSupportedFaultType ** SOAP_FMAC4 soap_get_PointerTowsnt__NotifyMessageNotSupportedFaultType(struct soap *soap, wsnt__NotifyMessageNotSupportedFaultType **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTowsnt__NotifyMessageNotSupportedFaultType(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTowsnt__NoCurrentMessageOnTopicFaultType(struct soap *soap, wsnt__NoCurrentMessageOnTopicFaultType *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_wsnt__NoCurrentMessageOnTopicFaultType))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTowsnt__NoCurrentMessageOnTopicFaultType(struct soap *soap, const char *tag, int id, wsnt__NoCurrentMessageOnTopicFaultType *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_wsnt__NoCurrentMessageOnTopicFaultType);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 wsnt__NoCurrentMessageOnTopicFaultType ** SOAP_FMAC4 soap_in_PointerTowsnt__NoCurrentMessageOnTopicFaultType(struct soap *soap, const char *tag, wsnt__NoCurrentMessageOnTopicFaultType **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (wsnt__NoCurrentMessageOnTopicFaultType **)soap_malloc(soap, sizeof(wsnt__NoCurrentMessageOnTopicFaultType *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (wsnt__NoCurrentMessageOnTopicFaultType *)soap_instantiate_wsnt__NoCurrentMessageOnTopicFaultType(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	wsnt__NoCurrentMessageOnTopicFaultType ** p = (wsnt__NoCurrentMessageOnTopicFaultType **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_wsnt__NoCurrentMessageOnTopicFaultType, sizeof(wsnt__NoCurrentMessageOnTopicFaultType), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTowsnt__NoCurrentMessageOnTopicFaultType(struct soap *soap, wsnt__NoCurrentMessageOnTopicFaultType *const*a, const char *tag, const char *type)
{
	int id = soap_embed(soap, (void*)a, NULL, 0, SOAP_TYPE_PointerTowsnt__NoCurrentMessageOnTopicFaultType);
	if (soap_out_PointerTowsnt__NoCurrentMessageOnTopicFaultType(soap, tag?tag:"wsnt:NoCurrentMessageOnTopicFaultType", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 wsnt__NoCurrentMessageOnTopicFaultType ** SOAP_FMAC4 soap_get_PointerTowsnt__NoCurrentMessageOnTopicFaultType(struct soap *soap, wsnt__NoCurrentMessageOnTopicFaultType **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTowsnt__NoCurrentMessageOnTopicFaultType(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTowsnt__MultipleTopicsSpecifiedFaultType(struct soap *soap, wsnt__MultipleTopicsSpecifiedFaultType *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_wsnt__MultipleTopicsSpecifiedFaultType))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTowsnt__MultipleTopicsSpecifiedFaultType(struct soap *soap, const char *tag, int id, wsnt__MultipleTopicsSpecifiedFaultType *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_wsnt__MultipleTopicsSpecifiedFaultType);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 wsnt__MultipleTopicsSpecifiedFaultType ** SOAP_FMAC4 soap_in_PointerTowsnt__MultipleTopicsSpecifiedFaultType(struct soap *soap, const char *tag, wsnt__MultipleTopicsSpecifiedFaultType **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (wsnt__MultipleTopicsSpecifiedFaultType **)soap_malloc(soap, sizeof(wsnt__MultipleTopicsSpecifiedFaultType *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (wsnt__MultipleTopicsSpecifiedFaultType *)soap_instantiate_wsnt__MultipleTopicsSpecifiedFaultType(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	wsnt__MultipleTopicsSpecifiedFaultType ** p = (wsnt__MultipleTopicsSpecifiedFaultType **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_wsnt__MultipleTopicsSpecifiedFaultType, sizeof(wsnt__MultipleTopicsSpecifiedFaultType), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTowsnt__MultipleTopicsSpecifiedFaultType(struct soap *soap, wsnt__MultipleTopicsSpecifiedFaultType *const*a, const char *tag, const char *type)
{
	int id = soap_embed(soap, (void*)a, NULL, 0, SOAP_TYPE_PointerTowsnt__MultipleTopicsSpecifiedFaultType);
	if (soap_out_PointerTowsnt__MultipleTopicsSpecifiedFaultType(soap, tag?tag:"wsnt:MultipleTopicsSpecifiedFaultType", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 wsnt__MultipleTopicsSpecifiedFaultType ** SOAP_FMAC4 soap_get_PointerTowsnt__MultipleTopicsSpecifiedFaultType(struct soap *soap, wsnt__MultipleTopicsSpecifiedFaultType **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTowsnt__MultipleTopicsSpecifiedFaultType(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTowsnt__InvalidTopicExpressionFaultType(struct soap *soap, wsnt__InvalidTopicExpressionFaultType *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_wsnt__InvalidTopicExpressionFaultType))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTowsnt__InvalidTopicExpressionFaultType(struct soap *soap, const char *tag, int id, wsnt__InvalidTopicExpressionFaultType *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_wsnt__InvalidTopicExpressionFaultType);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 wsnt__InvalidTopicExpressionFaultType ** SOAP_FMAC4 soap_in_PointerTowsnt__InvalidTopicExpressionFaultType(struct soap *soap, const char *tag, wsnt__InvalidTopicExpressionFaultType **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (wsnt__InvalidTopicExpressionFaultType **)soap_malloc(soap, sizeof(wsnt__InvalidTopicExpressionFaultType *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (wsnt__InvalidTopicExpressionFaultType *)soap_instantiate_wsnt__InvalidTopicExpressionFaultType(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	wsnt__InvalidTopicExpressionFaultType ** p = (wsnt__InvalidTopicExpressionFaultType **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_wsnt__InvalidTopicExpressionFaultType, sizeof(wsnt__InvalidTopicExpressionFaultType), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTowsnt__InvalidTopicExpressionFaultType(struct soap *soap, wsnt__InvalidTopicExpressionFaultType *const*a, const char *tag, const char *type)
{
	int id = soap_embed(soap, (void*)a, NULL, 0, SOAP_TYPE_PointerTowsnt__InvalidTopicExpressionFaultType);
	if (soap_out_PointerTowsnt__InvalidTopicExpressionFaultType(soap, tag?tag:"wsnt:InvalidTopicExpressionFaultType", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 wsnt__InvalidTopicExpressionFaultType ** SOAP_FMAC4 soap_get_PointerTowsnt__InvalidTopicExpressionFaultType(struct soap *soap, wsnt__InvalidTopicExpressionFaultType **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTowsnt__InvalidTopicExpressionFaultType(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTowsnt__InvalidProducerPropertiesExpressionFaultType(struct soap *soap, wsnt__InvalidProducerPropertiesExpressionFaultType *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_wsnt__InvalidProducerPropertiesExpressionFaultType))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTowsnt__InvalidProducerPropertiesExpressionFaultType(struct soap *soap, const char *tag, int id, wsnt__InvalidProducerPropertiesExpressionFaultType *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_wsnt__InvalidProducerPropertiesExpressionFaultType);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 wsnt__InvalidProducerPropertiesExpressionFaultType ** SOAP_FMAC4 soap_in_PointerTowsnt__InvalidProducerPropertiesExpressionFaultType(struct soap *soap, const char *tag, wsnt__InvalidProducerPropertiesExpressionFaultType **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (wsnt__InvalidProducerPropertiesExpressionFaultType **)soap_malloc(soap, sizeof(wsnt__InvalidProducerPropertiesExpressionFaultType *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (wsnt__InvalidProducerPropertiesExpressionFaultType *)soap_instantiate_wsnt__InvalidProducerPropertiesExpressionFaultType(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	wsnt__InvalidProducerPropertiesExpressionFaultType ** p = (wsnt__InvalidProducerPropertiesExpressionFaultType **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_wsnt__InvalidProducerPropertiesExpressionFaultType, sizeof(wsnt__InvalidProducerPropertiesExpressionFaultType), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTowsnt__InvalidProducerPropertiesExpressionFaultType(struct soap *soap, wsnt__InvalidProducerPropertiesExpressionFaultType *const*a, const char *tag, const char *type)
{
	int id = soap_embed(soap, (void*)a, NULL, 0, SOAP_TYPE_PointerTowsnt__InvalidProducerPropertiesExpressionFaultType);
	if (soap_out_PointerTowsnt__InvalidProducerPropertiesExpressionFaultType(soap, tag?tag:"wsnt:InvalidProducerPropertiesExpressionFaultType", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 wsnt__InvalidProducerPropertiesExpressionFaultType ** SOAP_FMAC4 soap_get_PointerTowsnt__InvalidProducerPropertiesExpressionFaultType(struct soap *soap, wsnt__InvalidProducerPropertiesExpressionFaultType **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTowsnt__InvalidProducerPropertiesExpressionFaultType(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTowsnt__InvalidMessageContentExpressionFaultType(struct soap *soap, wsnt__InvalidMessageContentExpressionFaultType *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_wsnt__InvalidMessageContentExpressionFaultType))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTowsnt__InvalidMessageContentExpressionFaultType(struct soap *soap, const char *tag, int id, wsnt__InvalidMessageContentExpressionFaultType *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_wsnt__InvalidMessageContentExpressionFaultType);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 wsnt__InvalidMessageContentExpressionFaultType ** SOAP_FMAC4 soap_in_PointerTowsnt__InvalidMessageContentExpressionFaultType(struct soap *soap, const char *tag, wsnt__InvalidMessageContentExpressionFaultType **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (wsnt__InvalidMessageContentExpressionFaultType **)soap_malloc(soap, sizeof(wsnt__InvalidMessageContentExpressionFaultType *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (wsnt__InvalidMessageContentExpressionFaultType *)soap_instantiate_wsnt__InvalidMessageContentExpressionFaultType(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	wsnt__InvalidMessageContentExpressionFaultType ** p = (wsnt__InvalidMessageContentExpressionFaultType **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_wsnt__InvalidMessageContentExpressionFaultType, sizeof(wsnt__InvalidMessageContentExpressionFaultType), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTowsnt__InvalidMessageContentExpressionFaultType(struct soap *soap, wsnt__InvalidMessageContentExpressionFaultType *const*a, const char *tag, const char *type)
{
	int id = soap_embed(soap, (void*)a, NULL, 0, SOAP_TYPE_PointerTowsnt__InvalidMessageContentExpressionFaultType);
	if (soap_out_PointerTowsnt__InvalidMessageContentExpressionFaultType(soap, tag?tag:"wsnt:InvalidMessageContentExpressionFaultType", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 wsnt__InvalidMessageContentExpressionFaultType ** SOAP_FMAC4 soap_get_PointerTowsnt__InvalidMessageContentExpressionFaultType(struct soap *soap, wsnt__InvalidMessageContentExpressionFaultType **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTowsnt__InvalidMessageContentExpressionFaultType(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTowsnt__InvalidFilterFaultType(struct soap *soap, wsnt__InvalidFilterFaultType *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_wsnt__InvalidFilterFaultType))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTowsnt__InvalidFilterFaultType(struct soap *soap, const char *tag, int id, wsnt__InvalidFilterFaultType *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_wsnt__InvalidFilterFaultType);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 wsnt__InvalidFilterFaultType ** SOAP_FMAC4 soap_in_PointerTowsnt__InvalidFilterFaultType(struct soap *soap, const char *tag, wsnt__InvalidFilterFaultType **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (wsnt__InvalidFilterFaultType **)soap_malloc(soap, sizeof(wsnt__InvalidFilterFaultType *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (wsnt__InvalidFilterFaultType *)soap_instantiate_wsnt__InvalidFilterFaultType(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	wsnt__InvalidFilterFaultType ** p = (wsnt__InvalidFilterFaultType **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_wsnt__InvalidFilterFaultType, sizeof(wsnt__InvalidFilterFaultType), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTowsnt__InvalidFilterFaultType(struct soap *soap, wsnt__InvalidFilterFaultType *const*a, const char *tag, const char *type)
{
	int id = soap_embed(soap, (void*)a, NULL, 0, SOAP_TYPE_PointerTowsnt__InvalidFilterFaultType);
	if (soap_out_PointerTowsnt__InvalidFilterFaultType(soap, tag?tag:"wsnt:InvalidFilterFaultType", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 wsnt__InvalidFilterFaultType ** SOAP_FMAC4 soap_get_PointerTowsnt__InvalidFilterFaultType(struct soap *soap, wsnt__InvalidFilterFaultType **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTowsnt__InvalidFilterFaultType(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToxsd__NCName(struct soap *soap, std::string *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_xsd__NCName))
		soap_serialize_xsd__NCName(soap, *a);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToxsd__NCName(struct soap *soap, const char *tag, int id, std::string *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_xsd__NCName);
	if (id < 0)
		return soap->error;
	return soap_out_xsd__NCName(soap, tag, id, *a, type);
}

SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_in_PointerToxsd__NCName(struct soap *soap, const char *tag, std::string **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (std::string **)soap_malloc(soap, sizeof(std::string *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_xsd__NCName(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (std::string **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_xsd__NCName, sizeof(std::string), 0);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToxsd__NCName(struct soap *soap, std::string *const*a, const char *tag, const char *type)
{
	int id = soap_embed(soap, (void*)a, NULL, 0, SOAP_TYPE_PointerToxsd__NCName);
	if (soap_out_PointerToxsd__NCName(soap, tag?tag:"xsd:NCName", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_get_PointerToxsd__NCName(struct soap *soap, std::string **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToxsd__NCName(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTostd__vectorTemplateOf_wstop__TopicNamespaceType_Topic(struct soap *soap, std::vector<_wstop__TopicNamespaceType_Topic >*const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_std__vectorTemplateOf_wstop__TopicNamespaceType_Topic))
		soap_serialize_std__vectorTemplateOf_wstop__TopicNamespaceType_Topic(soap, *a);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTostd__vectorTemplateOf_wstop__TopicNamespaceType_Topic(struct soap *soap, const char *tag, int id, std::vector<_wstop__TopicNamespaceType_Topic >*const*a, const char *type)
{
	if (!*a)
		return soap_element_null(soap, tag, id, type);
	return soap_out_std__vectorTemplateOf_wstop__TopicNamespaceType_Topic(soap, tag, id, *a, type);
}

SOAP_FMAC3 std::vector<_wstop__TopicNamespaceType_Topic >** SOAP_FMAC4 soap_in_PointerTostd__vectorTemplateOf_wstop__TopicNamespaceType_Topic(struct soap *soap, const char *tag, std::vector<_wstop__TopicNamespaceType_Topic >**a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	soap_revert(soap);
	if (!a)
	{	if (!(a = (std::vector<_wstop__TopicNamespaceType_Topic >**)soap_malloc(soap, sizeof(std::vector<_wstop__TopicNamespaceType_Topic >*))))
			return NULL;
		*a = NULL;
	}
	if (!(*a = soap_in_std__vectorTemplateOf_wstop__TopicNamespaceType_Topic(soap, tag, *a, type)))
		return NULL;
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTostd__vectorTemplateOf_wstop__TopicNamespaceType_Topic(struct soap *soap, std::vector<_wstop__TopicNamespaceType_Topic >*const*a, const char *tag, const char *type)
{
	int id = soap_embed(soap, (void*)a, NULL, 0, SOAP_TYPE_PointerTostd__vectorTemplateOf_wstop__TopicNamespaceType_Topic);
	if (soap_out_PointerTostd__vectorTemplateOf_wstop__TopicNamespaceType_Topic(soap, tag?tag:"", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 std::vector<_wstop__TopicNamespaceType_Topic >** SOAP_FMAC4 soap_get_PointerTostd__vectorTemplateOf_wstop__TopicNamespaceType_Topic(struct soap *soap, std::vector<_wstop__TopicNamespaceType_Topic >**p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTostd__vectorTemplateOf_wstop__TopicNamespaceType_Topic(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTowstop__ConcreteTopicExpression(struct soap *soap, std::string *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_wstop__ConcreteTopicExpression))
		soap_serialize_wstop__ConcreteTopicExpression(soap, *a);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTowstop__ConcreteTopicExpression(struct soap *soap, const char *tag, int id, std::string *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_wstop__ConcreteTopicExpression);
	if (id < 0)
		return soap->error;
	return soap_out_wstop__ConcreteTopicExpression(soap, tag, id, *a, type);
}

SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_in_PointerTowstop__ConcreteTopicExpression(struct soap *soap, const char *tag, std::string **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (std::string **)soap_malloc(soap, sizeof(std::string *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_wstop__ConcreteTopicExpression(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (std::string **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_wstop__ConcreteTopicExpression, sizeof(std::string), 0);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTowstop__ConcreteTopicExpression(struct soap *soap, std::string *const*a, const char *tag, const char *type)
{
	int id = soap_embed(soap, (void*)a, NULL, 0, SOAP_TYPE_PointerTowstop__ConcreteTopicExpression);
	if (soap_out_PointerTowstop__ConcreteTopicExpression(soap, tag?tag:"wstop:ConcreteTopicExpression", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_get_PointerTowstop__ConcreteTopicExpression(struct soap *soap, std::string **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTowstop__ConcreteTopicExpression(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToxsd__QName(struct soap *soap, std::string *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_xsd__QName))
		soap_serialize_xsd__QName(soap, *a);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToxsd__QName(struct soap *soap, const char *tag, int id, std::string *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_xsd__QName);
	if (id < 0)
		return soap->error;
	return soap_out_xsd__QName(soap, tag, id, *a, type);
}

SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_in_PointerToxsd__QName(struct soap *soap, const char *tag, std::string **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (std::string **)soap_malloc(soap, sizeof(std::string *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_xsd__QName(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (std::string **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_xsd__QName, sizeof(std::string), 0);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToxsd__QName(struct soap *soap, std::string *const*a, const char *tag, const char *type)
{
	int id = soap_embed(soap, (void*)a, NULL, 0, SOAP_TYPE_PointerToxsd__QName);
	if (soap_out_PointerToxsd__QName(soap, tag?tag:"xsd:QName", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_get_PointerToxsd__QName(struct soap *soap, std::string **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToxsd__QName(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTowstop__TopicType(struct soap *soap, wstop__TopicType *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_wstop__TopicType))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTowstop__TopicType(struct soap *soap, const char *tag, int id, wstop__TopicType *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_wstop__TopicType);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 wstop__TopicType ** SOAP_FMAC4 soap_in_PointerTowstop__TopicType(struct soap *soap, const char *tag, wstop__TopicType **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (wstop__TopicType **)soap_malloc(soap, sizeof(wstop__TopicType *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (wstop__TopicType *)soap_instantiate_wstop__TopicType(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	wstop__TopicType ** p = (wstop__TopicType **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_wstop__TopicType, sizeof(wstop__TopicType), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTowstop__TopicType(struct soap *soap, wstop__TopicType *const*a, const char *tag, const char *type)
{
	int id = soap_embed(soap, (void*)a, NULL, 0, SOAP_TYPE_PointerTowstop__TopicType);
	if (soap_out_PointerTowstop__TopicType(soap, tag?tag:"wstop:TopicType", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 wstop__TopicType ** SOAP_FMAC4 soap_get_PointerTowstop__TopicType(struct soap *soap, wstop__TopicType **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTowstop__TopicType(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTowstop__QueryExpressionType(struct soap *soap, wstop__QueryExpressionType *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_wstop__QueryExpressionType))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTowstop__QueryExpressionType(struct soap *soap, const char *tag, int id, wstop__QueryExpressionType *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_wstop__QueryExpressionType);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 wstop__QueryExpressionType ** SOAP_FMAC4 soap_in_PointerTowstop__QueryExpressionType(struct soap *soap, const char *tag, wstop__QueryExpressionType **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (wstop__QueryExpressionType **)soap_malloc(soap, sizeof(wstop__QueryExpressionType *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (wstop__QueryExpressionType *)soap_instantiate_wstop__QueryExpressionType(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	wstop__QueryExpressionType ** p = (wstop__QueryExpressionType **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_wstop__QueryExpressionType, sizeof(wstop__QueryExpressionType), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTowstop__QueryExpressionType(struct soap *soap, wstop__QueryExpressionType *const*a, const char *tag, const char *type)
{
	int id = soap_embed(soap, (void*)a, NULL, 0, SOAP_TYPE_PointerTowstop__QueryExpressionType);
	if (soap_out_PointerTowstop__QueryExpressionType(soap, tag?tag:"wstop:QueryExpressionType", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 wstop__QueryExpressionType ** SOAP_FMAC4 soap_get_PointerTowstop__QueryExpressionType(struct soap *soap, wstop__QueryExpressionType **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTowstop__QueryExpressionType(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTowstop__Documentation(struct soap *soap, wstop__Documentation *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_wstop__Documentation))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTowstop__Documentation(struct soap *soap, const char *tag, int id, wstop__Documentation *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_wstop__Documentation);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 wstop__Documentation ** SOAP_FMAC4 soap_in_PointerTowstop__Documentation(struct soap *soap, const char *tag, wstop__Documentation **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (wstop__Documentation **)soap_malloc(soap, sizeof(wstop__Documentation *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (wstop__Documentation *)soap_instantiate_wstop__Documentation(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	wstop__Documentation ** p = (wstop__Documentation **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_wstop__Documentation, sizeof(wstop__Documentation), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTowstop__Documentation(struct soap *soap, wstop__Documentation *const*a, const char *tag, const char *type)
{
	int id = soap_embed(soap, (void*)a, NULL, 0, SOAP_TYPE_PointerTowstop__Documentation);
	if (soap_out_PointerTowstop__Documentation(soap, tag?tag:"wstop:Documentation", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 wstop__Documentation ** SOAP_FMAC4 soap_get_PointerTowstop__Documentation(struct soap *soap, wstop__Documentation **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTowstop__Documentation(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToxsd__nonNegativeInteger(struct soap *soap, std::string *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_xsd__nonNegativeInteger))
		soap_serialize_xsd__nonNegativeInteger(soap, *a);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToxsd__nonNegativeInteger(struct soap *soap, const char *tag, int id, std::string *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_xsd__nonNegativeInteger);
	if (id < 0)
		return soap->error;
	return soap_out_xsd__nonNegativeInteger(soap, tag, id, *a, type);
}

SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_in_PointerToxsd__nonNegativeInteger(struct soap *soap, const char *tag, std::string **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (std::string **)soap_malloc(soap, sizeof(std::string *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_xsd__nonNegativeInteger(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (std::string **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_xsd__nonNegativeInteger, sizeof(std::string), 0);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToxsd__nonNegativeInteger(struct soap *soap, std::string *const*a, const char *tag, const char *type)
{
	int id = soap_embed(soap, (void*)a, NULL, 0, SOAP_TYPE_PointerToxsd__nonNegativeInteger);
	if (soap_out_PointerToxsd__nonNegativeInteger(soap, tag?tag:"xsd:nonNegativeInteger", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_get_PointerToxsd__nonNegativeInteger(struct soap *soap, std::string **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToxsd__nonNegativeInteger(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_wsnt__Subscribe_SubscriptionPolicy(struct soap *soap, _wsnt__Subscribe_SubscriptionPolicy *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE__wsnt__Subscribe_SubscriptionPolicy))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_wsnt__Subscribe_SubscriptionPolicy(struct soap *soap, const char *tag, int id, _wsnt__Subscribe_SubscriptionPolicy *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__wsnt__Subscribe_SubscriptionPolicy);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _wsnt__Subscribe_SubscriptionPolicy ** SOAP_FMAC4 soap_in_PointerTo_wsnt__Subscribe_SubscriptionPolicy(struct soap *soap, const char *tag, _wsnt__Subscribe_SubscriptionPolicy **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_wsnt__Subscribe_SubscriptionPolicy **)soap_malloc(soap, sizeof(_wsnt__Subscribe_SubscriptionPolicy *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_wsnt__Subscribe_SubscriptionPolicy *)soap_instantiate__wsnt__Subscribe_SubscriptionPolicy(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_wsnt__Subscribe_SubscriptionPolicy ** p = (_wsnt__Subscribe_SubscriptionPolicy **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__wsnt__Subscribe_SubscriptionPolicy, sizeof(_wsnt__Subscribe_SubscriptionPolicy), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_wsnt__Subscribe_SubscriptionPolicy(struct soap *soap, _wsnt__Subscribe_SubscriptionPolicy *const*a, const char *tag, const char *type)
{
	int id = soap_embed(soap, (void*)a, NULL, 0, SOAP_TYPE_PointerTo_wsnt__Subscribe_SubscriptionPolicy);
	if (soap_out_PointerTo_wsnt__Subscribe_SubscriptionPolicy(soap, tag?tag:"wsnt:Subscribe-SubscriptionPolicy", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _wsnt__Subscribe_SubscriptionPolicy ** SOAP_FMAC4 soap_get_PointerTo_wsnt__Subscribe_SubscriptionPolicy(struct soap *soap, _wsnt__Subscribe_SubscriptionPolicy **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_wsnt__Subscribe_SubscriptionPolicy(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTotime(struct soap *soap, time_t *const*a)
{
#ifndef WITH_NOIDREF
	soap_reference(soap, *a, SOAP_TYPE_time);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTotime(struct soap *soap, const char *tag, int id, time_t *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_time);
	if (id < 0)
		return soap->error;
	return soap_out_time(soap, tag, id, *a, type);
}

SOAP_FMAC3 time_t ** SOAP_FMAC4 soap_in_PointerTotime(struct soap *soap, const char *tag, time_t **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (time_t **)soap_malloc(soap, sizeof(time_t *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_time(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (time_t **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_time, sizeof(time_t), 0);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTotime(struct soap *soap, time_t *const*a, const char *tag, const char *type)
{
	int id = soap_embed(soap, (void*)a, NULL, 0, SOAP_TYPE_PointerTotime);
	if (soap_out_PointerTotime(soap, tag?tag:"dateTime", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 time_t ** SOAP_FMAC4 soap_get_PointerTotime(struct soap *soap, time_t **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTotime(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTowsnt__SubscriptionPolicyType(struct soap *soap, wsnt__SubscriptionPolicyType *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_wsnt__SubscriptionPolicyType))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTowsnt__SubscriptionPolicyType(struct soap *soap, const char *tag, int id, wsnt__SubscriptionPolicyType *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_wsnt__SubscriptionPolicyType);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 wsnt__SubscriptionPolicyType ** SOAP_FMAC4 soap_in_PointerTowsnt__SubscriptionPolicyType(struct soap *soap, const char *tag, wsnt__SubscriptionPolicyType **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (wsnt__SubscriptionPolicyType **)soap_malloc(soap, sizeof(wsnt__SubscriptionPolicyType *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (wsnt__SubscriptionPolicyType *)soap_instantiate_wsnt__SubscriptionPolicyType(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	wsnt__SubscriptionPolicyType ** p = (wsnt__SubscriptionPolicyType **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_wsnt__SubscriptionPolicyType, sizeof(wsnt__SubscriptionPolicyType), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTowsnt__SubscriptionPolicyType(struct soap *soap, wsnt__SubscriptionPolicyType *const*a, const char *tag, const char *type)
{
	int id = soap_embed(soap, (void*)a, NULL, 0, SOAP_TYPE_PointerTowsnt__SubscriptionPolicyType);
	if (soap_out_PointerTowsnt__SubscriptionPolicyType(soap, tag?tag:"wsnt:SubscriptionPolicyType", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 wsnt__SubscriptionPolicyType ** SOAP_FMAC4 soap_get_PointerTowsnt__SubscriptionPolicyType(struct soap *soap, wsnt__SubscriptionPolicyType **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTowsnt__SubscriptionPolicyType(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTowsnt__TopicExpressionType(struct soap *soap, wsnt__TopicExpressionType *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_wsnt__TopicExpressionType))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTowsnt__TopicExpressionType(struct soap *soap, const char *tag, int id, wsnt__TopicExpressionType *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_wsnt__TopicExpressionType);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 wsnt__TopicExpressionType ** SOAP_FMAC4 soap_in_PointerTowsnt__TopicExpressionType(struct soap *soap, const char *tag, wsnt__TopicExpressionType **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (wsnt__TopicExpressionType **)soap_malloc(soap, sizeof(wsnt__TopicExpressionType *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (wsnt__TopicExpressionType *)soap_instantiate_wsnt__TopicExpressionType(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	wsnt__TopicExpressionType ** p = (wsnt__TopicExpressionType **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_wsnt__TopicExpressionType, sizeof(wsnt__TopicExpressionType), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTowsnt__TopicExpressionType(struct soap *soap, wsnt__TopicExpressionType *const*a, const char *tag, const char *type)
{
	int id = soap_embed(soap, (void*)a, NULL, 0, SOAP_TYPE_PointerTowsnt__TopicExpressionType);
	if (soap_out_PointerTowsnt__TopicExpressionType(soap, tag?tag:"wsnt:TopicExpressionType", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 wsnt__TopicExpressionType ** SOAP_FMAC4 soap_get_PointerTowsnt__TopicExpressionType(struct soap *soap, wsnt__TopicExpressionType **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTowsnt__TopicExpressionType(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_wsrfbf__BaseFaultType_FaultCause(struct soap *soap, _wsrfbf__BaseFaultType_FaultCause *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE__wsrfbf__BaseFaultType_FaultCause))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_wsrfbf__BaseFaultType_FaultCause(struct soap *soap, const char *tag, int id, _wsrfbf__BaseFaultType_FaultCause *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__wsrfbf__BaseFaultType_FaultCause);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _wsrfbf__BaseFaultType_FaultCause ** SOAP_FMAC4 soap_in_PointerTo_wsrfbf__BaseFaultType_FaultCause(struct soap *soap, const char *tag, _wsrfbf__BaseFaultType_FaultCause **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_wsrfbf__BaseFaultType_FaultCause **)soap_malloc(soap, sizeof(_wsrfbf__BaseFaultType_FaultCause *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_wsrfbf__BaseFaultType_FaultCause *)soap_instantiate__wsrfbf__BaseFaultType_FaultCause(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_wsrfbf__BaseFaultType_FaultCause ** p = (_wsrfbf__BaseFaultType_FaultCause **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__wsrfbf__BaseFaultType_FaultCause, sizeof(_wsrfbf__BaseFaultType_FaultCause), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_wsrfbf__BaseFaultType_FaultCause(struct soap *soap, _wsrfbf__BaseFaultType_FaultCause *const*a, const char *tag, const char *type)
{
	int id = soap_embed(soap, (void*)a, NULL, 0, SOAP_TYPE_PointerTo_wsrfbf__BaseFaultType_FaultCause);
	if (soap_out_PointerTo_wsrfbf__BaseFaultType_FaultCause(soap, tag?tag:"wsrfbf:BaseFaultType-FaultCause", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _wsrfbf__BaseFaultType_FaultCause ** SOAP_FMAC4 soap_get_PointerTo_wsrfbf__BaseFaultType_FaultCause(struct soap *soap, _wsrfbf__BaseFaultType_FaultCause **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_wsrfbf__BaseFaultType_FaultCause(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTostd__vectorTemplateOf_wsrfbf__BaseFaultType_Description(struct soap *soap, std::vector<_wsrfbf__BaseFaultType_Description >*const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_std__vectorTemplateOf_wsrfbf__BaseFaultType_Description))
		soap_serialize_std__vectorTemplateOf_wsrfbf__BaseFaultType_Description(soap, *a);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTostd__vectorTemplateOf_wsrfbf__BaseFaultType_Description(struct soap *soap, const char *tag, int id, std::vector<_wsrfbf__BaseFaultType_Description >*const*a, const char *type)
{
	if (!*a)
		return soap_element_null(soap, tag, id, type);
	return soap_out_std__vectorTemplateOf_wsrfbf__BaseFaultType_Description(soap, tag, id, *a, type);
}

SOAP_FMAC3 std::vector<_wsrfbf__BaseFaultType_Description >** SOAP_FMAC4 soap_in_PointerTostd__vectorTemplateOf_wsrfbf__BaseFaultType_Description(struct soap *soap, const char *tag, std::vector<_wsrfbf__BaseFaultType_Description >**a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	soap_revert(soap);
	if (!a)
	{	if (!(a = (std::vector<_wsrfbf__BaseFaultType_Description >**)soap_malloc(soap, sizeof(std::vector<_wsrfbf__BaseFaultType_Description >*))))
			return NULL;
		*a = NULL;
	}
	if (!(*a = soap_in_std__vectorTemplateOf_wsrfbf__BaseFaultType_Description(soap, tag, *a, type)))
		return NULL;
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTostd__vectorTemplateOf_wsrfbf__BaseFaultType_Description(struct soap *soap, std::vector<_wsrfbf__BaseFaultType_Description >*const*a, const char *tag, const char *type)
{
	int id = soap_embed(soap, (void*)a, NULL, 0, SOAP_TYPE_PointerTostd__vectorTemplateOf_wsrfbf__BaseFaultType_Description);
	if (soap_out_PointerTostd__vectorTemplateOf_wsrfbf__BaseFaultType_Description(soap, tag?tag:"", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 std::vector<_wsrfbf__BaseFaultType_Description >** SOAP_FMAC4 soap_get_PointerTostd__vectorTemplateOf_wsrfbf__BaseFaultType_Description(struct soap *soap, std::vector<_wsrfbf__BaseFaultType_Description >**p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTostd__vectorTemplateOf_wsrfbf__BaseFaultType_Description(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_xml__lang(struct soap *soap, std::string *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE__xml__lang))
		soap_serialize__xml__lang(soap, *a);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_xml__lang(struct soap *soap, const char *tag, int id, std::string *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__xml__lang);
	if (id < 0)
		return soap->error;
	return soap_out__xml__lang(soap, tag, id, *a, type);
}

SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_in_PointerTo_xml__lang(struct soap *soap, const char *tag, std::string **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (std::string **)soap_malloc(soap, sizeof(std::string *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in__xml__lang(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (std::string **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__xml__lang, sizeof(std::string), 0);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_xml__lang(struct soap *soap, std::string *const*a, const char *tag, const char *type)
{
	int id = soap_embed(soap, (void*)a, NULL, 0, SOAP_TYPE_PointerTo_xml__lang);
	if (soap_out_PointerTo_xml__lang(soap, tag?tag:"xml:lang", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_get_PointerTo_xml__lang(struct soap *soap, std::string **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_xml__lang(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_wsrfbf__BaseFaultType_ErrorCode(struct soap *soap, _wsrfbf__BaseFaultType_ErrorCode *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE__wsrfbf__BaseFaultType_ErrorCode))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_wsrfbf__BaseFaultType_ErrorCode(struct soap *soap, const char *tag, int id, _wsrfbf__BaseFaultType_ErrorCode *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__wsrfbf__BaseFaultType_ErrorCode);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _wsrfbf__BaseFaultType_ErrorCode ** SOAP_FMAC4 soap_in_PointerTo_wsrfbf__BaseFaultType_ErrorCode(struct soap *soap, const char *tag, _wsrfbf__BaseFaultType_ErrorCode **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_wsrfbf__BaseFaultType_ErrorCode **)soap_malloc(soap, sizeof(_wsrfbf__BaseFaultType_ErrorCode *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_wsrfbf__BaseFaultType_ErrorCode *)soap_instantiate__wsrfbf__BaseFaultType_ErrorCode(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_wsrfbf__BaseFaultType_ErrorCode ** p = (_wsrfbf__BaseFaultType_ErrorCode **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__wsrfbf__BaseFaultType_ErrorCode, sizeof(_wsrfbf__BaseFaultType_ErrorCode), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_wsrfbf__BaseFaultType_ErrorCode(struct soap *soap, _wsrfbf__BaseFaultType_ErrorCode *const*a, const char *tag, const char *type)
{
	int id = soap_embed(soap, (void*)a, NULL, 0, SOAP_TYPE_PointerTo_wsrfbf__BaseFaultType_ErrorCode);
	if (soap_out_PointerTo_wsrfbf__BaseFaultType_ErrorCode(soap, tag?tag:"wsrfbf:BaseFaultType-ErrorCode", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _wsrfbf__BaseFaultType_ErrorCode ** SOAP_FMAC4 soap_get_PointerTo_wsrfbf__BaseFaultType_ErrorCode(struct soap *soap, _wsrfbf__BaseFaultType_ErrorCode **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_wsrfbf__BaseFaultType_ErrorCode(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTowsa5__EndpointReferenceType(struct soap *soap, struct wsa5__EndpointReferenceType *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_wsa5__EndpointReferenceType))
		soap_serialize_wsa5__EndpointReferenceType(soap, *a);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTowsa5__EndpointReferenceType(struct soap *soap, const char *tag, int id, struct wsa5__EndpointReferenceType *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_wsa5__EndpointReferenceType);
	if (id < 0)
		return soap->error;
	return soap_out_wsa5__EndpointReferenceType(soap, tag, id, *a, type);
}

SOAP_FMAC3 struct wsa5__EndpointReferenceType ** SOAP_FMAC4 soap_in_PointerTowsa5__EndpointReferenceType(struct soap *soap, const char *tag, struct wsa5__EndpointReferenceType **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (struct wsa5__EndpointReferenceType **)soap_malloc(soap, sizeof(struct wsa5__EndpointReferenceType *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_wsa5__EndpointReferenceType(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (struct wsa5__EndpointReferenceType **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_wsa5__EndpointReferenceType, sizeof(struct wsa5__EndpointReferenceType), 0);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTowsa5__EndpointReferenceType(struct soap *soap, struct wsa5__EndpointReferenceType *const*a, const char *tag, const char *type)
{
	int id = soap_embed(soap, (void*)a, NULL, 0, SOAP_TYPE_PointerTowsa5__EndpointReferenceType);
	if (soap_out_PointerTowsa5__EndpointReferenceType(soap, tag?tag:"wsa5:EndpointReferenceType", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct wsa5__EndpointReferenceType ** SOAP_FMAC4 soap_get_PointerTowsa5__EndpointReferenceType(struct soap *soap, struct wsa5__EndpointReferenceType **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTowsa5__EndpointReferenceType(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTowstop__TopicSetType(struct soap *soap, wstop__TopicSetType *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_wstop__TopicSetType))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTowstop__TopicSetType(struct soap *soap, const char *tag, int id, wstop__TopicSetType *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_wstop__TopicSetType);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 wstop__TopicSetType ** SOAP_FMAC4 soap_in_PointerTowstop__TopicSetType(struct soap *soap, const char *tag, wstop__TopicSetType **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (wstop__TopicSetType **)soap_malloc(soap, sizeof(wstop__TopicSetType *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (wstop__TopicSetType *)soap_instantiate_wstop__TopicSetType(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	wstop__TopicSetType ** p = (wstop__TopicSetType **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_wstop__TopicSetType, sizeof(wstop__TopicSetType), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTowstop__TopicSetType(struct soap *soap, wstop__TopicSetType *const*a, const char *tag, const char *type)
{
	int id = soap_embed(soap, (void*)a, NULL, 0, SOAP_TYPE_PointerTowstop__TopicSetType);
	if (soap_out_PointerTowstop__TopicSetType(soap, tag?tag:"wstop:TopicSetType", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 wstop__TopicSetType ** SOAP_FMAC4 soap_get_PointerTowstop__TopicSetType(struct soap *soap, wstop__TopicSetType **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTowstop__TopicSetType(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTowsnt__NotificationMessageHolderType(struct soap *soap, wsnt__NotificationMessageHolderType *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_wsnt__NotificationMessageHolderType))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTowsnt__NotificationMessageHolderType(struct soap *soap, const char *tag, int id, wsnt__NotificationMessageHolderType *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_wsnt__NotificationMessageHolderType);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 wsnt__NotificationMessageHolderType ** SOAP_FMAC4 soap_in_PointerTowsnt__NotificationMessageHolderType(struct soap *soap, const char *tag, wsnt__NotificationMessageHolderType **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (wsnt__NotificationMessageHolderType **)soap_malloc(soap, sizeof(wsnt__NotificationMessageHolderType *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (wsnt__NotificationMessageHolderType *)soap_instantiate_wsnt__NotificationMessageHolderType(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	wsnt__NotificationMessageHolderType ** p = (wsnt__NotificationMessageHolderType **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_wsnt__NotificationMessageHolderType, sizeof(wsnt__NotificationMessageHolderType), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTowsnt__NotificationMessageHolderType(struct soap *soap, wsnt__NotificationMessageHolderType *const*a, const char *tag, const char *type)
{
	int id = soap_embed(soap, (void*)a, NULL, 0, SOAP_TYPE_PointerTowsnt__NotificationMessageHolderType);
	if (soap_out_PointerTowsnt__NotificationMessageHolderType(soap, tag?tag:"wsnt:NotificationMessageHolderType", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 wsnt__NotificationMessageHolderType ** SOAP_FMAC4 soap_get_PointerTowsnt__NotificationMessageHolderType(struct soap *soap, wsnt__NotificationMessageHolderType **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTowsnt__NotificationMessageHolderType(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_eventws__CreatePullPointSubscription_SubscriptionPolicy(struct soap *soap, _eventws__CreatePullPointSubscription_SubscriptionPolicy *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE__eventws__CreatePullPointSubscription_SubscriptionPolicy))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_eventws__CreatePullPointSubscription_SubscriptionPolicy(struct soap *soap, const char *tag, int id, _eventws__CreatePullPointSubscription_SubscriptionPolicy *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__eventws__CreatePullPointSubscription_SubscriptionPolicy);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _eventws__CreatePullPointSubscription_SubscriptionPolicy ** SOAP_FMAC4 soap_in_PointerTo_eventws__CreatePullPointSubscription_SubscriptionPolicy(struct soap *soap, const char *tag, _eventws__CreatePullPointSubscription_SubscriptionPolicy **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_eventws__CreatePullPointSubscription_SubscriptionPolicy **)soap_malloc(soap, sizeof(_eventws__CreatePullPointSubscription_SubscriptionPolicy *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_eventws__CreatePullPointSubscription_SubscriptionPolicy *)soap_instantiate__eventws__CreatePullPointSubscription_SubscriptionPolicy(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_eventws__CreatePullPointSubscription_SubscriptionPolicy ** p = (_eventws__CreatePullPointSubscription_SubscriptionPolicy **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__eventws__CreatePullPointSubscription_SubscriptionPolicy, sizeof(_eventws__CreatePullPointSubscription_SubscriptionPolicy), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_eventws__CreatePullPointSubscription_SubscriptionPolicy(struct soap *soap, _eventws__CreatePullPointSubscription_SubscriptionPolicy *const*a, const char *tag, const char *type)
{
	int id = soap_embed(soap, (void*)a, NULL, 0, SOAP_TYPE_PointerTo_eventws__CreatePullPointSubscription_SubscriptionPolicy);
	if (soap_out_PointerTo_eventws__CreatePullPointSubscription_SubscriptionPolicy(soap, tag?tag:"eventws:CreatePullPointSubscription-SubscriptionPolicy", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _eventws__CreatePullPointSubscription_SubscriptionPolicy ** SOAP_FMAC4 soap_get_PointerTo_eventws__CreatePullPointSubscription_SubscriptionPolicy(struct soap *soap, _eventws__CreatePullPointSubscription_SubscriptionPolicy **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_eventws__CreatePullPointSubscription_SubscriptionPolicy(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTowsnt__AbsoluteOrRelativeTimeType(struct soap *soap, std::string *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_wsnt__AbsoluteOrRelativeTimeType))
		soap_serialize_wsnt__AbsoluteOrRelativeTimeType(soap, *a);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTowsnt__AbsoluteOrRelativeTimeType(struct soap *soap, const char *tag, int id, std::string *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_wsnt__AbsoluteOrRelativeTimeType);
	if (id < 0)
		return soap->error;
	return soap_out_wsnt__AbsoluteOrRelativeTimeType(soap, tag, id, *a, type);
}

SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_in_PointerTowsnt__AbsoluteOrRelativeTimeType(struct soap *soap, const char *tag, std::string **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (std::string **)soap_malloc(soap, sizeof(std::string *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_wsnt__AbsoluteOrRelativeTimeType(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (std::string **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_wsnt__AbsoluteOrRelativeTimeType, sizeof(std::string), 0);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTowsnt__AbsoluteOrRelativeTimeType(struct soap *soap, std::string *const*a, const char *tag, const char *type)
{
	int id = soap_embed(soap, (void*)a, NULL, 0, SOAP_TYPE_PointerTowsnt__AbsoluteOrRelativeTimeType);
	if (soap_out_PointerTowsnt__AbsoluteOrRelativeTimeType(soap, tag?tag:"wsnt:AbsoluteOrRelativeTimeType", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_get_PointerTowsnt__AbsoluteOrRelativeTimeType(struct soap *soap, std::string **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTowsnt__AbsoluteOrRelativeTimeType(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTowsnt__FilterType(struct soap *soap, wsnt__FilterType *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_wsnt__FilterType))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTowsnt__FilterType(struct soap *soap, const char *tag, int id, wsnt__FilterType *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_wsnt__FilterType);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 wsnt__FilterType ** SOAP_FMAC4 soap_in_PointerTowsnt__FilterType(struct soap *soap, const char *tag, wsnt__FilterType **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (wsnt__FilterType **)soap_malloc(soap, sizeof(wsnt__FilterType *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (wsnt__FilterType *)soap_instantiate_wsnt__FilterType(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	wsnt__FilterType ** p = (wsnt__FilterType **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_wsnt__FilterType, sizeof(wsnt__FilterType), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTowsnt__FilterType(struct soap *soap, wsnt__FilterType *const*a, const char *tag, const char *type)
{
	int id = soap_embed(soap, (void*)a, NULL, 0, SOAP_TYPE_PointerTowsnt__FilterType);
	if (soap_out_PointerTowsnt__FilterType(soap, tag?tag:"wsnt:FilterType", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 wsnt__FilterType ** SOAP_FMAC4 soap_get_PointerTowsnt__FilterType(struct soap *soap, wsnt__FilterType **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTowsnt__FilterType(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToeventws__Capabilities(struct soap *soap, eventws__Capabilities *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_eventws__Capabilities))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToeventws__Capabilities(struct soap *soap, const char *tag, int id, eventws__Capabilities *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_eventws__Capabilities);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 eventws__Capabilities ** SOAP_FMAC4 soap_in_PointerToeventws__Capabilities(struct soap *soap, const char *tag, eventws__Capabilities **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (eventws__Capabilities **)soap_malloc(soap, sizeof(eventws__Capabilities *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (eventws__Capabilities *)soap_instantiate_eventws__Capabilities(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	eventws__Capabilities ** p = (eventws__Capabilities **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_eventws__Capabilities, sizeof(eventws__Capabilities), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToeventws__Capabilities(struct soap *soap, eventws__Capabilities *const*a, const char *tag, const char *type)
{
	int id = soap_embed(soap, (void*)a, NULL, 0, SOAP_TYPE_PointerToeventws__Capabilities);
	if (soap_out_PointerToeventws__Capabilities(soap, tag?tag:"eventws:Capabilities", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 eventws__Capabilities ** SOAP_FMAC4 soap_get_PointerToeventws__Capabilities(struct soap *soap, eventws__Capabilities **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToeventws__Capabilities(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTobool(struct soap *soap, bool *const*a)
{
#ifndef WITH_NOIDREF
	soap_reference(soap, *a, SOAP_TYPE_bool);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTobool(struct soap *soap, const char *tag, int id, bool *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_bool);
	if (id < 0)
		return soap->error;
	return soap_out_bool(soap, tag, id, *a, type);
}

SOAP_FMAC3 bool ** SOAP_FMAC4 soap_in_PointerTobool(struct soap *soap, const char *tag, bool **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (bool **)soap_malloc(soap, sizeof(bool *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_bool(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (bool **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_bool, sizeof(bool), 0);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTobool(struct soap *soap, bool *const*a, const char *tag, const char *type)
{
	int id = soap_embed(soap, (void*)a, NULL, 0, SOAP_TYPE_PointerTobool);
	if (soap_out_PointerTobool(soap, tag?tag:"boolean", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 bool ** SOAP_FMAC4 soap_get_PointerTobool(struct soap *soap, bool **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTobool(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_SOAP_ENV__Reason))
		soap_serialize_SOAP_ENV__Reason(soap, *a);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Reason(struct soap *soap, const char *tag, int id, struct SOAP_ENV__Reason *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_SOAP_ENV__Reason);
	if (id < 0)
		return soap->error;
	return soap_out_SOAP_ENV__Reason(soap, tag, id, *a, type);
}

SOAP_FMAC3 struct SOAP_ENV__Reason ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Reason(struct soap *soap, const char *tag, struct SOAP_ENV__Reason **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (struct SOAP_ENV__Reason **)soap_malloc(soap, sizeof(struct SOAP_ENV__Reason *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_SOAP_ENV__Reason(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Reason **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_SOAP_ENV__Reason, sizeof(struct SOAP_ENV__Reason), 0);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *const*a, const char *tag, const char *type)
{
	int id = soap_embed(soap, (void*)a, NULL, 0, SOAP_TYPE_PointerToSOAP_ENV__Reason);
	if (soap_out_PointerToSOAP_ENV__Reason(soap, tag?tag:"SOAP-ENV:Reason", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Reason ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToSOAP_ENV__Reason(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_SOAP_ENV__Code))
		soap_serialize_SOAP_ENV__Code(soap, *a);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Code(struct soap *soap, const char *tag, int id, struct SOAP_ENV__Code *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_SOAP_ENV__Code);
	if (id < 0)
		return soap->error;
	return soap_out_SOAP_ENV__Code(soap, tag, id, *a, type);
}

SOAP_FMAC3 struct SOAP_ENV__Code ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Code(struct soap *soap, const char *tag, struct SOAP_ENV__Code **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (struct SOAP_ENV__Code **)soap_malloc(soap, sizeof(struct SOAP_ENV__Code *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_SOAP_ENV__Code(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Code **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_SOAP_ENV__Code, sizeof(struct SOAP_ENV__Code), 0);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *const*a, const char *tag, const char *type)
{
	int id = soap_embed(soap, (void*)a, NULL, 0, SOAP_TYPE_PointerToSOAP_ENV__Code);
	if (soap_out_PointerToSOAP_ENV__Code(soap, tag?tag:"SOAP-ENV:Code", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Code ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToSOAP_ENV__Code(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_SOAP_ENV__Detail))
		soap_serialize_SOAP_ENV__Detail(soap, *a);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Detail(struct soap *soap, const char *tag, int id, struct SOAP_ENV__Detail *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_SOAP_ENV__Detail);
	if (id < 0)
		return soap->error;
	return soap_out_SOAP_ENV__Detail(soap, tag, id, *a, type);
}

SOAP_FMAC3 struct SOAP_ENV__Detail ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Detail(struct soap *soap, const char *tag, struct SOAP_ENV__Detail **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (struct SOAP_ENV__Detail **)soap_malloc(soap, sizeof(struct SOAP_ENV__Detail *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_SOAP_ENV__Detail(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Detail **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_SOAP_ENV__Detail, sizeof(struct SOAP_ENV__Detail), 0);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *const*a, const char *tag, const char *type)
{
	int id = soap_embed(soap, (void*)a, NULL, 0, SOAP_TYPE_PointerToSOAP_ENV__Detail);
	if (soap_out_PointerToSOAP_ENV__Detail(soap, tag?tag:"SOAP-ENV:Detail", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Detail ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToSOAP_ENV__Detail(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

#endif

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTochan__ChannelInstanceType(struct soap *soap, struct chan__ChannelInstanceType *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_chan__ChannelInstanceType))
		soap_serialize_chan__ChannelInstanceType(soap, *a);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTochan__ChannelInstanceType(struct soap *soap, const char *tag, int id, struct chan__ChannelInstanceType *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_chan__ChannelInstanceType);
	if (id < 0)
		return soap->error;
	return soap_out_chan__ChannelInstanceType(soap, tag, id, *a, type);
}

SOAP_FMAC3 struct chan__ChannelInstanceType ** SOAP_FMAC4 soap_in_PointerTochan__ChannelInstanceType(struct soap *soap, const char *tag, struct chan__ChannelInstanceType **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (struct chan__ChannelInstanceType **)soap_malloc(soap, sizeof(struct chan__ChannelInstanceType *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_chan__ChannelInstanceType(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (struct chan__ChannelInstanceType **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_chan__ChannelInstanceType, sizeof(struct chan__ChannelInstanceType), 0);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTochan__ChannelInstanceType(struct soap *soap, struct chan__ChannelInstanceType *const*a, const char *tag, const char *type)
{
	int id = soap_embed(soap, (void*)a, NULL, 0, SOAP_TYPE_PointerTochan__ChannelInstanceType);
	if (soap_out_PointerTochan__ChannelInstanceType(soap, tag?tag:"chan:ChannelInstanceType", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct chan__ChannelInstanceType ** SOAP_FMAC4 soap_get_PointerTochan__ChannelInstanceType(struct soap *soap, struct chan__ChannelInstanceType **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTochan__ChannelInstanceType(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_wsa5__FaultTo(struct soap *soap, struct wsa5__EndpointReferenceType *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE__wsa5__FaultTo))
		soap_serialize__wsa5__FaultTo(soap, *a);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_wsa5__FaultTo(struct soap *soap, const char *tag, int id, struct wsa5__EndpointReferenceType *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__wsa5__FaultTo);
	if (id < 0)
		return soap->error;
	return soap_out__wsa5__FaultTo(soap, tag, id, *a, type);
}

SOAP_FMAC3 struct wsa5__EndpointReferenceType ** SOAP_FMAC4 soap_in_PointerTo_wsa5__FaultTo(struct soap *soap, const char *tag, struct wsa5__EndpointReferenceType **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (struct wsa5__EndpointReferenceType **)soap_malloc(soap, sizeof(struct wsa5__EndpointReferenceType *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in__wsa5__FaultTo(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (struct wsa5__EndpointReferenceType **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__wsa5__FaultTo, sizeof(struct wsa5__EndpointReferenceType), 0);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_wsa5__FaultTo(struct soap *soap, struct wsa5__EndpointReferenceType *const*a, const char *tag, const char *type)
{
	int id = soap_embed(soap, (void*)a, NULL, 0, SOAP_TYPE_PointerTo_wsa5__FaultTo);
	if (soap_out_PointerTo_wsa5__FaultTo(soap, tag?tag:"wsa5:FaultTo", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct wsa5__EndpointReferenceType ** SOAP_FMAC4 soap_get_PointerTo_wsa5__FaultTo(struct soap *soap, struct wsa5__EndpointReferenceType **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_wsa5__FaultTo(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_wsa5__ReplyTo(struct soap *soap, struct wsa5__EndpointReferenceType *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE__wsa5__ReplyTo))
		soap_serialize__wsa5__ReplyTo(soap, *a);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_wsa5__ReplyTo(struct soap *soap, const char *tag, int id, struct wsa5__EndpointReferenceType *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__wsa5__ReplyTo);
	if (id < 0)
		return soap->error;
	return soap_out__wsa5__ReplyTo(soap, tag, id, *a, type);
}

SOAP_FMAC3 struct wsa5__EndpointReferenceType ** SOAP_FMAC4 soap_in_PointerTo_wsa5__ReplyTo(struct soap *soap, const char *tag, struct wsa5__EndpointReferenceType **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (struct wsa5__EndpointReferenceType **)soap_malloc(soap, sizeof(struct wsa5__EndpointReferenceType *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in__wsa5__ReplyTo(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (struct wsa5__EndpointReferenceType **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__wsa5__ReplyTo, sizeof(struct wsa5__EndpointReferenceType), 0);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_wsa5__ReplyTo(struct soap *soap, struct wsa5__EndpointReferenceType *const*a, const char *tag, const char *type)
{
	int id = soap_embed(soap, (void*)a, NULL, 0, SOAP_TYPE_PointerTo_wsa5__ReplyTo);
	if (soap_out_PointerTo_wsa5__ReplyTo(soap, tag?tag:"wsa5:ReplyTo", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct wsa5__EndpointReferenceType ** SOAP_FMAC4 soap_get_PointerTo_wsa5__ReplyTo(struct soap *soap, struct wsa5__EndpointReferenceType **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_wsa5__ReplyTo(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_wsa5__From(struct soap *soap, struct wsa5__EndpointReferenceType *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE__wsa5__From))
		soap_serialize__wsa5__From(soap, *a);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_wsa5__From(struct soap *soap, const char *tag, int id, struct wsa5__EndpointReferenceType *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__wsa5__From);
	if (id < 0)
		return soap->error;
	return soap_out__wsa5__From(soap, tag, id, *a, type);
}

SOAP_FMAC3 struct wsa5__EndpointReferenceType ** SOAP_FMAC4 soap_in_PointerTo_wsa5__From(struct soap *soap, const char *tag, struct wsa5__EndpointReferenceType **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (struct wsa5__EndpointReferenceType **)soap_malloc(soap, sizeof(struct wsa5__EndpointReferenceType *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in__wsa5__From(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (struct wsa5__EndpointReferenceType **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__wsa5__From, sizeof(struct wsa5__EndpointReferenceType), 0);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_wsa5__From(struct soap *soap, struct wsa5__EndpointReferenceType *const*a, const char *tag, const char *type)
{
	int id = soap_embed(soap, (void*)a, NULL, 0, SOAP_TYPE_PointerTo_wsa5__From);
	if (soap_out_PointerTo_wsa5__From(soap, tag?tag:"wsa5:From", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct wsa5__EndpointReferenceType ** SOAP_FMAC4 soap_get_PointerTo_wsa5__From(struct soap *soap, struct wsa5__EndpointReferenceType **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_wsa5__From(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_wsa5__RelatesTo(struct soap *soap, struct wsa5__RelatesToType *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE__wsa5__RelatesTo))
		soap_serialize__wsa5__RelatesTo(soap, *a);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_wsa5__RelatesTo(struct soap *soap, const char *tag, int id, struct wsa5__RelatesToType *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__wsa5__RelatesTo);
	if (id < 0)
		return soap->error;
	return soap_out__wsa5__RelatesTo(soap, tag, id, *a, type);
}

SOAP_FMAC3 struct wsa5__RelatesToType ** SOAP_FMAC4 soap_in_PointerTo_wsa5__RelatesTo(struct soap *soap, const char *tag, struct wsa5__RelatesToType **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (struct wsa5__RelatesToType **)soap_malloc(soap, sizeof(struct wsa5__RelatesToType *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in__wsa5__RelatesTo(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (struct wsa5__RelatesToType **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__wsa5__RelatesTo, sizeof(struct wsa5__RelatesToType), 0);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_wsa5__RelatesTo(struct soap *soap, struct wsa5__RelatesToType *const*a, const char *tag, const char *type)
{
	int id = soap_embed(soap, (void*)a, NULL, 0, SOAP_TYPE_PointerTo_wsa5__RelatesTo);
	if (soap_out_PointerTo_wsa5__RelatesTo(soap, tag?tag:"wsa5:RelatesTo", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct wsa5__RelatesToType ** SOAP_FMAC4 soap_get_PointerTo_wsa5__RelatesTo(struct soap *soap, struct wsa5__RelatesToType **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_wsa5__RelatesTo(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize__wsa5__ProblemHeaderQName(struct soap *soap, char *const*a)
{
#ifndef WITH_NOIDREF
	soap_reference(soap, *a, SOAP_TYPE__wsa5__ProblemHeaderQName);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__wsa5__ProblemHeaderQName(struct soap *soap, const char *tag, int id, char *const*a, const char *type)
{
	return soap_outstring(soap, tag, id, a, type, SOAP_TYPE__wsa5__ProblemHeaderQName);
}

SOAP_FMAC3 char * * SOAP_FMAC4 soap_in__wsa5__ProblemHeaderQName(struct soap *soap, const char *tag, char **a, const char *type)
{	char **p;
	p = soap_instring(soap, tag, a, type, SOAP_TYPE__wsa5__ProblemHeaderQName, 2, 0, -1, NULL);
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put__wsa5__ProblemHeaderQName(struct soap *soap, char *const*a, const char *tag, const char *type)
{
	int id = soap_embed(soap, (void*)a, NULL, 0, SOAP_TYPE__wsa5__ProblemHeaderQName);
	if (soap_out__wsa5__ProblemHeaderQName(soap, tag?tag:"byte", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 char ** SOAP_FMAC4 soap_get__wsa5__ProblemHeaderQName(struct soap *soap, char **p, const char *tag, const char *type)
{
	if ((p = soap_in__wsa5__ProblemHeaderQName(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToint(struct soap *soap, int *const*a)
{
#ifndef WITH_NOIDREF
	soap_reference(soap, *a, SOAP_TYPE_int);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToint(struct soap *soap, const char *tag, int id, int *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_int);
	if (id < 0)
		return soap->error;
	return soap_out_int(soap, tag, id, *a, type);
}

SOAP_FMAC3 int ** SOAP_FMAC4 soap_in_PointerToint(struct soap *soap, const char *tag, int **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (int **)soap_malloc(soap, sizeof(int *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_int(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (int **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_int, sizeof(int), 0);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToint(struct soap *soap, int *const*a, const char *tag, const char *type)
{
	int id = soap_embed(soap, (void*)a, NULL, 0, SOAP_TYPE_PointerToint);
	if (soap_out_PointerToint(soap, tag?tag:"int", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int ** SOAP_FMAC4 soap_get_PointerToint(struct soap *soap, int **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToint(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTowsa5__MetadataType(struct soap *soap, struct wsa5__MetadataType *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_wsa5__MetadataType))
		soap_serialize_wsa5__MetadataType(soap, *a);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTowsa5__MetadataType(struct soap *soap, const char *tag, int id, struct wsa5__MetadataType *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_wsa5__MetadataType);
	if (id < 0)
		return soap->error;
	return soap_out_wsa5__MetadataType(soap, tag, id, *a, type);
}

SOAP_FMAC3 struct wsa5__MetadataType ** SOAP_FMAC4 soap_in_PointerTowsa5__MetadataType(struct soap *soap, const char *tag, struct wsa5__MetadataType **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (struct wsa5__MetadataType **)soap_malloc(soap, sizeof(struct wsa5__MetadataType *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_wsa5__MetadataType(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (struct wsa5__MetadataType **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_wsa5__MetadataType, sizeof(struct wsa5__MetadataType), 0);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTowsa5__MetadataType(struct soap *soap, struct wsa5__MetadataType *const*a, const char *tag, const char *type)
{
	int id = soap_embed(soap, (void*)a, NULL, 0, SOAP_TYPE_PointerTowsa5__MetadataType);
	if (soap_out_PointerTowsa5__MetadataType(soap, tag?tag:"wsa5:MetadataType", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct wsa5__MetadataType ** SOAP_FMAC4 soap_get_PointerTowsa5__MetadataType(struct soap *soap, struct wsa5__MetadataType **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTowsa5__MetadataType(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTowsa5__ReferenceParametersType(struct soap *soap, struct wsa5__ReferenceParametersType *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_wsa5__ReferenceParametersType))
		soap_serialize_wsa5__ReferenceParametersType(soap, *a);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTowsa5__ReferenceParametersType(struct soap *soap, const char *tag, int id, struct wsa5__ReferenceParametersType *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_wsa5__ReferenceParametersType);
	if (id < 0)
		return soap->error;
	return soap_out_wsa5__ReferenceParametersType(soap, tag, id, *a, type);
}

SOAP_FMAC3 struct wsa5__ReferenceParametersType ** SOAP_FMAC4 soap_in_PointerTowsa5__ReferenceParametersType(struct soap *soap, const char *tag, struct wsa5__ReferenceParametersType **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (struct wsa5__ReferenceParametersType **)soap_malloc(soap, sizeof(struct wsa5__ReferenceParametersType *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_wsa5__ReferenceParametersType(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (struct wsa5__ReferenceParametersType **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_wsa5__ReferenceParametersType, sizeof(struct wsa5__ReferenceParametersType), 0);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTowsa5__ReferenceParametersType(struct soap *soap, struct wsa5__ReferenceParametersType *const*a, const char *tag, const char *type)
{
	int id = soap_embed(soap, (void*)a, NULL, 0, SOAP_TYPE_PointerTowsa5__ReferenceParametersType);
	if (soap_out_PointerTowsa5__ReferenceParametersType(soap, tag?tag:"wsa5:ReferenceParametersType", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct wsa5__ReferenceParametersType ** SOAP_FMAC4 soap_get_PointerTowsa5__ReferenceParametersType(struct soap *soap, struct wsa5__ReferenceParametersType **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTowsa5__ReferenceParametersType(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_wsa5__FaultCodesOpenEnumType(struct soap *soap, char *const*a)
{
#ifndef WITH_NOIDREF
	soap_reference(soap, *a, SOAP_TYPE_wsa5__FaultCodesOpenEnumType);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_wsa5__FaultCodesOpenEnumType(struct soap *soap, const char *tag, int id, char *const*a, const char *type)
{
	return soap_outstring(soap, tag, id, a, type, SOAP_TYPE_wsa5__FaultCodesOpenEnumType);
}

SOAP_FMAC3 char * * SOAP_FMAC4 soap_in_wsa5__FaultCodesOpenEnumType(struct soap *soap, const char *tag, char **a, const char *type)
{	char **p;
	p = soap_instring(soap, tag, a, type, SOAP_TYPE_wsa5__FaultCodesOpenEnumType, 1, 0, -1, NULL);
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_wsa5__FaultCodesOpenEnumType(struct soap *soap, char *const*a, const char *tag, const char *type)
{
	int id = soap_embed(soap, (void*)a, NULL, 0, SOAP_TYPE_wsa5__FaultCodesOpenEnumType);
	if (soap_out_wsa5__FaultCodesOpenEnumType(soap, tag?tag:"byte", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 char ** SOAP_FMAC4 soap_get_wsa5__FaultCodesOpenEnumType(struct soap *soap, char **p, const char *tag, const char *type)
{
	if ((p = soap_in_wsa5__FaultCodesOpenEnumType(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_wsa5__RelationshipTypeOpenEnum(struct soap *soap, char *const*a)
{
#ifndef WITH_NOIDREF
	soap_reference(soap, *a, SOAP_TYPE_wsa5__RelationshipTypeOpenEnum);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_wsa5__RelationshipTypeOpenEnum(struct soap *soap, const char *tag, int id, char *const*a, const char *type)
{
	return soap_outstring(soap, tag, id, a, type, SOAP_TYPE_wsa5__RelationshipTypeOpenEnum);
}

SOAP_FMAC3 char * * SOAP_FMAC4 soap_in_wsa5__RelationshipTypeOpenEnum(struct soap *soap, const char *tag, char **a, const char *type)
{	char **p;
	p = soap_instring(soap, tag, a, type, SOAP_TYPE_wsa5__RelationshipTypeOpenEnum, 1, 0, -1, NULL);
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_wsa5__RelationshipTypeOpenEnum(struct soap *soap, char *const*a, const char *tag, const char *type)
{
	int id = soap_embed(soap, (void*)a, NULL, 0, SOAP_TYPE_wsa5__RelationshipTypeOpenEnum);
	if (soap_out_wsa5__RelationshipTypeOpenEnum(soap, tag?tag:"byte", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 char ** SOAP_FMAC4 soap_get_wsa5__RelationshipTypeOpenEnum(struct soap *soap, char **p, const char *tag, const char *type)
{
	if ((p = soap_in_wsa5__RelationshipTypeOpenEnum(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize__QName(struct soap *soap, char *const*a)
{
#ifndef WITH_NOIDREF
	soap_reference(soap, *a, SOAP_TYPE__QName);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__QName(struct soap *soap, const char *tag, int id, char *const*a, const char *type)
{
	return soap_outstring(soap, tag, id, a, type, SOAP_TYPE__QName);
}

SOAP_FMAC3 char * * SOAP_FMAC4 soap_in__QName(struct soap *soap, const char *tag, char **a, const char *type)
{	char **p;
	p = soap_instring(soap, tag, a, type, SOAP_TYPE__QName, 2, 0, -1, NULL);
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put__QName(struct soap *soap, char *const*a, const char *tag, const char *type)
{
	int id = soap_embed(soap, (void*)a, NULL, 0, SOAP_TYPE__QName);
	if (soap_out__QName(soap, tag?tag:"byte", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 char ** SOAP_FMAC4 soap_get__QName(struct soap *soap, char **p, const char *tag, const char *type)
{
	if ((p = soap_in__QName(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_string(struct soap *soap, char **a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_string
	*a = SOAP_DEFAULT_string;
#else
	*a = (char *)0;
#endif
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_string(struct soap *soap, char *const*a)
{
#ifndef WITH_NOIDREF
	soap_reference(soap, *a, SOAP_TYPE_string);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_string(struct soap *soap, const char *tag, int id, char *const*a, const char *type)
{
	return soap_outstring(soap, tag, id, a, type, SOAP_TYPE_string);
}

SOAP_FMAC3 char * * SOAP_FMAC4 soap_in_string(struct soap *soap, const char *tag, char **a, const char *type)
{	char **p;
	p = soap_instring(soap, tag, a, type, SOAP_TYPE_string, 1, 0, -1, NULL);
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_string(struct soap *soap, char *const*a, const char *tag, const char *type)
{
	int id = soap_embed(soap, (void*)a, NULL, 0, SOAP_TYPE_string);
	if (soap_out_string(soap, tag?tag:"byte", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 char ** SOAP_FMAC4 soap_get_string(struct soap *soap, char **p, const char *tag, const char *type)
{
	if ((p = soap_in_string(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOf_wstop__TopicNamespaceType_Topic(struct soap *soap, std::vector<_wstop__TopicNamespaceType_Topic >*p)
{
	(void)soap; /* appease -Wall -Werror */
	p->clear();
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOf_wstop__TopicNamespaceType_Topic(struct soap *soap, const std::vector<_wstop__TopicNamespaceType_Topic >*a)
{
	(void)soap; (void)a;/* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	for (std::vector<_wstop__TopicNamespaceType_Topic >::const_iterator i = a->begin(); i != a->end(); ++i)
		(*i).soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOf_wstop__TopicNamespaceType_Topic(struct soap *soap, const char *tag, int id, const std::vector<_wstop__TopicNamespaceType_Topic >*a, const char *type)
{
	(void)id; (void)type; /* appease -Wall -Werror */
	for (std::vector<_wstop__TopicNamespaceType_Topic >::const_iterator i = a->begin(); i != a->end(); ++i)
	{
		if ((*i).soap_out(soap, tag, id, ""))
			return soap->error;
	}
	return SOAP_OK;
}

SOAP_FMAC3 std::vector<_wstop__TopicNamespaceType_Topic >* SOAP_FMAC4 soap_in_std__vectorTemplateOf_wstop__TopicNamespaceType_Topic(struct soap *soap, const char *tag, std::vector<_wstop__TopicNamespaceType_Topic >*a, const char *type)
{
	short soap_flag;
	(void)type; /* appease -Wall -Werror */
	for (soap_flag = 0;; soap_flag = 1)
	{
		if (tag && *tag != '-')
		{	if (soap_element_begin_in(soap, tag, 1, NULL))
				break;
			soap_revert(soap);
		}
		_wstop__TopicNamespaceType_Topic n;
		n.soap_default(soap);
		if (!a && !(a = soap_new_std__vectorTemplateOf_wstop__TopicNamespaceType_Topic(soap, -1)))
			return NULL;
		if (tag && *tag != '-' && (*soap->id || *soap->href))
		{	if (!soap_container_id_forward(soap, *soap->id?soap->id:soap->href, a, (size_t)a->size(), SOAP_TYPE__wstop__TopicNamespaceType_Topic, SOAP_TYPE_std__vectorTemplateOf_wstop__TopicNamespaceType_Topic, sizeof(_wstop__TopicNamespaceType_Topic), 0))
				break;
			if (!soap_in__wstop__TopicNamespaceType_Topic(soap, tag, NULL, ""))
				break;
		}
		else if (!soap_in__wstop__TopicNamespaceType_Topic(soap, tag, &n, ""))
			break;
		soap_update_pointers(soap, (char*)&n, (char*)&n + sizeof(n), (char*)&(*a->insert(a->end(), n)), (char*)&n);
		if (!tag || *tag == '-')
			return a;
	}
	if (soap_flag && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
	{	soap->error = SOAP_OK;
		return a;
	}
	return NULL;
}

SOAP_FMAC1 std::vector<_wstop__TopicNamespaceType_Topic > * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOf_wstop__TopicNamespaceType_Topic(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_std__vectorTemplateOf_wstop__TopicNamespaceType_Topic(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_std__vectorTemplateOf_wstop__TopicNamespaceType_Topic, n, onvifevent_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = SOAP_NEW(std::vector<_wstop__TopicNamespaceType_Topic >);
		if (size)
			*size = sizeof(std::vector<_wstop__TopicNamespaceType_Topic >);
	}
	else
	{	cp->ptr = SOAP_NEW_ARRAY(std::vector<_wstop__TopicNamespaceType_Topic >, n);
		if (size)
			*size = n * sizeof(std::vector<_wstop__TopicNamespaceType_Topic >);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (std::vector<_wstop__TopicNamespaceType_Topic >*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__vectorTemplateOf_wstop__TopicNamespaceType_Topic(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying std::vector<_wstop__TopicNamespaceType_Topic > %p -> %p\n", q, p));
	*(std::vector<_wstop__TopicNamespaceType_Topic >*)p = *(std::vector<_wstop__TopicNamespaceType_Topic >*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTowstop__TopicType(struct soap *soap, std::vector<wstop__TopicType * >*p)
{
	(void)soap; /* appease -Wall -Werror */
	p->clear();
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTowstop__TopicType(struct soap *soap, const std::vector<wstop__TopicType * >*a)
{
	(void)soap; (void)a;/* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	for (std::vector<wstop__TopicType * >::const_iterator i = a->begin(); i != a->end(); ++i)
		soap_serialize_PointerTowstop__TopicType(soap, &(*i));
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTowstop__TopicType(struct soap *soap, const char *tag, int id, const std::vector<wstop__TopicType * >*a, const char *type)
{
	(void)id; (void)type; /* appease -Wall -Werror */
	for (std::vector<wstop__TopicType * >::const_iterator i = a->begin(); i != a->end(); ++i)
	{
		if (soap_out_PointerTowstop__TopicType(soap, tag, id, &(*i), ""))
			return soap->error;
	}
	return SOAP_OK;
}

SOAP_FMAC3 std::vector<wstop__TopicType * >* SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTowstop__TopicType(struct soap *soap, const char *tag, std::vector<wstop__TopicType * >*a, const char *type)
{
	short soap_flag;
	(void)type; /* appease -Wall -Werror */
	for (soap_flag = 0;; soap_flag = 1)
	{
		if (tag && *tag != '-')
		{	if (soap_element_begin_in(soap, tag, 1, NULL))
				break;
			soap_revert(soap);
		}
		wstop__TopicType *n;
		n = NULL;
		if (!a && !(a = soap_new_std__vectorTemplateOfPointerTowstop__TopicType(soap, -1)))
			return NULL;
		if (tag && *tag != '-' && (*soap->id || *soap->href))
		{	if (!soap_container_id_forward(soap, *soap->id?soap->id:soap->href, a, (size_t)a->size(), SOAP_TYPE_wstop__TopicType, SOAP_TYPE_std__vectorTemplateOfPointerTowstop__TopicType, sizeof(wstop__TopicType), 1))
				break;
			if (!soap_in_PointerTowstop__TopicType(soap, tag, NULL, "wstop:TopicType"))
				break;
		}
		else if (!soap_in_PointerTowstop__TopicType(soap, tag, &n, "wstop:TopicType"))
			break;
		a->push_back(n);
		if (!tag || *tag == '-')
			return a;
	}
	if (soap_flag && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
	{	soap->error = SOAP_OK;
		return a;
	}
	return NULL;
}

SOAP_FMAC1 std::vector<wstop__TopicType * > * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTowstop__TopicType(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_std__vectorTemplateOfPointerTowstop__TopicType(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_std__vectorTemplateOfPointerTowstop__TopicType, n, onvifevent_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = SOAP_NEW(std::vector<wstop__TopicType * >);
		if (size)
			*size = sizeof(std::vector<wstop__TopicType * >);
	}
	else
	{	cp->ptr = SOAP_NEW_ARRAY(std::vector<wstop__TopicType * >, n);
		if (size)
			*size = n * sizeof(std::vector<wstop__TopicType * >);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (std::vector<wstop__TopicType * >*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__vectorTemplateOfPointerTowstop__TopicType(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying std::vector<wstop__TopicType * > %p -> %p\n", q, p));
	*(std::vector<wstop__TopicType * >*)p = *(std::vector<wstop__TopicType * >*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfxsd__QName(struct soap *soap, std::vector<std::string >*p)
{
	(void)soap; /* appease -Wall -Werror */
	p->clear();
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfxsd__QName(struct soap *soap, const std::vector<std::string >*a)
{
	(void)soap; (void)a;/* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	for (std::vector<std::string >::const_iterator i = a->begin(); i != a->end(); ++i)
		soap_serialize_xsd__QName(soap, &(*i));
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfxsd__QName(struct soap *soap, const char *tag, int id, const std::vector<std::string >*a, const char *type)
{
	(void)id; (void)type; /* appease -Wall -Werror */
	for (std::vector<std::string >::const_iterator i = a->begin(); i != a->end(); ++i)
	{
		std::string soap_tmp(soap_QName2s(soap, (*i).c_str()));
		if (soap_out_xsd__QName(soap, tag, id, &soap_tmp, ""))
			return soap->error;
	}
	return SOAP_OK;
}

SOAP_FMAC3 std::vector<std::string >* SOAP_FMAC4 soap_in_std__vectorTemplateOfxsd__QName(struct soap *soap, const char *tag, std::vector<std::string >*a, const char *type)
{
	short soap_flag;
	(void)type; /* appease -Wall -Werror */
	for (soap_flag = 0;; soap_flag = 1)
	{
		if (tag && *tag != '-')
		{	if (soap_element_begin_in(soap, tag, 1, NULL))
				break;
			soap_revert(soap);
		}
		std::string n;
		soap_default_xsd__QName(soap, &n);
		if (!a && !(a = soap_new_std__vectorTemplateOfxsd__QName(soap, -1)))
			return NULL;
		if (tag && *tag != '-' && (*soap->id || *soap->href))
		{	if (!soap_container_id_forward(soap, *soap->id?soap->id:soap->href, a, (size_t)a->size(), SOAP_TYPE_xsd__QName, SOAP_TYPE_std__vectorTemplateOfxsd__QName, sizeof(std::string), 0))
				break;
			if (!soap_in_xsd__QName(soap, tag, NULL, "xsd:QName"))
				break;
		}
		else if (!soap_in_xsd__QName(soap, tag, &n, "xsd:QName"))
			break;
		soap_update_pointers(soap, (char*)&n, (char*)&n + sizeof(n), (char*)&(*a->insert(a->end(), n)), (char*)&n);
		if (!tag || *tag == '-')
			return a;
	}
	if (soap_flag && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
	{	soap->error = SOAP_OK;
		return a;
	}
	return NULL;
}

SOAP_FMAC1 std::vector<std::string > * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfxsd__QName(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_std__vectorTemplateOfxsd__QName(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_std__vectorTemplateOfxsd__QName, n, onvifevent_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = SOAP_NEW(std::vector<std::string >);
		if (size)
			*size = sizeof(std::vector<std::string >);
	}
	else
	{	cp->ptr = SOAP_NEW_ARRAY(std::vector<std::string >, n);
		if (size)
			*size = n * sizeof(std::vector<std::string >);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (std::vector<std::string >*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__vectorTemplateOfxsd__QName(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying std::vector<std::string > %p -> %p\n", q, p));
	*(std::vector<std::string >*)p = *(std::vector<std::string >*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTowsnt__TopicExpressionType(struct soap *soap, std::vector<wsnt__TopicExpressionType * >*p)
{
	(void)soap; /* appease -Wall -Werror */
	p->clear();
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTowsnt__TopicExpressionType(struct soap *soap, const std::vector<wsnt__TopicExpressionType * >*a)
{
	(void)soap; (void)a;/* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	for (std::vector<wsnt__TopicExpressionType * >::const_iterator i = a->begin(); i != a->end(); ++i)
		soap_serialize_PointerTowsnt__TopicExpressionType(soap, &(*i));
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTowsnt__TopicExpressionType(struct soap *soap, const char *tag, int id, const std::vector<wsnt__TopicExpressionType * >*a, const char *type)
{
	(void)id; (void)type; /* appease -Wall -Werror */
	for (std::vector<wsnt__TopicExpressionType * >::const_iterator i = a->begin(); i != a->end(); ++i)
	{
		if (soap_out_PointerTowsnt__TopicExpressionType(soap, tag, id, &(*i), ""))
			return soap->error;
	}
	return SOAP_OK;
}

SOAP_FMAC3 std::vector<wsnt__TopicExpressionType * >* SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTowsnt__TopicExpressionType(struct soap *soap, const char *tag, std::vector<wsnt__TopicExpressionType * >*a, const char *type)
{
	short soap_flag;
	(void)type; /* appease -Wall -Werror */
	for (soap_flag = 0;; soap_flag = 1)
	{
		if (tag && *tag != '-')
		{	if (soap_element_begin_in(soap, tag, 1, NULL))
				break;
			soap_revert(soap);
		}
		wsnt__TopicExpressionType *n;
		n = NULL;
		if (!a && !(a = soap_new_std__vectorTemplateOfPointerTowsnt__TopicExpressionType(soap, -1)))
			return NULL;
		if (tag && *tag != '-' && (*soap->id || *soap->href))
		{	if (!soap_container_id_forward(soap, *soap->id?soap->id:soap->href, a, (size_t)a->size(), SOAP_TYPE_wsnt__TopicExpressionType, SOAP_TYPE_std__vectorTemplateOfPointerTowsnt__TopicExpressionType, sizeof(wsnt__TopicExpressionType), 1))
				break;
			if (!soap_in_PointerTowsnt__TopicExpressionType(soap, tag, NULL, "wsnt:TopicExpressionType"))
				break;
		}
		else if (!soap_in_PointerTowsnt__TopicExpressionType(soap, tag, &n, "wsnt:TopicExpressionType"))
			break;
		a->push_back(n);
		if (!tag || *tag == '-')
			return a;
	}
	if (soap_flag && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
	{	soap->error = SOAP_OK;
		return a;
	}
	return NULL;
}

SOAP_FMAC1 std::vector<wsnt__TopicExpressionType * > * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTowsnt__TopicExpressionType(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_std__vectorTemplateOfPointerTowsnt__TopicExpressionType(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_std__vectorTemplateOfPointerTowsnt__TopicExpressionType, n, onvifevent_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = SOAP_NEW(std::vector<wsnt__TopicExpressionType * >);
		if (size)
			*size = sizeof(std::vector<wsnt__TopicExpressionType * >);
	}
	else
	{	cp->ptr = SOAP_NEW_ARRAY(std::vector<wsnt__TopicExpressionType * >, n);
		if (size)
			*size = n * sizeof(std::vector<wsnt__TopicExpressionType * >);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (std::vector<wsnt__TopicExpressionType * >*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__vectorTemplateOfPointerTowsnt__TopicExpressionType(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying std::vector<wsnt__TopicExpressionType * > %p -> %p\n", q, p));
	*(std::vector<wsnt__TopicExpressionType * >*)p = *(std::vector<wsnt__TopicExpressionType * >*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOf_wsrfbf__BaseFaultType_Description(struct soap *soap, std::vector<_wsrfbf__BaseFaultType_Description >*p)
{
	(void)soap; /* appease -Wall -Werror */
	p->clear();
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOf_wsrfbf__BaseFaultType_Description(struct soap *soap, const std::vector<_wsrfbf__BaseFaultType_Description >*a)
{
	(void)soap; (void)a;/* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	for (std::vector<_wsrfbf__BaseFaultType_Description >::const_iterator i = a->begin(); i != a->end(); ++i)
		(*i).soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOf_wsrfbf__BaseFaultType_Description(struct soap *soap, const char *tag, int id, const std::vector<_wsrfbf__BaseFaultType_Description >*a, const char *type)
{
	(void)id; (void)type; /* appease -Wall -Werror */
	for (std::vector<_wsrfbf__BaseFaultType_Description >::const_iterator i = a->begin(); i != a->end(); ++i)
	{
		if ((*i).soap_out(soap, tag, id, ""))
			return soap->error;
	}
	return SOAP_OK;
}

SOAP_FMAC3 std::vector<_wsrfbf__BaseFaultType_Description >* SOAP_FMAC4 soap_in_std__vectorTemplateOf_wsrfbf__BaseFaultType_Description(struct soap *soap, const char *tag, std::vector<_wsrfbf__BaseFaultType_Description >*a, const char *type)
{
	short soap_flag;
	(void)type; /* appease -Wall -Werror */
	for (soap_flag = 0;; soap_flag = 1)
	{
		if (tag && *tag != '-')
		{	if (soap_element_begin_in(soap, tag, 1, NULL))
				break;
			soap_revert(soap);
		}
		_wsrfbf__BaseFaultType_Description n;
		n.soap_default(soap);
		if (!a && !(a = soap_new_std__vectorTemplateOf_wsrfbf__BaseFaultType_Description(soap, -1)))
			return NULL;
		if (tag && *tag != '-' && (*soap->id || *soap->href))
		{	if (!soap_container_id_forward(soap, *soap->id?soap->id:soap->href, a, (size_t)a->size(), SOAP_TYPE__wsrfbf__BaseFaultType_Description, SOAP_TYPE_std__vectorTemplateOf_wsrfbf__BaseFaultType_Description, sizeof(_wsrfbf__BaseFaultType_Description), 0))
				break;
			if (!soap_in__wsrfbf__BaseFaultType_Description(soap, tag, NULL, ""))
				break;
		}
		else if (!soap_in__wsrfbf__BaseFaultType_Description(soap, tag, &n, ""))
			break;
		soap_update_pointers(soap, (char*)&n, (char*)&n + sizeof(n), (char*)&(*a->insert(a->end(), n)), (char*)&n);
		if (!tag || *tag == '-')
			return a;
	}
	if (soap_flag && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
	{	soap->error = SOAP_OK;
		return a;
	}
	return NULL;
}

SOAP_FMAC1 std::vector<_wsrfbf__BaseFaultType_Description > * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOf_wsrfbf__BaseFaultType_Description(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_std__vectorTemplateOf_wsrfbf__BaseFaultType_Description(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_std__vectorTemplateOf_wsrfbf__BaseFaultType_Description, n, onvifevent_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = SOAP_NEW(std::vector<_wsrfbf__BaseFaultType_Description >);
		if (size)
			*size = sizeof(std::vector<_wsrfbf__BaseFaultType_Description >);
	}
	else
	{	cp->ptr = SOAP_NEW_ARRAY(std::vector<_wsrfbf__BaseFaultType_Description >, n);
		if (size)
			*size = n * sizeof(std::vector<_wsrfbf__BaseFaultType_Description >);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (std::vector<_wsrfbf__BaseFaultType_Description >*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__vectorTemplateOf_wsrfbf__BaseFaultType_Description(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying std::vector<_wsrfbf__BaseFaultType_Description > %p -> %p\n", q, p));
	*(std::vector<_wsrfbf__BaseFaultType_Description >*)p = *(std::vector<_wsrfbf__BaseFaultType_Description >*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfxsd__anyURI(struct soap *soap, std::vector<std::string >*p)
{
	(void)soap; /* appease -Wall -Werror */
	p->clear();
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfxsd__anyURI(struct soap *soap, const std::vector<std::string >*a)
{
	(void)soap; (void)a;/* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	for (std::vector<std::string >::const_iterator i = a->begin(); i != a->end(); ++i)
		soap_serialize_xsd__anyURI(soap, &(*i));
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfxsd__anyURI(struct soap *soap, const char *tag, int id, const std::vector<std::string >*a, const char *type)
{
	(void)id; (void)type; /* appease -Wall -Werror */
	for (std::vector<std::string >::const_iterator i = a->begin(); i != a->end(); ++i)
	{
		if (soap_out_xsd__anyURI(soap, tag, id, &(*i), ""))
			return soap->error;
	}
	return SOAP_OK;
}

SOAP_FMAC3 std::vector<std::string >* SOAP_FMAC4 soap_in_std__vectorTemplateOfxsd__anyURI(struct soap *soap, const char *tag, std::vector<std::string >*a, const char *type)
{
	short soap_flag;
	(void)type; /* appease -Wall -Werror */
	for (soap_flag = 0;; soap_flag = 1)
	{
		if (tag && *tag != '-')
		{	if (soap_element_begin_in(soap, tag, 1, NULL))
				break;
			soap_revert(soap);
		}
		std::string n;
		soap_default_xsd__anyURI(soap, &n);
		if (!a && !(a = soap_new_std__vectorTemplateOfxsd__anyURI(soap, -1)))
			return NULL;
		if (tag && *tag != '-' && (*soap->id || *soap->href))
		{	if (!soap_container_id_forward(soap, *soap->id?soap->id:soap->href, a, (size_t)a->size(), SOAP_TYPE_xsd__anyURI, SOAP_TYPE_std__vectorTemplateOfxsd__anyURI, sizeof(std::string), 0))
				break;
			if (!soap_in_xsd__anyURI(soap, tag, NULL, "xsd:anyURI"))
				break;
		}
		else if (!soap_in_xsd__anyURI(soap, tag, &n, "xsd:anyURI"))
			break;
		soap_update_pointers(soap, (char*)&n, (char*)&n + sizeof(n), (char*)&(*a->insert(a->end(), n)), (char*)&n);
		if (!tag || *tag == '-')
			return a;
	}
	if (soap_flag && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
	{	soap->error = SOAP_OK;
		return a;
	}
	return NULL;
}

SOAP_FMAC1 std::vector<std::string > * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfxsd__anyURI(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_std__vectorTemplateOfxsd__anyURI(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_std__vectorTemplateOfxsd__anyURI, n, onvifevent_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = SOAP_NEW(std::vector<std::string >);
		if (size)
			*size = sizeof(std::vector<std::string >);
	}
	else
	{	cp->ptr = SOAP_NEW_ARRAY(std::vector<std::string >, n);
		if (size)
			*size = n * sizeof(std::vector<std::string >);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (std::vector<std::string >*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__vectorTemplateOfxsd__anyURI(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying std::vector<std::string > %p -> %p\n", q, p));
	*(std::vector<std::string >*)p = *(std::vector<std::string >*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTowsnt__NotificationMessageHolderType(struct soap *soap, std::vector<wsnt__NotificationMessageHolderType * >*p)
{
	(void)soap; /* appease -Wall -Werror */
	p->clear();
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTowsnt__NotificationMessageHolderType(struct soap *soap, const std::vector<wsnt__NotificationMessageHolderType * >*a)
{
	(void)soap; (void)a;/* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	for (std::vector<wsnt__NotificationMessageHolderType * >::const_iterator i = a->begin(); i != a->end(); ++i)
		soap_serialize_PointerTowsnt__NotificationMessageHolderType(soap, &(*i));
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTowsnt__NotificationMessageHolderType(struct soap *soap, const char *tag, int id, const std::vector<wsnt__NotificationMessageHolderType * >*a, const char *type)
{
	(void)id; (void)type; /* appease -Wall -Werror */
	for (std::vector<wsnt__NotificationMessageHolderType * >::const_iterator i = a->begin(); i != a->end(); ++i)
	{
		if (soap_out_PointerTowsnt__NotificationMessageHolderType(soap, tag, id, &(*i), ""))
			return soap->error;
	}
	return SOAP_OK;
}

SOAP_FMAC3 std::vector<wsnt__NotificationMessageHolderType * >* SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTowsnt__NotificationMessageHolderType(struct soap *soap, const char *tag, std::vector<wsnt__NotificationMessageHolderType * >*a, const char *type)
{
	short soap_flag;
	(void)type; /* appease -Wall -Werror */
	for (soap_flag = 0;; soap_flag = 1)
	{
		if (tag && *tag != '-')
		{	if (soap_element_begin_in(soap, tag, 1, NULL))
				break;
			soap_revert(soap);
		}
		wsnt__NotificationMessageHolderType *n;
		n = NULL;
		if (!a && !(a = soap_new_std__vectorTemplateOfPointerTowsnt__NotificationMessageHolderType(soap, -1)))
			return NULL;
		if (tag && *tag != '-' && (*soap->id || *soap->href))
		{	if (!soap_container_id_forward(soap, *soap->id?soap->id:soap->href, a, (size_t)a->size(), SOAP_TYPE_wsnt__NotificationMessageHolderType, SOAP_TYPE_std__vectorTemplateOfPointerTowsnt__NotificationMessageHolderType, sizeof(wsnt__NotificationMessageHolderType), 1))
				break;
			if (!soap_in_PointerTowsnt__NotificationMessageHolderType(soap, tag, NULL, "wsnt:NotificationMessageHolderType"))
				break;
		}
		else if (!soap_in_PointerTowsnt__NotificationMessageHolderType(soap, tag, &n, "wsnt:NotificationMessageHolderType"))
			break;
		a->push_back(n);
		if (!tag || *tag == '-')
			return a;
	}
	if (soap_flag && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
	{	soap->error = SOAP_OK;
		return a;
	}
	return NULL;
}

SOAP_FMAC1 std::vector<wsnt__NotificationMessageHolderType * > * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTowsnt__NotificationMessageHolderType(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_std__vectorTemplateOfPointerTowsnt__NotificationMessageHolderType(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_std__vectorTemplateOfPointerTowsnt__NotificationMessageHolderType, n, onvifevent_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = SOAP_NEW(std::vector<wsnt__NotificationMessageHolderType * >);
		if (size)
			*size = sizeof(std::vector<wsnt__NotificationMessageHolderType * >);
	}
	else
	{	cp->ptr = SOAP_NEW_ARRAY(std::vector<wsnt__NotificationMessageHolderType * >, n);
		if (size)
			*size = n * sizeof(std::vector<wsnt__NotificationMessageHolderType * >);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (std::vector<wsnt__NotificationMessageHolderType * >*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__vectorTemplateOfPointerTowsnt__NotificationMessageHolderType(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying std::vector<wsnt__NotificationMessageHolderType * > %p -> %p\n", q, p));
	*(std::vector<wsnt__NotificationMessageHolderType * >*)p = *(std::vector<wsnt__NotificationMessageHolderType * >*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOf_XML(struct soap *soap, std::vector<char * >*p)
{
	(void)soap; /* appease -Wall -Werror */
	p->clear();
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOf_XML(struct soap *soap, const std::vector<char * >*a)
{
	(void)soap; (void)a;/* appease -Wall -Werror */
#ifndef WITH_NOIDREF
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOf_XML(struct soap *soap, const char *tag, int id, const std::vector<char * >*a, const char *type)
{
	(void)id; (void)type; /* appease -Wall -Werror */
	for (std::vector<char * >::const_iterator i = a->begin(); i != a->end(); ++i)
	{
		if (soap_outliteral(soap, tag, &(*i), NULL))
			return soap->error;
	}
	return SOAP_OK;
}

SOAP_FMAC3 std::vector<char * >* SOAP_FMAC4 soap_in_std__vectorTemplateOf_XML(struct soap *soap, const char *tag, std::vector<char * >*a, const char *type)
{
	short soap_flag;
	(void)type; /* appease -Wall -Werror */
	for (soap_flag = 0;; soap_flag = 1)
	{
		if (tag && *tag != '-')
		{	if (soap_element_begin_in(soap, tag, 1, NULL))
				break;
			soap_revert(soap);
		}
		char *n;
		n = NULL;
		if (!a && !(a = soap_new_std__vectorTemplateOf_XML(soap, -1)))
			return NULL;
		if (tag && *tag != '-' && (*soap->id || *soap->href))
		{	if (!soap_container_id_forward(soap, *soap->id?soap->id:soap->href, a, (size_t)a->size(), SOAP_TYPE__XML, SOAP_TYPE_std__vectorTemplateOf_XML, sizeof(char *), 1))
				break;
			if (!soap_inliteral(soap, tag, NULL))
				break;
		}
		else if (!soap_inliteral(soap, tag, &n))
			break;
		a->push_back(n);
		if (!tag || *tag == '-')
			return a;
	}
	if (soap_flag && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
	{	soap->error = SOAP_OK;
		return a;
	}
	return NULL;
}

SOAP_FMAC1 std::vector<char * > * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOf_XML(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_std__vectorTemplateOf_XML(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_std__vectorTemplateOf_XML, n, onvifevent_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = SOAP_NEW(std::vector<char * >);
		if (size)
			*size = sizeof(std::vector<char * >);
	}
	else
	{	cp->ptr = SOAP_NEW_ARRAY(std::vector<char * >, n);
		if (size)
			*size = n * sizeof(std::vector<char * >);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (std::vector<char * >*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__vectorTemplateOf_XML(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying std::vector<char * > %p -> %p\n", q, p));
	*(std::vector<char * >*)p = *(std::vector<char * >*)q;
}

#if defined(__BORLANDC__)
#pragma option pop
#pragma option pop
#endif

/* End of onvifeventC.cpp */
